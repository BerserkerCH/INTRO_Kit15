
C:\Users\Beningo\Atollic\TrueSTUDIO\ARM_workspace_7.1\K64F-FreeRTOS\Debug\K64F-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .interrupts   00000198  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .cfmprotect   00000000  00000400  00000400  00033630  2**0
                  CONTENTS
  2 .text         00010004  00000410  00000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init_array   00000004  00010414  00010414  00020414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  00010418  00010418  00020418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000040  20000000  0001041c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .m_data_1FFF0000 00000000  1fff0000  1fff0000  00033630  2**0
                  CONTENTS
  7 .bss          000035cc  20000040  0001045c  00030040  2**2
                  ALLOC
  8 .romp         00000024  2000360c  0001045c  0003360c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 ._user_heap_stack 00000400  20003630  00010480  00033630  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00033630  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001096c  00000000  00000000  00033660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002df6  00000000  00000000  00043fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005b8  00000000  00000000  00046dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000065bc  00000000  00000000  0004737a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005e3c  00000000  00000000  0004d936  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00053772  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005800  00000000  00000000  000537f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00000018  00000000  00000000  00058ff0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	20000040 	.word	0x20000040
     42c:	00000000 	.word	0x00000000
     430:	000103f8 	.word	0x000103f8

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b03      	ldr	r3, [pc, #12]	; (444 <frame_dummy+0x10>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4903      	ldr	r1, [pc, #12]	; (448 <frame_dummy+0x14>)
     43c:	4803      	ldr	r0, [pc, #12]	; (44c <frame_dummy+0x18>)
     43e:	f3af 8000 	nop.w
     442:	bd08      	pop	{r3, pc}
     444:	00000000 	.word	0x00000000
     448:	20000044 	.word	0x20000044
     44c:	000103f8 	.word	0x000103f8

00000450 <BitIoLdd1_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd1_Init(LDD_TUserData *UserDataPtr)
{
     450:	b480      	push	{r7}
     452:	b085      	sub	sp, #20
     454:	af00      	add	r7, sp, #0
     456:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd1_TDeviceDataPtr DeviceDataPrv;

  /* {FreeRTOS RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     458:	4b18      	ldr	r3, [pc, #96]	; (4bc <BitIoLdd1_Init+0x6c>)
     45a:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     45c:	68fb      	ldr	r3, [r7, #12]
     45e:	687a      	ldr	r2, [r7, #4]
     460:	601a      	str	r2, [r3, #0]
  /* Enable device clock gate */
  /* SIM_SCGC5: PORTB=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
     462:	4917      	ldr	r1, [pc, #92]	; (4c0 <BitIoLdd1_Init+0x70>)
     464:	4b16      	ldr	r3, [pc, #88]	; (4c0 <BitIoLdd1_Init+0x70>)
     466:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
     46a:	3318      	adds	r3, #24
     46c:	681b      	ldr	r3, [r3, #0]
     46e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     472:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
     476:	3318      	adds	r3, #24
     478:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOB_PDDR: PDD|=0x00200000 */
  GPIOB_PDDR |= GPIO_PDDR_PDD(0x00200000);
     47a:	4a12      	ldr	r2, [pc, #72]	; (4c4 <BitIoLdd1_Init+0x74>)
     47c:	4b11      	ldr	r3, [pc, #68]	; (4c4 <BitIoLdd1_Init+0x74>)
     47e:	695b      	ldr	r3, [r3, #20]
     480:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
     484:	6153      	str	r3, [r2, #20]
  /* Set initialization value */
  /* GPIOB_PDOR: PDO&=~0x00200000 */
  GPIOB_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x00200000));
     486:	4a0f      	ldr	r2, [pc, #60]	; (4c4 <BitIoLdd1_Init+0x74>)
     488:	4b0e      	ldr	r3, [pc, #56]	; (4c4 <BitIoLdd1_Init+0x74>)
     48a:	681b      	ldr	r3, [r3, #0]
     48c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
     490:	6013      	str	r3, [r2, #0]
  /* Initialization of pin routing */
  /* PORTB_PCR21: ISF=0,MUX=1 */
  PORTB_PCR21 = (uint32_t)((PORTB_PCR21 & (uint32_t)~(uint32_t)(
     492:	4a0d      	ldr	r2, [pc, #52]	; (4c8 <BitIoLdd1_Init+0x78>)
     494:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <BitIoLdd1_Init+0x78>)
     496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     49c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     4a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     4a4:	6553      	str	r3, [r2, #84]	; 0x54
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd1_ID,DeviceDataPrv);
     4a6:	4a09      	ldr	r2, [pc, #36]	; (4cc <BitIoLdd1_Init+0x7c>)
     4a8:	68fb      	ldr	r3, [r7, #12]
     4aa:	6013      	str	r3, [r2, #0]
  return ((LDD_TDeviceData *)DeviceDataPrv);
     4ac:	68fb      	ldr	r3, [r7, #12]
}
     4ae:	4618      	mov	r0, r3
     4b0:	3714      	adds	r7, #20
     4b2:	46bd      	mov	sp, r7
     4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4b8:	4770      	bx	lr
     4ba:	bf00      	nop
     4bc:	2000005c 	.word	0x2000005c
     4c0:	40047000 	.word	0x40047000
     4c4:	400ff040 	.word	0x400ff040
     4c8:	4004a000 	.word	0x4004a000
     4cc:	20000068 	.word	0x20000068

000004d0 <BitIoLdd1_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd1_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
     4d0:	b480      	push	{r7}
     4d2:	b085      	sub	sp, #20
     4d4:	af00      	add	r7, sp, #0
     4d6:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd1_MODULE_BASE_ADDRESS) & BitIoLdd1_PORT_MASK;
     4d8:	4b08      	ldr	r3, [pc, #32]	; (4fc <BitIoLdd1_GetVal+0x2c>)
     4da:	681b      	ldr	r3, [r3, #0]
     4dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
     4e0:	60fb      	str	r3, [r7, #12]
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
     4e2:	68fb      	ldr	r3, [r7, #12]
     4e4:	2b00      	cmp	r3, #0
     4e6:	bf14      	ite	ne
     4e8:	2301      	movne	r3, #1
     4ea:	2300      	moveq	r3, #0
     4ec:	b2db      	uxtb	r3, r3
}
     4ee:	4618      	mov	r0, r3
     4f0:	3714      	adds	r7, #20
     4f2:	46bd      	mov	sp, r7
     4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
     4f8:	4770      	bx	lr
     4fa:	bf00      	nop
     4fc:	400ff040 	.word	0x400ff040

00000500 <BitIoLdd1_ClrVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd1_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
     500:	b480      	push	{r7}
     502:	b083      	sub	sp, #12
     504:	af00      	add	r7, sp, #0
     506:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(BitIoLdd1_MODULE_BASE_ADDRESS, BitIoLdd1_PORT_MASK);
     508:	4b04      	ldr	r3, [pc, #16]	; (51c <BitIoLdd1_ClrVal+0x1c>)
     50a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     50e:	609a      	str	r2, [r3, #8]
}
     510:	bf00      	nop
     512:	370c      	adds	r7, #12
     514:	46bd      	mov	sp, r7
     516:	f85d 7b04 	ldr.w	r7, [sp], #4
     51a:	4770      	bx	lr
     51c:	400ff040 	.word	0x400ff040

00000520 <BitIoLdd1_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd1_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
     520:	b480      	push	{r7}
     522:	b083      	sub	sp, #12
     524:	af00      	add	r7, sp, #0
     526:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd1_MODULE_BASE_ADDRESS, BitIoLdd1_PORT_MASK);
     528:	4b04      	ldr	r3, [pc, #16]	; (53c <BitIoLdd1_SetVal+0x1c>)
     52a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     52e:	605a      	str	r2, [r3, #4]
}
     530:	bf00      	nop
     532:	370c      	adds	r7, #12
     534:	46bd      	mov	sp, r7
     536:	f85d 7b04 	ldr.w	r7, [sp], #4
     53a:	4770      	bx	lr
     53c:	400ff040 	.word	0x400ff040

00000540 <BitIoLdd1_NegVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd1_NegVal(LDD_TDeviceData *DeviceDataPtr)
{
     540:	b480      	push	{r7}
     542:	b083      	sub	sp, #12
     544:	af00      	add	r7, sp, #0
     546:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_TogglePortDataOutputMask(BitIoLdd1_MODULE_BASE_ADDRESS, BitIoLdd1_PORT_MASK);
     548:	4b04      	ldr	r3, [pc, #16]	; (55c <BitIoLdd1_NegVal+0x1c>)
     54a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     54e:	60da      	str	r2, [r3, #12]
}
     550:	bf00      	nop
     552:	370c      	adds	r7, #12
     554:	46bd      	mov	sp, r7
     556:	f85d 7b04 	ldr.w	r7, [sp], #4
     55a:	4770      	bx	lr
     55c:	400ff040 	.word	0x400ff040

00000560 <BitIoLdd2_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd2_Init(LDD_TUserData *UserDataPtr)
{
     560:	b480      	push	{r7}
     562:	b085      	sub	sp, #20
     564:	af00      	add	r7, sp, #0
     566:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd2_TDeviceDataPtr DeviceDataPrv;

  /* {FreeRTOS RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     568:	4b18      	ldr	r3, [pc, #96]	; (5cc <BitIoLdd2_Init+0x6c>)
     56a:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     56c:	68fb      	ldr	r3, [r7, #12]
     56e:	687a      	ldr	r2, [r7, #4]
     570:	601a      	str	r2, [r3, #0]
  /* Enable device clock gate */
  /* SIM_SCGC5: PORTB=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK;
     572:	4917      	ldr	r1, [pc, #92]	; (5d0 <BitIoLdd2_Init+0x70>)
     574:	4b16      	ldr	r3, [pc, #88]	; (5d0 <BitIoLdd2_Init+0x70>)
     576:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
     57a:	3318      	adds	r3, #24
     57c:	681b      	ldr	r3, [r3, #0]
     57e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     582:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
     586:	3318      	adds	r3, #24
     588:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOB_PDDR: PDD|=0x00400000 */
  GPIOB_PDDR |= GPIO_PDDR_PDD(0x00400000);
     58a:	4a12      	ldr	r2, [pc, #72]	; (5d4 <BitIoLdd2_Init+0x74>)
     58c:	4b11      	ldr	r3, [pc, #68]	; (5d4 <BitIoLdd2_Init+0x74>)
     58e:	695b      	ldr	r3, [r3, #20]
     590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
     594:	6153      	str	r3, [r2, #20]
  /* Set initialization value */
  /* GPIOB_PDOR: PDO&=~0x00400000 */
  GPIOB_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x00400000));
     596:	4a0f      	ldr	r2, [pc, #60]	; (5d4 <BitIoLdd2_Init+0x74>)
     598:	4b0e      	ldr	r3, [pc, #56]	; (5d4 <BitIoLdd2_Init+0x74>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
     5a0:	6013      	str	r3, [r2, #0]
  /* Initialization of pin routing */
  /* PORTB_PCR22: ISF=0,MUX=1 */
  PORTB_PCR22 = (uint32_t)((PORTB_PCR22 & (uint32_t)~(uint32_t)(
     5a2:	4a0d      	ldr	r2, [pc, #52]	; (5d8 <BitIoLdd2_Init+0x78>)
     5a4:	4b0c      	ldr	r3, [pc, #48]	; (5d8 <BitIoLdd2_Init+0x78>)
     5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     5a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     5ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     5b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     5b4:	6593      	str	r3, [r2, #88]	; 0x58
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd2_ID,DeviceDataPrv);
     5b6:	4a09      	ldr	r2, [pc, #36]	; (5dc <BitIoLdd2_Init+0x7c>)
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	6053      	str	r3, [r2, #4]
  return ((LDD_TDeviceData *)DeviceDataPrv);
     5bc:	68fb      	ldr	r3, [r7, #12]
}
     5be:	4618      	mov	r0, r3
     5c0:	3714      	adds	r7, #20
     5c2:	46bd      	mov	sp, r7
     5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c8:	4770      	bx	lr
     5ca:	bf00      	nop
     5cc:	20000060 	.word	0x20000060
     5d0:	40047000 	.word	0x40047000
     5d4:	400ff040 	.word	0x400ff040
     5d8:	4004a000 	.word	0x4004a000
     5dc:	20000068 	.word	0x20000068

000005e0 <BitIoLdd2_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd2_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
     5e0:	b480      	push	{r7}
     5e2:	b085      	sub	sp, #20
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd2_MODULE_BASE_ADDRESS) & BitIoLdd2_PORT_MASK;
     5e8:	4b08      	ldr	r3, [pc, #32]	; (60c <BitIoLdd2_GetVal+0x2c>)
     5ea:	681b      	ldr	r3, [r3, #0]
     5ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
     5f0:	60fb      	str	r3, [r7, #12]
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
     5f2:	68fb      	ldr	r3, [r7, #12]
     5f4:	2b00      	cmp	r3, #0
     5f6:	bf14      	ite	ne
     5f8:	2301      	movne	r3, #1
     5fa:	2300      	moveq	r3, #0
     5fc:	b2db      	uxtb	r3, r3
}
     5fe:	4618      	mov	r0, r3
     600:	3714      	adds	r7, #20
     602:	46bd      	mov	sp, r7
     604:	f85d 7b04 	ldr.w	r7, [sp], #4
     608:	4770      	bx	lr
     60a:	bf00      	nop
     60c:	400ff040 	.word	0x400ff040

00000610 <BitIoLdd2_ClrVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd2_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
     610:	b480      	push	{r7}
     612:	b083      	sub	sp, #12
     614:	af00      	add	r7, sp, #0
     616:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(BitIoLdd2_MODULE_BASE_ADDRESS, BitIoLdd2_PORT_MASK);
     618:	4b04      	ldr	r3, [pc, #16]	; (62c <BitIoLdd2_ClrVal+0x1c>)
     61a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     61e:	609a      	str	r2, [r3, #8]
}
     620:	bf00      	nop
     622:	370c      	adds	r7, #12
     624:	46bd      	mov	sp, r7
     626:	f85d 7b04 	ldr.w	r7, [sp], #4
     62a:	4770      	bx	lr
     62c:	400ff040 	.word	0x400ff040

00000630 <BitIoLdd2_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd2_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
     630:	b480      	push	{r7}
     632:	b083      	sub	sp, #12
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd2_MODULE_BASE_ADDRESS, BitIoLdd2_PORT_MASK);
     638:	4b04      	ldr	r3, [pc, #16]	; (64c <BitIoLdd2_SetVal+0x1c>)
     63a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     63e:	605a      	str	r2, [r3, #4]
}
     640:	bf00      	nop
     642:	370c      	adds	r7, #12
     644:	46bd      	mov	sp, r7
     646:	f85d 7b04 	ldr.w	r7, [sp], #4
     64a:	4770      	bx	lr
     64c:	400ff040 	.word	0x400ff040

00000650 <BitIoLdd2_NegVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd2_NegVal(LDD_TDeviceData *DeviceDataPtr)
{
     650:	b480      	push	{r7}
     652:	b083      	sub	sp, #12
     654:	af00      	add	r7, sp, #0
     656:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_TogglePortDataOutputMask(BitIoLdd2_MODULE_BASE_ADDRESS, BitIoLdd2_PORT_MASK);
     658:	4b04      	ldr	r3, [pc, #16]	; (66c <BitIoLdd2_NegVal+0x1c>)
     65a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     65e:	60da      	str	r2, [r3, #12]
}
     660:	bf00      	nop
     662:	370c      	adds	r7, #12
     664:	46bd      	mov	sp, r7
     666:	f85d 7b04 	ldr.w	r7, [sp], #4
     66a:	4770      	bx	lr
     66c:	400ff040 	.word	0x400ff040

00000670 <BitIoLdd3_Init>:
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* BitIoLdd3_Init(LDD_TUserData *UserDataPtr)
{
     670:	b480      	push	{r7}
     672:	b085      	sub	sp, #20
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
  /* Allocate device structure */
  BitIoLdd3_TDeviceDataPtr DeviceDataPrv;

  /* {FreeRTOS RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer to the static object */
  DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
     678:	4b18      	ldr	r3, [pc, #96]	; (6dc <BitIoLdd3_Init+0x6c>)
     67a:	60fb      	str	r3, [r7, #12]
  DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
     67c:	68fb      	ldr	r3, [r7, #12]
     67e:	687a      	ldr	r2, [r7, #4]
     680:	601a      	str	r2, [r3, #0]
  /* Enable device clock gate */
  /* SIM_SCGC5: PORTE=1 */
  SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK;
     682:	4917      	ldr	r1, [pc, #92]	; (6e0 <BitIoLdd3_Init+0x70>)
     684:	4b16      	ldr	r3, [pc, #88]	; (6e0 <BitIoLdd3_Init+0x70>)
     686:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
     68a:	3318      	adds	r3, #24
     68c:	681b      	ldr	r3, [r3, #0]
     68e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     692:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
     696:	3318      	adds	r3, #24
     698:	601a      	str	r2, [r3, #0]
  /* Configure pin as output */
  /* GPIOE_PDDR: PDD|=0x04000000 */
  GPIOE_PDDR |= GPIO_PDDR_PDD(0x04000000);
     69a:	4a12      	ldr	r2, [pc, #72]	; (6e4 <BitIoLdd3_Init+0x74>)
     69c:	4b11      	ldr	r3, [pc, #68]	; (6e4 <BitIoLdd3_Init+0x74>)
     69e:	695b      	ldr	r3, [r3, #20]
     6a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
     6a4:	6153      	str	r3, [r2, #20]
  /* Set initialization value */
  /* GPIOE_PDOR: PDO&=~0x04000000 */
  GPIOE_PDOR &= (uint32_t)~(uint32_t)(GPIO_PDOR_PDO(0x04000000));
     6a6:	4a0f      	ldr	r2, [pc, #60]	; (6e4 <BitIoLdd3_Init+0x74>)
     6a8:	4b0e      	ldr	r3, [pc, #56]	; (6e4 <BitIoLdd3_Init+0x74>)
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
     6b0:	6013      	str	r3, [r2, #0]
  /* Initialization of pin routing */
  /* PORTE_PCR26: ISF=0,MUX=1 */
  PORTE_PCR26 = (uint32_t)((PORTE_PCR26 & (uint32_t)~(uint32_t)(
     6b2:	4a0d      	ldr	r2, [pc, #52]	; (6e8 <BitIoLdd3_Init+0x78>)
     6b4:	4b0c      	ldr	r3, [pc, #48]	; (6e8 <BitIoLdd3_Init+0x78>)
     6b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     6b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     6bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
     6c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     6c4:	6693      	str	r3, [r2, #104]	; 0x68
                 PORT_PCR_MUX(0x06)
                )) | (uint32_t)(
                 PORT_PCR_MUX(0x01)
                ));
  /* Registration of the device structure */
  PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_BitIoLdd3_ID,DeviceDataPrv);
     6c6:	4a09      	ldr	r2, [pc, #36]	; (6ec <BitIoLdd3_Init+0x7c>)
     6c8:	68fb      	ldr	r3, [r7, #12]
     6ca:	6093      	str	r3, [r2, #8]
  return ((LDD_TDeviceData *)DeviceDataPrv);
     6cc:	68fb      	ldr	r3, [r7, #12]
}
     6ce:	4618      	mov	r0, r3
     6d0:	3714      	adds	r7, #20
     6d2:	46bd      	mov	sp, r7
     6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
     6d8:	4770      	bx	lr
     6da:	bf00      	nop
     6dc:	20000064 	.word	0x20000064
     6e0:	40047000 	.word	0x40047000
     6e4:	400ff100 	.word	0x400ff100
     6e8:	4004d000 	.word	0x4004d000
     6ec:	20000068 	.word	0x20000068

000006f0 <BitIoLdd3_GetVal>:
**                           <false> - logical "0" (Low level)
**                           <true> - logical "1" (High level)
*/
/* ===================================================================*/
bool BitIoLdd3_GetVal(LDD_TDeviceData *DeviceDataPtr)
{
     6f0:	b480      	push	{r7}
     6f2:	b085      	sub	sp, #20
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
  uint32_t PortData;                   /* Port data masked according to the bit used */

  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  PortData = GPIO_PDD_GetPortDataOutput(BitIoLdd3_MODULE_BASE_ADDRESS) & BitIoLdd3_PORT_MASK;
     6f8:	4b08      	ldr	r3, [pc, #32]	; (71c <BitIoLdd3_GetVal+0x2c>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
     700:	60fb      	str	r3, [r7, #12]
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
     702:	68fb      	ldr	r3, [r7, #12]
     704:	2b00      	cmp	r3, #0
     706:	bf14      	ite	ne
     708:	2301      	movne	r3, #1
     70a:	2300      	moveq	r3, #0
     70c:	b2db      	uxtb	r3, r3
}
     70e:	4618      	mov	r0, r3
     710:	3714      	adds	r7, #20
     712:	46bd      	mov	sp, r7
     714:	f85d 7b04 	ldr.w	r7, [sp], #4
     718:	4770      	bx	lr
     71a:	bf00      	nop
     71c:	400ff100 	.word	0x400ff100

00000720 <BitIoLdd3_ClrVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd3_ClrVal(LDD_TDeviceData *DeviceDataPtr)
{
     720:	b480      	push	{r7}
     722:	b083      	sub	sp, #12
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_ClearPortDataOutputMask(BitIoLdd3_MODULE_BASE_ADDRESS, BitIoLdd3_PORT_MASK);
     728:	4b04      	ldr	r3, [pc, #16]	; (73c <BitIoLdd3_ClrVal+0x1c>)
     72a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     72e:	609a      	str	r2, [r3, #8]
}
     730:	bf00      	nop
     732:	370c      	adds	r7, #12
     734:	46bd      	mov	sp, r7
     736:	f85d 7b04 	ldr.w	r7, [sp], #4
     73a:	4770      	bx	lr
     73c:	400ff100 	.word	0x400ff100

00000740 <BitIoLdd3_SetVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd3_SetVal(LDD_TDeviceData *DeviceDataPtr)
{
     740:	b480      	push	{r7}
     742:	b083      	sub	sp, #12
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_SetPortDataOutputMask(BitIoLdd3_MODULE_BASE_ADDRESS, BitIoLdd3_PORT_MASK);
     748:	4b04      	ldr	r3, [pc, #16]	; (75c <BitIoLdd3_SetVal+0x1c>)
     74a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     74e:	605a      	str	r2, [r3, #4]
}
     750:	bf00      	nop
     752:	370c      	adds	r7, #12
     754:	46bd      	mov	sp, r7
     756:	f85d 7b04 	ldr.w	r7, [sp], #4
     75a:	4770      	bx	lr
     75c:	400ff100 	.word	0x400ff100

00000760 <BitIoLdd3_NegVal>:
**         DeviceDataPtr   - Pointer to device data
**                           structure returned by <Init> method.
*/
/* ===================================================================*/
void BitIoLdd3_NegVal(LDD_TDeviceData *DeviceDataPtr)
{
     760:	b480      	push	{r7}
     762:	b083      	sub	sp, #12
     764:	af00      	add	r7, sp, #0
     766:	6078      	str	r0, [r7, #4]
  (void)DeviceDataPtr;                 /* Parameter is not used, suppress unused argument warning */
  GPIO_PDD_TogglePortDataOutputMask(BitIoLdd3_MODULE_BASE_ADDRESS, BitIoLdd3_PORT_MASK);
     768:	4b04      	ldr	r3, [pc, #16]	; (77c <BitIoLdd3_NegVal+0x1c>)
     76a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     76e:	60da      	str	r2, [r3, #12]
}
     770:	bf00      	nop
     772:	370c      	adds	r7, #12
     774:	46bd      	mov	sp, r7
     776:	f85d 7b04 	ldr.w	r7, [sp], #4
     77a:	4770      	bx	lr
     77c:	400ff100 	.word	0x400ff100

00000780 <CLS1_SendCh>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendCh(uint8_t ch, CLS1_StdIO_OutErr_FctType io)
{
     780:	b580      	push	{r7, lr}
     782:	b082      	sub	sp, #8
     784:	af00      	add	r7, sp, #0
     786:	4603      	mov	r3, r0
     788:	6039      	str	r1, [r7, #0]
     78a:	71fb      	strb	r3, [r7, #7]
  io(ch);
     78c:	79fa      	ldrb	r2, [r7, #7]
     78e:	683b      	ldr	r3, [r7, #0]
     790:	4610      	mov	r0, r2
     792:	4798      	blx	r3
}
     794:	bf00      	nop
     796:	3708      	adds	r7, #8
     798:	46bd      	mov	sp, r7
     79a:	bd80      	pop	{r7, pc}

0000079c <CLS1_SendStr>:
 * \brief Prints a string using I/O callbacks
 * \param[in] str String (zero terminated) to be printed
 * \param[in] io I/O function to be used for printing
 */
void CLS1_SendStr(const uint8_t *str, CLS1_StdIO_OutErr_FctType io)
{
     79c:	b580      	push	{r7, lr}
     79e:	b082      	sub	sp, #8
     7a0:	af00      	add	r7, sp, #0
     7a2:	6078      	str	r0, [r7, #4]
     7a4:	6039      	str	r1, [r7, #0]
  while(*str!='\0') {
     7a6:	e006      	b.n	7b6 <CLS1_SendStr+0x1a>
    io(*str++);
     7a8:	687b      	ldr	r3, [r7, #4]
     7aa:	1c5a      	adds	r2, r3, #1
     7ac:	607a      	str	r2, [r7, #4]
     7ae:	781a      	ldrb	r2, [r3, #0]
     7b0:	683b      	ldr	r3, [r7, #0]
     7b2:	4610      	mov	r0, r2
     7b4:	4798      	blx	r3
 * \param[in] str String (zero terminated) to be printed
 * \param[in] io I/O function to be used for printing
 */
void CLS1_SendStr(const uint8_t *str, CLS1_StdIO_OutErr_FctType io)
{
  while(*str!='\0') {
     7b6:	687b      	ldr	r3, [r7, #4]
     7b8:	781b      	ldrb	r3, [r3, #0]
     7ba:	2b00      	cmp	r3, #0
     7bc:	d1f4      	bne.n	7a8 <CLS1_SendStr+0xc>
    io(*str++);
  }
}
     7be:	bf00      	nop
     7c0:	3708      	adds	r7, #8
     7c2:	46bd      	mov	sp, r7
     7c4:	bd80      	pop	{r7, pc}
     7c6:	bf00      	nop

000007c8 <CLS1_SendNum32s>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendNum32s(int32_t val, CLS1_StdIO_OutErr_FctType io)
{
     7c8:	b580      	push	{r7, lr}
     7ca:	b086      	sub	sp, #24
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
     7d0:	6039      	str	r1, [r7, #0]
  unsigned char buf[sizeof("-1234567890")];

  UTIL1_Num32sToStr(buf, sizeof(buf), val);
     7d2:	f107 030c 	add.w	r3, r7, #12
     7d6:	687a      	ldr	r2, [r7, #4]
     7d8:	210c      	movs	r1, #12
     7da:	4618      	mov	r0, r3
     7dc:	f005 ffde 	bl	679c <UTIL1_Num32sToStr>
  CLS1_SendStr(buf, io);
     7e0:	f107 030c 	add.w	r3, r7, #12
     7e4:	6839      	ldr	r1, [r7, #0]
     7e6:	4618      	mov	r0, r3
     7e8:	f7ff ffd8 	bl	79c <CLS1_SendStr>
}
     7ec:	bf00      	nop
     7ee:	3718      	adds	r7, #24
     7f0:	46bd      	mov	sp, r7
     7f2:	bd80      	pop	{r7, pc}

000007f4 <CLS1_SendNum32u>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendNum32u(uint32_t val, CLS1_StdIO_OutErr_FctType io)
{
     7f4:	b580      	push	{r7, lr}
     7f6:	b086      	sub	sp, #24
     7f8:	af00      	add	r7, sp, #0
     7fa:	6078      	str	r0, [r7, #4]
     7fc:	6039      	str	r1, [r7, #0]
  unsigned char buf[sizeof("1234567890")];

  UTIL1_Num32uToStr(buf, sizeof(buf), val);
     7fe:	f107 030c 	add.w	r3, r7, #12
     802:	687a      	ldr	r2, [r7, #4]
     804:	210b      	movs	r1, #11
     806:	4618      	mov	r0, r3
     808:	f006 f860 	bl	68cc <UTIL1_Num32uToStr>
  CLS1_SendStr(buf, io);
     80c:	f107 030c 	add.w	r3, r7, #12
     810:	6839      	ldr	r1, [r7, #0]
     812:	4618      	mov	r0, r3
     814:	f7ff ffc2 	bl	79c <CLS1_SendStr>
}
     818:	bf00      	nop
     81a:	3718      	adds	r7, #24
     81c:	46bd      	mov	sp, r7
     81e:	bd80      	pop	{r7, pc}

00000820 <CLS1_SendNum16s>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendNum16s(int16_t val, CLS1_StdIO_OutErr_FctType io)
{
     820:	b580      	push	{r7, lr}
     822:	b084      	sub	sp, #16
     824:	af00      	add	r7, sp, #0
     826:	4603      	mov	r3, r0
     828:	6039      	str	r1, [r7, #0]
     82a:	80fb      	strh	r3, [r7, #6]
  unsigned char buf[sizeof("-12345")];

  UTIL1_Num16sToStr(buf, sizeof(buf), val);
     82c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
     830:	f107 0308 	add.w	r3, r7, #8
     834:	2107      	movs	r1, #7
     836:	4618      	mov	r0, r3
     838:	f005 fc64 	bl	6104 <UTIL1_Num16sToStr>
  CLS1_SendStr(buf, io);
     83c:	f107 0308 	add.w	r3, r7, #8
     840:	6839      	ldr	r1, [r7, #0]
     842:	4618      	mov	r0, r3
     844:	f7ff ffaa 	bl	79c <CLS1_SendStr>
}
     848:	bf00      	nop
     84a:	3710      	adds	r7, #16
     84c:	46bd      	mov	sp, r7
     84e:	bd80      	pop	{r7, pc}

00000850 <CLS1_SendNum16u>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendNum16u(uint16_t val, CLS1_StdIO_OutErr_FctType io)
{
     850:	b580      	push	{r7, lr}
     852:	b084      	sub	sp, #16
     854:	af00      	add	r7, sp, #0
     856:	4603      	mov	r3, r0
     858:	6039      	str	r1, [r7, #0]
     85a:	80fb      	strh	r3, [r7, #6]
  unsigned char buf[sizeof("12345")];

  UTIL1_Num16uToStr(buf, sizeof(buf), val);
     85c:	88fa      	ldrh	r2, [r7, #6]
     85e:	f107 0308 	add.w	r3, r7, #8
     862:	2106      	movs	r1, #6
     864:	4618      	mov	r0, r3
     866:	f005 fbd7 	bl	6018 <UTIL1_Num16uToStr>
  CLS1_SendStr(buf, io);
     86a:	f107 0308 	add.w	r3, r7, #8
     86e:	6839      	ldr	r1, [r7, #0]
     870:	4618      	mov	r0, r3
     872:	f7ff ff93 	bl	79c <CLS1_SendStr>
}
     876:	bf00      	nop
     878:	3710      	adds	r7, #16
     87a:	46bd      	mov	sp, r7
     87c:	bd80      	pop	{r7, pc}
     87e:	bf00      	nop

00000880 <CLS1_SendNum8u>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendNum8u(uint8_t val, CLS1_StdIO_OutErr_FctType io)
{
     880:	b580      	push	{r7, lr}
     882:	b084      	sub	sp, #16
     884:	af00      	add	r7, sp, #0
     886:	4603      	mov	r3, r0
     888:	6039      	str	r1, [r7, #0]
     88a:	71fb      	strb	r3, [r7, #7]
  unsigned char buf[sizeof("123")];

  UTIL1_Num8uToStr(buf, sizeof(buf), val);
     88c:	79fa      	ldrb	r2, [r7, #7]
     88e:	f107 030c 	add.w	r3, r7, #12
     892:	2104      	movs	r1, #4
     894:	4618      	mov	r0, r3
     896:	f005 fb99 	bl	5fcc <UTIL1_Num8uToStr>
  CLS1_SendStr(buf, io);
     89a:	f107 030c 	add.w	r3, r7, #12
     89e:	6839      	ldr	r1, [r7, #0]
     8a0:	4618      	mov	r0, r3
     8a2:	f7ff ff7b 	bl	79c <CLS1_SendStr>
}
     8a6:	bf00      	nop
     8a8:	3710      	adds	r7, #16
     8aa:	46bd      	mov	sp, r7
     8ac:	bd80      	pop	{r7, pc}
     8ae:	bf00      	nop

000008b0 <CLS1_SendNum8s>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendNum8s(int8_t val, CLS1_StdIO_OutErr_FctType io)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b084      	sub	sp, #16
     8b4:	af00      	add	r7, sp, #0
     8b6:	4603      	mov	r3, r0
     8b8:	6039      	str	r1, [r7, #0]
     8ba:	71fb      	strb	r3, [r7, #7]
  unsigned char buf[sizeof("-123")];

  UTIL1_Num8sToStr(buf, sizeof(buf), val);
     8bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
     8c0:	f107 0308 	add.w	r3, r7, #8
     8c4:	2105      	movs	r1, #5
     8c6:	4618      	mov	r0, r3
     8c8:	f005 fb92 	bl	5ff0 <UTIL1_Num8sToStr>
  CLS1_SendStr(buf, io);
     8cc:	f107 0308 	add.w	r3, r7, #8
     8d0:	6839      	ldr	r1, [r7, #0]
     8d2:	4618      	mov	r0, r3
     8d4:	f7ff ff62 	bl	79c <CLS1_SendStr>
}
     8d8:	bf00      	nop
     8da:	3710      	adds	r7, #16
     8dc:	46bd      	mov	sp, r7
     8de:	bd80      	pop	{r7, pc}

000008e0 <CLS1_ParseCommand>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t CLS1_ParseCommand(const uint8_t *cmd, bool *handled, CLS1_ConstStdIOType *io)
{
     8e0:	b580      	push	{r7, lr}
     8e2:	b084      	sub	sp, #16
     8e4:	af00      	add	r7, sp, #0
     8e6:	60f8      	str	r0, [r7, #12]
     8e8:	60b9      	str	r1, [r7, #8]
     8ea:	607a      	str	r2, [r7, #4]
  if (UTIL1_strcmp((char*)cmd, CLS1_CMD_HELP)==0 || UTIL1_strcmp((char*)cmd, "CLS1 help")==0) {
     8ec:	4932      	ldr	r1, [pc, #200]	; (9b8 <CLS1_ParseCommand+0xd8>)
     8ee:	68f8      	ldr	r0, [r7, #12]
     8f0:	f00f f8be 	bl	fa70 <strcmp>
     8f4:	4603      	mov	r3, r0
     8f6:	2b00      	cmp	r3, #0
     8f8:	d006      	beq.n	908 <CLS1_ParseCommand+0x28>
     8fa:	4930      	ldr	r1, [pc, #192]	; (9bc <CLS1_ParseCommand+0xdc>)
     8fc:	68f8      	ldr	r0, [r7, #12]
     8fe:	f00f f8b7 	bl	fa70 <strcmp>
     902:	4603      	mov	r3, r0
     904:	2b00      	cmp	r3, #0
     906:	d13c      	bne.n	982 <CLS1_ParseCommand+0xa2>
    CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
     908:	687b      	ldr	r3, [r7, #4]
     90a:	685b      	ldr	r3, [r3, #4]
     90c:	4619      	mov	r1, r3
     90e:	482c      	ldr	r0, [pc, #176]	; (9c0 <CLS1_ParseCommand+0xe0>)
     910:	f7ff ff44 	bl	79c <CLS1_SendStr>
    CLS1_SendStr((unsigned char*)CLS1_DASH_LINE, io->stdOut);
     914:	687b      	ldr	r3, [r7, #4]
     916:	685b      	ldr	r3, [r3, #4]
     918:	4619      	mov	r1, r3
     91a:	482a      	ldr	r0, [pc, #168]	; (9c4 <CLS1_ParseCommand+0xe4>)
     91c:	f7ff ff3e 	bl	79c <CLS1_SendStr>
    CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
     920:	687b      	ldr	r3, [r7, #4]
     922:	685b      	ldr	r3, [r3, #4]
     924:	4619      	mov	r1, r3
     926:	4826      	ldr	r0, [pc, #152]	; (9c0 <CLS1_ParseCommand+0xe0>)
     928:	f7ff ff38 	bl	79c <CLS1_SendStr>
    CLS1_SendStr((unsigned char*)"My Project Name", io->stdOut);
     92c:	687b      	ldr	r3, [r7, #4]
     92e:	685b      	ldr	r3, [r3, #4]
     930:	4619      	mov	r1, r3
     932:	4825      	ldr	r0, [pc, #148]	; (9c8 <CLS1_ParseCommand+0xe8>)
     934:	f7ff ff32 	bl	79c <CLS1_SendStr>
    CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
     938:	687b      	ldr	r3, [r7, #4]
     93a:	685b      	ldr	r3, [r3, #4]
     93c:	4619      	mov	r1, r3
     93e:	4820      	ldr	r0, [pc, #128]	; (9c0 <CLS1_ParseCommand+0xe0>)
     940:	f7ff ff2c 	bl	79c <CLS1_SendStr>
    CLS1_SendStr((unsigned char*)CLS1_DASH_LINE, io->stdOut);
     944:	687b      	ldr	r3, [r7, #4]
     946:	685b      	ldr	r3, [r3, #4]
     948:	4619      	mov	r1, r3
     94a:	481e      	ldr	r0, [pc, #120]	; (9c4 <CLS1_ParseCommand+0xe4>)
     94c:	f7ff ff26 	bl	79c <CLS1_SendStr>
    CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
     950:	687b      	ldr	r3, [r7, #4]
     952:	685b      	ldr	r3, [r3, #4]
     954:	4619      	mov	r1, r3
     956:	481a      	ldr	r0, [pc, #104]	; (9c0 <CLS1_ParseCommand+0xe0>)
     958:	f7ff ff20 	bl	79c <CLS1_SendStr>
    CLS1_SendHelpStr((unsigned char*)"CLS1", (const unsigned char*)"Group of CLS1 commands\r\n", io->stdOut);
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	685b      	ldr	r3, [r3, #4]
     960:	461a      	mov	r2, r3
     962:	491a      	ldr	r1, [pc, #104]	; (9cc <CLS1_ParseCommand+0xec>)
     964:	481a      	ldr	r0, [pc, #104]	; (9d0 <CLS1_ParseCommand+0xf0>)
     966:	f000 fa77 	bl	e58 <CLS1_SendHelpStr>
    CLS1_SendHelpStr((unsigned char*)"  help|status", (const unsigned char*)"Print help or status information\r\n", io->stdOut);
     96a:	687b      	ldr	r3, [r7, #4]
     96c:	685b      	ldr	r3, [r3, #4]
     96e:	461a      	mov	r2, r3
     970:	4918      	ldr	r1, [pc, #96]	; (9d4 <CLS1_ParseCommand+0xf4>)
     972:	4819      	ldr	r0, [pc, #100]	; (9d8 <CLS1_ParseCommand+0xf8>)
     974:	f000 fa70 	bl	e58 <CLS1_SendHelpStr>
#if CLS1_ECHO_ENABLED
    CLS1_SendHelpStr((unsigned char*)"  echo (on|off)", (const unsigned char*)"Turn echo on or off\r\n", io->stdOut);
#endif
    *handled = TRUE;
     978:	68bb      	ldr	r3, [r7, #8]
     97a:	2201      	movs	r2, #1
     97c:	701a      	strb	r2, [r3, #0]
    return ERR_OK;
     97e:	2300      	movs	r3, #0
     980:	e016      	b.n	9b0 <CLS1_ParseCommand+0xd0>
  } else if ((UTIL1_strcmp((char*)cmd, "CLS1 echo off")==0)) {
    *handled = TRUE;
    CLS1_EchoEnabled = FALSE;
    return ERR_OK;
#endif
  } else if ((UTIL1_strcmp((char*)cmd, CLS1_CMD_STATUS)==0) || (UTIL1_strcmp((char*)cmd, "CLS1 status")==0)) {
     982:	4916      	ldr	r1, [pc, #88]	; (9dc <CLS1_ParseCommand+0xfc>)
     984:	68f8      	ldr	r0, [r7, #12]
     986:	f00f f873 	bl	fa70 <strcmp>
     98a:	4603      	mov	r3, r0
     98c:	2b00      	cmp	r3, #0
     98e:	d006      	beq.n	99e <CLS1_ParseCommand+0xbe>
     990:	4913      	ldr	r1, [pc, #76]	; (9e0 <CLS1_ParseCommand+0x100>)
     992:	68f8      	ldr	r0, [r7, #12]
     994:	f00f f86c 	bl	fa70 <strcmp>
     998:	4603      	mov	r3, r0
     99a:	2b00      	cmp	r3, #0
     99c:	d107      	bne.n	9ae <CLS1_ParseCommand+0xce>
    *handled = TRUE;
     99e:	68bb      	ldr	r3, [r7, #8]
     9a0:	2201      	movs	r2, #1
     9a2:	701a      	strb	r2, [r3, #0]
    return CLS1_PrintStatus(io);
     9a4:	6878      	ldr	r0, [r7, #4]
     9a6:	f000 f8a5 	bl	af4 <CLS1_PrintStatus>
     9aa:	4603      	mov	r3, r0
     9ac:	e000      	b.n	9b0 <CLS1_ParseCommand+0xd0>
  }
  return ERR_OK; /* no error */
     9ae:	2300      	movs	r3, #0
}
     9b0:	4618      	mov	r0, r3
     9b2:	3710      	adds	r7, #16
     9b4:	46bd      	mov	sp, r7
     9b6:	bd80      	pop	{r7, pc}
     9b8:	0000fb7c 	.word	0x0000fb7c
     9bc:	0000fb84 	.word	0x0000fb84
     9c0:	0000fb90 	.word	0x0000fb90
     9c4:	0000fb94 	.word	0x0000fb94
     9c8:	0000fbd4 	.word	0x0000fbd4
     9cc:	0000fbe4 	.word	0x0000fbe4
     9d0:	0000fc00 	.word	0x0000fc00
     9d4:	0000fc08 	.word	0x0000fc08
     9d8:	0000fc2c 	.word	0x0000fc2c
     9dc:	0000fc3c 	.word	0x0000fc3c
     9e0:	0000fc44 	.word	0x0000fc44

000009e4 <CLS1_PrintPrompt>:
**       * io              - Pointer to IO to be used
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_PrintPrompt(CLS1_ConstStdIOType *io)
{
     9e4:	b580      	push	{r7, lr}
     9e6:	b082      	sub	sp, #8
     9e8:	af00      	add	r7, sp, #0
     9ea:	6078      	str	r0, [r7, #4]
  CLS1_SendStr((unsigned char*)"CMD> ", io->stdOut);
     9ec:	687b      	ldr	r3, [r7, #4]
     9ee:	685b      	ldr	r3, [r3, #4]
     9f0:	4619      	mov	r1, r3
     9f2:	4803      	ldr	r0, [pc, #12]	; (a00 <CLS1_PrintPrompt+0x1c>)
     9f4:	f7ff fed2 	bl	79c <CLS1_SendStr>
}
     9f8:	bf00      	nop
     9fa:	3708      	adds	r7, #8
     9fc:	46bd      	mov	sp, r7
     9fe:	bd80      	pop	{r7, pc}
     a00:	0000fc50 	.word	0x0000fc50

00000a04 <CLS1_IsHistoryCharacter>:
**     Returns     :
**         ---             - TRUE if it is an accepted history character
** ===================================================================
*/
bool CLS1_IsHistoryCharacter(uint8_t ch, uint8_t *cmdBuf, size_t cmdBufIdx, bool *isPrev)
{
     a04:	b480      	push	{r7}
     a06:	b085      	sub	sp, #20
     a08:	af00      	add	r7, sp, #0
     a0a:	60b9      	str	r1, [r7, #8]
     a0c:	607a      	str	r2, [r7, #4]
     a0e:	603b      	str	r3, [r7, #0]
     a10:	4603      	mov	r3, r0
     a12:	73fb      	strb	r3, [r7, #15]
  *isPrev = FALSE;
     a14:	683b      	ldr	r3, [r7, #0]
     a16:	2200      	movs	r2, #0
     a18:	701a      	strb	r2, [r3, #0]
#else
  (void)ch; /* not used */
  (void)cmdBuf; /* not used */
  (void)cmdBufIdx; /* not used */
#endif
  return FALSE;
     a1a:	2300      	movs	r3, #0
}
     a1c:	4618      	mov	r0, r3
     a1e:	3714      	adds	r7, #20
     a20:	46bd      	mov	sp, r7
     a22:	f85d 7b04 	ldr.w	r7, [sp], #4
     a26:	4770      	bx	lr

00000a28 <CLS1_ReadLine>:
**         ---             - TRUE if something has been read, FALSE
**                           otherwise
** ===================================================================
*/
bool CLS1_ReadLine(uint8_t *bufStart, uint8_t *buf, size_t bufSize, CLS1_ConstStdIOType *io)
{
     a28:	b580      	push	{r7, lr}
     a2a:	b086      	sub	sp, #24
     a2c:	af00      	add	r7, sp, #0
     a2e:	60f8      	str	r0, [r7, #12]
     a30:	60b9      	str	r1, [r7, #8]
     a32:	607a      	str	r2, [r7, #4]
     a34:	603b      	str	r3, [r7, #0]
  uint8_t c;
  bool isBackwardHistory;

  if (io->keyPressed()) {
     a36:	683b      	ldr	r3, [r7, #0]
     a38:	68db      	ldr	r3, [r3, #12]
     a3a:	4798      	blx	r3
     a3c:	4603      	mov	r3, r0
     a3e:	2b00      	cmp	r3, #0
     a40:	d053      	beq.n	aea <CLS1_ReadLine+0xc2>
    for(;;) {                          /* while not '\r' or '\n' */
      c = '\0';                        /* initialize character */
     a42:	2300      	movs	r3, #0
     a44:	75fb      	strb	r3, [r7, #23]
      io->stdIn(&c);                   /* read character */
     a46:	683b      	ldr	r3, [r7, #0]
     a48:	681b      	ldr	r3, [r3, #0]
     a4a:	f107 0217 	add.w	r2, r7, #23
     a4e:	4610      	mov	r0, r2
     a50:	4798      	blx	r3
      if (c=='\0') { /* nothing in rx buffer? Something is wrong... */
     a52:	7dfb      	ldrb	r3, [r7, #23]
     a54:	2b00      	cmp	r3, #0
     a56:	d040      	beq.n	ada <CLS1_ReadLine+0xb2>
        break; /* get out of loop */
      }
      if (c=='\b' || c=='\177') {      /* check for backspace */
     a58:	7dfb      	ldrb	r3, [r7, #23]
     a5a:	2b08      	cmp	r3, #8
     a5c:	d002      	beq.n	a64 <CLS1_ReadLine+0x3c>
     a5e:	7dfb      	ldrb	r3, [r7, #23]
     a60:	2b7f      	cmp	r3, #127	; 0x7f
     a62:	d10d      	bne.n	a80 <CLS1_ReadLine+0x58>
        if (buf > bufStart) {          /* Avoid buffer underflow */
     a64:	68ba      	ldr	r2, [r7, #8]
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	429a      	cmp	r2, r3
     a6a:	d935      	bls.n	ad8 <CLS1_ReadLine+0xb0>
             io->stdOut('\b');         /* delete character on terminal */
             io->stdOut(' ');
             io->stdOut('\b');
           }
#endif
           buf--;                      /* delete last character in buffer */
     a6c:	68bb      	ldr	r3, [r7, #8]
     a6e:	3b01      	subs	r3, #1
     a70:	60bb      	str	r3, [r7, #8]
           *buf = '\0';
     a72:	68bb      	ldr	r3, [r7, #8]
     a74:	2200      	movs	r2, #0
     a76:	701a      	strb	r2, [r3, #0]
           bufSize++;
     a78:	687b      	ldr	r3, [r7, #4]
     a7a:	3301      	adds	r3, #1
     a7c:	607b      	str	r3, [r7, #4]
      io->stdIn(&c);                   /* read character */
      if (c=='\0') { /* nothing in rx buffer? Something is wrong... */
        break; /* get out of loop */
      }
      if (c=='\b' || c=='\177') {      /* check for backspace */
        if (buf > bufStart) {          /* Avoid buffer underflow */
     a7e:	e02b      	b.n	ad8 <CLS1_ReadLine+0xb0>
#endif
           buf--;                      /* delete last character in buffer */
           *buf = '\0';
           bufSize++;
        }
      } else if (CLS1_IsHistoryCharacter(c, bufStart, (size_t)(buf-bufStart), &isBackwardHistory)) {
     a80:	7df8      	ldrb	r0, [r7, #23]
     a82:	68ba      	ldr	r2, [r7, #8]
     a84:	68fb      	ldr	r3, [r7, #12]
     a86:	1ad3      	subs	r3, r2, r3
     a88:	461a      	mov	r2, r3
     a8a:	f107 0316 	add.w	r3, r7, #22
     a8e:	68f9      	ldr	r1, [r7, #12]
     a90:	f7ff ffb8 	bl	a04 <CLS1_IsHistoryCharacter>
     a94:	4603      	mov	r3, r0
     a96:	2b00      	cmp	r3, #0
     a98:	d00c      	beq.n	ab4 <CLS1_ReadLine+0x8c>
#if CLS1_HISTORY_ENABLED
        uint8_t cBuf[3]={'\0','\0','\0'}, cBufIdx = 0;
        bool prevInHistory;
#endif

        while (c!='\0') {              /* empty the rx buffer (escape sequence) */
     a9a:	e007      	b.n	aac <CLS1_ReadLine+0x84>
           cBufIdx++;
           if (cBufIdx==sizeof(cBuf)) {
             cBufIdx = 0; /* ring buffer */
           }
#endif
           c = '\0';                   /* initialize character */
     a9c:	2300      	movs	r3, #0
     a9e:	75fb      	strb	r3, [r7, #23]
           io->stdIn(&c);              /* read character */
     aa0:	683b      	ldr	r3, [r7, #0]
     aa2:	681b      	ldr	r3, [r3, #0]
     aa4:	f107 0217 	add.w	r2, r7, #23
     aa8:	4610      	mov	r0, r2
     aaa:	4798      	blx	r3
#if CLS1_HISTORY_ENABLED
        uint8_t cBuf[3]={'\0','\0','\0'}, cBufIdx = 0;
        bool prevInHistory;
#endif

        while (c!='\0') {              /* empty the rx buffer (escape sequence) */
     aac:	7dfb      	ldrb	r3, [r7, #23]
     aae:	2b00      	cmp	r3, #0
     ab0:	d1f4      	bne.n	a9c <CLS1_ReadLine+0x74>
     ab2:	e7c6      	b.n	a42 <CLS1_ReadLine+0x1a>
#if CLS1_ECHO_ENABLED
        if (CLS1_EchoEnabled) {
          io->stdOut(c);               /* echo character */
        }
#endif
        *buf = (uint8_t)c;             /* append character to the string */
     ab4:	7dfa      	ldrb	r2, [r7, #23]
     ab6:	68bb      	ldr	r3, [r7, #8]
     ab8:	701a      	strb	r2, [r3, #0]
        buf++;
     aba:	68bb      	ldr	r3, [r7, #8]
     abc:	3301      	adds	r3, #1
     abe:	60bb      	str	r3, [r7, #8]
        bufSize--;
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	3b01      	subs	r3, #1
     ac4:	607b      	str	r3, [r7, #4]
        if ((c=='\r') || (c=='\n')) {
     ac6:	7dfb      	ldrb	r3, [r7, #23]
     ac8:	2b0d      	cmp	r3, #13
     aca:	d009      	beq.n	ae0 <CLS1_ReadLine+0xb8>
     acc:	7dfb      	ldrb	r3, [r7, #23]
     ace:	2b0a      	cmp	r3, #10
     ad0:	d006      	beq.n	ae0 <CLS1_ReadLine+0xb8>
            }
          }
#endif
          break;
        }
        if (bufSize <= 1) {            /* buffer full */
     ad2:	687b      	ldr	r3, [r7, #4]
     ad4:	2b01      	cmp	r3, #1
     ad6:	d902      	bls.n	ade <CLS1_ReadLine+0xb6>
          break;
        }
      }
    } /* for */
     ad8:	e7b3      	b.n	a42 <CLS1_ReadLine+0x1a>
  if (io->keyPressed()) {
    for(;;) {                          /* while not '\r' or '\n' */
      c = '\0';                        /* initialize character */
      io->stdIn(&c);                   /* read character */
      if (c=='\0') { /* nothing in rx buffer? Something is wrong... */
        break; /* get out of loop */
     ada:	bf00      	nop
     adc:	e000      	b.n	ae0 <CLS1_ReadLine+0xb8>
          }
#endif
          break;
        }
        if (bufSize <= 1) {            /* buffer full */
          break;
     ade:	bf00      	nop
        }
      }
    } /* for */
    *buf = '\0';                       /* zero terminate string */
     ae0:	68bb      	ldr	r3, [r7, #8]
     ae2:	2200      	movs	r2, #0
     ae4:	701a      	strb	r2, [r3, #0]
    return TRUE;
     ae6:	2301      	movs	r3, #1
     ae8:	e000      	b.n	aec <CLS1_ReadLine+0xc4>
  } else {
    return FALSE;
     aea:	2300      	movs	r3, #0
  }
}
     aec:	4618      	mov	r0, r3
     aee:	3718      	adds	r7, #24
     af0:	46bd      	mov	sp, r7
     af2:	bd80      	pop	{r7, pc}

00000af4 <CLS1_PrintStatus>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t CLS1_PrintStatus(CLS1_ConstStdIOType *io)
{
     af4:	b580      	push	{r7, lr}
     af6:	b082      	sub	sp, #8
     af8:	af00      	add	r7, sp, #0
     afa:	6078      	str	r0, [r7, #4]
  CLS1_SendStatusStr((const unsigned char*)"CLS1", (const unsigned char*)"\r\n", io->stdOut);
     afc:	687b      	ldr	r3, [r7, #4]
     afe:	685b      	ldr	r3, [r3, #4]
     b00:	461a      	mov	r2, r3
     b02:	4911      	ldr	r1, [pc, #68]	; (b48 <CLS1_PrintStatus+0x54>)
     b04:	4811      	ldr	r0, [pc, #68]	; (b4c <CLS1_PrintStatus+0x58>)
     b06:	f000 f9b9 	bl	e7c <CLS1_SendStatusStr>
  CLS1_SendStatusStr((const unsigned char*)"  Build", (const unsigned char*)__DATE__, io->stdOut);
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	685b      	ldr	r3, [r3, #4]
     b0e:	461a      	mov	r2, r3
     b10:	490f      	ldr	r1, [pc, #60]	; (b50 <CLS1_PrintStatus+0x5c>)
     b12:	4810      	ldr	r0, [pc, #64]	; (b54 <CLS1_PrintStatus+0x60>)
     b14:	f000 f9b2 	bl	e7c <CLS1_SendStatusStr>
  CLS1_SendStr((unsigned char*)" ", io->stdOut);
     b18:	687b      	ldr	r3, [r7, #4]
     b1a:	685b      	ldr	r3, [r3, #4]
     b1c:	4619      	mov	r1, r3
     b1e:	480e      	ldr	r0, [pc, #56]	; (b58 <CLS1_PrintStatus+0x64>)
     b20:	f7ff fe3c 	bl	79c <CLS1_SendStr>
  CLS1_SendStr((unsigned char*)__TIME__, io->stdOut);
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	685b      	ldr	r3, [r3, #4]
     b28:	4619      	mov	r1, r3
     b2a:	480c      	ldr	r0, [pc, #48]	; (b5c <CLS1_PrintStatus+0x68>)
     b2c:	f7ff fe36 	bl	79c <CLS1_SendStr>
  CLS1_SendStr((unsigned char*)"\r\n", io->stdOut);
     b30:	687b      	ldr	r3, [r7, #4]
     b32:	685b      	ldr	r3, [r3, #4]
     b34:	4619      	mov	r1, r3
     b36:	4804      	ldr	r0, [pc, #16]	; (b48 <CLS1_PrintStatus+0x54>)
     b38:	f7ff fe30 	bl	79c <CLS1_SendStr>
#if CLS1_ECHO_ENABLED
  CLS1_SendStatusStr((const unsigned char*)"  echo", CLS1_EchoEnabled?(const unsigned char*)"On\r\n":(const unsigned char*)"Off\r\n", io->stdOut);
#endif
  return ERR_OK;
     b3c:	2300      	movs	r3, #0
}
     b3e:	4618      	mov	r0, r3
     b40:	3708      	adds	r7, #8
     b42:	46bd      	mov	sp, r7
     b44:	bd80      	pop	{r7, pc}
     b46:	bf00      	nop
     b48:	0000fb90 	.word	0x0000fb90
     b4c:	0000fc00 	.word	0x0000fc00
     b50:	0000fc58 	.word	0x0000fc58
     b54:	0000fc64 	.word	0x0000fc64
     b58:	0000fc6c 	.word	0x0000fc6c
     b5c:	0000fc70 	.word	0x0000fc70

00000b60 <CLS1_PrintCommandFailed>:
**       * io              - Pointer to I/O callbacks
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_PrintCommandFailed(const uint8_t *cmd, CLS1_ConstStdIOType *io)
{
     b60:	b580      	push	{r7, lr}
     b62:	b082      	sub	sp, #8
     b64:	af00      	add	r7, sp, #0
     b66:	6078      	str	r0, [r7, #4]
     b68:	6039      	str	r1, [r7, #0]
  CLS1_SendStr((unsigned char*)"*** Failed or unknown command: ", io->stdErr);
     b6a:	683b      	ldr	r3, [r7, #0]
     b6c:	689b      	ldr	r3, [r3, #8]
     b6e:	4619      	mov	r1, r3
     b70:	4812      	ldr	r0, [pc, #72]	; (bbc <CLS1_PrintCommandFailed+0x5c>)
     b72:	f7ff fe13 	bl	79c <CLS1_SendStr>
  CLS1_SendStr(cmd, io->stdErr);
     b76:	683b      	ldr	r3, [r7, #0]
     b78:	689b      	ldr	r3, [r3, #8]
     b7a:	4619      	mov	r1, r3
     b7c:	6878      	ldr	r0, [r7, #4]
     b7e:	f7ff fe0d 	bl	79c <CLS1_SendStr>
  CLS1_SendStr((unsigned char*)"\r\n", io->stdErr);
     b82:	683b      	ldr	r3, [r7, #0]
     b84:	689b      	ldr	r3, [r3, #8]
     b86:	4619      	mov	r1, r3
     b88:	480d      	ldr	r0, [pc, #52]	; (bc0 <CLS1_PrintCommandFailed+0x60>)
     b8a:	f7ff fe07 	bl	79c <CLS1_SendStr>
  CLS1_SendStr((unsigned char*)"*** Type ", io->stdErr);
     b8e:	683b      	ldr	r3, [r7, #0]
     b90:	689b      	ldr	r3, [r3, #8]
     b92:	4619      	mov	r1, r3
     b94:	480b      	ldr	r0, [pc, #44]	; (bc4 <CLS1_PrintCommandFailed+0x64>)
     b96:	f7ff fe01 	bl	79c <CLS1_SendStr>
  CLS1_SendStr((unsigned char*)CLS1_CMD_HELP, io->stdErr);
     b9a:	683b      	ldr	r3, [r7, #0]
     b9c:	689b      	ldr	r3, [r3, #8]
     b9e:	4619      	mov	r1, r3
     ba0:	4809      	ldr	r0, [pc, #36]	; (bc8 <CLS1_PrintCommandFailed+0x68>)
     ba2:	f7ff fdfb 	bl	79c <CLS1_SendStr>
  CLS1_SendStr((unsigned char*)" to get a list of available commands\r\n", io->stdErr);
     ba6:	683b      	ldr	r3, [r7, #0]
     ba8:	689b      	ldr	r3, [r3, #8]
     baa:	4619      	mov	r1, r3
     bac:	4807      	ldr	r0, [pc, #28]	; (bcc <CLS1_PrintCommandFailed+0x6c>)
     bae:	f7ff fdf5 	bl	79c <CLS1_SendStr>
}
     bb2:	bf00      	nop
     bb4:	3708      	adds	r7, #8
     bb6:	46bd      	mov	sp, r7
     bb8:	bd80      	pop	{r7, pc}
     bba:	bf00      	nop
     bbc:	0000fc7c 	.word	0x0000fc7c
     bc0:	0000fb90 	.word	0x0000fb90
     bc4:	0000fc9c 	.word	0x0000fc9c
     bc8:	0000fb7c 	.word	0x0000fb7c
     bcc:	0000fca8 	.word	0x0000fca8

00000bd0 <CLS1_IterateTable>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t CLS1_IterateTable(const uint8_t *cmd, bool *handled, CLS1_ConstStdIOType *io, CLS1_ConstParseCommandCallback *parserTable)
{
     bd0:	b580      	push	{r7, lr}
     bd2:	b086      	sub	sp, #24
     bd4:	af00      	add	r7, sp, #0
     bd6:	60f8      	str	r0, [r7, #12]
     bd8:	60b9      	str	r1, [r7, #8]
     bda:	607a      	str	r2, [r7, #4]
     bdc:	603b      	str	r3, [r7, #0]
  uint8_t res = ERR_OK;
     bde:	2300      	movs	r3, #0
     be0:	75fb      	strb	r3, [r7, #23]

  if (parserTable==NULL) { /* no table??? */
     be2:	683b      	ldr	r3, [r7, #0]
     be4:	2b00      	cmp	r3, #0
     be6:	d101      	bne.n	bec <CLS1_IterateTable+0x1c>
    return ERR_FAILED;
     be8:	231b      	movs	r3, #27
     bea:	e017      	b.n	c1c <CLS1_IterateTable+0x4c>
  }
  if (io==NULL) { /* no IO handler??? */
     bec:	687b      	ldr	r3, [r7, #4]
     bee:	2b00      	cmp	r3, #0
     bf0:	d10f      	bne.n	c12 <CLS1_IterateTable+0x42>
    return ERR_FAILED;
     bf2:	231b      	movs	r3, #27
     bf4:	e012      	b.n	c1c <CLS1_IterateTable+0x4c>
  }
  /* iterate through all parser functions in table */
  while(*parserTable!=NULL) {
    if ((*parserTable)(cmd, handled, io)!=ERR_OK) {
     bf6:	683b      	ldr	r3, [r7, #0]
     bf8:	681b      	ldr	r3, [r3, #0]
     bfa:	687a      	ldr	r2, [r7, #4]
     bfc:	68b9      	ldr	r1, [r7, #8]
     bfe:	68f8      	ldr	r0, [r7, #12]
     c00:	4798      	blx	r3
     c02:	4603      	mov	r3, r0
     c04:	2b00      	cmp	r3, #0
     c06:	d001      	beq.n	c0c <CLS1_IterateTable+0x3c>
      res = ERR_FAILED;
     c08:	231b      	movs	r3, #27
     c0a:	75fb      	strb	r3, [r7, #23]
    }
    parserTable++;
     c0c:	683b      	ldr	r3, [r7, #0]
     c0e:	3304      	adds	r3, #4
     c10:	603b      	str	r3, [r7, #0]
  }
  if (io==NULL) { /* no IO handler??? */
    return ERR_FAILED;
  }
  /* iterate through all parser functions in table */
  while(*parserTable!=NULL) {
     c12:	683b      	ldr	r3, [r7, #0]
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	2b00      	cmp	r3, #0
     c18:	d1ed      	bne.n	bf6 <CLS1_IterateTable+0x26>
    if ((*parserTable)(cmd, handled, io)!=ERR_OK) {
      res = ERR_FAILED;
    }
    parserTable++;
  }
  return res;
     c1a:	7dfb      	ldrb	r3, [r7, #23]
}
     c1c:	4618      	mov	r0, r3
     c1e:	3718      	adds	r7, #24
     c20:	46bd      	mov	sp, r7
     c22:	bd80      	pop	{r7, pc}

00000c24 <CLS1_ParseWithCommandTable>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t CLS1_ParseWithCommandTable(const uint8_t *cmd, CLS1_ConstStdIOType *io, CLS1_ConstParseCommandCallback *parseCallback)
{
     c24:	b580      	push	{r7, lr}
     c26:	b086      	sub	sp, #24
     c28:	af00      	add	r7, sp, #0
     c2a:	60f8      	str	r0, [r7, #12]
     c2c:	60b9      	str	r1, [r7, #8]
     c2e:	607a      	str	r2, [r7, #4]
  uint8_t res = ERR_OK;
     c30:	2300      	movs	r3, #0
     c32:	75fb      	strb	r3, [r7, #23]
  bool handled;
#if CLS1_SILENT_PREFIX_CHAR_ENABLED
  bool silent = FALSE;
     c34:	2300      	movs	r3, #0
     c36:	75bb      	strb	r3, [r7, #22]
  uint8_t buf[CLS1_MULTI_CMD_SIZE];
  uint8_t i;
  bool parseBuffer, finished;
#endif

  if (io==NULL) { /* no I/O handler? */
     c38:	68bb      	ldr	r3, [r7, #8]
     c3a:	2b00      	cmp	r3, #0
     c3c:	d101      	bne.n	c42 <CLS1_ParseWithCommandTable+0x1e>
    return ERR_FAILED;
     c3e:	231b      	movs	r3, #27
     c40:	e031      	b.n	ca6 <CLS1_ParseWithCommandTable+0x82>
  }
  if (*cmd=='\0') { /* empty command */
     c42:	68fb      	ldr	r3, [r7, #12]
     c44:	781b      	ldrb	r3, [r3, #0]
     c46:	2b00      	cmp	r3, #0
     c48:	d101      	bne.n	c4e <CLS1_ParseWithCommandTable+0x2a>
    return ERR_OK;
     c4a:	2300      	movs	r3, #0
     c4c:	e02b      	b.n	ca6 <CLS1_ParseWithCommandTable+0x82>
      break; /* get out of loop */
    }
  } /* for */
#else
  #if CLS1_SILENT_PREFIX_CHAR_ENABLED
  silent = (bool)(*cmd==CLS1_SILENT_PREFIX_CHAR);
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	781b      	ldrb	r3, [r3, #0]
     c52:	2b23      	cmp	r3, #35	; 0x23
     c54:	bf0c      	ite	eq
     c56:	2301      	moveq	r3, #1
     c58:	2300      	movne	r3, #0
     c5a:	b2db      	uxtb	r3, r3
     c5c:	75bb      	strb	r3, [r7, #22]
  if (silent) {
     c5e:	7dbb      	ldrb	r3, [r7, #22]
     c60:	2b00      	cmp	r3, #0
     c62:	d002      	beq.n	c6a <CLS1_ParseWithCommandTable+0x46>
    cmd++; /* skip silent character */
     c64:	68fb      	ldr	r3, [r7, #12]
     c66:	3301      	adds	r3, #1
     c68:	60fb      	str	r3, [r7, #12]
  }
  #endif
  handled = FALSE;
     c6a:	2300      	movs	r3, #0
     c6c:	757b      	strb	r3, [r7, #21]
  res = CLS1_IterateTable(cmd, &handled, io, parseCallback); /* iterate through all parser functions in table */
     c6e:	f107 0115 	add.w	r1, r7, #21
     c72:	687b      	ldr	r3, [r7, #4]
     c74:	68ba      	ldr	r2, [r7, #8]
     c76:	68f8      	ldr	r0, [r7, #12]
     c78:	f7ff ffaa 	bl	bd0 <CLS1_IterateTable>
     c7c:	4603      	mov	r3, r0
     c7e:	75fb      	strb	r3, [r7, #23]
  if (!handled || res!=ERR_OK) { /* no handler has handled the command? */
     c80:	7d7b      	ldrb	r3, [r7, #21]
     c82:	2b00      	cmp	r3, #0
     c84:	d002      	beq.n	c8c <CLS1_ParseWithCommandTable+0x68>
     c86:	7dfb      	ldrb	r3, [r7, #23]
     c88:	2b00      	cmp	r3, #0
     c8a:	d005      	beq.n	c98 <CLS1_ParseWithCommandTable+0x74>
    CLS1_PrintCommandFailed(cmd, io);
     c8c:	68b9      	ldr	r1, [r7, #8]
     c8e:	68f8      	ldr	r0, [r7, #12]
     c90:	f7ff ff66 	bl	b60 <CLS1_PrintCommandFailed>
    res = ERR_FAILED;
     c94:	231b      	movs	r3, #27
     c96:	75fb      	strb	r3, [r7, #23]
  }
#endif
#if CLS1_SILENT_PREFIX_CHAR_ENABLED
  if (!silent) {
     c98:	7dbb      	ldrb	r3, [r7, #22]
     c9a:	2b00      	cmp	r3, #0
     c9c:	d102      	bne.n	ca4 <CLS1_ParseWithCommandTable+0x80>
    CLS1_PrintPrompt(io);
     c9e:	68b8      	ldr	r0, [r7, #8]
     ca0:	f7ff fea0 	bl	9e4 <CLS1_PrintPrompt>
  }
#else
  CLS1_PrintPrompt(io);
#endif
  return res;
     ca4:	7dfb      	ldrb	r3, [r7, #23]
}
     ca6:	4618      	mov	r0, r3
     ca8:	3718      	adds	r7, #24
     caa:	46bd      	mov	sp, r7
     cac:	bd80      	pop	{r7, pc}
     cae:	bf00      	nop

00000cb0 <CLS1_SetStdio>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t CLS1_SetStdio(CLS1_ConstStdIOTypePtr stdio)
{
     cb0:	b480      	push	{r7}
     cb2:	b083      	sub	sp, #12
     cb4:	af00      	add	r7, sp, #0
     cb6:	6078      	str	r0, [r7, #4]
  CLS1_currStdIO = stdio;
     cb8:	4a04      	ldr	r2, [pc, #16]	; (ccc <CLS1_SetStdio+0x1c>)
     cba:	687b      	ldr	r3, [r7, #4]
     cbc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
     cbe:	2300      	movs	r3, #0
}
     cc0:	4618      	mov	r0, r3
     cc2:	370c      	adds	r7, #12
     cc4:	46bd      	mov	sp, r7
     cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
     cca:	4770      	bx	lr
     ccc:	20000004 	.word	0x20000004

00000cd0 <CLS1_GetStdio>:
**     Returns     :
**         ---             - Pointer to the stdio descriptor
** ===================================================================
*/
CLS1_ConstStdIOTypePtr CLS1_GetStdio(void)
{
     cd0:	b480      	push	{r7}
     cd2:	af00      	add	r7, sp, #0
  return CLS1_currStdIO;
     cd4:	4b03      	ldr	r3, [pc, #12]	; (ce4 <CLS1_GetStdio+0x14>)
     cd6:	681b      	ldr	r3, [r3, #0]
}
     cd8:	4618      	mov	r0, r3
     cda:	46bd      	mov	sp, r7
     cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
     ce0:	4770      	bx	lr
     ce2:	bf00      	nop
     ce4:	20000004 	.word	0x20000004

00000ce8 <CLS1_ReadAndParseWithCommandTable>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t CLS1_ReadAndParseWithCommandTable(uint8_t *cmdBuf, size_t cmdBufSize, CLS1_ConstStdIOType *io, CLS1_ConstParseCommandCallback *parseCallback)
{
     ce8:	b580      	push	{r7, lr}
     cea:	b086      	sub	sp, #24
     cec:	af00      	add	r7, sp, #0
     cee:	60f8      	str	r0, [r7, #12]
     cf0:	60b9      	str	r1, [r7, #8]
     cf2:	607a      	str	r2, [r7, #4]
     cf4:	603b      	str	r3, [r7, #0]
  /* IMPORTANT NOTE: this function *appends* to the buffer, so the buffer needs to be initialized first! */
  uint8_t res = ERR_OK;
     cf6:	2300      	movs	r3, #0
     cf8:	75fb      	strb	r3, [r7, #23]
  size_t len;

  if (io==NULL) { /* no I/O handler? */
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	2b00      	cmp	r3, #0
     cfe:	d101      	bne.n	d04 <CLS1_ReadAndParseWithCommandTable+0x1c>
    return ERR_FAILED;
     d00:	231b      	movs	r3, #27
     d02:	e056      	b.n	db2 <CLS1_ReadAndParseWithCommandTable+0xca>
  }
  len = UTIL1_strlen((const char*)cmdBuf);
     d04:	68f8      	ldr	r0, [r7, #12]
     d06:	f00e febd 	bl	fa84 <strlen>
     d0a:	6138      	str	r0, [r7, #16]
  if (CLS1_ReadLine(cmdBuf, cmdBuf+len, cmdBufSize-len, io)) {
     d0c:	68fa      	ldr	r2, [r7, #12]
     d0e:	693b      	ldr	r3, [r7, #16]
     d10:	18d1      	adds	r1, r2, r3
     d12:	68ba      	ldr	r2, [r7, #8]
     d14:	693b      	ldr	r3, [r7, #16]
     d16:	1ad2      	subs	r2, r2, r3
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	68f8      	ldr	r0, [r7, #12]
     d1c:	f7ff fe84 	bl	a28 <CLS1_ReadLine>
     d20:	4603      	mov	r3, r0
     d22:	2b00      	cmp	r3, #0
     d24:	d044      	beq.n	db0 <CLS1_ReadAndParseWithCommandTable+0xc8>
    len = UTIL1_strlen((const char*)cmdBuf); /* length of buffer string */
     d26:	68f8      	ldr	r0, [r7, #12]
     d28:	f00e feac 	bl	fa84 <strlen>
     d2c:	6138      	str	r0, [r7, #16]
    if (len==0) { /* error case */
     d2e:	693b      	ldr	r3, [r7, #16]
     d30:	2b00      	cmp	r3, #0
     d32:	d101      	bne.n	d38 <CLS1_ReadAndParseWithCommandTable+0x50>
      return ERR_FAILED;
     d34:	231b      	movs	r3, #27
     d36:	e03c      	b.n	db2 <CLS1_ReadAndParseWithCommandTable+0xca>
    } else if (len==1 && (cmdBuf[0]=='\n' || cmdBuf[0]=='\r')) { /* eat preceding newline characters */
     d38:	693b      	ldr	r3, [r7, #16]
     d3a:	2b01      	cmp	r3, #1
     d3c:	d10a      	bne.n	d54 <CLS1_ReadAndParseWithCommandTable+0x6c>
     d3e:	68fb      	ldr	r3, [r7, #12]
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	2b0a      	cmp	r3, #10
     d44:	d003      	beq.n	d4e <CLS1_ReadAndParseWithCommandTable+0x66>
     d46:	68fb      	ldr	r3, [r7, #12]
     d48:	781b      	ldrb	r3, [r3, #0]
     d4a:	2b0d      	cmp	r3, #13
     d4c:	d102      	bne.n	d54 <CLS1_ReadAndParseWithCommandTable+0x6c>
      cmdBuf[0] = '\0';
     d4e:	68fb      	ldr	r3, [r7, #12]
     d50:	2200      	movs	r2, #0
     d52:	701a      	strb	r2, [r3, #0]
    }
    if (len>=cmdBufSize-1) {           /* buffer overflow? Parse what we have, will be likely return an error */
     d54:	68bb      	ldr	r3, [r7, #8]
     d56:	1e5a      	subs	r2, r3, #1
     d58:	693b      	ldr	r3, [r7, #16]
     d5a:	429a      	cmp	r2, r3
     d5c:	d80a      	bhi.n	d74 <CLS1_ReadAndParseWithCommandTable+0x8c>
      (void)CLS1_ParseWithCommandTable(cmdBuf, io, parseCallback);
     d5e:	683a      	ldr	r2, [r7, #0]
     d60:	6879      	ldr	r1, [r7, #4]
     d62:	68f8      	ldr	r0, [r7, #12]
     d64:	f7ff ff5e 	bl	c24 <CLS1_ParseWithCommandTable>
      cmdBuf[0] = '\0'; /* start again */
     d68:	68fb      	ldr	r3, [r7, #12]
     d6a:	2200      	movs	r2, #0
     d6c:	701a      	strb	r2, [r3, #0]
      res = ERR_OVERFLOW;
     d6e:	2304      	movs	r3, #4
     d70:	75fb      	strb	r3, [r7, #23]
     d72:	e01d      	b.n	db0 <CLS1_ReadAndParseWithCommandTable+0xc8>
    } else if (cmdBuf[len-1]=='\n' || cmdBuf[len-1]=='\r') { /* line end: parse command */
     d74:	693b      	ldr	r3, [r7, #16]
     d76:	3b01      	subs	r3, #1
     d78:	68fa      	ldr	r2, [r7, #12]
     d7a:	4413      	add	r3, r2
     d7c:	781b      	ldrb	r3, [r3, #0]
     d7e:	2b0a      	cmp	r3, #10
     d80:	d006      	beq.n	d90 <CLS1_ReadAndParseWithCommandTable+0xa8>
     d82:	693b      	ldr	r3, [r7, #16]
     d84:	3b01      	subs	r3, #1
     d86:	68fa      	ldr	r2, [r7, #12]
     d88:	4413      	add	r3, r2
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	2b0d      	cmp	r3, #13
     d8e:	d10f      	bne.n	db0 <CLS1_ReadAndParseWithCommandTable+0xc8>
      cmdBuf[len-1] = '\0';            /* remove line end character for parser */
     d90:	693b      	ldr	r3, [r7, #16]
     d92:	3b01      	subs	r3, #1
     d94:	68fa      	ldr	r2, [r7, #12]
     d96:	4413      	add	r3, r2
     d98:	2200      	movs	r2, #0
     d9a:	701a      	strb	r2, [r3, #0]
      res = CLS1_ParseWithCommandTable(cmdBuf, io, parseCallback);
     d9c:	683a      	ldr	r2, [r7, #0]
     d9e:	6879      	ldr	r1, [r7, #4]
     da0:	68f8      	ldr	r0, [r7, #12]
     da2:	f7ff ff3f 	bl	c24 <CLS1_ParseWithCommandTable>
     da6:	4603      	mov	r3, r0
     da8:	75fb      	strb	r3, [r7, #23]
      cmdBuf[0] = '\0';                /* start again */
     daa:	68fb      	ldr	r3, [r7, #12]
     dac:	2200      	movs	r2, #0
     dae:	701a      	strb	r2, [r3, #0]
    } else {
      /* continue to append to buffer */
    }
  }
  return res;
     db0:	7dfb      	ldrb	r3, [r7, #23]
}
     db2:	4618      	mov	r0, r3
     db4:	3718      	adds	r7, #24
     db6:	46bd      	mov	sp, r7
     db8:	bd80      	pop	{r7, pc}
     dba:	bf00      	nop

00000dbc <CLS1_RequestSerial>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_RequestSerial(void)
{
     dbc:	b480      	push	{r7}
     dbe:	af00      	add	r7, sp, #0
}
     dc0:	bf00      	nop
     dc2:	46bd      	mov	sp, r7
     dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
     dc8:	4770      	bx	lr
     dca:	bf00      	nop

00000dcc <CLS1_ReleaseSerial>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_ReleaseSerial(void)
{
     dcc:	b480      	push	{r7}
     dce:	af00      	add	r7, sp, #0
}
     dd0:	bf00      	nop
     dd2:	46bd      	mov	sp, r7
     dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
     dd8:	4770      	bx	lr
     dda:	bf00      	nop

00000ddc <CLS1_GetSemaphore>:
**         ---             - semaphore, or NULL if not used or not
**                           allocated.
** ===================================================================
*/
void* CLS1_GetSemaphore(void)
{
     ddc:	b480      	push	{r7}
     dde:	af00      	add	r7, sp, #0
  return NULL;
     de0:	2300      	movs	r3, #0
}
     de2:	4618      	mov	r0, r3
     de4:	46bd      	mov	sp, r7
     de6:	f85d 7b04 	ldr.w	r7, [sp], #4
     dea:	4770      	bx	lr

00000dec <SendSeparatedStrings>:
**         command
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void SendSeparatedStrings(const uint8_t *strA, const uint8_t *strB, uint8_t tabChar, uint8_t tabPos, CLS1_StdIO_OutErr_FctType io)
{
     dec:	b580      	push	{r7, lr}
     dee:	b084      	sub	sp, #16
     df0:	af00      	add	r7, sp, #0
     df2:	60f8      	str	r0, [r7, #12]
     df4:	60b9      	str	r1, [r7, #8]
     df6:	4611      	mov	r1, r2
     df8:	461a      	mov	r2, r3
     dfa:	460b      	mov	r3, r1
     dfc:	71fb      	strb	r3, [r7, #7]
     dfe:	4613      	mov	r3, r2
     e00:	71bb      	strb	r3, [r7, #6]
  /* write command part */
  while(*strA!='\0' && tabPos>0) {
     e02:	e009      	b.n	e18 <SendSeparatedStrings+0x2c>
    io(*strA++);
     e04:	68fb      	ldr	r3, [r7, #12]
     e06:	1c5a      	adds	r2, r3, #1
     e08:	60fa      	str	r2, [r7, #12]
     e0a:	781a      	ldrb	r2, [r3, #0]
     e0c:	69bb      	ldr	r3, [r7, #24]
     e0e:	4610      	mov	r0, r2
     e10:	4798      	blx	r3
    tabPos--;
     e12:	79bb      	ldrb	r3, [r7, #6]
     e14:	3b01      	subs	r3, #1
     e16:	71bb      	strb	r3, [r7, #6]
** ===================================================================
*/
static void SendSeparatedStrings(const uint8_t *strA, const uint8_t *strB, uint8_t tabChar, uint8_t tabPos, CLS1_StdIO_OutErr_FctType io)
{
  /* write command part */
  while(*strA!='\0' && tabPos>0) {
     e18:	68fb      	ldr	r3, [r7, #12]
     e1a:	781b      	ldrb	r3, [r3, #0]
     e1c:	2b00      	cmp	r3, #0
     e1e:	d009      	beq.n	e34 <SendSeparatedStrings+0x48>
     e20:	79bb      	ldrb	r3, [r7, #6]
     e22:	2b00      	cmp	r3, #0
     e24:	d1ee      	bne.n	e04 <SendSeparatedStrings+0x18>
    io(*strA++);
    tabPos--;
  }
  /* fill up until ';' */
  while(tabPos>0) {
     e26:	e005      	b.n	e34 <SendSeparatedStrings+0x48>
    io(' ');
     e28:	69bb      	ldr	r3, [r7, #24]
     e2a:	2020      	movs	r0, #32
     e2c:	4798      	blx	r3
    tabPos--;
     e2e:	79bb      	ldrb	r3, [r7, #6]
     e30:	3b01      	subs	r3, #1
     e32:	71bb      	strb	r3, [r7, #6]
  while(*strA!='\0' && tabPos>0) {
    io(*strA++);
    tabPos--;
  }
  /* fill up until ';' */
  while(tabPos>0) {
     e34:	79bb      	ldrb	r3, [r7, #6]
     e36:	2b00      	cmp	r3, #0
     e38:	d1f6      	bne.n	e28 <SendSeparatedStrings+0x3c>
    io(' ');
    tabPos--;
  }
  /* write separator */
  io(tabChar);
     e3a:	79fa      	ldrb	r2, [r7, #7]
     e3c:	69bb      	ldr	r3, [r7, #24]
     e3e:	4610      	mov	r0, r2
     e40:	4798      	blx	r3
  io(' ');
     e42:	69bb      	ldr	r3, [r7, #24]
     e44:	2020      	movs	r0, #32
     e46:	4798      	blx	r3
  /* write help text */
  CLS1_SendStr(strB, io);
     e48:	69b9      	ldr	r1, [r7, #24]
     e4a:	68b8      	ldr	r0, [r7, #8]
     e4c:	f7ff fca6 	bl	79c <CLS1_SendStr>
}
     e50:	bf00      	nop
     e52:	3710      	adds	r7, #16
     e54:	46bd      	mov	sp, r7
     e56:	bd80      	pop	{r7, pc}

00000e58 <CLS1_SendHelpStr>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendHelpStr(const uint8_t *strCmd, const uint8_t *strHelp, CLS1_StdIO_OutErr_FctType io)
{
     e58:	b580      	push	{r7, lr}
     e5a:	b086      	sub	sp, #24
     e5c:	af02      	add	r7, sp, #8
     e5e:	60f8      	str	r0, [r7, #12]
     e60:	60b9      	str	r1, [r7, #8]
     e62:	607a      	str	r2, [r7, #4]
  #define HELP_SEMICOLON_POS  26 /* position of the ';' after the command string */
  SendSeparatedStrings(strCmd, strHelp, ';', HELP_SEMICOLON_POS, io);
     e64:	687b      	ldr	r3, [r7, #4]
     e66:	9300      	str	r3, [sp, #0]
     e68:	231a      	movs	r3, #26
     e6a:	223b      	movs	r2, #59	; 0x3b
     e6c:	68b9      	ldr	r1, [r7, #8]
     e6e:	68f8      	ldr	r0, [r7, #12]
     e70:	f7ff ffbc 	bl	dec <SendSeparatedStrings>
}
     e74:	bf00      	nop
     e76:	3710      	adds	r7, #16
     e78:	46bd      	mov	sp, r7
     e7a:	bd80      	pop	{r7, pc}

00000e7c <CLS1_SendStatusStr>:
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendStatusStr(const uint8_t *strItem, const uint8_t *strStatus, CLS1_StdIO_OutErr_FctType io)
{
     e7c:	b580      	push	{r7, lr}
     e7e:	b086      	sub	sp, #24
     e80:	af02      	add	r7, sp, #8
     e82:	60f8      	str	r0, [r7, #12]
     e84:	60b9      	str	r1, [r7, #8]
     e86:	607a      	str	r2, [r7, #4]
  #define STATUS_COLON_POS  13 /* position of the ':' after the item string */
  SendSeparatedStrings(strItem, strStatus, ':', STATUS_COLON_POS, io);
     e88:	687b      	ldr	r3, [r7, #4]
     e8a:	9300      	str	r3, [sp, #0]
     e8c:	230d      	movs	r3, #13
     e8e:	223a      	movs	r2, #58	; 0x3a
     e90:	68b9      	ldr	r1, [r7, #8]
     e92:	68f8      	ldr	r0, [r7, #12]
     e94:	f7ff ffaa 	bl	dec <SendSeparatedStrings>
}
     e98:	bf00      	nop
     e9a:	3710      	adds	r7, #16
     e9c:	46bd      	mov	sp, r7
     e9e:	bd80      	pop	{r7, pc}

00000ea0 <CLS1_ReadChar>:
**                           result
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_ReadChar(uint8_t *c)
{
     ea0:	b580      	push	{r7, lr}
     ea2:	b084      	sub	sp, #16
     ea4:	af00      	add	r7, sp, #0
     ea6:	6078      	str	r0, [r7, #4]
  uint8_t res;

  res = RTT1_RecvChar((uint8_t*)c);
     ea8:	6878      	ldr	r0, [r7, #4]
     eaa:	f000 fa21 	bl	12f0 <RTT1_RecvChar>
     eae:	4603      	mov	r3, r0
     eb0:	73fb      	strb	r3, [r7, #15]
  if (res==ERR_RXEMPTY) {
     eb2:	7bfb      	ldrb	r3, [r7, #15]
     eb4:	2b0a      	cmp	r3, #10
     eb6:	d102      	bne.n	ebe <CLS1_ReadChar+0x1e>
    /* no character in buffer */
    *c = '\0';
     eb8:	687b      	ldr	r3, [r7, #4]
     eba:	2200      	movs	r2, #0
     ebc:	701a      	strb	r2, [r3, #0]
  }
}
     ebe:	bf00      	nop
     ec0:	3710      	adds	r7, #16
     ec2:	46bd      	mov	sp, r7
     ec4:	bd80      	pop	{r7, pc}
     ec6:	bf00      	nop

00000ec8 <CLS1_SendChar>:
**         ch              - character to be sent
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_SendChar(uint8_t ch)
{
     ec8:	b580      	push	{r7, lr}
     eca:	b084      	sub	sp, #16
     ecc:	af00      	add	r7, sp, #0
     ece:	4603      	mov	r3, r0
     ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t res;
  int timeoutMs = 20;
     ed2:	2314      	movs	r3, #20
     ed4:	60fb      	str	r3, [r7, #12]


  do {
    res = RTT1_SendChar((uint8_t)ch);  /* Send char */
     ed6:	79fb      	ldrb	r3, [r7, #7]
     ed8:	4618      	mov	r0, r3
     eda:	f000 fa1f 	bl	131c <RTT1_SendChar>
     ede:	4603      	mov	r3, r0
     ee0:	72fb      	strb	r3, [r7, #11]
    if (res==ERR_TXFULL) {
     ee2:	7afb      	ldrb	r3, [r7, #11]
     ee4:	2b0b      	cmp	r3, #11
     ee6:	d102      	bne.n	eee <CLS1_SendChar+0x26>
      WAIT1_WaitOSms(5);
     ee8:	2000      	movs	r0, #0
     eea:	f009 fe2d 	bl	ab48 <vTaskDelay>
    }
    if(timeoutMs<=0) {
     eee:	68fb      	ldr	r3, [r7, #12]
     ef0:	2b00      	cmp	r3, #0
     ef2:	dd06      	ble.n	f02 <CLS1_SendChar+0x3a>
      break; /* timeout */
    }
    timeoutMs -= 5;
     ef4:	68fb      	ldr	r3, [r7, #12]
     ef6:	3b05      	subs	r3, #5
     ef8:	60fb      	str	r3, [r7, #12]
  } while(res==ERR_TXFULL);
     efa:	7afb      	ldrb	r3, [r7, #11]
     efc:	2b0b      	cmp	r3, #11
     efe:	d0ea      	beq.n	ed6 <CLS1_SendChar+0xe>
}
     f00:	e000      	b.n	f04 <CLS1_SendChar+0x3c>
    res = RTT1_SendChar((uint8_t)ch);  /* Send char */
    if (res==ERR_TXFULL) {
      WAIT1_WaitOSms(5);
    }
    if(timeoutMs<=0) {
      break; /* timeout */
     f02:	bf00      	nop
    }
    timeoutMs -= 5;
  } while(res==ERR_TXFULL);
}
     f04:	bf00      	nop
     f06:	3710      	adds	r7, #16
     f08:	46bd      	mov	sp, r7
     f0a:	bd80      	pop	{r7, pc}

00000f0c <CLS1_KeyPressed>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
bool CLS1_KeyPressed(void)
{
     f0c:	b580      	push	{r7, lr}
     f0e:	b082      	sub	sp, #8
     f10:	af00      	add	r7, sp, #0
  bool res;

  res = (bool)((RTT1_GetCharsInRxBuf()==0U) ? FALSE : TRUE); /* true if there are characters in receive buffer */
     f12:	f000 fdeb 	bl	1aec <SEGGER_RTT_HasKey>
     f16:	4603      	mov	r3, r0
     f18:	2b00      	cmp	r3, #0
     f1a:	bf14      	ite	ne
     f1c:	2301      	movne	r3, #1
     f1e:	2300      	moveq	r3, #0
     f20:	b2db      	uxtb	r3, r3
     f22:	71fb      	strb	r3, [r7, #7]
  return res;
     f24:	79fb      	ldrb	r3, [r7, #7]
}
     f26:	4618      	mov	r0, r3
     f28:	3708      	adds	r7, #8
     f2a:	46bd      	mov	sp, r7
     f2c:	bd80      	pop	{r7, pc}
     f2e:	bf00      	nop

00000f30 <CLS1_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_Init(void)
{
     f30:	b480      	push	{r7}
     f32:	af00      	add	r7, sp, #0
  }
#endif
#if CLS1_ECHO_ENABLED
  CLS1_EchoEnabled = TRUE;
#endif
}
     f34:	bf00      	nop
     f36:	46bd      	mov	sp, r7
     f38:	f85d 7b04 	ldr.w	r7, [sp], #4
     f3c:	4770      	bx	lr
     f3e:	bf00      	nop

00000f40 <CLS1_Deinit>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void CLS1_Deinit(void)
{
     f40:	b480      	push	{r7}
     f42:	af00      	add	r7, sp, #0
}
     f44:	bf00      	nop
     f46:	46bd      	mov	sp, r7
     f48:	f85d 7b04 	ldr.w	r7, [sp], #4
     f4c:	4770      	bx	lr
     f4e:	bf00      	nop

00000f50 <CLS1_SendData>:
 * \brief Sends data using I/O callbacks
 * \param[in] data Pointer to data to be sent
 * \param[in] io I/O function to be used for sending
 */
void CLS1_SendData(const uint8_t *data, uint16_t dataSize, CLS1_StdIO_OutErr_FctType io)
{
     f50:	b580      	push	{r7, lr}
     f52:	b084      	sub	sp, #16
     f54:	af00      	add	r7, sp, #0
     f56:	60f8      	str	r0, [r7, #12]
     f58:	460b      	mov	r3, r1
     f5a:	607a      	str	r2, [r7, #4]
     f5c:	817b      	strh	r3, [r7, #10]
  while(dataSize>0) {
     f5e:	e009      	b.n	f74 <CLS1_SendData+0x24>
    io(*data++);
     f60:	68fb      	ldr	r3, [r7, #12]
     f62:	1c5a      	adds	r2, r3, #1
     f64:	60fa      	str	r2, [r7, #12]
     f66:	781a      	ldrb	r2, [r3, #0]
     f68:	687b      	ldr	r3, [r7, #4]
     f6a:	4610      	mov	r0, r2
     f6c:	4798      	blx	r3
    dataSize--;
     f6e:	897b      	ldrh	r3, [r7, #10]
     f70:	3b01      	subs	r3, #1
     f72:	817b      	strh	r3, [r7, #10]
 * \param[in] data Pointer to data to be sent
 * \param[in] io I/O function to be used for sending
 */
void CLS1_SendData(const uint8_t *data, uint16_t dataSize, CLS1_StdIO_OutErr_FctType io)
{
  while(dataSize>0) {
     f74:	897b      	ldrh	r3, [r7, #10]
     f76:	2b00      	cmp	r3, #0
     f78:	d1f2      	bne.n	f60 <CLS1_SendData+0x10>
    io(*data++);
    dataSize--;
  }
}
     f7a:	bf00      	nop
     f7c:	3710      	adds	r7, #16
     f7e:	46bd      	mov	sp, r7
     f80:	bd80      	pop	{r7, pc}
     f82:	bf00      	nop

00000f84 <CLS1_printfPutChar>:
**         Helper routine for printf
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void CLS1_printfPutChar(void *arg, char c)
{
     f84:	b580      	push	{r7, lr}
     f86:	b084      	sub	sp, #16
     f88:	af00      	add	r7, sp, #0
     f8a:	6078      	str	r0, [r7, #4]
     f8c:	460b      	mov	r3, r1
     f8e:	70fb      	strb	r3, [r7, #3]
  CLS1_StdIO_OutErr_FctType fct = (CLS1_StdIO_OutErr_FctType)arg;
     f90:	687b      	ldr	r3, [r7, #4]
     f92:	60fb      	str	r3, [r7, #12]

  fct(c); /* print character */
     f94:	78fa      	ldrb	r2, [r7, #3]
     f96:	68fb      	ldr	r3, [r7, #12]
     f98:	4610      	mov	r0, r2
     f9a:	4798      	blx	r3
}
     f9c:	bf00      	nop
     f9e:	3710      	adds	r7, #16
     fa0:	46bd      	mov	sp, r7
     fa2:	bd80      	pop	{r7, pc}

00000fa4 <CLS1_printfIO>:
**     Returns     :
**         ---             - number of characters written
** ===================================================================
*/
unsigned CLS1_printfIO(CLS1_ConstStdIOType *io, const char *fmt, ...)
{
     fa4:	b40e      	push	{r1, r2, r3}
     fa6:	b580      	push	{r7, lr}
     fa8:	b085      	sub	sp, #20
     faa:	af00      	add	r7, sp, #0
     fac:	6078      	str	r0, [r7, #4]
  va_list args;
  unsigned int count = 0;
     fae:	2300      	movs	r3, #0
     fb0:	60fb      	str	r3, [r7, #12]

  va_start(args,fmt);
     fb2:	f107 0320 	add.w	r3, r7, #32
     fb6:	60bb      	str	r3, [r7, #8]
  count = XF1_xvformat(CLS1_printfPutChar, (void*)io->stdOut, fmt, args);
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	6859      	ldr	r1, [r3, #4]
     fbc:	68bb      	ldr	r3, [r7, #8]
     fbe:	69fa      	ldr	r2, [r7, #28]
     fc0:	4805      	ldr	r0, [pc, #20]	; (fd8 <CLS1_printfIO+0x34>)
     fc2:	f006 ffe9 	bl	7f98 <XF1_xvformat>
     fc6:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return count;
     fc8:	68fb      	ldr	r3, [r7, #12]
}
     fca:	4618      	mov	r0, r3
     fcc:	3714      	adds	r7, #20
     fce:	46bd      	mov	sp, r7
     fd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
     fd4:	b003      	add	sp, #12
     fd6:	4770      	bx	lr
     fd8:	00000f85 	.word	0x00000f85

00000fdc <CLS1_printf>:
**     Returns     :
**         ---             - number of characters written
** ===================================================================
*/
unsigned CLS1_printf(const char *fmt, ...)
{
     fdc:	b40f      	push	{r0, r1, r2, r3}
     fde:	b580      	push	{r7, lr}
     fe0:	b082      	sub	sp, #8
     fe2:	af00      	add	r7, sp, #0
  va_list args;
  unsigned int count = 0;
     fe4:	2300      	movs	r3, #0
     fe6:	607b      	str	r3, [r7, #4]

  va_start(args,fmt);
     fe8:	f107 0314 	add.w	r3, r7, #20
     fec:	603b      	str	r3, [r7, #0]
  count = XF1_xvformat(CLS1_printfPutChar, (void*)CLS1_GetStdio()->stdOut, fmt, args);
     fee:	f7ff fe6f 	bl	cd0 <CLS1_GetStdio>
     ff2:	4603      	mov	r3, r0
     ff4:	6859      	ldr	r1, [r3, #4]
     ff6:	683b      	ldr	r3, [r7, #0]
     ff8:	693a      	ldr	r2, [r7, #16]
     ffa:	4806      	ldr	r0, [pc, #24]	; (1014 <malloc_getpagesize_P+0x14>)
     ffc:	f006 ffcc 	bl	7f98 <XF1_xvformat>
    1000:	6078      	str	r0, [r7, #4]
  va_end(args);
  return count;
    1002:	687b      	ldr	r3, [r7, #4]
}
    1004:	4618      	mov	r0, r3
    1006:	3708      	adds	r7, #8
    1008:	46bd      	mov	sp, r7
    100a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    100e:	b004      	add	sp, #16
    1010:	4770      	bx	lr
    1012:	bf00      	nop
    1014:	00000f85 	.word	0x00000f85

00001018 <Components_Init>:
**     Returns     : Nothing
** ===================================================================
*/
#if CPU_COMPONENTS_INIT
void Components_Init(void)
{
    1018:	b580      	push	{r7, lr}
    101a:	af00      	add	r7, sp, #0
  /* ### McuLibConfig "MCUC1" init code ... */
  /* ### XFormat "XF1" init code ... */
  /* ### CriticalSection "CS1" init code ... */
  /* ### Shell "CLS1" init code ... */
  CLS1_Init(); /* initialize shell */
    101c:	f7ff ff88 	bl	f30 <CLS1_Init>
  /* ### SeggerRTT "RTT1" init code ... */
  RTT1_Init();
    1020:	f000 f99c 	bl	135c <RTT1_Init>
  /* ### FreeRTOS "FRTOS1" init code ... */
#if configSYSTICK_USE_LOW_POWER_TIMER
  /* enable clocking for low power timer, otherwise vPortStopTickTimer() will crash */
  SIM_PDD_SetClockGate(SIM_BASE_PTR, SIM_PDD_CLOCK_GATE_LPTMR0, PDD_ENABLE);
#endif
  vPortStopTickTimer(); /* tick timer shall not run until the RTOS scheduler is started */
    1024:	f008 f874 	bl	9110 <vPortStopTickTimer>
  /* ### BitIO_LDD "BitIoLdd1" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd1_Init(NULL);
    1028:	2000      	movs	r0, #0
    102a:	f7ff fa11 	bl	450 <BitIoLdd1_Init>
  /* ### LED "LED_Blue" init code ... */
  LED_Blue_Init(); /* initialize LED driver */
    102e:	f000 f835 	bl	109c <LED_Blue_Init>
  /* ### BitIO_LDD "BitIoLdd2" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd2_Init(NULL);
    1032:	2000      	movs	r0, #0
    1034:	f7ff fa94 	bl	560 <BitIoLdd2_Init>
  /* ### LED "LED_Red" init code ... */
  LED_Red_Init(); /* initialize LED driver */
    1038:	f000 f890 	bl	115c <LED_Red_Init>
  /* ### BitIO_LDD "BitIoLdd3" component auto initialization. Auto initialization feature can be disabled by component property "Auto initialization". */
  (void)BitIoLdd3_Init(NULL);
    103c:	2000      	movs	r0, #0
    103e:	f7ff fb17 	bl	670 <BitIoLdd3_Init>
  /* ### LED "LED_Green" init code ... */
  LED_Green_Init(); /* initialize LED driver */
    1042:	f000 f85b 	bl	10fc <LED_Green_Init>
  /* ### SeggerSystemView "SYS1" init code ... */
  SYS1_Init();
    1046:	f004 ff37 	bl	5eb8 <SYS1_Init>
}
    104a:	bf00      	nop
    104c:	bd80      	pop	{r7, pc}
    104e:	bf00      	nop

00001050 <Cpu_INT_NMIInterrupt>:
**         This ISR services the Non Maskable Interrupt interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Cpu_INT_NMIInterrupt)
{
    1050:	4668      	mov	r0, sp
    1052:	f020 0107 	bic.w	r1, r0, #7
    1056:	468d      	mov	sp, r1
    1058:	b589      	push	{r0, r3, r7, lr}
    105a:	af00      	add	r7, sp, #0
  Cpu_OnNMI();
    105c:	f00d fa66 	bl	e52c <Cpu_OnNMI>
}
    1060:	bf00      	nop
    1062:	46bd      	mov	sp, r7
    1064:	e8bd 4089 	ldmia.w	sp!, {r0, r3, r7, lr}
    1068:	4685      	mov	sp, r0
    106a:	4770      	bx	lr

0000106c <FRTOS1_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void FRTOS1_Init(void)
{
    106c:	b580      	push	{r7, lr}
    106e:	af00      	add	r7, sp, #0
  vPortInitTickTimer();
    1070:	f008 f81e 	bl	90b0 <vPortInitTickTimer>
  vPortStopTickTimer();
    1074:	f008 f84c 	bl	9110 <vPortStopTickTimer>
}
    1078:	bf00      	nop
    107a:	bd80      	pop	{r7, pc}

0000107c <FRTOS1_Deinit>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void FRTOS1_Deinit(void)
{
    107c:	b480      	push	{r7}
    107e:	af00      	add	r7, sp, #0
  /* nothing needed */
}
    1080:	bf00      	nop
    1082:	46bd      	mov	sp, r7
    1084:	f85d 7b04 	ldr.w	r7, [sp], #4
    1088:	4770      	bx	lr
    108a:	bf00      	nop

0000108c <FRTOS1_AppGetRuntimeCounterValueFromISR>:
**     Returns     :
**         ---             - runtime counter value
** ===================================================================
*/
uint32_t FRTOS1_AppGetRuntimeCounterValueFromISR(void)
{
    108c:	b480      	push	{r7}
    108e:	af00      	add	r7, sp, #0
  return xTaskGetTickCountFromISR(); /* using RTOS tick counter */
  #else /* using timer counter */
  return FRTOS1_RunTimeCounter;
  #endif
#else
  return 0; /* dummy value */
    1090:	2300      	movs	r3, #0
#endif
}
    1092:	4618      	mov	r0, r3
    1094:	46bd      	mov	sp, r7
    1096:	f85d 7b04 	ldr.w	r7, [sp], #4
    109a:	4770      	bx	lr

0000109c <LED_Blue_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void LED_Blue_Init(void)
{
    109c:	b580      	push	{r7, lr}
    109e:	af00      	add	r7, sp, #0
#if MCUC1_CONFIG_SDK_VERSION_USED != MCUC1_CONFIG_SDK_PROCESSOR_EXPERT
  LEDpin1_Init();
#endif
  LED_Blue_Off();
    10a0:	4b03      	ldr	r3, [pc, #12]	; (10b0 <LED_Blue_Init+0x14>)
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	4618      	mov	r0, r3
    10a6:	f7ff fa3b 	bl	520 <BitIoLdd1_SetVal>
}
    10aa:	bf00      	nop
    10ac:	bd80      	pop	{r7, pc}
    10ae:	bf00      	nop
    10b0:	20000068 	.word	0x20000068

000010b4 <LED_Blue_Deinit>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void LED_Blue_Deinit(void)
{
    10b4:	b480      	push	{r7}
    10b6:	af00      	add	r7, sp, #0
#if MCUC1_CONFIG_SDK_VERSION_USED != MCUC1_CONFIG_SDK_PROCESSOR_EXPERT
  LEDpin1_Deinit();
#endif
}
    10b8:	bf00      	nop
    10ba:	46bd      	mov	sp, r7
    10bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c0:	4770      	bx	lr
    10c2:	bf00      	nop

000010c4 <LED_Blue_SetRatio16>:
**                           0xffff means 'on'
**     Returns     : Nothing
** ===================================================================
*/
void LED_Blue_SetRatio16(uint16_t ratio)
{
    10c4:	b580      	push	{r7, lr}
    10c6:	b082      	sub	sp, #8
    10c8:	af00      	add	r7, sp, #0
    10ca:	4603      	mov	r3, r0
    10cc:	80fb      	strh	r3, [r7, #6]
  /* on/off LED: binary on or off */
  if (ratio<(0xffff/2)) {
    10ce:	88fb      	ldrh	r3, [r7, #6]
    10d0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    10d4:	4293      	cmp	r3, r2
    10d6:	d805      	bhi.n	10e4 <LED_Blue_SetRatio16+0x20>
    LED_Blue_Off();
    10d8:	4b07      	ldr	r3, [pc, #28]	; (10f8 <LED_Blue_SetRatio16+0x34>)
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	4618      	mov	r0, r3
    10de:	f7ff fa1f 	bl	520 <BitIoLdd1_SetVal>
  } else {
    LED_Blue_On();
  }
}
    10e2:	e004      	b.n	10ee <LED_Blue_SetRatio16+0x2a>
{
  /* on/off LED: binary on or off */
  if (ratio<(0xffff/2)) {
    LED_Blue_Off();
  } else {
    LED_Blue_On();
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <LED_Blue_SetRatio16+0x34>)
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	4618      	mov	r0, r3
    10ea:	f7ff fa09 	bl	500 <BitIoLdd1_ClrVal>
  }
}
    10ee:	bf00      	nop
    10f0:	3708      	adds	r7, #8
    10f2:	46bd      	mov	sp, r7
    10f4:	bd80      	pop	{r7, pc}
    10f6:	bf00      	nop
    10f8:	20000068 	.word	0x20000068

000010fc <LED_Green_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void LED_Green_Init(void)
{
    10fc:	b580      	push	{r7, lr}
    10fe:	af00      	add	r7, sp, #0
#if MCUC1_CONFIG_SDK_VERSION_USED != MCUC1_CONFIG_SDK_PROCESSOR_EXPERT
  LEDpin3_Init();
#endif
  LED_Green_Off();
    1100:	4b03      	ldr	r3, [pc, #12]	; (1110 <LED_Green_Init+0x14>)
    1102:	689b      	ldr	r3, [r3, #8]
    1104:	4618      	mov	r0, r3
    1106:	f7ff fb1b 	bl	740 <BitIoLdd3_SetVal>
}
    110a:	bf00      	nop
    110c:	bd80      	pop	{r7, pc}
    110e:	bf00      	nop
    1110:	20000068 	.word	0x20000068

00001114 <LED_Green_Deinit>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void LED_Green_Deinit(void)
{
    1114:	b480      	push	{r7}
    1116:	af00      	add	r7, sp, #0
#if MCUC1_CONFIG_SDK_VERSION_USED != MCUC1_CONFIG_SDK_PROCESSOR_EXPERT
  LEDpin3_Deinit();
#endif
}
    1118:	bf00      	nop
    111a:	46bd      	mov	sp, r7
    111c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1120:	4770      	bx	lr
    1122:	bf00      	nop

00001124 <LED_Green_SetRatio16>:
**                           0xffff means 'on'
**     Returns     : Nothing
** ===================================================================
*/
void LED_Green_SetRatio16(uint16_t ratio)
{
    1124:	b580      	push	{r7, lr}
    1126:	b082      	sub	sp, #8
    1128:	af00      	add	r7, sp, #0
    112a:	4603      	mov	r3, r0
    112c:	80fb      	strh	r3, [r7, #6]
  /* on/off LED: binary on or off */
  if (ratio<(0xffff/2)) {
    112e:	88fb      	ldrh	r3, [r7, #6]
    1130:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    1134:	4293      	cmp	r3, r2
    1136:	d805      	bhi.n	1144 <LED_Green_SetRatio16+0x20>
    LED_Green_Off();
    1138:	4b07      	ldr	r3, [pc, #28]	; (1158 <LED_Green_SetRatio16+0x34>)
    113a:	689b      	ldr	r3, [r3, #8]
    113c:	4618      	mov	r0, r3
    113e:	f7ff faff 	bl	740 <BitIoLdd3_SetVal>
  } else {
    LED_Green_On();
  }
}
    1142:	e004      	b.n	114e <LED_Green_SetRatio16+0x2a>
{
  /* on/off LED: binary on or off */
  if (ratio<(0xffff/2)) {
    LED_Green_Off();
  } else {
    LED_Green_On();
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <LED_Green_SetRatio16+0x34>)
    1146:	689b      	ldr	r3, [r3, #8]
    1148:	4618      	mov	r0, r3
    114a:	f7ff fae9 	bl	720 <BitIoLdd3_ClrVal>
  }
}
    114e:	bf00      	nop
    1150:	3708      	adds	r7, #8
    1152:	46bd      	mov	sp, r7
    1154:	bd80      	pop	{r7, pc}
    1156:	bf00      	nop
    1158:	20000068 	.word	0x20000068

0000115c <LED_Red_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void LED_Red_Init(void)
{
    115c:	b580      	push	{r7, lr}
    115e:	af00      	add	r7, sp, #0
#if MCUC1_CONFIG_SDK_VERSION_USED != MCUC1_CONFIG_SDK_PROCESSOR_EXPERT
  LEDpin2_Init();
#endif
  LED_Red_Off();
    1160:	4b03      	ldr	r3, [pc, #12]	; (1170 <LED_Red_Init+0x14>)
    1162:	685b      	ldr	r3, [r3, #4]
    1164:	4618      	mov	r0, r3
    1166:	f7ff fa63 	bl	630 <BitIoLdd2_SetVal>
}
    116a:	bf00      	nop
    116c:	bd80      	pop	{r7, pc}
    116e:	bf00      	nop
    1170:	20000068 	.word	0x20000068

00001174 <LED_Red_Deinit>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void LED_Red_Deinit(void)
{
    1174:	b480      	push	{r7}
    1176:	af00      	add	r7, sp, #0
#if MCUC1_CONFIG_SDK_VERSION_USED != MCUC1_CONFIG_SDK_PROCESSOR_EXPERT
  LEDpin2_Deinit();
#endif
}
    1178:	bf00      	nop
    117a:	46bd      	mov	sp, r7
    117c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1180:	4770      	bx	lr
    1182:	bf00      	nop

00001184 <LED_Red_SetRatio16>:
**                           0xffff means 'on'
**     Returns     : Nothing
** ===================================================================
*/
void LED_Red_SetRatio16(uint16_t ratio)
{
    1184:	b580      	push	{r7, lr}
    1186:	b082      	sub	sp, #8
    1188:	af00      	add	r7, sp, #0
    118a:	4603      	mov	r3, r0
    118c:	80fb      	strh	r3, [r7, #6]
  /* on/off LED: binary on or off */
  if (ratio<(0xffff/2)) {
    118e:	88fb      	ldrh	r3, [r7, #6]
    1190:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    1194:	4293      	cmp	r3, r2
    1196:	d805      	bhi.n	11a4 <LED_Red_SetRatio16+0x20>
    LED_Red_Off();
    1198:	4b07      	ldr	r3, [pc, #28]	; (11b8 <LED_Red_SetRatio16+0x34>)
    119a:	685b      	ldr	r3, [r3, #4]
    119c:	4618      	mov	r0, r3
    119e:	f7ff fa47 	bl	630 <BitIoLdd2_SetVal>
  } else {
    LED_Red_On();
  }
}
    11a2:	e004      	b.n	11ae <LED_Red_SetRatio16+0x2a>
{
  /* on/off LED: binary on or off */
  if (ratio<(0xffff/2)) {
    LED_Red_Off();
  } else {
    LED_Red_On();
    11a4:	4b04      	ldr	r3, [pc, #16]	; (11b8 <LED_Red_SetRatio16+0x34>)
    11a6:	685b      	ldr	r3, [r3, #4]
    11a8:	4618      	mov	r0, r3
    11aa:	f7ff fa31 	bl	610 <BitIoLdd2_ClrVal>
  }
}
    11ae:	bf00      	nop
    11b0:	3708      	adds	r7, #8
    11b2:	46bd      	mov	sp, r7
    11b4:	bd80      	pop	{r7, pc}
    11b6:	bf00      	nop
    11b8:	20000068 	.word	0x20000068

000011bc <PE_FillMemory>:
**     @param
**       len - Length of a memory block to fill.
*/
/* ===================================================================*/
void PE_FillMemory(register void* SourceAddressPtr, register uint8_t c, register uint32_t len)
{
    11bc:	b490      	push	{r4, r7}
    11be:	af00      	add	r7, sp, #0
    11c0:	4604      	mov	r4, r0
    11c2:	4608      	mov	r0, r1
    11c4:	4613      	mov	r3, r2
  register uint8_t *ptr = (uint8_t*)SourceAddressPtr;

  if (len > 0U) {
    11c6:	2b00      	cmp	r3, #0
    11c8:	d008      	beq.n	11dc <PE_FillMemory+0x20>
    while (len--) {
    11ca:	e003      	b.n	11d4 <PE_FillMemory+0x18>
      *ptr++ = c;
    11cc:	4622      	mov	r2, r4
    11ce:	1c54      	adds	r4, r2, #1
    11d0:	4601      	mov	r1, r0
    11d2:	7011      	strb	r1, [r2, #0]
void PE_FillMemory(register void* SourceAddressPtr, register uint8_t c, register uint32_t len)
{
  register uint8_t *ptr = (uint8_t*)SourceAddressPtr;

  if (len > 0U) {
    while (len--) {
    11d4:	461a      	mov	r2, r3
    11d6:	1e53      	subs	r3, r2, #1
    11d8:	2a00      	cmp	r2, #0
    11da:	d1f7      	bne.n	11cc <PE_FillMemory+0x10>
      *ptr++ = c;
    }
  }
}
    11dc:	bf00      	nop
    11de:	46bd      	mov	sp, r7
    11e0:	bc90      	pop	{r4, r7}
    11e2:	4770      	bx	lr

000011e4 <PE_PeripheralUsed>:
**     @return
**       TRUE if a peripheral is used by PEx or FALSE if it isn't used.
*/
/* ===================================================================*/
bool PE_PeripheralUsed(uint32_t PrphBaseAddress)
{
    11e4:	b480      	push	{r7}
    11e6:	b085      	sub	sp, #20
    11e8:	af00      	add	r7, sp, #0
    11ea:	6078      	str	r0, [r7, #4]
  bool result = FALSE;
    11ec:	2300      	movs	r3, #0
    11ee:	73fb      	strb	r3, [r7, #15]

  switch (PrphBaseAddress) {
    11f0:	687b      	ldr	r3, [r7, #4]
    11f2:	4a08      	ldr	r2, [pc, #32]	; (1214 <PE_PeripheralUsed+0x30>)
    11f4:	4293      	cmp	r3, r2
    11f6:	d003      	beq.n	1200 <PE_PeripheralUsed+0x1c>
    11f8:	4a07      	ldr	r2, [pc, #28]	; (1218 <PE_PeripheralUsed+0x34>)
    11fa:	4293      	cmp	r3, r2
    11fc:	d000      	beq.n	1200 <PE_PeripheralUsed+0x1c>
    /* Base address allocated by peripheral(s) PTE */
    case 0x400FF100UL:
      result = TRUE;
      break;
    default:
      break;
    11fe:	e002      	b.n	1206 <PE_PeripheralUsed+0x22>
  switch (PrphBaseAddress) {
    /* Base address allocated by peripheral(s) PTB */
    case 0x400FF040UL:
    /* Base address allocated by peripheral(s) PTE */
    case 0x400FF100UL:
      result = TRUE;
    1200:	2301      	movs	r3, #1
    1202:	73fb      	strb	r3, [r7, #15]
      break;
    1204:	bf00      	nop
    default:
      break;
  }
  return result;
    1206:	7bfb      	ldrb	r3, [r7, #15]
}
    1208:	4618      	mov	r0, r3
    120a:	3714      	adds	r7, #20
    120c:	46bd      	mov	sp, r7
    120e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1212:	4770      	bx	lr
    1214:	400ff040 	.word	0x400ff040
    1218:	400ff100 	.word	0x400ff100

0000121c <LDD_SetClockConfiguration>:
**     @param
**       ClockConfiguration - New CPU clock configuration changed by CPU SetClockConfiguration method.
*/
/* ===================================================================*/
void LDD_SetClockConfiguration(LDD_TClockConfiguration ClockConfiguration)
{
    121c:	b480      	push	{r7}
    121e:	b083      	sub	sp, #12
    1220:	af00      	add	r7, sp, #0
    1222:	4603      	mov	r3, r0
    1224:	71fb      	strb	r3, [r7, #7]
  (void)ClockConfiguration;            /*!< Parameter is not used, suppress unused argument warning */
}
    1226:	bf00      	nop
    1228:	370c      	adds	r7, #12
    122a:	46bd      	mov	sp, r7
    122c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1230:	4770      	bx	lr
    1232:	bf00      	nop

00001234 <PTRC1_vGetGDBDumpCommand>:
**                           e.g. "C:\\tmp\\trace.dump"
**     Returns     : Nothing
** ===================================================================
*/
void PTRC1_vGetGDBDumpCommand(uint8_t *buf, uint16_t bufSize, uint8_t *fileName)
{
    1234:	b480      	push	{r7}
    1236:	b085      	sub	sp, #20
    1238:	af00      	add	r7, sp, #0
    123a:	60f8      	str	r0, [r7, #12]
    123c:	460b      	mov	r3, r1
    123e:	607a      	str	r2, [r7, #4]
    1240:	817b      	strh	r3, [r7, #10]
#if !TRC_USE_TRACEALYZER_RECORDER || (TRC_CFG_RECORDER_MODE==TRC_RECORDER_MODE_STREAMING) /* trace disabled or streaming mode */
  (void)bufSize; /* not used */
  (void)fileName; /* not used */
  /* with RTT streaming, there is no trace buffer */
  *buf = '\0';
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	2200      	movs	r2, #0
    1246:	701a      	strb	r2, [r3, #0]
  UTIL1_strcat(buf, bufSize, (unsigned char*)" 0x");
  UTIL1_strcatNum32Hex(buf, bufSize, (uint32_t)ptr);
  UTIL1_strcat(buf, bufSize, (unsigned char*)" 0x");
  UTIL1_strcatNum32Hex(buf, bufSize, (uint32_t)(ptr+len));
#endif
}
    1248:	bf00      	nop
    124a:	3714      	adds	r7, #20
    124c:	46bd      	mov	sp, r7
    124e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1252:	4770      	bx	lr

00001254 <PTRC1_Startup>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void PTRC1_Startup(void)
{
    1254:	b580      	push	{r7, lr}
    1256:	af00      	add	r7, sp, #0
#if configUSE_TRACE_HOOKS /* FreeRTOS using Percepio Trace */
  vTraceEnable(PTRC1_CONFIG_START_TRACE_IN_STARTUP_MODE); /* snapshot trace, from startup */
    1258:	2001      	movs	r0, #1
    125a:	f00b fbe3 	bl	ca24 <vTraceEnable>
#endif /* configUSE_TRACE_HOOKS */
}
    125e:	bf00      	nop
    1260:	bd80      	pop	{r7, pc}
    1262:	bf00      	nop

00001264 <RTT1_StdIOKeyPressed>:
**         ---             - True if there are characters in teh input
**                           buffer
** ===================================================================
*/
bool RTT1_StdIOKeyPressed(void)
{
    1264:	b580      	push	{r7, lr}
    1266:	af00      	add	r7, sp, #0
  return RTT1_HasKey()!=0;
    1268:	f000 fc40 	bl	1aec <SEGGER_RTT_HasKey>
    126c:	4603      	mov	r3, r0
    126e:	2b00      	cmp	r3, #0
    1270:	bf14      	ite	ne
    1272:	2301      	movne	r3, #1
    1274:	2300      	moveq	r3, #0
    1276:	b2db      	uxtb	r3, r3
}
    1278:	4618      	mov	r0, r3
    127a:	bd80      	pop	{r7, pc}

0000127c <RTT1_StdIOReadChar>:
**                           character
**     Returns     : Nothing
** ===================================================================
*/
void RTT1_StdIOReadChar(uint8_t *c)
{
    127c:	b580      	push	{r7, lr}
    127e:	b084      	sub	sp, #16
    1280:	af00      	add	r7, sp, #0
    1282:	6078      	str	r0, [r7, #4]
  int res;

  res = RTT1_GetKey();
    1284:	f000 fc0a 	bl	1a9c <SEGGER_RTT_GetKey>
    1288:	60f8      	str	r0, [r7, #12]
  if (res==-1) { /* no character present */
    128a:	68fb      	ldr	r3, [r7, #12]
    128c:	f1b3 3fff 	cmp.w	r3, #4294967295
    1290:	d103      	bne.n	129a <RTT1_StdIOReadChar+0x1e>
    *c = '\0';
    1292:	687b      	ldr	r3, [r7, #4]
    1294:	2200      	movs	r2, #0
    1296:	701a      	strb	r2, [r3, #0]
  } else {
    *c = (uint8_t)res; /* return character */
  }
}
    1298:	e003      	b.n	12a2 <RTT1_StdIOReadChar+0x26>

  res = RTT1_GetKey();
  if (res==-1) { /* no character present */
    *c = '\0';
  } else {
    *c = (uint8_t)res; /* return character */
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	b2da      	uxtb	r2, r3
    129e:	687b      	ldr	r3, [r7, #4]
    12a0:	701a      	strb	r2, [r3, #0]
  }
}
    12a2:	bf00      	nop
    12a4:	3710      	adds	r7, #16
    12a6:	46bd      	mov	sp, r7
    12a8:	bd80      	pop	{r7, pc}
    12aa:	bf00      	nop

000012ac <RTT1_StdIOSendChar>:
**         ch              - Character to send
**     Returns     : Nothing
** ===================================================================
*/
void RTT1_StdIOSendChar(uint8_t ch)
{
    12ac:	b580      	push	{r7, lr}
    12ae:	b084      	sub	sp, #16
    12b0:	af00      	add	r7, sp, #0
    12b2:	4603      	mov	r3, r0
    12b4:	71fb      	strb	r3, [r7, #7]
  int timeoutMs = 20;
    12b6:	2314      	movs	r3, #20
    12b8:	60fb      	str	r3, [r7, #12]

  for(;;) { /* will break */
    if (RTT1_Write(0, (const char*)&ch, 1)==1) { /* non blocking send, check that we were able to send */
    12ba:	1dfb      	adds	r3, r7, #7
    12bc:	2201      	movs	r2, #1
    12be:	4619      	mov	r1, r3
    12c0:	2000      	movs	r0, #0
    12c2:	f000 fbb3 	bl	1a2c <SEGGER_RTT_Write>
    12c6:	4603      	mov	r3, r0
    12c8:	2b01      	cmp	r3, #1
    12ca:	d009      	beq.n	12e0 <RTT1_StdIOSendChar+0x34>
      break; /* was able to send character, get out of waiting loop */
    }
    WAIT1_WaitOSms(1);
    12cc:	2000      	movs	r0, #0
    12ce:	f009 fc3b 	bl	ab48 <vTaskDelay>
    if(timeoutMs<=0) {
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	2b00      	cmp	r3, #0
    12d6:	dd05      	ble.n	12e4 <RTT1_StdIOSendChar+0x38>
      break; /* timeout */
    }
    timeoutMs -= 1;
    12d8:	68fb      	ldr	r3, [r7, #12]
    12da:	3b01      	subs	r3, #1
    12dc:	60fb      	str	r3, [r7, #12]
  } /* for */
    12de:	e7ec      	b.n	12ba <RTT1_StdIOSendChar+0xe>
{
  int timeoutMs = 20;

  for(;;) { /* will break */
    if (RTT1_Write(0, (const char*)&ch, 1)==1) { /* non blocking send, check that we were able to send */
      break; /* was able to send character, get out of waiting loop */
    12e0:	bf00      	nop
    12e2:	e000      	b.n	12e6 <RTT1_StdIOSendChar+0x3a>
    }
    WAIT1_WaitOSms(1);
    if(timeoutMs<=0) {
      break; /* timeout */
    12e4:	bf00      	nop
    }
    timeoutMs -= 1;
  } /* for */
}
    12e6:	bf00      	nop
    12e8:	3710      	adds	r7, #16
    12ea:	46bd      	mov	sp, r7
    12ec:	bd80      	pop	{r7, pc}
    12ee:	bf00      	nop

000012f0 <RTT1_RecvChar>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t RTT1_RecvChar(uint8_t *c)
{
    12f0:	b580      	push	{r7, lr}
    12f2:	b084      	sub	sp, #16
    12f4:	af00      	add	r7, sp, #0
    12f6:	6078      	str	r0, [r7, #4]
  int res;

  res = RTT1_GetKey();
    12f8:	f000 fbd0 	bl	1a9c <SEGGER_RTT_GetKey>
    12fc:	60f8      	str	r0, [r7, #12]
  if (res==-1) { /* no character present */
    12fe:	68fb      	ldr	r3, [r7, #12]
    1300:	f1b3 3fff 	cmp.w	r3, #4294967295
    1304:	d101      	bne.n	130a <RTT1_RecvChar+0x1a>
    return ERR_RXEMPTY;
    1306:	230a      	movs	r3, #10
    1308:	e004      	b.n	1314 <RTT1_RecvChar+0x24>
  }
  *c = (uint8_t)res; /* return character */
    130a:	68fb      	ldr	r3, [r7, #12]
    130c:	b2da      	uxtb	r2, r3
    130e:	687b      	ldr	r3, [r7, #4]
    1310:	701a      	strb	r2, [r3, #0]
  return ERR_OK;
    1312:	2300      	movs	r3, #0
}
    1314:	4618      	mov	r0, r3
    1316:	3710      	adds	r7, #16
    1318:	46bd      	mov	sp, r7
    131a:	bd80      	pop	{r7, pc}

0000131c <RTT1_SendChar>:
**         ---             - Error code. ERR_OK if character has been
**                           sent, ERR_TXFULL otherwise.
** ===================================================================
*/
uint8_t RTT1_SendChar(uint8_t ch)
{
    131c:	b580      	push	{r7, lr}
    131e:	b084      	sub	sp, #16
    1320:	af00      	add	r7, sp, #0
    1322:	4603      	mov	r3, r0
    1324:	71fb      	strb	r3, [r7, #7]
  int res;

  res = SEGGER_RTT_Write(0, (const char*)&ch, 1);
    1326:	1dfb      	adds	r3, r7, #7
    1328:	2201      	movs	r2, #1
    132a:	4619      	mov	r1, r3
    132c:	2000      	movs	r0, #0
    132e:	f000 fb7d 	bl	1a2c <SEGGER_RTT_Write>
    1332:	4603      	mov	r3, r0
    1334:	60fb      	str	r3, [r7, #12]
  if (res!=1) {
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	2b01      	cmp	r3, #1
    133a:	d001      	beq.n	1340 <RTT1_SendChar+0x24>
    return ERR_TXFULL; /* character not sent? */
    133c:	230b      	movs	r3, #11
    133e:	e000      	b.n	1342 <RTT1_SendChar+0x26>
  }
  return ERR_OK;
    1340:	2300      	movs	r3, #0
}
    1342:	4618      	mov	r0, r3
    1344:	3710      	adds	r7, #16
    1346:	46bd      	mov	sp, r7
    1348:	bd80      	pop	{r7, pc}
    134a:	bf00      	nop

0000134c <RTT1_Deinit>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void RTT1_Deinit(void)
{
    134c:	b480      	push	{r7}
    134e:	af00      	add	r7, sp, #0
  /* noting to de-initialize */
}
    1350:	bf00      	nop
    1352:	46bd      	mov	sp, r7
    1354:	f85d 7b04 	ldr.w	r7, [sp], #4
    1358:	4770      	bx	lr
    135a:	bf00      	nop

0000135c <RTT1_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void RTT1_Init(void)
{
    135c:	b580      	push	{r7, lr}
    135e:	af00      	add	r7, sp, #0
  SEGGER_RTT_Init();
    1360:	f000 fe2e 	bl	1fc0 <SEGGER_RTT_Init>
}
    1364:	bf00      	nop
    1366:	bd80      	pop	{r7, pc}

00001368 <RTT1_GetStdio>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
CLS1_ConstStdIOTypePtr RTT1_GetStdio(void)
{
    1368:	b480      	push	{r7}
    136a:	af00      	add	r7, sp, #0
  return &RTT1_stdio;
    136c:	4b02      	ldr	r3, [pc, #8]	; (1378 <RTT1_GetStdio+0x10>)
}
    136e:	4618      	mov	r0, r3
    1370:	46bd      	mov	sp, r7
    1372:	f85d 7b04 	ldr.w	r7, [sp], #4
    1376:	4770      	bx	lr
    1378:	0000fd98 	.word	0x0000fd98

0000137c <_write>:
*   Low-level write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
int _write(int file, char *ptr, int len) {
    137c:	b580      	push	{r7, lr}
    137e:	b084      	sub	sp, #16
    1380:	af00      	add	r7, sp, #0
    1382:	60f8      	str	r0, [r7, #12]
    1384:	60b9      	str	r1, [r7, #8]
    1386:	607a      	str	r2, [r7, #4]
  (void) file;  /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
    1388:	687b      	ldr	r3, [r7, #4]
    138a:	461a      	mov	r2, r3
    138c:	68b9      	ldr	r1, [r7, #8]
    138e:	2000      	movs	r0, #0
    1390:	f000 fb4c 	bl	1a2c <SEGGER_RTT_Write>
  return len;
    1394:	687b      	ldr	r3, [r7, #4]
}
    1396:	4618      	mov	r0, r3
    1398:	3710      	adds	r7, #16
    139a:	46bd      	mov	sp, r7
    139c:	bd80      	pop	{r7, pc}
    139e:	bf00      	nop

000013a0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    13a0:	b480      	push	{r7}
    13a2:	b083      	sub	sp, #12
    13a4:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
    13a6:	4b23      	ldr	r3, [pc, #140]	; (1434 <_DoInit+0x94>)
    13a8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	2204      	movs	r2, #4
    13ae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    13b0:	687b      	ldr	r3, [r7, #4]
    13b2:	2204      	movs	r2, #4
    13b4:	615a      	str	r2, [r3, #20]
#if SEGGER_RTT_CHANNEL_0_ENABLED /* << EST */
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    13b6:	687b      	ldr	r3, [r7, #4]
    13b8:	4a1f      	ldr	r2, [pc, #124]	; (1438 <_DoInit+0x98>)
    13ba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    13bc:	687b      	ldr	r3, [r7, #4]
    13be:	4a1f      	ldr	r2, [pc, #124]	; (143c <_DoInit+0x9c>)
    13c0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    13c2:	687b      	ldr	r3, [r7, #4]
    13c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    13c8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    13ca:	687b      	ldr	r3, [r7, #4]
    13cc:	2200      	movs	r2, #0
    13ce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    13d0:	687b      	ldr	r3, [r7, #4]
    13d2:	2200      	movs	r2, #0
    13d4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    13d6:	687b      	ldr	r3, [r7, #4]
    13d8:	2200      	movs	r2, #0
    13da:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    13dc:	687b      	ldr	r3, [r7, #4]
    13de:	4a16      	ldr	r2, [pc, #88]	; (1438 <_DoInit+0x98>)
    13e0:	679a      	str	r2, [r3, #120]	; 0x78
  p->aDown[0].pBuffer       = _acDownBuffer;
    13e2:	687b      	ldr	r3, [r7, #4]
    13e4:	4a16      	ldr	r2, [pc, #88]	; (1440 <_DoInit+0xa0>)
    13e6:	67da      	str	r2, [r3, #124]	; 0x7c
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    13e8:	687b      	ldr	r3, [r7, #4]
    13ea:	2280      	movs	r2, #128	; 0x80
    13ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  p->aDown[0].RdOff         = 0u;
    13f0:	687b      	ldr	r3, [r7, #4]
    13f2:	2200      	movs	r2, #0
    13f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  p->aDown[0].WrOff         = 0u;
    13f8:	687b      	ldr	r3, [r7, #4]
    13fa:	2200      	movs	r2, #0
    13fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1400:	687b      	ldr	r3, [r7, #4]
    1402:	2200      	movs	r2, #0
    1404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    1408:	687b      	ldr	r3, [r7, #4]
    140a:	3307      	adds	r3, #7
    140c:	4a0d      	ldr	r2, [pc, #52]	; (1444 <_DoInit+0xa4>)
    140e:	6810      	ldr	r0, [r2, #0]
    1410:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
    1412:	687b      	ldr	r3, [r7, #4]
    1414:	4a0c      	ldr	r2, [pc, #48]	; (1448 <_DoInit+0xa8>)
    1416:	6810      	ldr	r0, [r2, #0]
    1418:	6018      	str	r0, [r3, #0]
    141a:	8891      	ldrh	r1, [r2, #4]
    141c:	7992      	ldrb	r2, [r2, #6]
    141e:	8099      	strh	r1, [r3, #4]
    1420:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
    1422:	687b      	ldr	r3, [r7, #4]
    1424:	2220      	movs	r2, #32
    1426:	719a      	strb	r2, [r3, #6]
}
    1428:	bf00      	nop
    142a:	370c      	adds	r7, #12
    142c:	46bd      	mov	sp, r7
    142e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1432:	4770      	bx	lr
    1434:	20003518 	.word	0x20003518
    1438:	0000fda8 	.word	0x0000fda8
    143c:	20000074 	.word	0x20000074
    1440:	20000474 	.word	0x20000474
    1444:	0000fdb4 	.word	0x0000fdb4
    1448:	0000fdb8 	.word	0x0000fdb8

0000144c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    144c:	b580      	push	{r7, lr}
    144e:	b088      	sub	sp, #32
    1450:	af00      	add	r7, sp, #0
    1452:	60f8      	str	r0, [r7, #12]
    1454:	60b9      	str	r1, [r7, #8]
    1456:	607a      	str	r2, [r7, #4]
  unsigned RdOff;
  unsigned WrOff;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
    1458:	2300      	movs	r3, #0
    145a:	61bb      	str	r3, [r7, #24]
  WrOff = pRing->WrOff;
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	68db      	ldr	r3, [r3, #12]
    1460:	617b      	str	r3, [r7, #20]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    1462:	68fb      	ldr	r3, [r7, #12]
    1464:	691b      	ldr	r3, [r3, #16]
    1466:	613b      	str	r3, [r7, #16]
    if (RdOff > WrOff) {
    1468:	693a      	ldr	r2, [r7, #16]
    146a:	697b      	ldr	r3, [r7, #20]
    146c:	429a      	cmp	r2, r3
    146e:	d905      	bls.n	147c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
    1470:	693a      	ldr	r2, [r7, #16]
    1472:	697b      	ldr	r3, [r7, #20]
    1474:	1ad3      	subs	r3, r2, r3
    1476:	3b01      	subs	r3, #1
    1478:	61fb      	str	r3, [r7, #28]
    147a:	e007      	b.n	148c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    147c:	68fb      	ldr	r3, [r7, #12]
    147e:	689a      	ldr	r2, [r3, #8]
    1480:	6939      	ldr	r1, [r7, #16]
    1482:	697b      	ldr	r3, [r7, #20]
    1484:	1acb      	subs	r3, r1, r3
    1486:	4413      	add	r3, r2
    1488:	3b01      	subs	r3, #1
    148a:	61fb      	str	r3, [r7, #28]
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	689a      	ldr	r2, [r3, #8]
    1490:	697b      	ldr	r3, [r7, #20]
    1492:	1ad3      	subs	r3, r2, r3
    1494:	69fa      	ldr	r2, [r7, #28]
    1496:	4293      	cmp	r3, r2
    1498:	bf28      	it	cs
    149a:	4613      	movcs	r3, r2
    149c:	61fb      	str	r3, [r7, #28]
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    149e:	69fa      	ldr	r2, [r7, #28]
    14a0:	687b      	ldr	r3, [r7, #4]
    14a2:	4293      	cmp	r3, r2
    14a4:	bf28      	it	cs
    14a6:	4613      	movcs	r3, r2
    14a8:	61fb      	str	r3, [r7, #28]
    memcpy(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
    14aa:	68fb      	ldr	r3, [r7, #12]
    14ac:	685a      	ldr	r2, [r3, #4]
    14ae:	697b      	ldr	r3, [r7, #20]
    14b0:	4413      	add	r3, r2
    14b2:	69fa      	ldr	r2, [r7, #28]
    14b4:	68b9      	ldr	r1, [r7, #8]
    14b6:	4618      	mov	r0, r3
    14b8:	f00e fb21 	bl	fafe <memcpy>
    NumBytesWritten += NumBytesToWrite;
    14bc:	69ba      	ldr	r2, [r7, #24]
    14be:	69fb      	ldr	r3, [r7, #28]
    14c0:	4413      	add	r3, r2
    14c2:	61bb      	str	r3, [r7, #24]
    pBuffer         += NumBytesToWrite;
    14c4:	68ba      	ldr	r2, [r7, #8]
    14c6:	69fb      	ldr	r3, [r7, #28]
    14c8:	4413      	add	r3, r2
    14ca:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
    14cc:	687a      	ldr	r2, [r7, #4]
    14ce:	69fb      	ldr	r3, [r7, #28]
    14d0:	1ad3      	subs	r3, r2, r3
    14d2:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
    14d4:	697a      	ldr	r2, [r7, #20]
    14d6:	69fb      	ldr	r3, [r7, #28]
    14d8:	4413      	add	r3, r2
    14da:	617b      	str	r3, [r7, #20]
    if (WrOff == pRing->SizeOfBuffer) {
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	689a      	ldr	r2, [r3, #8]
    14e0:	697b      	ldr	r3, [r7, #20]
    14e2:	429a      	cmp	r2, r3
    14e4:	d101      	bne.n	14ea <_WriteBlocking+0x9e>
      WrOff = 0u;
    14e6:	2300      	movs	r3, #0
    14e8:	617b      	str	r3, [r7, #20]
    }
    pRing->WrOff = WrOff;
    14ea:	68fb      	ldr	r3, [r7, #12]
    14ec:	697a      	ldr	r2, [r7, #20]
    14ee:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
    14f0:	687b      	ldr	r3, [r7, #4]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d1b5      	bne.n	1462 <_WriteBlocking+0x16>
  //
  return NumBytesWritten;
    14f6:	69bb      	ldr	r3, [r7, #24]
}
    14f8:	4618      	mov	r0, r3
    14fa:	3720      	adds	r7, #32
    14fc:	46bd      	mov	sp, r7
    14fe:	bd80      	pop	{r7, pc}

00001500 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    1500:	b580      	push	{r7, lr}
    1502:	b088      	sub	sp, #32
    1504:	af00      	add	r7, sp, #0
    1506:	60f8      	str	r0, [r7, #12]
    1508:	60b9      	str	r1, [r7, #8]
    150a:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;

  WrOff = pRing->WrOff;
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	68db      	ldr	r3, [r3, #12]
    1510:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
    1512:	68fb      	ldr	r3, [r7, #12]
    1514:	689a      	ldr	r2, [r3, #8]
    1516:	69fb      	ldr	r3, [r7, #28]
    1518:	1ad3      	subs	r3, r2, r3
    151a:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
    151c:	69ba      	ldr	r2, [r7, #24]
    151e:	687b      	ldr	r3, [r7, #4]
    1520:	429a      	cmp	r2, r3
    1522:	d90e      	bls.n	1542 <_WriteNoCheck+0x42>
    //
    // All data fits before wrap around
    //
    memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	685a      	ldr	r2, [r3, #4]
    1528:	69fb      	ldr	r3, [r7, #28]
    152a:	4413      	add	r3, r2
    152c:	687a      	ldr	r2, [r7, #4]
    152e:	68b9      	ldr	r1, [r7, #8]
    1530:	4618      	mov	r0, r3
    1532:	f00e fae4 	bl	fafe <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    1536:	69fa      	ldr	r2, [r7, #28]
    1538:	687b      	ldr	r3, [r7, #4]
    153a:	441a      	add	r2, r3
    153c:	68fb      	ldr	r3, [r7, #12]
    153e:	60da      	str	r2, [r3, #12]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    NumBytesAtOnce = NumBytes - Rem;
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    pRing->WrOff = NumBytesAtOnce;
  }
}
    1540:	e01a      	b.n	1578 <_WriteNoCheck+0x78>
    pRing->WrOff = WrOff + NumBytes;
  } else {
    //
    // We reach the end of the buffer, so need to wrap around
    //
    NumBytesAtOnce = Rem;
    1542:	69bb      	ldr	r3, [r7, #24]
    1544:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
    1546:	68fb      	ldr	r3, [r7, #12]
    1548:	685a      	ldr	r2, [r3, #4]
    154a:	69fb      	ldr	r3, [r7, #28]
    154c:	4413      	add	r3, r2
    154e:	697a      	ldr	r2, [r7, #20]
    1550:	68b9      	ldr	r1, [r7, #8]
    1552:	4618      	mov	r0, r3
    1554:	f00e fad3 	bl	fafe <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
    1558:	687a      	ldr	r2, [r7, #4]
    155a:	69bb      	ldr	r3, [r7, #24]
    155c:	1ad3      	subs	r3, r2, r3
    155e:	617b      	str	r3, [r7, #20]
    memcpy(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
    1560:	68fb      	ldr	r3, [r7, #12]
    1562:	6858      	ldr	r0, [r3, #4]
    1564:	68ba      	ldr	r2, [r7, #8]
    1566:	69bb      	ldr	r3, [r7, #24]
    1568:	4413      	add	r3, r2
    156a:	697a      	ldr	r2, [r7, #20]
    156c:	4619      	mov	r1, r3
    156e:	f00e fac6 	bl	fafe <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    1572:	68fb      	ldr	r3, [r7, #12]
    1574:	697a      	ldr	r2, [r7, #20]
    1576:	60da      	str	r2, [r3, #12]
  }
}
    1578:	bf00      	nop
    157a:	3720      	adds	r7, #32
    157c:	46bd      	mov	sp, r7
    157e:	bd80      	pop	{r7, pc}

00001580 <_PostTerminalSwitch>:
*
*  Parameters
*    pRing        Ring buffer to post to.
*    TerminalId   Terminal ID to switch to.
*/
static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
    1580:	b580      	push	{r7, lr}
    1582:	b084      	sub	sp, #16
    1584:	af00      	add	r7, sp, #0
    1586:	6078      	str	r0, [r7, #4]
    1588:	460b      	mov	r3, r1
    158a:	70fb      	strb	r3, [r7, #3]
  unsigned char ac[2];

  ac[0] = 0xFFu;
    158c:	23ff      	movs	r3, #255	; 0xff
    158e:	733b      	strb	r3, [r7, #12]
  ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed our terminal limit
    1590:	78fb      	ldrb	r3, [r7, #3]
    1592:	4a07      	ldr	r2, [pc, #28]	; (15b0 <_PostTerminalSwitch+0x30>)
    1594:	5cd3      	ldrb	r3, [r2, r3]
    1596:	737b      	strb	r3, [r7, #13]
  _WriteBlocking(pRing, (char*)ac, 2u);
    1598:	f107 030c 	add.w	r3, r7, #12
    159c:	2202      	movs	r2, #2
    159e:	4619      	mov	r1, r3
    15a0:	6878      	ldr	r0, [r7, #4]
    15a2:	f7ff ff53 	bl	144c <_WriteBlocking>
}
    15a6:	bf00      	nop
    15a8:	3710      	adds	r7, #16
    15aa:	46bd      	mov	sp, r7
    15ac:	bd80      	pop	{r7, pc}
    15ae:	bf00      	nop
    15b0:	20000008 	.word	0x20000008

000015b4 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
    15b4:	b480      	push	{r7}
    15b6:	b087      	sub	sp, #28
    15b8:	af00      	add	r7, sp, #0
    15ba:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
    15bc:	687b      	ldr	r3, [r7, #4]
    15be:	691b      	ldr	r3, [r3, #16]
    15c0:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	68db      	ldr	r3, [r3, #12]
    15c6:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
    15c8:	693a      	ldr	r2, [r7, #16]
    15ca:	68fb      	ldr	r3, [r7, #12]
    15cc:	429a      	cmp	r2, r3
    15ce:	d808      	bhi.n	15e2 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    15d0:	687b      	ldr	r3, [r7, #4]
    15d2:	689a      	ldr	r2, [r3, #8]
    15d4:	68fb      	ldr	r3, [r7, #12]
    15d6:	1ad2      	subs	r2, r2, r3
    15d8:	693b      	ldr	r3, [r7, #16]
    15da:	4413      	add	r3, r2
    15dc:	3b01      	subs	r3, #1
    15de:	617b      	str	r3, [r7, #20]
    15e0:	e004      	b.n	15ec <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
    15e2:	693a      	ldr	r2, [r7, #16]
    15e4:	68fb      	ldr	r3, [r7, #12]
    15e6:	1ad3      	subs	r3, r2, r3
    15e8:	3b01      	subs	r3, #1
    15ea:	617b      	str	r3, [r7, #20]
  }
  return r;
    15ec:	697b      	ldr	r3, [r7, #20]
}
    15ee:	4618      	mov	r0, r3
    15f0:	371c      	adds	r7, #28
    15f2:	46bd      	mov	sp, r7
    15f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop

000015fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
    15fc:	b580      	push	{r7, lr}
    15fe:	b08a      	sub	sp, #40	; 0x28
    1600:	af00      	add	r7, sp, #0
    1602:	60f8      	str	r0, [r7, #12]
    1604:	60b9      	str	r1, [r7, #8]
    1606:	607a      	str	r2, [r7, #4]
  unsigned                RdOff;
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  //
  INIT();
    1608:	4b38      	ldr	r3, [pc, #224]	; (16ec <SEGGER_RTT_ReadNoLock+0xf0>)
    160a:	781b      	ldrb	r3, [r3, #0]
    160c:	2b00      	cmp	r3, #0
    160e:	d101      	bne.n	1614 <SEGGER_RTT_ReadNoLock+0x18>
    1610:	f7ff fec6 	bl	13a0 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
    1614:	68fa      	ldr	r2, [r7, #12]
    1616:	4613      	mov	r3, r2
    1618:	005b      	lsls	r3, r3, #1
    161a:	4413      	add	r3, r2
    161c:	00db      	lsls	r3, r3, #3
    161e:	3378      	adds	r3, #120	; 0x78
    1620:	4a32      	ldr	r2, [pc, #200]	; (16ec <SEGGER_RTT_ReadNoLock+0xf0>)
    1622:	4413      	add	r3, r2
    1624:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
    1626:	68bb      	ldr	r3, [r7, #8]
    1628:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
    162a:	69bb      	ldr	r3, [r7, #24]
    162c:	691b      	ldr	r3, [r3, #16]
    162e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
    1630:	69bb      	ldr	r3, [r7, #24]
    1632:	68db      	ldr	r3, [r3, #12]
    1634:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
    1636:	2300      	movs	r3, #0
    1638:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
    163a:	6a3a      	ldr	r2, [r7, #32]
    163c:	697b      	ldr	r3, [r7, #20]
    163e:	429a      	cmp	r2, r3
    1640:	d92a      	bls.n	1698 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
    1642:	69bb      	ldr	r3, [r7, #24]
    1644:	689a      	ldr	r2, [r3, #8]
    1646:	6a3b      	ldr	r3, [r7, #32]
    1648:	1ad3      	subs	r3, r2, r3
    164a:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
    164c:	693a      	ldr	r2, [r7, #16]
    164e:	687b      	ldr	r3, [r7, #4]
    1650:	4293      	cmp	r3, r2
    1652:	bf28      	it	cs
    1654:	4613      	movcs	r3, r2
    1656:	613b      	str	r3, [r7, #16]
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
    1658:	69bb      	ldr	r3, [r7, #24]
    165a:	685a      	ldr	r2, [r3, #4]
    165c:	6a3b      	ldr	r3, [r7, #32]
    165e:	4413      	add	r3, r2
    1660:	693a      	ldr	r2, [r7, #16]
    1662:	4619      	mov	r1, r3
    1664:	69f8      	ldr	r0, [r7, #28]
    1666:	f00e fa4a 	bl	fafe <memcpy>
    NumBytesRead += NumBytesRem;
    166a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    166c:	693b      	ldr	r3, [r7, #16]
    166e:	4413      	add	r3, r2
    1670:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
    1672:	69fa      	ldr	r2, [r7, #28]
    1674:	693b      	ldr	r3, [r7, #16]
    1676:	4413      	add	r3, r2
    1678:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
    167a:	687a      	ldr	r2, [r7, #4]
    167c:	693b      	ldr	r3, [r7, #16]
    167e:	1ad3      	subs	r3, r2, r3
    1680:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
    1682:	6a3a      	ldr	r2, [r7, #32]
    1684:	693b      	ldr	r3, [r7, #16]
    1686:	4413      	add	r3, r2
    1688:	623b      	str	r3, [r7, #32]
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
    168a:	69bb      	ldr	r3, [r7, #24]
    168c:	689a      	ldr	r2, [r3, #8]
    168e:	6a3b      	ldr	r3, [r7, #32]
    1690:	429a      	cmp	r2, r3
    1692:	d101      	bne.n	1698 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
    1694:	2300      	movs	r3, #0
    1696:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
    1698:	697a      	ldr	r2, [r7, #20]
    169a:	6a3b      	ldr	r3, [r7, #32]
    169c:	1ad3      	subs	r3, r2, r3
    169e:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
    16a0:	693a      	ldr	r2, [r7, #16]
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	4293      	cmp	r3, r2
    16a6:	bf28      	it	cs
    16a8:	4613      	movcs	r3, r2
    16aa:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
    16ac:	693b      	ldr	r3, [r7, #16]
    16ae:	2b00      	cmp	r3, #0
    16b0:	d010      	beq.n	16d4 <SEGGER_RTT_ReadNoLock+0xd8>
    memcpy(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
    16b2:	69bb      	ldr	r3, [r7, #24]
    16b4:	685a      	ldr	r2, [r3, #4]
    16b6:	6a3b      	ldr	r3, [r7, #32]
    16b8:	4413      	add	r3, r2
    16ba:	693a      	ldr	r2, [r7, #16]
    16bc:	4619      	mov	r1, r3
    16be:	69f8      	ldr	r0, [r7, #28]
    16c0:	f00e fa1d 	bl	fafe <memcpy>
    NumBytesRead += NumBytesRem;
    16c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    16c6:	693b      	ldr	r3, [r7, #16]
    16c8:	4413      	add	r3, r2
    16ca:	627b      	str	r3, [r7, #36]	; 0x24
    //pBuffer      += NumBytesRem;
    //BufferSize   -= NumBytesRem;
    RdOff        += NumBytesRem;
    16cc:	6a3a      	ldr	r2, [r7, #32]
    16ce:	693b      	ldr	r3, [r7, #16]
    16d0:	4413      	add	r3, r2
    16d2:	623b      	str	r3, [r7, #32]
  }
  if (NumBytesRead) {
    16d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16d6:	2b00      	cmp	r3, #0
    16d8:	d002      	beq.n	16e0 <SEGGER_RTT_ReadNoLock+0xe4>
    pRing->RdOff = RdOff;
    16da:	69bb      	ldr	r3, [r7, #24]
    16dc:	6a3a      	ldr	r2, [r7, #32]
    16de:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
    16e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    16e2:	4618      	mov	r0, r3
    16e4:	3728      	adds	r7, #40	; 0x28
    16e6:	46bd      	mov	sp, r7
    16e8:	bd80      	pop	{r7, pc}
    16ea:	bf00      	nop
    16ec:	20003518 	.word	0x20003518

000016f0 <SEGGER_RTT_Read>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
    16f0:	b580      	push	{r7, lr}
    16f2:	b086      	sub	sp, #24
    16f4:	af00      	add	r7, sp, #0
    16f6:	60f8      	str	r0, [r7, #12]
    16f8:	60b9      	str	r1, [r7, #8]
    16fa:	607a      	str	r2, [r7, #4]
  unsigned NumBytesRead;
  //
  SEGGER_RTT_LOCK();
    16fc:	f3ef 8311 	mrs	r3, BASEPRI
    1700:	f04f 0150 	mov.w	r1, #80	; 0x50
    1704:	f381 8811 	msr	BASEPRI, r1
    1708:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking read function
  //
  NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
    170a:	687a      	ldr	r2, [r7, #4]
    170c:	68b9      	ldr	r1, [r7, #8]
    170e:	68f8      	ldr	r0, [r7, #12]
    1710:	f7ff ff74 	bl	15fc <SEGGER_RTT_ReadNoLock>
    1714:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
    1716:	697b      	ldr	r3, [r7, #20]
    1718:	f383 8811 	msr	BASEPRI, r3
  //
  return NumBytesRead;
    171c:	693b      	ldr	r3, [r7, #16]
}
    171e:	4618      	mov	r0, r3
    1720:	3718      	adds	r7, #24
    1722:	46bd      	mov	sp, r7
    1724:	bd80      	pop	{r7, pc}
    1726:	bf00      	nop

00001728 <SEGGER_RTT_WriteWithOverwriteNoLock>:
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
*        connection reads RTT data.
*/
void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1728:	b580      	push	{r7, lr}
    172a:	b088      	sub	sp, #32
    172c:	af00      	add	r7, sp, #0
    172e:	60f8      	str	r0, [r7, #12]
    1730:	60b9      	str	r1, [r7, #8]
    1732:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned              Avail;

  pData = (const char *)pBuffer;
    1734:	68bb      	ldr	r3, [r7, #8]
    1736:	61fb      	str	r3, [r7, #28]
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1738:	68fb      	ldr	r3, [r7, #12]
    173a:	1c5a      	adds	r2, r3, #1
    173c:	4613      	mov	r3, r2
    173e:	005b      	lsls	r3, r3, #1
    1740:	4413      	add	r3, r2
    1742:	00db      	lsls	r3, r3, #3
    1744:	4a42      	ldr	r2, [pc, #264]	; (1850 <SEGGER_RTT_WriteWithOverwriteNoLock+0x128>)
    1746:	4413      	add	r3, r2
    1748:	613b      	str	r3, [r7, #16]
  //
  // Check if we will overwrite data and need to adjust the RdOff.
  //
  if (pRing->WrOff == pRing->RdOff) {
    174a:	693b      	ldr	r3, [r7, #16]
    174c:	68da      	ldr	r2, [r3, #12]
    174e:	693b      	ldr	r3, [r7, #16]
    1750:	691b      	ldr	r3, [r3, #16]
    1752:	429a      	cmp	r2, r3
    1754:	d104      	bne.n	1760 <SEGGER_RTT_WriteWithOverwriteNoLock+0x38>
    Avail = pRing->SizeOfBuffer - 1u;
    1756:	693b      	ldr	r3, [r7, #16]
    1758:	689b      	ldr	r3, [r3, #8]
    175a:	3b01      	subs	r3, #1
    175c:	61bb      	str	r3, [r7, #24]
    175e:	e017      	b.n	1790 <SEGGER_RTT_WriteWithOverwriteNoLock+0x68>
  } else if ( pRing->WrOff < pRing->RdOff) {
    1760:	693b      	ldr	r3, [r7, #16]
    1762:	68da      	ldr	r2, [r3, #12]
    1764:	693b      	ldr	r3, [r7, #16]
    1766:	691b      	ldr	r3, [r3, #16]
    1768:	429a      	cmp	r2, r3
    176a:	d207      	bcs.n	177c <SEGGER_RTT_WriteWithOverwriteNoLock+0x54>
    Avail = pRing->RdOff - pRing->WrOff - 1u;
    176c:	693b      	ldr	r3, [r7, #16]
    176e:	691a      	ldr	r2, [r3, #16]
    1770:	693b      	ldr	r3, [r7, #16]
    1772:	68db      	ldr	r3, [r3, #12]
    1774:	1ad3      	subs	r3, r2, r3
    1776:	3b01      	subs	r3, #1
    1778:	61bb      	str	r3, [r7, #24]
    177a:	e009      	b.n	1790 <SEGGER_RTT_WriteWithOverwriteNoLock+0x68>
  } else {
    Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
    177c:	693b      	ldr	r3, [r7, #16]
    177e:	691a      	ldr	r2, [r3, #16]
    1780:	693b      	ldr	r3, [r7, #16]
    1782:	68db      	ldr	r3, [r3, #12]
    1784:	1ad2      	subs	r2, r2, r3
    1786:	693b      	ldr	r3, [r7, #16]
    1788:	689b      	ldr	r3, [r3, #8]
    178a:	4413      	add	r3, r2
    178c:	3b01      	subs	r3, #1
    178e:	61bb      	str	r3, [r7, #24]
  }
  if (NumBytes > Avail) {
    1790:	687a      	ldr	r2, [r7, #4]
    1792:	69bb      	ldr	r3, [r7, #24]
    1794:	429a      	cmp	r2, r3
    1796:	d915      	bls.n	17c4 <SEGGER_RTT_WriteWithOverwriteNoLock+0x9c>
    pRing->RdOff += (NumBytes - Avail);
    1798:	693b      	ldr	r3, [r7, #16]
    179a:	691a      	ldr	r2, [r3, #16]
    179c:	6879      	ldr	r1, [r7, #4]
    179e:	69bb      	ldr	r3, [r7, #24]
    17a0:	1acb      	subs	r3, r1, r3
    17a2:	441a      	add	r2, r3
    17a4:	693b      	ldr	r3, [r7, #16]
    17a6:	611a      	str	r2, [r3, #16]
    while (pRing->RdOff >= pRing->SizeOfBuffer) {
    17a8:	e006      	b.n	17b8 <SEGGER_RTT_WriteWithOverwriteNoLock+0x90>
      pRing->RdOff -= pRing->SizeOfBuffer;
    17aa:	693b      	ldr	r3, [r7, #16]
    17ac:	691a      	ldr	r2, [r3, #16]
    17ae:	693b      	ldr	r3, [r7, #16]
    17b0:	689b      	ldr	r3, [r3, #8]
    17b2:	1ad2      	subs	r2, r2, r3
    17b4:	693b      	ldr	r3, [r7, #16]
    17b6:	611a      	str	r2, [r3, #16]
  } else {
    Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
  }
  if (NumBytes > Avail) {
    pRing->RdOff += (NumBytes - Avail);
    while (pRing->RdOff >= pRing->SizeOfBuffer) {
    17b8:	693b      	ldr	r3, [r7, #16]
    17ba:	691a      	ldr	r2, [r3, #16]
    17bc:	693b      	ldr	r3, [r7, #16]
    17be:	689b      	ldr	r3, [r3, #8]
    17c0:	429a      	cmp	r2, r3
    17c2:	d2f2      	bcs.n	17aa <SEGGER_RTT_WriteWithOverwriteNoLock+0x82>
    }
  }
  //
  // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
  //
  Avail = pRing->SizeOfBuffer - pRing->WrOff;
    17c4:	693b      	ldr	r3, [r7, #16]
    17c6:	689a      	ldr	r2, [r3, #8]
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	68db      	ldr	r3, [r3, #12]
    17cc:	1ad3      	subs	r3, r2, r3
    17ce:	61bb      	str	r3, [r7, #24]
  do {
    if (Avail > NumBytes) {
    17d0:	69ba      	ldr	r2, [r7, #24]
    17d2:	687b      	ldr	r3, [r7, #4]
    17d4:	429a      	cmp	r2, r3
    17d6:	d91a      	bls.n	180e <SEGGER_RTT_WriteWithOverwriteNoLock+0xe6>
      //
      // Last round
      //
#if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts. Use a simple byte loop instead.
      char* pDst;
      pDst = pRing->pBuffer + pRing->WrOff;
    17d8:	693b      	ldr	r3, [r7, #16]
    17da:	685a      	ldr	r2, [r3, #4]
    17dc:	693b      	ldr	r3, [r7, #16]
    17de:	68db      	ldr	r3, [r3, #12]
    17e0:	4413      	add	r3, r2
    17e2:	617b      	str	r3, [r7, #20]
      pRing->WrOff += NumBytes;
    17e4:	693b      	ldr	r3, [r7, #16]
    17e6:	68da      	ldr	r2, [r3, #12]
    17e8:	687b      	ldr	r3, [r7, #4]
    17ea:	441a      	add	r2, r3
    17ec:	693b      	ldr	r3, [r7, #16]
    17ee:	60da      	str	r2, [r3, #12]
      do {
        *pDst++ = *pData++;
    17f0:	697b      	ldr	r3, [r7, #20]
    17f2:	1c5a      	adds	r2, r3, #1
    17f4:	617a      	str	r2, [r7, #20]
    17f6:	69fa      	ldr	r2, [r7, #28]
    17f8:	1c51      	adds	r1, r2, #1
    17fa:	61f9      	str	r1, [r7, #28]
    17fc:	7812      	ldrb	r2, [r2, #0]
    17fe:	701a      	strb	r2, [r3, #0]
      } while (--NumBytes);
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	3b01      	subs	r3, #1
    1804:	607b      	str	r3, [r7, #4]
    1806:	687b      	ldr	r3, [r7, #4]
    1808:	2b00      	cmp	r3, #0
    180a:	d1f1      	bne.n	17f0 <SEGGER_RTT_WriteWithOverwriteNoLock+0xc8>
#else
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
      pRing->WrOff += NumBytes;
#endif
      break;  //Alternatively: NumBytes = 0;
    180c:	e01b      	b.n	1846 <SEGGER_RTT_WriteWithOverwriteNoLock+0x11e>
    } else {
      //
      //  Wrap-around necessary, write until wrap-around and reset WrOff
      //
      memcpy(pRing->pBuffer + pRing->WrOff, pData, Avail);
    180e:	693b      	ldr	r3, [r7, #16]
    1810:	685a      	ldr	r2, [r3, #4]
    1812:	693b      	ldr	r3, [r7, #16]
    1814:	68db      	ldr	r3, [r3, #12]
    1816:	4413      	add	r3, r2
    1818:	69ba      	ldr	r2, [r7, #24]
    181a:	69f9      	ldr	r1, [r7, #28]
    181c:	4618      	mov	r0, r3
    181e:	f00e f96e 	bl	fafe <memcpy>
      pData += Avail;
    1822:	69fa      	ldr	r2, [r7, #28]
    1824:	69bb      	ldr	r3, [r7, #24]
    1826:	4413      	add	r3, r2
    1828:	61fb      	str	r3, [r7, #28]
      pRing->WrOff = 0;
    182a:	693b      	ldr	r3, [r7, #16]
    182c:	2200      	movs	r2, #0
    182e:	60da      	str	r2, [r3, #12]
      NumBytes -= Avail;
    1830:	687a      	ldr	r2, [r7, #4]
    1832:	69bb      	ldr	r3, [r7, #24]
    1834:	1ad3      	subs	r3, r2, r3
    1836:	607b      	str	r3, [r7, #4]
      Avail = (pRing->SizeOfBuffer - 1);
    1838:	693b      	ldr	r3, [r7, #16]
    183a:	689b      	ldr	r3, [r3, #8]
    183c:	3b01      	subs	r3, #1
    183e:	61bb      	str	r3, [r7, #24]
    }
  } while (NumBytes);
    1840:	687b      	ldr	r3, [r7, #4]
    1842:	2b00      	cmp	r3, #0
    1844:	d1c4      	bne.n	17d0 <SEGGER_RTT_WriteWithOverwriteNoLock+0xa8>
}
    1846:	bf00      	nop
    1848:	3720      	adds	r7, #32
    184a:	46bd      	mov	sp, r7
    184c:	bd80      	pop	{r7, pc}
    184e:	bf00      	nop
    1850:	20003518 	.word	0x20003518

00001854 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1854:	b580      	push	{r7, lr}
    1856:	b08c      	sub	sp, #48	; 0x30
    1858:	af00      	add	r7, sp, #0
    185a:	60f8      	str	r0, [r7, #12]
    185c:	60b9      	str	r1, [r7, #8]
    185e:	607a      	str	r2, [r7, #4]
  unsigned              Avail;
  unsigned              RdOff;
  unsigned              WrOff;
  unsigned              Rem;

  pData = (const char *)pBuffer;
    1860:	68bb      	ldr	r3, [r7, #8]
    1862:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    1864:	68fb      	ldr	r3, [r7, #12]
    1866:	1c5a      	adds	r2, r3, #1
    1868:	4613      	mov	r3, r2
    186a:	005b      	lsls	r3, r3, #1
    186c:	4413      	add	r3, r2
    186e:	00db      	lsls	r3, r3, #3
    1870:	4a46      	ldr	r2, [pc, #280]	; (198c <SEGGER_RTT_WriteSkipNoLock+0x138>)
    1872:	4413      	add	r3, r2
    1874:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
    1876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1878:	691b      	ldr	r3, [r3, #16]
    187a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
    187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    187e:	68db      	ldr	r3, [r3, #12]
    1880:	61fb      	str	r3, [r7, #28]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
    1882:	6a3a      	ldr	r2, [r7, #32]
    1884:	69fb      	ldr	r3, [r7, #28]
    1886:	429a      	cmp	r2, r3
    1888:	d862      	bhi.n	1950 <SEGGER_RTT_WriteSkipNoLock+0xfc>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
    188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    188c:	689a      	ldr	r2, [r3, #8]
    188e:	69fb      	ldr	r3, [r7, #28]
    1890:	1ad3      	subs	r3, r2, r3
    1892:	3b01      	subs	r3, #1
    1894:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
    1896:	69ba      	ldr	r2, [r7, #24]
    1898:	687b      	ldr	r3, [r7, #4]
    189a:	429a      	cmp	r2, r3
    189c:	d31d      	bcc.n	18da <SEGGER_RTT_WriteSkipNoLock+0x86>
#if 1 // memcpy() is good for large amounts of data, but the overhead is too big for small amounts. Use a simple byte loop instead.
      char* pDst;
      pDst = pRing->pBuffer + WrOff;
    189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18a0:	685a      	ldr	r2, [r3, #4]
    18a2:	69fb      	ldr	r3, [r7, #28]
    18a4:	4413      	add	r3, r2
    18a6:	62bb      	str	r3, [r7, #40]	; 0x28
      WrOff += NumBytes;
    18a8:	69fa      	ldr	r2, [r7, #28]
    18aa:	687b      	ldr	r3, [r7, #4]
    18ac:	4413      	add	r3, r2
    18ae:	61fb      	str	r3, [r7, #28]
      do {
        *pDst++ = *pData++;
    18b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    18b2:	1c5a      	adds	r2, r3, #1
    18b4:	62ba      	str	r2, [r7, #40]	; 0x28
    18b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    18b8:	1c51      	adds	r1, r2, #1
    18ba:	62f9      	str	r1, [r7, #44]	; 0x2c
    18bc:	7812      	ldrb	r2, [r2, #0]
    18be:	701a      	strb	r2, [r3, #0]
      } while (--NumBytes);
    18c0:	687b      	ldr	r3, [r7, #4]
    18c2:	3b01      	subs	r3, #1
    18c4:	607b      	str	r3, [r7, #4]
    18c6:	687b      	ldr	r3, [r7, #4]
    18c8:	2b00      	cmp	r3, #0
    18ca:	d1f1      	bne.n	18b0 <SEGGER_RTT_WriteSkipNoLock+0x5c>
      pRing->WrOff = WrOff + NumBytes;
    18cc:	69fa      	ldr	r2, [r7, #28]
    18ce:	687b      	ldr	r3, [r7, #4]
    18d0:	441a      	add	r2, r3
    18d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18d4:	60da      	str	r2, [r3, #12]
#else
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
      pRing->WrOff = WrOff + NumBytes;
#endif
      return 1;
    18d6:	2301      	movs	r3, #1
    18d8:	e054      	b.n	1984 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
    18da:	69ba      	ldr	r2, [r7, #24]
    18dc:	6a3b      	ldr	r3, [r7, #32]
    18de:	4413      	add	r3, r2
    18e0:	61bb      	str	r3, [r7, #24]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
    18e2:	69ba      	ldr	r2, [r7, #24]
    18e4:	687b      	ldr	r3, [r7, #4]
    18e6:	429a      	cmp	r2, r3
    18e8:	d34b      	bcc.n	1982 <SEGGER_RTT_WriteSkipNoLock+0x12e>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
    18ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18ec:	689a      	ldr	r2, [r3, #8]
    18ee:	69fb      	ldr	r3, [r7, #28]
    18f0:	1ad3      	subs	r3, r2, r3
    18f2:	617b      	str	r3, [r7, #20]
      if (Rem > NumBytes) {
    18f4:	697a      	ldr	r2, [r7, #20]
    18f6:	687b      	ldr	r3, [r7, #4]
    18f8:	429a      	cmp	r2, r3
    18fa:	d90e      	bls.n	191a <SEGGER_RTT_WriteSkipNoLock+0xc6>
        memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    18fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18fe:	685a      	ldr	r2, [r3, #4]
    1900:	69fb      	ldr	r3, [r7, #28]
    1902:	4413      	add	r3, r2
    1904:	687a      	ldr	r2, [r7, #4]
    1906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1908:	4618      	mov	r0, r3
    190a:	f00e f8f8 	bl	fafe <memcpy>
        pRing->WrOff = WrOff + NumBytes;
    190e:	69fa      	ldr	r2, [r7, #28]
    1910:	687b      	ldr	r3, [r7, #4]
    1912:	441a      	add	r2, r3
    1914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1916:	60da      	str	r2, [r3, #12]
    1918:	e018      	b.n	194c <SEGGER_RTT_WriteSkipNoLock+0xf8>
      } else {
        //
        // We reach the end of the buffer, so need to wrap around
        //
        memcpy(pRing->pBuffer + WrOff, pData, Rem);
    191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    191c:	685a      	ldr	r2, [r3, #4]
    191e:	69fb      	ldr	r3, [r7, #28]
    1920:	4413      	add	r3, r2
    1922:	697a      	ldr	r2, [r7, #20]
    1924:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    1926:	4618      	mov	r0, r3
    1928:	f00e f8e9 	bl	fafe <memcpy>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes - Rem);
    192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    192e:	6858      	ldr	r0, [r3, #4]
    1930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1932:	697b      	ldr	r3, [r7, #20]
    1934:	18d1      	adds	r1, r2, r3
    1936:	687a      	ldr	r2, [r7, #4]
    1938:	697b      	ldr	r3, [r7, #20]
    193a:	1ad3      	subs	r3, r2, r3
    193c:	461a      	mov	r2, r3
    193e:	f00e f8de 	bl	fafe <memcpy>
        pRing->WrOff = NumBytes - Rem;
    1942:	687a      	ldr	r2, [r7, #4]
    1944:	697b      	ldr	r3, [r7, #20]
    1946:	1ad2      	subs	r2, r2, r3
    1948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    194a:	60da      	str	r2, [r3, #12]
      }
      return 1;
    194c:	2301      	movs	r3, #1
    194e:	e019      	b.n	1984 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
    1950:	6a3a      	ldr	r2, [r7, #32]
    1952:	69fb      	ldr	r3, [r7, #28]
    1954:	1ad3      	subs	r3, r2, r3
    1956:	3b01      	subs	r3, #1
    1958:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {
    195a:	69ba      	ldr	r2, [r7, #24]
    195c:	687b      	ldr	r3, [r7, #4]
    195e:	429a      	cmp	r2, r3
    1960:	d30f      	bcc.n	1982 <SEGGER_RTT_WriteSkipNoLock+0x12e>
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    1962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1964:	685a      	ldr	r2, [r3, #4]
    1966:	69fb      	ldr	r3, [r7, #28]
    1968:	4413      	add	r3, r2
    196a:	687a      	ldr	r2, [r7, #4]
    196c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    196e:	4618      	mov	r0, r3
    1970:	f00e f8c5 	bl	fafe <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    1974:	69fa      	ldr	r2, [r7, #28]
    1976:	687b      	ldr	r3, [r7, #4]
    1978:	441a      	add	r2, r3
    197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    197c:	60da      	str	r2, [r3, #12]
      return 1;
    197e:	2301      	movs	r3, #1
    1980:	e000      	b.n	1984 <SEGGER_RTT_WriteSkipNoLock+0x130>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
    1982:	2300      	movs	r3, #0
}
    1984:	4618      	mov	r0, r3
    1986:	3730      	adds	r7, #48	; 0x30
    1988:	46bd      	mov	sp, r7
    198a:	bd80      	pop	{r7, pc}
    198c:	20003518 	.word	0x20003518

00001990 <SEGGER_RTT_WriteNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1990:	b580      	push	{r7, lr}
    1992:	b088      	sub	sp, #32
    1994:	af00      	add	r7, sp, #0
    1996:	60f8      	str	r0, [r7, #12]
    1998:	60b9      	str	r1, [r7, #8]
    199a:	607a      	str	r2, [r7, #4]
  unsigned              Status;
  unsigned              Avail;
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;

  pData = (const char *)pBuffer;
    199c:	68bb      	ldr	r3, [r7, #8]
    199e:	61bb      	str	r3, [r7, #24]
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    19a0:	68fb      	ldr	r3, [r7, #12]
    19a2:	1c5a      	adds	r2, r3, #1
    19a4:	4613      	mov	r3, r2
    19a6:	005b      	lsls	r3, r3, #1
    19a8:	4413      	add	r3, r2
    19aa:	00db      	lsls	r3, r3, #3
    19ac:	4a1e      	ldr	r2, [pc, #120]	; (1a28 <SEGGER_RTT_WriteNoLock+0x98>)
    19ae:	4413      	add	r3, r2
    19b0:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    19b2:	697b      	ldr	r3, [r7, #20]
    19b4:	695b      	ldr	r3, [r3, #20]
    19b6:	2b01      	cmp	r3, #1
    19b8:	d017      	beq.n	19ea <SEGGER_RTT_WriteNoLock+0x5a>
    19ba:	2b01      	cmp	r3, #1
    19bc:	d302      	bcc.n	19c4 <SEGGER_RTT_WriteNoLock+0x34>
    19be:	2b02      	cmp	r3, #2
    19c0:	d023      	beq.n	1a0a <SEGGER_RTT_WriteNoLock+0x7a>
    19c2:	e029      	b.n	1a18 <SEGGER_RTT_WriteNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    19c4:	6978      	ldr	r0, [r7, #20]
    19c6:	f7ff fdf5 	bl	15b4 <_GetAvailWriteSpace>
    19ca:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
    19cc:	693a      	ldr	r2, [r7, #16]
    19ce:	687b      	ldr	r3, [r7, #4]
    19d0:	429a      	cmp	r2, r3
    19d2:	d202      	bcs.n	19da <SEGGER_RTT_WriteNoLock+0x4a>
      Status = 0u;
    19d4:	2300      	movs	r3, #0
    19d6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
    19d8:	e021      	b.n	1a1e <SEGGER_RTT_WriteNoLock+0x8e>
    //
    Avail = _GetAvailWriteSpace(pRing);
    if (Avail < NumBytes) {
      Status = 0u;
    } else {
      Status = NumBytes;
    19da:	687b      	ldr	r3, [r7, #4]
    19dc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
    19de:	687a      	ldr	r2, [r7, #4]
    19e0:	69b9      	ldr	r1, [r7, #24]
    19e2:	6978      	ldr	r0, [r7, #20]
    19e4:	f7ff fd8c 	bl	1500 <_WriteNoCheck>
    }
    break;
    19e8:	e019      	b.n	1a1e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
    19ea:	6978      	ldr	r0, [r7, #20]
    19ec:	f7ff fde2 	bl	15b4 <_GetAvailWriteSpace>
    19f0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
    19f2:	687a      	ldr	r2, [r7, #4]
    19f4:	693b      	ldr	r3, [r7, #16]
    19f6:	4293      	cmp	r3, r2
    19f8:	bf28      	it	cs
    19fa:	4613      	movcs	r3, r2
    19fc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
    19fe:	69fa      	ldr	r2, [r7, #28]
    1a00:	69b9      	ldr	r1, [r7, #24]
    1a02:	6978      	ldr	r0, [r7, #20]
    1a04:	f7ff fd7c 	bl	1500 <_WriteNoCheck>
    break;
    1a08:	e009      	b.n	1a1e <SEGGER_RTT_WriteNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    1a0a:	687a      	ldr	r2, [r7, #4]
    1a0c:	69b9      	ldr	r1, [r7, #24]
    1a0e:	6978      	ldr	r0, [r7, #20]
    1a10:	f7ff fd1c 	bl	144c <_WriteBlocking>
    1a14:	61f8      	str	r0, [r7, #28]
    break;
    1a16:	e002      	b.n	1a1e <SEGGER_RTT_WriteNoLock+0x8e>
  default:
    Status = 0u;
    1a18:	2300      	movs	r3, #0
    1a1a:	61fb      	str	r3, [r7, #28]
    break;
    1a1c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
    1a1e:	69fb      	ldr	r3, [r7, #28]
}
    1a20:	4618      	mov	r0, r3
    1a22:	3720      	adds	r7, #32
    1a24:	46bd      	mov	sp, r7
    1a26:	bd80      	pop	{r7, pc}
    1a28:	20003518 	.word	0x20003518

00001a2c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) If there is not enough space in the "Up"-buffer, remaining characters of pBuffer are dropped.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1a2c:	b580      	push	{r7, lr}
    1a2e:	b086      	sub	sp, #24
    1a30:	af00      	add	r7, sp, #0
    1a32:	60f8      	str	r0, [r7, #12]
    1a34:	60b9      	str	r1, [r7, #8]
    1a36:	607a      	str	r2, [r7, #4]
  unsigned Status;
  //
  INIT();
    1a38:	4b0d      	ldr	r3, [pc, #52]	; (1a70 <SEGGER_RTT_Write+0x44>)
    1a3a:	781b      	ldrb	r3, [r3, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d101      	bne.n	1a44 <SEGGER_RTT_Write+0x18>
    1a40:	f7ff fcae 	bl	13a0 <_DoInit>
  SEGGER_RTT_LOCK();
    1a44:	f3ef 8311 	mrs	r3, BASEPRI
    1a48:	f04f 0150 	mov.w	r1, #80	; 0x50
    1a4c:	f381 8811 	msr	BASEPRI, r1
    1a50:	617b      	str	r3, [r7, #20]
  //
  // Call the non-locking write function
  //
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);
    1a52:	687a      	ldr	r2, [r7, #4]
    1a54:	68b9      	ldr	r1, [r7, #8]
    1a56:	68f8      	ldr	r0, [r7, #12]
    1a58:	f7ff ff9a 	bl	1990 <SEGGER_RTT_WriteNoLock>
    1a5c:	6138      	str	r0, [r7, #16]
  //
  // Finish up.
  //
  SEGGER_RTT_UNLOCK();
    1a5e:	697b      	ldr	r3, [r7, #20]
    1a60:	f383 8811 	msr	BASEPRI, r3
  //
  return Status;
    1a64:	693b      	ldr	r3, [r7, #16]
}
    1a66:	4618      	mov	r0, r3
    1a68:	3718      	adds	r7, #24
    1a6a:	46bd      	mov	sp, r7
    1a6c:	bd80      	pop	{r7, pc}
    1a6e:	bf00      	nop
    1a70:	20003518 	.word	0x20003518

00001a74 <SEGGER_RTT_WriteString>:
*    (1) If there is not enough space in the "Up"-buffer, depending on configuration,
*        remaining characters may be dropped or RTT module waits until there is more space in the buffer.
*    (2) String passed to this function has to be \0 terminated
*    (3) \0 termination character is *not* stored in RTT buffer
*/
unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
    1a74:	b580      	push	{r7, lr}
    1a76:	b084      	sub	sp, #16
    1a78:	af00      	add	r7, sp, #0
    1a7a:	6078      	str	r0, [r7, #4]
    1a7c:	6039      	str	r1, [r7, #0]
  unsigned Len;

  Len = STRLEN(s);
    1a7e:	6838      	ldr	r0, [r7, #0]
    1a80:	f00e f800 	bl	fa84 <strlen>
    1a84:	60f8      	str	r0, [r7, #12]
  return SEGGER_RTT_Write(BufferIndex, s, Len);
    1a86:	68fa      	ldr	r2, [r7, #12]
    1a88:	6839      	ldr	r1, [r7, #0]
    1a8a:	6878      	ldr	r0, [r7, #4]
    1a8c:	f7ff ffce 	bl	1a2c <SEGGER_RTT_Write>
    1a90:	4603      	mov	r3, r0
}
    1a92:	4618      	mov	r0, r3
    1a94:	3710      	adds	r7, #16
    1a96:	46bd      	mov	sp, r7
    1a98:	bd80      	pop	{r7, pc}
    1a9a:	bf00      	nop

00001a9c <SEGGER_RTT_GetKey>:
*    >= 0 -   Character which has been read. (Possible values: 0 - 255)
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0.
*/
int SEGGER_RTT_GetKey(void) {
    1a9c:	b580      	push	{r7, lr}
    1a9e:	b082      	sub	sp, #8
    1aa0:	af00      	add	r7, sp, #0
  char c;
  int r;

  r = (int)SEGGER_RTT_Read(0u, &c, 1u);
    1aa2:	1cfb      	adds	r3, r7, #3
    1aa4:	2201      	movs	r2, #1
    1aa6:	4619      	mov	r1, r3
    1aa8:	2000      	movs	r0, #0
    1aaa:	f7ff fe21 	bl	16f0 <SEGGER_RTT_Read>
    1aae:	4603      	mov	r3, r0
    1ab0:	607b      	str	r3, [r7, #4]
  if (r == 1) {
    1ab2:	687b      	ldr	r3, [r7, #4]
    1ab4:	2b01      	cmp	r3, #1
    1ab6:	d102      	bne.n	1abe <SEGGER_RTT_GetKey+0x22>
    r = (int)(unsigned char)c;
    1ab8:	78fb      	ldrb	r3, [r7, #3]
    1aba:	607b      	str	r3, [r7, #4]
    1abc:	e002      	b.n	1ac4 <SEGGER_RTT_GetKey+0x28>
  } else {
    r = -1;
    1abe:	f04f 33ff 	mov.w	r3, #4294967295
    1ac2:	607b      	str	r3, [r7, #4]
  }
  return r;
    1ac4:	687b      	ldr	r3, [r7, #4]
}
    1ac6:	4618      	mov	r0, r3
    1ac8:	3708      	adds	r7, #8
    1aca:	46bd      	mov	sp, r7
    1acc:	bd80      	pop	{r7, pc}
    1ace:	bf00      	nop

00001ad0 <SEGGER_RTT_WaitKey>:
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0
*    (2) This function is blocking if no character is present in RTT buffer
*/
int SEGGER_RTT_WaitKey(void) {
    1ad0:	b580      	push	{r7, lr}
    1ad2:	b082      	sub	sp, #8
    1ad4:	af00      	add	r7, sp, #0
  int r;

  do {
    r = SEGGER_RTT_GetKey();
    1ad6:	f7ff ffe1 	bl	1a9c <SEGGER_RTT_GetKey>
    1ada:	6078      	str	r0, [r7, #4]
  } while (r < 0);
    1adc:	687b      	ldr	r3, [r7, #4]
    1ade:	2b00      	cmp	r3, #0
    1ae0:	dbf9      	blt.n	1ad6 <SEGGER_RTT_WaitKey+0x6>
  return r;
    1ae2:	687b      	ldr	r3, [r7, #4]
}
    1ae4:	4618      	mov	r0, r3
    1ae6:	3708      	adds	r7, #8
    1ae8:	46bd      	mov	sp, r7
    1aea:	bd80      	pop	{r7, pc}

00001aec <SEGGER_RTT_HasKey>:
*    == 1 -     At least one character is available.
*
*  Notes
*    (1) This function is only specified for accesses to RTT buffer 0
*/
int SEGGER_RTT_HasKey(void) {
    1aec:	b580      	push	{r7, lr}
    1aee:	b082      	sub	sp, #8
    1af0:	af00      	add	r7, sp, #0
  unsigned RdOff;
  int r;

  INIT();
    1af2:	4b0d      	ldr	r3, [pc, #52]	; (1b28 <SEGGER_RTT_HasKey+0x3c>)
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d101      	bne.n	1afe <SEGGER_RTT_HasKey+0x12>
    1afa:	f7ff fc51 	bl	13a0 <_DoInit>
  RdOff = _SEGGER_RTT.aDown[0].RdOff;
    1afe:	4b0a      	ldr	r3, [pc, #40]	; (1b28 <SEGGER_RTT_HasKey+0x3c>)
    1b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    1b04:	603b      	str	r3, [r7, #0]
  if (RdOff != _SEGGER_RTT.aDown[0].WrOff) {
    1b06:	4b08      	ldr	r3, [pc, #32]	; (1b28 <SEGGER_RTT_HasKey+0x3c>)
    1b08:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
    1b0c:	683b      	ldr	r3, [r7, #0]
    1b0e:	429a      	cmp	r2, r3
    1b10:	d002      	beq.n	1b18 <SEGGER_RTT_HasKey+0x2c>
    r = 1;
    1b12:	2301      	movs	r3, #1
    1b14:	607b      	str	r3, [r7, #4]
    1b16:	e001      	b.n	1b1c <SEGGER_RTT_HasKey+0x30>
  } else {
    r = 0;
    1b18:	2300      	movs	r3, #0
    1b1a:	607b      	str	r3, [r7, #4]
  }
  return r;
    1b1c:	687b      	ldr	r3, [r7, #4]
}
    1b1e:	4618      	mov	r0, r3
    1b20:	3708      	adds	r7, #8
    1b22:	46bd      	mov	sp, r7
    1b24:	bd80      	pop	{r7, pc}
    1b26:	bf00      	nop
    1b28:	20003518 	.word	0x20003518

00001b2c <SEGGER_RTT_HasData>:
*  Return value:
*  ==0:  No data
*  !=0:  Data in buffer
*
*/
unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
    1b2c:	b480      	push	{r7}
    1b2e:	b085      	sub	sp, #20
    1b30:	af00      	add	r7, sp, #0
    1b32:	6078      	str	r0, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aDown[BufferIndex];
    1b34:	687a      	ldr	r2, [r7, #4]
    1b36:	4613      	mov	r3, r2
    1b38:	005b      	lsls	r3, r3, #1
    1b3a:	4413      	add	r3, r2
    1b3c:	00db      	lsls	r3, r3, #3
    1b3e:	3378      	adds	r3, #120	; 0x78
    1b40:	4a07      	ldr	r2, [pc, #28]	; (1b60 <SEGGER_RTT_HasData+0x34>)
    1b42:	4413      	add	r3, r2
    1b44:	60fb      	str	r3, [r7, #12]
  v = pRing->WrOff;
    1b46:	68fb      	ldr	r3, [r7, #12]
    1b48:	68db      	ldr	r3, [r3, #12]
    1b4a:	60bb      	str	r3, [r7, #8]
  return v - pRing->RdOff;
    1b4c:	68fb      	ldr	r3, [r7, #12]
    1b4e:	691b      	ldr	r3, [r3, #16]
    1b50:	68ba      	ldr	r2, [r7, #8]
    1b52:	1ad3      	subs	r3, r2, r3
}
    1b54:	4618      	mov	r0, r3
    1b56:	3714      	adds	r7, #20
    1b58:	46bd      	mov	sp, r7
    1b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b5e:	4770      	bx	lr
    1b60:	20003518 	.word	0x20003518

00001b64 <SEGGER_RTT_AllocDownBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1b64:	b580      	push	{r7, lr}
    1b66:	b086      	sub	sp, #24
    1b68:	af00      	add	r7, sp, #0
    1b6a:	60f8      	str	r0, [r7, #12]
    1b6c:	60b9      	str	r1, [r7, #8]
    1b6e:	607a      	str	r2, [r7, #4]
    1b70:	603b      	str	r3, [r7, #0]
  int BufferIndex;

  INIT();
    1b72:	4b38      	ldr	r3, [pc, #224]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1b74:	781b      	ldrb	r3, [r3, #0]
    1b76:	2b00      	cmp	r3, #0
    1b78:	d101      	bne.n	1b7e <SEGGER_RTT_AllocDownBuffer+0x1a>
    1b7a:	f7ff fc11 	bl	13a0 <_DoInit>
  SEGGER_RTT_LOCK();
    1b7e:	f3ef 8311 	mrs	r3, BASEPRI
    1b82:	f04f 0150 	mov.w	r1, #80	; 0x50
    1b86:	f381 8811 	msr	BASEPRI, r1
    1b8a:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
    1b8c:	2300      	movs	r3, #0
    1b8e:	617b      	str	r3, [r7, #20]
  do {
    if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
    1b90:	4930      	ldr	r1, [pc, #192]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1b92:	697a      	ldr	r2, [r7, #20]
    1b94:	4613      	mov	r3, r2
    1b96:	005b      	lsls	r3, r3, #1
    1b98:	4413      	add	r3, r2
    1b9a:	00db      	lsls	r3, r3, #3
    1b9c:	440b      	add	r3, r1
    1b9e:	337c      	adds	r3, #124	; 0x7c
    1ba0:	681b      	ldr	r3, [r3, #0]
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d008      	beq.n	1bb8 <SEGGER_RTT_AllocDownBuffer+0x54>
      break;
    }
    BufferIndex++;
    1ba6:	697b      	ldr	r3, [r7, #20]
    1ba8:	3301      	adds	r3, #1
    1baa:	617b      	str	r3, [r7, #20]
  } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
    1bac:	4b29      	ldr	r3, [pc, #164]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1bae:	695a      	ldr	r2, [r3, #20]
    1bb0:	697b      	ldr	r3, [r7, #20]
    1bb2:	429a      	cmp	r2, r3
    1bb4:	dcec      	bgt.n	1b90 <SEGGER_RTT_AllocDownBuffer+0x2c>
    1bb6:	e000      	b.n	1bba <SEGGER_RTT_AllocDownBuffer+0x56>
  INIT();
  SEGGER_RTT_LOCK();
  BufferIndex = 0;
  do {
    if (_SEGGER_RTT.aDown[BufferIndex].pBuffer == NULL) {
      break;
    1bb8:	bf00      	nop
    }
    BufferIndex++;
  } while (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers);
  if (BufferIndex < _SEGGER_RTT.MaxNumDownBuffers) {
    1bba:	4b26      	ldr	r3, [pc, #152]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1bbc:	695a      	ldr	r2, [r3, #20]
    1bbe:	697b      	ldr	r3, [r7, #20]
    1bc0:	429a      	cmp	r2, r3
    1bc2:	dd3c      	ble.n	1c3e <SEGGER_RTT_AllocDownBuffer+0xda>
    _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
    1bc4:	4923      	ldr	r1, [pc, #140]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1bc6:	697a      	ldr	r2, [r7, #20]
    1bc8:	4613      	mov	r3, r2
    1bca:	005b      	lsls	r3, r3, #1
    1bcc:	4413      	add	r3, r2
    1bce:	00db      	lsls	r3, r3, #3
    1bd0:	440b      	add	r3, r1
    1bd2:	3378      	adds	r3, #120	; 0x78
    1bd4:	68fa      	ldr	r2, [r7, #12]
    1bd6:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aDown[BufferIndex].pBuffer      = pBuffer;
    1bd8:	491e      	ldr	r1, [pc, #120]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1bda:	697a      	ldr	r2, [r7, #20]
    1bdc:	4613      	mov	r3, r2
    1bde:	005b      	lsls	r3, r3, #1
    1be0:	4413      	add	r3, r2
    1be2:	00db      	lsls	r3, r3, #3
    1be4:	440b      	add	r3, r1
    1be6:	337c      	adds	r3, #124	; 0x7c
    1be8:	68ba      	ldr	r2, [r7, #8]
    1bea:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
    1bec:	4919      	ldr	r1, [pc, #100]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1bee:	697a      	ldr	r2, [r7, #20]
    1bf0:	4613      	mov	r3, r2
    1bf2:	005b      	lsls	r3, r3, #1
    1bf4:	4413      	add	r3, r2
    1bf6:	00db      	lsls	r3, r3, #3
    1bf8:	440b      	add	r3, r1
    1bfa:	3380      	adds	r3, #128	; 0x80
    1bfc:	687a      	ldr	r2, [r7, #4]
    1bfe:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
    1c00:	4914      	ldr	r1, [pc, #80]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1c02:	697a      	ldr	r2, [r7, #20]
    1c04:	4613      	mov	r3, r2
    1c06:	005b      	lsls	r3, r3, #1
    1c08:	4413      	add	r3, r2
    1c0a:	00db      	lsls	r3, r3, #3
    1c0c:	440b      	add	r3, r1
    1c0e:	3388      	adds	r3, #136	; 0x88
    1c10:	2200      	movs	r2, #0
    1c12:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
    1c14:	490f      	ldr	r1, [pc, #60]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1c16:	697a      	ldr	r2, [r7, #20]
    1c18:	4613      	mov	r3, r2
    1c1a:	005b      	lsls	r3, r3, #1
    1c1c:	4413      	add	r3, r2
    1c1e:	00db      	lsls	r3, r3, #3
    1c20:	440b      	add	r3, r1
    1c22:	3384      	adds	r3, #132	; 0x84
    1c24:	2200      	movs	r2, #0
    1c26:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aDown[BufferIndex].Flags        = Flags;
    1c28:	490a      	ldr	r1, [pc, #40]	; (1c54 <SEGGER_RTT_AllocDownBuffer+0xf0>)
    1c2a:	697a      	ldr	r2, [r7, #20]
    1c2c:	4613      	mov	r3, r2
    1c2e:	005b      	lsls	r3, r3, #1
    1c30:	4413      	add	r3, r2
    1c32:	00db      	lsls	r3, r3, #3
    1c34:	440b      	add	r3, r1
    1c36:	338c      	adds	r3, #140	; 0x8c
    1c38:	683a      	ldr	r2, [r7, #0]
    1c3a:	601a      	str	r2, [r3, #0]
    1c3c:	e002      	b.n	1c44 <SEGGER_RTT_AllocDownBuffer+0xe0>
  } else {
    BufferIndex = -1;
    1c3e:	f04f 33ff 	mov.w	r3, #4294967295
    1c42:	617b      	str	r3, [r7, #20]
  }
  SEGGER_RTT_UNLOCK();
    1c44:	693b      	ldr	r3, [r7, #16]
    1c46:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
    1c4a:	697b      	ldr	r3, [r7, #20]
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	3718      	adds	r7, #24
    1c50:	46bd      	mov	sp, r7
    1c52:	bd80      	pop	{r7, pc}
    1c54:	20003518 	.word	0x20003518

00001c58 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1c58:	b580      	push	{r7, lr}
    1c5a:	b086      	sub	sp, #24
    1c5c:	af00      	add	r7, sp, #0
    1c5e:	60f8      	str	r0, [r7, #12]
    1c60:	60b9      	str	r1, [r7, #8]
    1c62:	607a      	str	r2, [r7, #4]
    1c64:	603b      	str	r3, [r7, #0]
  int BufferIndex;

  INIT();
    1c66:	4b39      	ldr	r3, [pc, #228]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d101      	bne.n	1c72 <SEGGER_RTT_AllocUpBuffer+0x1a>
    1c6e:	f7ff fb97 	bl	13a0 <_DoInit>
  SEGGER_RTT_LOCK();
    1c72:	f3ef 8311 	mrs	r3, BASEPRI
    1c76:	f04f 0150 	mov.w	r1, #80	; 0x50
    1c7a:	f381 8811 	msr	BASEPRI, r1
    1c7e:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
    1c80:	2300      	movs	r3, #0
    1c82:	617b      	str	r3, [r7, #20]
  do {
    if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
    1c84:	4931      	ldr	r1, [pc, #196]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1c86:	697b      	ldr	r3, [r7, #20]
    1c88:	1c5a      	adds	r2, r3, #1
    1c8a:	4613      	mov	r3, r2
    1c8c:	005b      	lsls	r3, r3, #1
    1c8e:	4413      	add	r3, r2
    1c90:	00db      	lsls	r3, r3, #3
    1c92:	440b      	add	r3, r1
    1c94:	3304      	adds	r3, #4
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	2b00      	cmp	r3, #0
    1c9a:	d008      	beq.n	1cae <SEGGER_RTT_AllocUpBuffer+0x56>
      break;
    }
    BufferIndex++;
    1c9c:	697b      	ldr	r3, [r7, #20]
    1c9e:	3301      	adds	r3, #1
    1ca0:	617b      	str	r3, [r7, #20]
  } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
    1ca2:	4b2a      	ldr	r3, [pc, #168]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1ca4:	691a      	ldr	r2, [r3, #16]
    1ca6:	697b      	ldr	r3, [r7, #20]
    1ca8:	429a      	cmp	r2, r3
    1caa:	dceb      	bgt.n	1c84 <SEGGER_RTT_AllocUpBuffer+0x2c>
    1cac:	e000      	b.n	1cb0 <SEGGER_RTT_AllocUpBuffer+0x58>
  INIT();
  SEGGER_RTT_LOCK();
  BufferIndex = 0;
  do {
    if (_SEGGER_RTT.aUp[BufferIndex].pBuffer == NULL) {
      break;
    1cae:	bf00      	nop
    }
    BufferIndex++;
  } while (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers);
  if (BufferIndex < _SEGGER_RTT.MaxNumUpBuffers) {
    1cb0:	4b26      	ldr	r3, [pc, #152]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1cb2:	691a      	ldr	r2, [r3, #16]
    1cb4:	697b      	ldr	r3, [r7, #20]
    1cb6:	429a      	cmp	r2, r3
    1cb8:	dd3d      	ble.n	1d36 <SEGGER_RTT_AllocUpBuffer+0xde>
    _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
    1cba:	4924      	ldr	r1, [pc, #144]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1cbc:	697b      	ldr	r3, [r7, #20]
    1cbe:	1c5a      	adds	r2, r3, #1
    1cc0:	4613      	mov	r3, r2
    1cc2:	005b      	lsls	r3, r3, #1
    1cc4:	4413      	add	r3, r2
    1cc6:	00db      	lsls	r3, r3, #3
    1cc8:	440b      	add	r3, r1
    1cca:	68fa      	ldr	r2, [r7, #12]
    1ccc:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aUp[BufferIndex].pBuffer      = pBuffer;
    1cce:	491f      	ldr	r1, [pc, #124]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1cd0:	697b      	ldr	r3, [r7, #20]
    1cd2:	1c5a      	adds	r2, r3, #1
    1cd4:	4613      	mov	r3, r2
    1cd6:	005b      	lsls	r3, r3, #1
    1cd8:	4413      	add	r3, r2
    1cda:	00db      	lsls	r3, r3, #3
    1cdc:	440b      	add	r3, r1
    1cde:	3304      	adds	r3, #4
    1ce0:	68ba      	ldr	r2, [r7, #8]
    1ce2:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
    1ce4:	4919      	ldr	r1, [pc, #100]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1ce6:	697a      	ldr	r2, [r7, #20]
    1ce8:	4613      	mov	r3, r2
    1cea:	005b      	lsls	r3, r3, #1
    1cec:	4413      	add	r3, r2
    1cee:	00db      	lsls	r3, r3, #3
    1cf0:	440b      	add	r3, r1
    1cf2:	3320      	adds	r3, #32
    1cf4:	687a      	ldr	r2, [r7, #4]
    1cf6:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
    1cf8:	4914      	ldr	r1, [pc, #80]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1cfa:	697a      	ldr	r2, [r7, #20]
    1cfc:	4613      	mov	r3, r2
    1cfe:	005b      	lsls	r3, r3, #1
    1d00:	4413      	add	r3, r2
    1d02:	00db      	lsls	r3, r3, #3
    1d04:	440b      	add	r3, r1
    1d06:	3328      	adds	r3, #40	; 0x28
    1d08:	2200      	movs	r2, #0
    1d0a:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
    1d0c:	490f      	ldr	r1, [pc, #60]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1d0e:	697a      	ldr	r2, [r7, #20]
    1d10:	4613      	mov	r3, r2
    1d12:	005b      	lsls	r3, r3, #1
    1d14:	4413      	add	r3, r2
    1d16:	00db      	lsls	r3, r3, #3
    1d18:	440b      	add	r3, r1
    1d1a:	3324      	adds	r3, #36	; 0x24
    1d1c:	2200      	movs	r2, #0
    1d1e:	601a      	str	r2, [r3, #0]
    _SEGGER_RTT.aUp[BufferIndex].Flags        = Flags;
    1d20:	490a      	ldr	r1, [pc, #40]	; (1d4c <SEGGER_RTT_AllocUpBuffer+0xf4>)
    1d22:	697a      	ldr	r2, [r7, #20]
    1d24:	4613      	mov	r3, r2
    1d26:	005b      	lsls	r3, r3, #1
    1d28:	4413      	add	r3, r2
    1d2a:	00db      	lsls	r3, r3, #3
    1d2c:	440b      	add	r3, r1
    1d2e:	332c      	adds	r3, #44	; 0x2c
    1d30:	683a      	ldr	r2, [r7, #0]
    1d32:	601a      	str	r2, [r3, #0]
    1d34:	e002      	b.n	1d3c <SEGGER_RTT_AllocUpBuffer+0xe4>
  } else {
    BufferIndex = -1;
    1d36:	f04f 33ff 	mov.w	r3, #4294967295
    1d3a:	617b      	str	r3, [r7, #20]
  }
  SEGGER_RTT_UNLOCK();
    1d3c:	693b      	ldr	r3, [r7, #16]
    1d3e:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
    1d42:	697b      	ldr	r3, [r7, #20]
}
    1d44:	4618      	mov	r0, r3
    1d46:	3718      	adds	r7, #24
    1d48:	46bd      	mov	sp, r7
    1d4a:	bd80      	pop	{r7, pc}
    1d4c:	20003518 	.word	0x20003518

00001d50 <SEGGER_RTT_ConfigUpBuffer>:
*
*  Return value
*    >= 0 - O.K.
*     < 0 - Error
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1d50:	b580      	push	{r7, lr}
    1d52:	b086      	sub	sp, #24
    1d54:	af00      	add	r7, sp, #0
    1d56:	60f8      	str	r0, [r7, #12]
    1d58:	60b9      	str	r1, [r7, #8]
    1d5a:	607a      	str	r2, [r7, #4]
    1d5c:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
    1d5e:	4b30      	ldr	r3, [pc, #192]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1d60:	781b      	ldrb	r3, [r3, #0]
    1d62:	2b00      	cmp	r3, #0
    1d64:	d101      	bne.n	1d6a <SEGGER_RTT_ConfigUpBuffer+0x1a>
    1d66:	f7ff fb1b 	bl	13a0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
    1d6a:	4b2d      	ldr	r3, [pc, #180]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1d6c:	691b      	ldr	r3, [r3, #16]
    1d6e:	461a      	mov	r2, r3
    1d70:	68fb      	ldr	r3, [r7, #12]
    1d72:	429a      	cmp	r2, r3
    1d74:	d94c      	bls.n	1e10 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
    1d76:	f3ef 8311 	mrs	r3, BASEPRI
    1d7a:	f04f 0150 	mov.w	r1, #80	; 0x50
    1d7e:	f381 8811 	msr	BASEPRI, r1
    1d82:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
    1d84:	68fb      	ldr	r3, [r7, #12]
    1d86:	2b00      	cmp	r3, #0
    1d88:	d032      	beq.n	1df0 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
    1d8a:	4925      	ldr	r1, [pc, #148]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1d8c:	68fb      	ldr	r3, [r7, #12]
    1d8e:	1c5a      	adds	r2, r3, #1
    1d90:	4613      	mov	r3, r2
    1d92:	005b      	lsls	r3, r3, #1
    1d94:	4413      	add	r3, r2
    1d96:	00db      	lsls	r3, r3, #3
    1d98:	440b      	add	r3, r1
    1d9a:	68ba      	ldr	r2, [r7, #8]
    1d9c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = pBuffer;
    1d9e:	4920      	ldr	r1, [pc, #128]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1da0:	68fb      	ldr	r3, [r7, #12]
    1da2:	1c5a      	adds	r2, r3, #1
    1da4:	4613      	mov	r3, r2
    1da6:	005b      	lsls	r3, r3, #1
    1da8:	4413      	add	r3, r2
    1daa:	00db      	lsls	r3, r3, #3
    1dac:	440b      	add	r3, r1
    1dae:	3304      	adds	r3, #4
    1db0:	687a      	ldr	r2, [r7, #4]
    1db2:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
    1db4:	491a      	ldr	r1, [pc, #104]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1db6:	68fa      	ldr	r2, [r7, #12]
    1db8:	4613      	mov	r3, r2
    1dba:	005b      	lsls	r3, r3, #1
    1dbc:	4413      	add	r3, r2
    1dbe:	00db      	lsls	r3, r3, #3
    1dc0:	440b      	add	r3, r1
    1dc2:	3320      	adds	r3, #32
    1dc4:	683a      	ldr	r2, [r7, #0]
    1dc6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
    1dc8:	4915      	ldr	r1, [pc, #84]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1dca:	68fa      	ldr	r2, [r7, #12]
    1dcc:	4613      	mov	r3, r2
    1dce:	005b      	lsls	r3, r3, #1
    1dd0:	4413      	add	r3, r2
    1dd2:	00db      	lsls	r3, r3, #3
    1dd4:	440b      	add	r3, r1
    1dd6:	3328      	adds	r3, #40	; 0x28
    1dd8:	2200      	movs	r2, #0
    1dda:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
    1ddc:	4910      	ldr	r1, [pc, #64]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1dde:	68fa      	ldr	r2, [r7, #12]
    1de0:	4613      	mov	r3, r2
    1de2:	005b      	lsls	r3, r3, #1
    1de4:	4413      	add	r3, r2
    1de6:	00db      	lsls	r3, r3, #3
    1de8:	440b      	add	r3, r1
    1dea:	3324      	adds	r3, #36	; 0x24
    1dec:	2200      	movs	r2, #0
    1dee:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
    1df0:	490b      	ldr	r1, [pc, #44]	; (1e20 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
    1df2:	68fa      	ldr	r2, [r7, #12]
    1df4:	4613      	mov	r3, r2
    1df6:	005b      	lsls	r3, r3, #1
    1df8:	4413      	add	r3, r2
    1dfa:	00db      	lsls	r3, r3, #3
    1dfc:	440b      	add	r3, r1
    1dfe:	332c      	adds	r3, #44	; 0x2c
    1e00:	6a3a      	ldr	r2, [r7, #32]
    1e02:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
    1e04:	693b      	ldr	r3, [r7, #16]
    1e06:	f383 8811 	msr	BASEPRI, r3
    r =  0;
    1e0a:	2300      	movs	r3, #0
    1e0c:	617b      	str	r3, [r7, #20]
    1e0e:	e002      	b.n	1e16 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
    1e10:	f04f 33ff 	mov.w	r3, #4294967295
    1e14:	617b      	str	r3, [r7, #20]
  }
  return r;
    1e16:	697b      	ldr	r3, [r7, #20]
}
    1e18:	4618      	mov	r0, r3
    1e1a:	3718      	adds	r7, #24
    1e1c:	46bd      	mov	sp, r7
    1e1e:	bd80      	pop	{r7, pc}
    1e20:	20003518 	.word	0x20003518

00001e24 <SEGGER_RTT_ConfigDownBuffer>:
*
*  Return value
*    >= 0  O.K.
*     < 0  Error
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
    1e24:	b580      	push	{r7, lr}
    1e26:	b086      	sub	sp, #24
    1e28:	af00      	add	r7, sp, #0
    1e2a:	60f8      	str	r0, [r7, #12]
    1e2c:	60b9      	str	r1, [r7, #8]
    1e2e:	607a      	str	r2, [r7, #4]
    1e30:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
    1e32:	4b30      	ldr	r3, [pc, #192]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d101      	bne.n	1e3e <SEGGER_RTT_ConfigDownBuffer+0x1a>
    1e3a:	f7ff fab1 	bl	13a0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
    1e3e:	4b2d      	ldr	r3, [pc, #180]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1e40:	695b      	ldr	r3, [r3, #20]
    1e42:	461a      	mov	r2, r3
    1e44:	68fb      	ldr	r3, [r7, #12]
    1e46:	429a      	cmp	r2, r3
    1e48:	d94b      	bls.n	1ee2 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
    1e4a:	f3ef 8311 	mrs	r3, BASEPRI
    1e4e:	f04f 0150 	mov.w	r1, #80	; 0x50
    1e52:	f381 8811 	msr	BASEPRI, r1
    1e56:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
    1e58:	68fb      	ldr	r3, [r7, #12]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d031      	beq.n	1ec2 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
    1e5e:	4925      	ldr	r1, [pc, #148]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1e60:	68fa      	ldr	r2, [r7, #12]
    1e62:	4613      	mov	r3, r2
    1e64:	005b      	lsls	r3, r3, #1
    1e66:	4413      	add	r3, r2
    1e68:	00db      	lsls	r3, r3, #3
    1e6a:	440b      	add	r3, r1
    1e6c:	3378      	adds	r3, #120	; 0x78
    1e6e:	68ba      	ldr	r2, [r7, #8]
    1e70:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = pBuffer;
    1e72:	4920      	ldr	r1, [pc, #128]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1e74:	68fa      	ldr	r2, [r7, #12]
    1e76:	4613      	mov	r3, r2
    1e78:	005b      	lsls	r3, r3, #1
    1e7a:	4413      	add	r3, r2
    1e7c:	00db      	lsls	r3, r3, #3
    1e7e:	440b      	add	r3, r1
    1e80:	337c      	adds	r3, #124	; 0x7c
    1e82:	687a      	ldr	r2, [r7, #4]
    1e84:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
    1e86:	491b      	ldr	r1, [pc, #108]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1e88:	68fa      	ldr	r2, [r7, #12]
    1e8a:	4613      	mov	r3, r2
    1e8c:	005b      	lsls	r3, r3, #1
    1e8e:	4413      	add	r3, r2
    1e90:	00db      	lsls	r3, r3, #3
    1e92:	440b      	add	r3, r1
    1e94:	3380      	adds	r3, #128	; 0x80
    1e96:	683a      	ldr	r2, [r7, #0]
    1e98:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
    1e9a:	4916      	ldr	r1, [pc, #88]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1e9c:	68fa      	ldr	r2, [r7, #12]
    1e9e:	4613      	mov	r3, r2
    1ea0:	005b      	lsls	r3, r3, #1
    1ea2:	4413      	add	r3, r2
    1ea4:	00db      	lsls	r3, r3, #3
    1ea6:	440b      	add	r3, r1
    1ea8:	3388      	adds	r3, #136	; 0x88
    1eaa:	2200      	movs	r2, #0
    1eac:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
    1eae:	4911      	ldr	r1, [pc, #68]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1eb0:	68fa      	ldr	r2, [r7, #12]
    1eb2:	4613      	mov	r3, r2
    1eb4:	005b      	lsls	r3, r3, #1
    1eb6:	4413      	add	r3, r2
    1eb8:	00db      	lsls	r3, r3, #3
    1eba:	440b      	add	r3, r1
    1ebc:	3384      	adds	r3, #132	; 0x84
    1ebe:	2200      	movs	r2, #0
    1ec0:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
    1ec2:	490c      	ldr	r1, [pc, #48]	; (1ef4 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
    1ec4:	68fa      	ldr	r2, [r7, #12]
    1ec6:	4613      	mov	r3, r2
    1ec8:	005b      	lsls	r3, r3, #1
    1eca:	4413      	add	r3, r2
    1ecc:	00db      	lsls	r3, r3, #3
    1ece:	440b      	add	r3, r1
    1ed0:	338c      	adds	r3, #140	; 0x8c
    1ed2:	6a3a      	ldr	r2, [r7, #32]
    1ed4:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
    1ed6:	693b      	ldr	r3, [r7, #16]
    1ed8:	f383 8811 	msr	BASEPRI, r3
    r =  0;
    1edc:	2300      	movs	r3, #0
    1ede:	617b      	str	r3, [r7, #20]
    1ee0:	e002      	b.n	1ee8 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
    1ee2:	f04f 33ff 	mov.w	r3, #4294967295
    1ee6:	617b      	str	r3, [r7, #20]
  }
  return r;
    1ee8:	697b      	ldr	r3, [r7, #20]
}
    1eea:	4618      	mov	r0, r3
    1eec:	3718      	adds	r7, #24
    1eee:	46bd      	mov	sp, r7
    1ef0:	bd80      	pop	{r7, pc}
    1ef2:	bf00      	nop
    1ef4:	20003518 	.word	0x20003518

00001ef8 <SEGGER_RTT_SetNameUpBuffer>:
*
*  Return value
*    >= 0  O.K.
*     < 0  Error
*/
int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
    1ef8:	b580      	push	{r7, lr}
    1efa:	b084      	sub	sp, #16
    1efc:	af00      	add	r7, sp, #0
    1efe:	6078      	str	r0, [r7, #4]
    1f00:	6039      	str	r1, [r7, #0]
  int r;

  INIT();
    1f02:	4b15      	ldr	r3, [pc, #84]	; (1f58 <SEGGER_RTT_SetNameUpBuffer+0x60>)
    1f04:	781b      	ldrb	r3, [r3, #0]
    1f06:	2b00      	cmp	r3, #0
    1f08:	d101      	bne.n	1f0e <SEGGER_RTT_SetNameUpBuffer+0x16>
    1f0a:	f7ff fa49 	bl	13a0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
    1f0e:	4b12      	ldr	r3, [pc, #72]	; (1f58 <SEGGER_RTT_SetNameUpBuffer+0x60>)
    1f10:	691b      	ldr	r3, [r3, #16]
    1f12:	461a      	mov	r2, r3
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	429a      	cmp	r2, r3
    1f18:	d916      	bls.n	1f48 <SEGGER_RTT_SetNameUpBuffer+0x50>
    SEGGER_RTT_LOCK();
    1f1a:	f3ef 8311 	mrs	r3, BASEPRI
    1f1e:	f04f 0150 	mov.w	r1, #80	; 0x50
    1f22:	f381 8811 	msr	BASEPRI, r1
    1f26:	60bb      	str	r3, [r7, #8]
    _SEGGER_RTT.aUp[BufferIndex].sName = sName;
    1f28:	490b      	ldr	r1, [pc, #44]	; (1f58 <SEGGER_RTT_SetNameUpBuffer+0x60>)
    1f2a:	687b      	ldr	r3, [r7, #4]
    1f2c:	1c5a      	adds	r2, r3, #1
    1f2e:	4613      	mov	r3, r2
    1f30:	005b      	lsls	r3, r3, #1
    1f32:	4413      	add	r3, r2
    1f34:	00db      	lsls	r3, r3, #3
    1f36:	440b      	add	r3, r1
    1f38:	683a      	ldr	r2, [r7, #0]
    1f3a:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
    1f3c:	68bb      	ldr	r3, [r7, #8]
    1f3e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
    1f42:	2300      	movs	r3, #0
    1f44:	60fb      	str	r3, [r7, #12]
    1f46:	e002      	b.n	1f4e <SEGGER_RTT_SetNameUpBuffer+0x56>
  } else {
    r = -1;
    1f48:	f04f 33ff 	mov.w	r3, #4294967295
    1f4c:	60fb      	str	r3, [r7, #12]
  }
  return r;
    1f4e:	68fb      	ldr	r3, [r7, #12]
}
    1f50:	4618      	mov	r0, r3
    1f52:	3710      	adds	r7, #16
    1f54:	46bd      	mov	sp, r7
    1f56:	bd80      	pop	{r7, pc}
    1f58:	20003518 	.word	0x20003518

00001f5c <SEGGER_RTT_SetNameDownBuffer>:
*
*  Return value
*    >= 0  O.K.
*     < 0  Error
*/
int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b084      	sub	sp, #16
    1f60:	af00      	add	r7, sp, #0
    1f62:	6078      	str	r0, [r7, #4]
    1f64:	6039      	str	r1, [r7, #0]
  int r;

  INIT();
    1f66:	4b15      	ldr	r3, [pc, #84]	; (1fbc <SEGGER_RTT_SetNameDownBuffer+0x60>)
    1f68:	781b      	ldrb	r3, [r3, #0]
    1f6a:	2b00      	cmp	r3, #0
    1f6c:	d101      	bne.n	1f72 <SEGGER_RTT_SetNameDownBuffer+0x16>
    1f6e:	f7ff fa17 	bl	13a0 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
    1f72:	4b12      	ldr	r3, [pc, #72]	; (1fbc <SEGGER_RTT_SetNameDownBuffer+0x60>)
    1f74:	695b      	ldr	r3, [r3, #20]
    1f76:	461a      	mov	r2, r3
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	429a      	cmp	r2, r3
    1f7c:	d916      	bls.n	1fac <SEGGER_RTT_SetNameDownBuffer+0x50>
    SEGGER_RTT_LOCK();
    1f7e:	f3ef 8311 	mrs	r3, BASEPRI
    1f82:	f04f 0150 	mov.w	r1, #80	; 0x50
    1f86:	f381 8811 	msr	BASEPRI, r1
    1f8a:	60bb      	str	r3, [r7, #8]
    _SEGGER_RTT.aDown[BufferIndex].sName = sName;
    1f8c:	490b      	ldr	r1, [pc, #44]	; (1fbc <SEGGER_RTT_SetNameDownBuffer+0x60>)
    1f8e:	687a      	ldr	r2, [r7, #4]
    1f90:	4613      	mov	r3, r2
    1f92:	005b      	lsls	r3, r3, #1
    1f94:	4413      	add	r3, r2
    1f96:	00db      	lsls	r3, r3, #3
    1f98:	440b      	add	r3, r1
    1f9a:	3378      	adds	r3, #120	; 0x78
    1f9c:	683a      	ldr	r2, [r7, #0]
    1f9e:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
    1fa0:	68bb      	ldr	r3, [r7, #8]
    1fa2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
    1fa6:	2300      	movs	r3, #0
    1fa8:	60fb      	str	r3, [r7, #12]
    1faa:	e002      	b.n	1fb2 <SEGGER_RTT_SetNameDownBuffer+0x56>
  } else {
    r = -1;
    1fac:	f04f 33ff 	mov.w	r3, #4294967295
    1fb0:	60fb      	str	r3, [r7, #12]
  }
  return r;
    1fb2:	68fb      	ldr	r3, [r7, #12]
}
    1fb4:	4618      	mov	r0, r3
    1fb6:	3710      	adds	r7, #16
    1fb8:	46bd      	mov	sp, r7
    1fba:	bd80      	pop	{r7, pc}
    1fbc:	20003518 	.word	0x20003518

00001fc0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    1fc0:	b580      	push	{r7, lr}
    1fc2:	af00      	add	r7, sp, #0
  INIT();
    1fc4:	4b03      	ldr	r3, [pc, #12]	; (1fd4 <SEGGER_RTT_Init+0x14>)
    1fc6:	781b      	ldrb	r3, [r3, #0]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	d101      	bne.n	1fd0 <SEGGER_RTT_Init+0x10>
    1fcc:	f7ff f9e8 	bl	13a0 <_DoInit>
}
    1fd0:	bf00      	nop
    1fd2:	bd80      	pop	{r7, pc}
    1fd4:	20003518 	.word	0x20003518

00001fd8 <SEGGER_RTT_SetTerminal>:
*
*  Return value
*    >= 0  O.K.
*     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buffer to set the new terminal Id)
*/
int SEGGER_RTT_SetTerminal (char TerminalId) {
    1fd8:	b580      	push	{r7, lr}
    1fda:	b088      	sub	sp, #32
    1fdc:	af00      	add	r7, sp, #0
    1fde:	4603      	mov	r3, r0
    1fe0:	71fb      	strb	r3, [r7, #7]
  unsigned char                  ac[2];
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned Avail;
  int r;
  //
  INIT();
    1fe2:	4b26      	ldr	r3, [pc, #152]	; (207c <SEGGER_RTT_SetTerminal+0xa4>)
    1fe4:	781b      	ldrb	r3, [r3, #0]
    1fe6:	2b00      	cmp	r3, #0
    1fe8:	d101      	bne.n	1fee <SEGGER_RTT_SetTerminal+0x16>
    1fea:	f7ff f9d9 	bl	13a0 <_DoInit>
  //
  r = 0;
    1fee:	2300      	movs	r3, #0
    1ff0:	61fb      	str	r3, [r7, #28]
  ac[0] = 0xFFU;
    1ff2:	23ff      	movs	r3, #255	; 0xff
    1ff4:	733b      	strb	r3, [r7, #12]
  if ((unsigned char)TerminalId < (unsigned char)sizeof(_aTerminalId)) { // We only support a certain number of channels
    1ff6:	79fb      	ldrb	r3, [r7, #7]
    1ff8:	2b0f      	cmp	r3, #15
    1ffa:	d836      	bhi.n	206a <SEGGER_RTT_SetTerminal+0x92>
    ac[1] = _aTerminalId[(unsigned char)TerminalId];
    1ffc:	79fb      	ldrb	r3, [r7, #7]
    1ffe:	4a20      	ldr	r2, [pc, #128]	; (2080 <SEGGER_RTT_SetTerminal+0xa8>)
    2000:	5cd3      	ldrb	r3, [r2, r3]
    2002:	737b      	strb	r3, [r7, #13]
    pRing = &_SEGGER_RTT.aUp[0];    // Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
    2004:	4b1f      	ldr	r3, [pc, #124]	; (2084 <SEGGER_RTT_SetTerminal+0xac>)
    2006:	61bb      	str	r3, [r7, #24]
    SEGGER_RTT_LOCK();    // Lock to make sure that no other task is writing into buffer, while we are and number of free bytes in buffer does not change downwards after checking and before writing
    2008:	f3ef 8311 	mrs	r3, BASEPRI
    200c:	f04f 0150 	mov.w	r1, #80	; 0x50
    2010:	f381 8811 	msr	BASEPRI, r1
    2014:	617b      	str	r3, [r7, #20]
    if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
    2016:	69bb      	ldr	r3, [r7, #24]
    2018:	695b      	ldr	r3, [r3, #20]
    201a:	f003 0303 	and.w	r3, r3, #3
    201e:	2b02      	cmp	r3, #2
    2020:	d10a      	bne.n	2038 <SEGGER_RTT_SetTerminal+0x60>
      _ActiveTerminal = TerminalId;
    2022:	4a19      	ldr	r2, [pc, #100]	; (2088 <SEGGER_RTT_SetTerminal+0xb0>)
    2024:	79fb      	ldrb	r3, [r7, #7]
    2026:	7013      	strb	r3, [r2, #0]
      (void)_WriteBlocking(pRing, (const char*)ac, 2u);
    2028:	f107 030c 	add.w	r3, r7, #12
    202c:	2202      	movs	r2, #2
    202e:	4619      	mov	r1, r3
    2030:	69b8      	ldr	r0, [r7, #24]
    2032:	f7ff fa0b 	bl	144c <_WriteBlocking>
    2036:	e014      	b.n	2062 <SEGGER_RTT_SetTerminal+0x8a>
    } else {                                                                            // Skipping mode or trim mode? => We cannot trim this command so handling is the same for both modes
      Avail = _GetAvailWriteSpace(pRing);
    2038:	69b8      	ldr	r0, [r7, #24]
    203a:	f7ff fabb 	bl	15b4 <_GetAvailWriteSpace>
    203e:	6138      	str	r0, [r7, #16]
      if (Avail >= 2) {
    2040:	693b      	ldr	r3, [r7, #16]
    2042:	2b01      	cmp	r3, #1
    2044:	d90a      	bls.n	205c <SEGGER_RTT_SetTerminal+0x84>
        _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
    2046:	4a10      	ldr	r2, [pc, #64]	; (2088 <SEGGER_RTT_SetTerminal+0xb0>)
    2048:	79fb      	ldrb	r3, [r7, #7]
    204a:	7013      	strb	r3, [r2, #0]
        _WriteNoCheck(pRing, (const char*)ac, 2u);
    204c:	f107 030c 	add.w	r3, r7, #12
    2050:	2202      	movs	r2, #2
    2052:	4619      	mov	r1, r3
    2054:	69b8      	ldr	r0, [r7, #24]
    2056:	f7ff fa53 	bl	1500 <_WriteNoCheck>
    205a:	e002      	b.n	2062 <SEGGER_RTT_SetTerminal+0x8a>
      } else {
        r = -1;
    205c:	f04f 33ff 	mov.w	r3, #4294967295
    2060:	61fb      	str	r3, [r7, #28]
      }
    }
    SEGGER_RTT_UNLOCK();
    2062:	697b      	ldr	r3, [r7, #20]
    2064:	f383 8811 	msr	BASEPRI, r3
    2068:	e002      	b.n	2070 <SEGGER_RTT_SetTerminal+0x98>
  } else {
    r = -1;
    206a:	f04f 33ff 	mov.w	r3, #4294967295
    206e:	61fb      	str	r3, [r7, #28]
  }
  return r;
    2070:	69fb      	ldr	r3, [r7, #28]
}
    2072:	4618      	mov	r0, r3
    2074:	3720      	adds	r7, #32
    2076:	46bd      	mov	sp, r7
    2078:	bd80      	pop	{r7, pc}
    207a:	bf00      	nop
    207c:	20003518 	.word	0x20003518
    2080:	20000008 	.word	0x20000008
    2084:	20003530 	.word	0x20003530
    2088:	200004f4 	.word	0x200004f4

0000208c <SEGGER_RTT_TerminalOut>:
*  Return value
*    >= 0 - Number of bytes written.
*     < 0 - Error.
*
*/
int SEGGER_RTT_TerminalOut (char TerminalId, const char* s) {
    208c:	b580      	push	{r7, lr}
    208e:	b088      	sub	sp, #32
    2090:	af00      	add	r7, sp, #0
    2092:	4603      	mov	r3, r0
    2094:	6039      	str	r1, [r7, #0]
    2096:	71fb      	strb	r3, [r7, #7]
  int                   Status;
  unsigned              FragLen;
  unsigned              Avail;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  INIT();
    2098:	4b41      	ldr	r3, [pc, #260]	; (21a0 <SEGGER_RTT_TerminalOut+0x114>)
    209a:	781b      	ldrb	r3, [r3, #0]
    209c:	2b00      	cmp	r3, #0
    209e:	d101      	bne.n	20a4 <SEGGER_RTT_TerminalOut+0x18>
    20a0:	f7ff f97e 	bl	13a0 <_DoInit>
  //
  // Validate terminal ID.
  //
  if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
    20a4:	79fb      	ldrb	r3, [r7, #7]
    20a6:	2b0f      	cmp	r3, #15
    20a8:	d871      	bhi.n	218e <SEGGER_RTT_TerminalOut+0x102>
    //
    // Get "to-host" ring buffer.
    //
    pRing = &_SEGGER_RTT.aUp[0];
    20aa:	4b3e      	ldr	r3, [pc, #248]	; (21a4 <SEGGER_RTT_TerminalOut+0x118>)
    20ac:	61bb      	str	r3, [r7, #24]
    //
    // Need to be able to change terminal, write data, change back.
    // Compute the fixed and variable sizes.
    //
    FragLen = strlen(s);
    20ae:	6838      	ldr	r0, [r7, #0]
    20b0:	f00d fce8 	bl	fa84 <strlen>
    20b4:	6178      	str	r0, [r7, #20]
    //
    // How we output depends upon the mode...
    //
    SEGGER_RTT_LOCK();
    20b6:	f3ef 8311 	mrs	r3, BASEPRI
    20ba:	f04f 0150 	mov.w	r1, #80	; 0x50
    20be:	f381 8811 	msr	BASEPRI, r1
    20c2:	613b      	str	r3, [r7, #16]
    Avail = _GetAvailWriteSpace(pRing);
    20c4:	69b8      	ldr	r0, [r7, #24]
    20c6:	f7ff fa75 	bl	15b4 <_GetAvailWriteSpace>
    20ca:	60f8      	str	r0, [r7, #12]
    switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
    20cc:	69bb      	ldr	r3, [r7, #24]
    20ce:	695b      	ldr	r3, [r3, #20]
    20d0:	f003 0303 	and.w	r3, r3, #3
    20d4:	2b01      	cmp	r3, #1
    20d6:	d01f      	beq.n	2118 <SEGGER_RTT_TerminalOut+0x8c>
    20d8:	2b01      	cmp	r3, #1
    20da:	d302      	bcc.n	20e2 <SEGGER_RTT_TerminalOut+0x56>
    20dc:	2b02      	cmp	r3, #2
    20de:	d03b      	beq.n	2158 <SEGGER_RTT_TerminalOut+0xcc>
    20e0:	e04d      	b.n	217e <SEGGER_RTT_TerminalOut+0xf2>
    case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
      //
      // If we are in skip mode and there is no space for the whole
      // of this output, don't bother switching terminals at all.
      //
      if (Avail < (FragLen + 4u)) {
    20e2:	697b      	ldr	r3, [r7, #20]
    20e4:	1d1a      	adds	r2, r3, #4
    20e6:	68fb      	ldr	r3, [r7, #12]
    20e8:	429a      	cmp	r2, r3
    20ea:	d902      	bls.n	20f2 <SEGGER_RTT_TerminalOut+0x66>
        Status = 0;
    20ec:	2300      	movs	r3, #0
    20ee:	61fb      	str	r3, [r7, #28]
      } else {
        _PostTerminalSwitch(pRing, TerminalId);
        Status = (int)_WriteBlocking(pRing, s, FragLen);
        _PostTerminalSwitch(pRing, _ActiveTerminal);
      }
      break;
    20f0:	e049      	b.n	2186 <SEGGER_RTT_TerminalOut+0xfa>
      // of this output, don't bother switching terminals at all.
      //
      if (Avail < (FragLen + 4u)) {
        Status = 0;
      } else {
        _PostTerminalSwitch(pRing, TerminalId);
    20f2:	79fb      	ldrb	r3, [r7, #7]
    20f4:	4619      	mov	r1, r3
    20f6:	69b8      	ldr	r0, [r7, #24]
    20f8:	f7ff fa42 	bl	1580 <_PostTerminalSwitch>
        Status = (int)_WriteBlocking(pRing, s, FragLen);
    20fc:	697a      	ldr	r2, [r7, #20]
    20fe:	6839      	ldr	r1, [r7, #0]
    2100:	69b8      	ldr	r0, [r7, #24]
    2102:	f7ff f9a3 	bl	144c <_WriteBlocking>
    2106:	4603      	mov	r3, r0
    2108:	61fb      	str	r3, [r7, #28]
        _PostTerminalSwitch(pRing, _ActiveTerminal);
    210a:	4b27      	ldr	r3, [pc, #156]	; (21a8 <SEGGER_RTT_TerminalOut+0x11c>)
    210c:	781b      	ldrb	r3, [r3, #0]
    210e:	4619      	mov	r1, r3
    2110:	69b8      	ldr	r0, [r7, #24]
    2112:	f7ff fa35 	bl	1580 <_PostTerminalSwitch>
      }
      break;
    2116:	e036      	b.n	2186 <SEGGER_RTT_TerminalOut+0xfa>
      //
      // If we are in trim mode and there is not enough space for everything,
      // trim the output but always include the terminal switch.  If no room
      // for terminal switch, skip that totally.
      //
      if (Avail < 4u) {
    2118:	68fb      	ldr	r3, [r7, #12]
    211a:	2b03      	cmp	r3, #3
    211c:	d803      	bhi.n	2126 <SEGGER_RTT_TerminalOut+0x9a>
        Status = -1;
    211e:	f04f 33ff 	mov.w	r3, #4294967295
    2122:	61fb      	str	r3, [r7, #28]
      } else {
        _PostTerminalSwitch(pRing, TerminalId);
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
        _PostTerminalSwitch(pRing, _ActiveTerminal);
      }
      break;
    2124:	e02f      	b.n	2186 <SEGGER_RTT_TerminalOut+0xfa>
      // for terminal switch, skip that totally.
      //
      if (Avail < 4u) {
        Status = -1;
      } else {
        _PostTerminalSwitch(pRing, TerminalId);
    2126:	79fb      	ldrb	r3, [r7, #7]
    2128:	4619      	mov	r1, r3
    212a:	69b8      	ldr	r0, [r7, #24]
    212c:	f7ff fa28 	bl	1580 <_PostTerminalSwitch>
        Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
    2130:	68fb      	ldr	r3, [r7, #12]
    2132:	1f1a      	subs	r2, r3, #4
    2134:	697b      	ldr	r3, [r7, #20]
    2136:	4293      	cmp	r3, r2
    2138:	bf28      	it	cs
    213a:	4613      	movcs	r3, r2
    213c:	461a      	mov	r2, r3
    213e:	6839      	ldr	r1, [r7, #0]
    2140:	69b8      	ldr	r0, [r7, #24]
    2142:	f7ff f983 	bl	144c <_WriteBlocking>
    2146:	4603      	mov	r3, r0
    2148:	61fb      	str	r3, [r7, #28]
        _PostTerminalSwitch(pRing, _ActiveTerminal);
    214a:	4b17      	ldr	r3, [pc, #92]	; (21a8 <SEGGER_RTT_TerminalOut+0x11c>)
    214c:	781b      	ldrb	r3, [r3, #0]
    214e:	4619      	mov	r1, r3
    2150:	69b8      	ldr	r0, [r7, #24]
    2152:	f7ff fa15 	bl	1580 <_PostTerminalSwitch>
      }
      break;
    2156:	e016      	b.n	2186 <SEGGER_RTT_TerminalOut+0xfa>
    case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
      //
      // If we are in blocking mode, output everything.
      //
      _PostTerminalSwitch(pRing, TerminalId);
    2158:	79fb      	ldrb	r3, [r7, #7]
    215a:	4619      	mov	r1, r3
    215c:	69b8      	ldr	r0, [r7, #24]
    215e:	f7ff fa0f 	bl	1580 <_PostTerminalSwitch>
      Status = (int)_WriteBlocking(pRing, s, FragLen);
    2162:	697a      	ldr	r2, [r7, #20]
    2164:	6839      	ldr	r1, [r7, #0]
    2166:	69b8      	ldr	r0, [r7, #24]
    2168:	f7ff f970 	bl	144c <_WriteBlocking>
    216c:	4603      	mov	r3, r0
    216e:	61fb      	str	r3, [r7, #28]
      _PostTerminalSwitch(pRing, _ActiveTerminal);
    2170:	4b0d      	ldr	r3, [pc, #52]	; (21a8 <SEGGER_RTT_TerminalOut+0x11c>)
    2172:	781b      	ldrb	r3, [r3, #0]
    2174:	4619      	mov	r1, r3
    2176:	69b8      	ldr	r0, [r7, #24]
    2178:	f7ff fa02 	bl	1580 <_PostTerminalSwitch>
      break;
    217c:	e003      	b.n	2186 <SEGGER_RTT_TerminalOut+0xfa>
    default:
      Status = -1;
    217e:	f04f 33ff 	mov.w	r3, #4294967295
    2182:	61fb      	str	r3, [r7, #28]
      break;
    2184:	bf00      	nop
    }
    //
    // Finish up.
    //
    SEGGER_RTT_UNLOCK();
    2186:	693b      	ldr	r3, [r7, #16]
    2188:	f383 8811 	msr	BASEPRI, r3
    218c:	e002      	b.n	2194 <SEGGER_RTT_TerminalOut+0x108>
  } else {
    Status = -1;
    218e:	f04f 33ff 	mov.w	r3, #4294967295
    2192:	61fb      	str	r3, [r7, #28]
  }
  return Status;
    2194:	69fb      	ldr	r3, [r7, #28]
}
    2196:	4618      	mov	r0, r3
    2198:	3720      	adds	r7, #32
    219a:	46bd      	mov	sp, r7
    219c:	bd80      	pop	{r7, pc}
    219e:	bf00      	nop
    21a0:	20003518 	.word	0x20003518
    21a4:	20003530 	.word	0x20003530
    21a8:	200004f4 	.word	0x200004f4

000021ac <_StoreChar>:
*/
/*********************************************************************
*
*       _StoreChar
*/
static void _StoreChar(SEGGER_RTT_PRINTF_DESC * p, char c) {
    21ac:	b580      	push	{r7, lr}
    21ae:	b084      	sub	sp, #16
    21b0:	af00      	add	r7, sp, #0
    21b2:	6078      	str	r0, [r7, #4]
    21b4:	460b      	mov	r3, r1
    21b6:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;

  Cnt = p->Cnt;
    21b8:	687b      	ldr	r3, [r7, #4]
    21ba:	689b      	ldr	r3, [r3, #8]
    21bc:	60fb      	str	r3, [r7, #12]
  if ((Cnt + 1u) <= p->BufferSize) {
    21be:	68fb      	ldr	r3, [r7, #12]
    21c0:	1c5a      	adds	r2, r3, #1
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	685b      	ldr	r3, [r3, #4]
    21c6:	429a      	cmp	r2, r3
    21c8:	d80e      	bhi.n	21e8 <_StoreChar+0x3c>
    *(p->pBuffer + Cnt) = c;
    21ca:	687b      	ldr	r3, [r7, #4]
    21cc:	681a      	ldr	r2, [r3, #0]
    21ce:	68fb      	ldr	r3, [r7, #12]
    21d0:	4413      	add	r3, r2
    21d2:	78fa      	ldrb	r2, [r7, #3]
    21d4:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    21d6:	68fb      	ldr	r3, [r7, #12]
    21d8:	1c5a      	adds	r2, r3, #1
    21da:	687b      	ldr	r3, [r7, #4]
    21dc:	609a      	str	r2, [r3, #8]
    p->ReturnValue++;
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	68db      	ldr	r3, [r3, #12]
    21e2:	1c5a      	adds	r2, r3, #1
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	60da      	str	r2, [r3, #12]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == p->BufferSize) {
    21e8:	687b      	ldr	r3, [r7, #4]
    21ea:	689a      	ldr	r2, [r3, #8]
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	685b      	ldr	r3, [r3, #4]
    21f0:	429a      	cmp	r2, r3
    21f2:	d115      	bne.n	2220 <_StoreChar+0x74>
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
    21f4:	687b      	ldr	r3, [r7, #4]
    21f6:	6918      	ldr	r0, [r3, #16]
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	6819      	ldr	r1, [r3, #0]
    21fc:	687b      	ldr	r3, [r7, #4]
    21fe:	689b      	ldr	r3, [r3, #8]
    2200:	461a      	mov	r2, r3
    2202:	f7ff fc13 	bl	1a2c <SEGGER_RTT_Write>
    2206:	4602      	mov	r2, r0
    2208:	687b      	ldr	r3, [r7, #4]
    220a:	689b      	ldr	r3, [r3, #8]
    220c:	429a      	cmp	r2, r3
    220e:	d004      	beq.n	221a <_StoreChar+0x6e>
      p->ReturnValue = -1;
    2210:	687b      	ldr	r3, [r7, #4]
    2212:	f04f 32ff 	mov.w	r2, #4294967295
    2216:	60da      	str	r2, [r3, #12]
    } else {
      p->Cnt = 0u;
    }
  }
}
    2218:	e002      	b.n	2220 <_StoreChar+0x74>
  //
  if (p->Cnt == p->BufferSize) {
    if (SEGGER_RTT_Write(p->RTTBufferIndex, p->pBuffer, p->Cnt) != p->Cnt) {
      p->ReturnValue = -1;
    } else {
      p->Cnt = 0u;
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	2200      	movs	r2, #0
    221e:	609a      	str	r2, [r3, #8]
    }
  }
}
    2220:	bf00      	nop
    2222:	3710      	adds	r7, #16
    2224:	46bd      	mov	sp, r7
    2226:	bd80      	pop	{r7, pc}

00002228 <_PrintUnsigned>:

/*********************************************************************
*
*       _PrintUnsigned
*/
static void _PrintUnsigned(SEGGER_RTT_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    2228:	b580      	push	{r7, lr}
    222a:	b08a      	sub	sp, #40	; 0x28
    222c:	af00      	add	r7, sp, #0
    222e:	60f8      	str	r0, [r7, #12]
    2230:	60b9      	str	r1, [r7, #8]
    2232:	607a      	str	r2, [r7, #4]
    2234:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    2236:	68bb      	ldr	r3, [r7, #8]
    2238:	623b      	str	r3, [r7, #32]
  Digit = 1u;
    223a:	2301      	movs	r3, #1
    223c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    223e:	2301      	movs	r3, #1
    2240:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
    2242:	e007      	b.n	2254 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
    2244:	6a3a      	ldr	r2, [r7, #32]
    2246:	687b      	ldr	r3, [r7, #4]
    2248:	fbb2 f3f3 	udiv	r3, r2, r3
    224c:	623b      	str	r3, [r7, #32]
    Width++;
    224e:	69fb      	ldr	r3, [r7, #28]
    2250:	3301      	adds	r3, #1
    2252:	61fb      	str	r3, [r7, #28]
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
  while (Number >= Base) {
    2254:	6a3a      	ldr	r2, [r7, #32]
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	429a      	cmp	r2, r3
    225a:	d2f3      	bcs.n	2244 <_PrintUnsigned+0x1c>
    Number = (Number / Base);
    Width++;
  }
  if (NumDigits > Width) {
    225c:	683a      	ldr	r2, [r7, #0]
    225e:	69fb      	ldr	r3, [r7, #28]
    2260:	429a      	cmp	r2, r3
    2262:	d901      	bls.n	2268 <_PrintUnsigned+0x40>
    Width = NumDigits;
    2264:	683b      	ldr	r3, [r7, #0]
    2266:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    2268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    226a:	f003 0301 	and.w	r3, r3, #1
    226e:	2b00      	cmp	r3, #0
    2270:	d125      	bne.n	22be <_PrintUnsigned+0x96>
    if (FieldWidth != 0u) {
    2272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2274:	2b00      	cmp	r3, #0
    2276:	d022      	beq.n	22be <_PrintUnsigned+0x96>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    2278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    227a:	f003 0302 	and.w	r3, r3, #2
    227e:	2b00      	cmp	r3, #0
    2280:	d005      	beq.n	228e <_PrintUnsigned+0x66>
    2282:	683b      	ldr	r3, [r7, #0]
    2284:	2b00      	cmp	r3, #0
    2286:	d102      	bne.n	228e <_PrintUnsigned+0x66>
        c = '0';
    2288:	2330      	movs	r3, #48	; 0x30
    228a:	76fb      	strb	r3, [r7, #27]
    228c:	e001      	b.n	2292 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
    228e:	2320      	movs	r3, #32
    2290:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2292:	e00b      	b.n	22ac <_PrintUnsigned+0x84>
        FieldWidth--;
    2294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2296:	3b01      	subs	r3, #1
    2298:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    229a:	7efb      	ldrb	r3, [r7, #27]
    229c:	4619      	mov	r1, r3
    229e:	68f8      	ldr	r0, [r7, #12]
    22a0:	f7ff ff84 	bl	21ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    22a4:	68fb      	ldr	r3, [r7, #12]
    22a6:	68db      	ldr	r3, [r3, #12]
    22a8:	2b00      	cmp	r3, #0
    22aa:	db07      	blt.n	22bc <_PrintUnsigned+0x94>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
        c = '0';
      } else {
        c = ' ';
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    22ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    22ae:	2b00      	cmp	r3, #0
    22b0:	d005      	beq.n	22be <_PrintUnsigned+0x96>
    22b2:	69fa      	ldr	r2, [r7, #28]
    22b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    22b6:	429a      	cmp	r2, r3
    22b8:	d3ec      	bcc.n	2294 <_PrintUnsigned+0x6c>
    22ba:	e000      	b.n	22be <_PrintUnsigned+0x96>
        FieldWidth--;
        _StoreChar(pBufferDesc, c);
        if (pBufferDesc->ReturnValue < 0) {
          break;
    22bc:	bf00      	nop
        }
      }
    }
  }
  if (pBufferDesc->ReturnValue >= 0) {
    22be:	68fb      	ldr	r3, [r7, #12]
    22c0:	68db      	ldr	r3, [r3, #12]
    22c2:	2b00      	cmp	r3, #0
    22c4:	db55      	blt.n	2372 <_PrintUnsigned+0x14a>
    // Compute Digit.
    // Loop until Digit has the value of the highest digit required.
    // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
    //
    while (1) {
      if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    22c6:	683b      	ldr	r3, [r7, #0]
    22c8:	2b01      	cmp	r3, #1
    22ca:	d903      	bls.n	22d4 <_PrintUnsigned+0xac>
        NumDigits--;
    22cc:	683b      	ldr	r3, [r7, #0]
    22ce:	3b01      	subs	r3, #1
    22d0:	603b      	str	r3, [r7, #0]
    22d2:	e009      	b.n	22e8 <_PrintUnsigned+0xc0>
      } else {
        Div = v / Digit;
    22d4:	68ba      	ldr	r2, [r7, #8]
    22d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22d8:	fbb2 f3f3 	udiv	r3, r2, r3
    22dc:	617b      	str	r3, [r7, #20]
        if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    22de:	697a      	ldr	r2, [r7, #20]
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	429a      	cmp	r2, r3
    22e4:	d200      	bcs.n	22e8 <_PrintUnsigned+0xc0>
          break;
    22e6:	e005      	b.n	22f4 <_PrintUnsigned+0xcc>
        }
      }
      Digit *= Base;
    22e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22ea:	687a      	ldr	r2, [r7, #4]
    22ec:	fb02 f303 	mul.w	r3, r2, r3
    22f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    22f2:	e7e8      	b.n	22c6 <_PrintUnsigned+0x9e>
    //
    // Output digits
    //
    do {
      Div = v / Digit;
    22f4:	68ba      	ldr	r2, [r7, #8]
    22f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    22f8:	fbb2 f3f3 	udiv	r3, r2, r3
    22fc:	617b      	str	r3, [r7, #20]
      v -= Div * Digit;
    22fe:	697b      	ldr	r3, [r7, #20]
    2300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2302:	fb02 f303 	mul.w	r3, r2, r3
    2306:	68ba      	ldr	r2, [r7, #8]
    2308:	1ad3      	subs	r3, r2, r3
    230a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, _aV2C[Div]);
    230c:	4a1b      	ldr	r2, [pc, #108]	; (237c <_PrintUnsigned+0x154>)
    230e:	697b      	ldr	r3, [r7, #20]
    2310:	4413      	add	r3, r2
    2312:	781b      	ldrb	r3, [r3, #0]
    2314:	4619      	mov	r1, r3
    2316:	68f8      	ldr	r0, [r7, #12]
    2318:	f7ff ff48 	bl	21ac <_StoreChar>
      if (pBufferDesc->ReturnValue < 0) {
    231c:	68fb      	ldr	r3, [r7, #12]
    231e:	68db      	ldr	r3, [r3, #12]
    2320:	2b00      	cmp	r3, #0
    2322:	db08      	blt.n	2336 <_PrintUnsigned+0x10e>
        break;
      }
      Digit /= Base;
    2324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	fbb2 f3f3 	udiv	r3, r2, r3
    232c:	627b      	str	r3, [r7, #36]	; 0x24
    } while (Digit);
    232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2330:	2b00      	cmp	r3, #0
    2332:	d1df      	bne.n	22f4 <_PrintUnsigned+0xcc>
    2334:	e000      	b.n	2338 <_PrintUnsigned+0x110>
    do {
      Div = v / Digit;
      v -= Div * Digit;
      _StoreChar(pBufferDesc, _aV2C[Div]);
      if (pBufferDesc->ReturnValue < 0) {
        break;
    2336:	bf00      	nop
      Digit /= Base;
    } while (Digit);
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    2338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    233a:	f003 0301 	and.w	r3, r3, #1
    233e:	2b00      	cmp	r3, #0
    2340:	d017      	beq.n	2372 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
    2342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2344:	2b00      	cmp	r3, #0
    2346:	d014      	beq.n	2372 <_PrintUnsigned+0x14a>
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2348:	e00a      	b.n	2360 <_PrintUnsigned+0x138>
          FieldWidth--;
    234a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    234c:	3b01      	subs	r3, #1
    234e:	633b      	str	r3, [r7, #48]	; 0x30
          _StoreChar(pBufferDesc, ' ');
    2350:	2120      	movs	r1, #32
    2352:	68f8      	ldr	r0, [r7, #12]
    2354:	f7ff ff2a 	bl	21ac <_StoreChar>
          if (pBufferDesc->ReturnValue < 0) {
    2358:	68fb      	ldr	r3, [r7, #12]
    235a:	68db      	ldr	r3, [r3, #12]
    235c:	2b00      	cmp	r3, #0
    235e:	db07      	blt.n	2370 <_PrintUnsigned+0x148>
    //
    // Print trailing spaces if necessary
    //
    if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
      if (FieldWidth != 0u) {
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2362:	2b00      	cmp	r3, #0
    2364:	d005      	beq.n	2372 <_PrintUnsigned+0x14a>
    2366:	69fa      	ldr	r2, [r7, #28]
    2368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    236a:	429a      	cmp	r2, r3
    236c:	d3ed      	bcc.n	234a <_PrintUnsigned+0x122>
          }
        }
      }
    }
  }
}
    236e:	e000      	b.n	2372 <_PrintUnsigned+0x14a>
      if (FieldWidth != 0u) {
        while ((FieldWidth != 0u) && (Width < FieldWidth)) {
          FieldWidth--;
          _StoreChar(pBufferDesc, ' ');
          if (pBufferDesc->ReturnValue < 0) {
            break;
    2370:	bf00      	nop
          }
        }
      }
    }
  }
}
    2372:	bf00      	nop
    2374:	3728      	adds	r7, #40	; 0x28
    2376:	46bd      	mov	sp, r7
    2378:	bd80      	pop	{r7, pc}
    237a:	bf00      	nop
    237c:	0000fdc0 	.word	0x0000fdc0

00002380 <_PrintInt>:

/*********************************************************************
*
*       _PrintInt
*/
static void _PrintInt(SEGGER_RTT_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    2380:	b580      	push	{r7, lr}
    2382:	b088      	sub	sp, #32
    2384:	af02      	add	r7, sp, #8
    2386:	60f8      	str	r0, [r7, #12]
    2388:	60b9      	str	r1, [r7, #8]
    238a:	607a      	str	r2, [r7, #4]
    238c:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    238e:	68bb      	ldr	r3, [r7, #8]
    2390:	2b00      	cmp	r3, #0
    2392:	bfb8      	it	lt
    2394:	425b      	neglt	r3, r3
    2396:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
    2398:	2301      	movs	r3, #1
    239a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
    239c:	e007      	b.n	23ae <_PrintInt+0x2e>
    Number = (Number / (int)Base);
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	693a      	ldr	r2, [r7, #16]
    23a2:	fb92 f3f3 	sdiv	r3, r2, r3
    23a6:	613b      	str	r3, [r7, #16]
    Width++;
    23a8:	697b      	ldr	r3, [r7, #20]
    23aa:	3301      	adds	r3, #1
    23ac:	617b      	str	r3, [r7, #20]

  //
  // Get actual field width
  //
  Width = 1u;
  while (Number >= (int)Base) {
    23ae:	687b      	ldr	r3, [r7, #4]
    23b0:	693a      	ldr	r2, [r7, #16]
    23b2:	429a      	cmp	r2, r3
    23b4:	daf3      	bge.n	239e <_PrintInt+0x1e>
    Number = (Number / (int)Base);
    Width++;
  }
  if (NumDigits > Width) {
    23b6:	683a      	ldr	r2, [r7, #0]
    23b8:	697b      	ldr	r3, [r7, #20]
    23ba:	429a      	cmp	r2, r3
    23bc:	d901      	bls.n	23c2 <_PrintInt+0x42>
    Width = NumDigits;
    23be:	683b      	ldr	r3, [r7, #0]
    23c0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    23c2:	6a3b      	ldr	r3, [r7, #32]
    23c4:	2b00      	cmp	r3, #0
    23c6:	d00a      	beq.n	23de <_PrintInt+0x5e>
    23c8:	68bb      	ldr	r3, [r7, #8]
    23ca:	2b00      	cmp	r3, #0
    23cc:	db04      	blt.n	23d8 <_PrintInt+0x58>
    23ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23d0:	f003 0304 	and.w	r3, r3, #4
    23d4:	2b00      	cmp	r3, #0
    23d6:	d002      	beq.n	23de <_PrintInt+0x5e>
    FieldWidth--;
    23d8:	6a3b      	ldr	r3, [r7, #32]
    23da:	3b01      	subs	r3, #1
    23dc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    23de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23e0:	f003 0302 	and.w	r3, r3, #2
    23e4:	2b00      	cmp	r3, #0
    23e6:	d002      	beq.n	23ee <_PrintInt+0x6e>
    23e8:	683b      	ldr	r3, [r7, #0]
    23ea:	2b00      	cmp	r3, #0
    23ec:	d01c      	beq.n	2428 <_PrintInt+0xa8>
    23ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    23f0:	f003 0301 	and.w	r3, r3, #1
    23f4:	2b00      	cmp	r3, #0
    23f6:	d117      	bne.n	2428 <_PrintInt+0xa8>
    if (FieldWidth != 0u) {
    23f8:	6a3b      	ldr	r3, [r7, #32]
    23fa:	2b00      	cmp	r3, #0
    23fc:	d014      	beq.n	2428 <_PrintInt+0xa8>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    23fe:	e00a      	b.n	2416 <_PrintInt+0x96>
        FieldWidth--;
    2400:	6a3b      	ldr	r3, [r7, #32]
    2402:	3b01      	subs	r3, #1
    2404:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
    2406:	2120      	movs	r1, #32
    2408:	68f8      	ldr	r0, [r7, #12]
    240a:	f7ff fecf 	bl	21ac <_StoreChar>
        if (pBufferDesc->ReturnValue < 0) {
    240e:	68fb      	ldr	r3, [r7, #12]
    2410:	68db      	ldr	r3, [r3, #12]
    2412:	2b00      	cmp	r3, #0
    2414:	db07      	blt.n	2426 <_PrintInt+0xa6>
  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    if (FieldWidth != 0u) {
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2416:	6a3b      	ldr	r3, [r7, #32]
    2418:	2b00      	cmp	r3, #0
    241a:	d005      	beq.n	2428 <_PrintInt+0xa8>
    241c:	697a      	ldr	r2, [r7, #20]
    241e:	6a3b      	ldr	r3, [r7, #32]
    2420:	429a      	cmp	r2, r3
    2422:	d3ed      	bcc.n	2400 <_PrintInt+0x80>
    2424:	e000      	b.n	2428 <_PrintInt+0xa8>
        FieldWidth--;
        _StoreChar(pBufferDesc, ' ');
        if (pBufferDesc->ReturnValue < 0) {
          break;
    2426:	bf00      	nop
    }
  }
  //
  // Print sign if necessary
  //
  if (pBufferDesc->ReturnValue >= 0) {
    2428:	68fb      	ldr	r3, [r7, #12]
    242a:	68db      	ldr	r3, [r3, #12]
    242c:	2b00      	cmp	r3, #0
    242e:	db4a      	blt.n	24c6 <_PrintInt+0x146>
    if (v < 0) {
    2430:	68bb      	ldr	r3, [r7, #8]
    2432:	2b00      	cmp	r3, #0
    2434:	da07      	bge.n	2446 <_PrintInt+0xc6>
      v = -v;
    2436:	68bb      	ldr	r3, [r7, #8]
    2438:	425b      	negs	r3, r3
    243a:	60bb      	str	r3, [r7, #8]
      _StoreChar(pBufferDesc, '-');
    243c:	212d      	movs	r1, #45	; 0x2d
    243e:	68f8      	ldr	r0, [r7, #12]
    2440:	f7ff feb4 	bl	21ac <_StoreChar>
    2444:	e008      	b.n	2458 <_PrintInt+0xd8>
    } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    2446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2448:	f003 0304 	and.w	r3, r3, #4
    244c:	2b00      	cmp	r3, #0
    244e:	d003      	beq.n	2458 <_PrintInt+0xd8>
      _StoreChar(pBufferDesc, '+');
    2450:	212b      	movs	r1, #43	; 0x2b
    2452:	68f8      	ldr	r0, [r7, #12]
    2454:	f7ff feaa 	bl	21ac <_StoreChar>
    } else {

    }
    if (pBufferDesc->ReturnValue >= 0) {
    2458:	68fb      	ldr	r3, [r7, #12]
    245a:	68db      	ldr	r3, [r3, #12]
    245c:	2b00      	cmp	r3, #0
    245e:	db32      	blt.n	24c6 <_PrintInt+0x146>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    2460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2462:	f003 0302 	and.w	r3, r3, #2
    2466:	2b00      	cmp	r3, #0
    2468:	d01f      	beq.n	24aa <_PrintInt+0x12a>
    246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    246c:	f003 0301 	and.w	r3, r3, #1
    2470:	2b00      	cmp	r3, #0
    2472:	d11a      	bne.n	24aa <_PrintInt+0x12a>
    2474:	683b      	ldr	r3, [r7, #0]
    2476:	2b00      	cmp	r3, #0
    2478:	d117      	bne.n	24aa <_PrintInt+0x12a>
        if (FieldWidth != 0u) {
    247a:	6a3b      	ldr	r3, [r7, #32]
    247c:	2b00      	cmp	r3, #0
    247e:	d014      	beq.n	24aa <_PrintInt+0x12a>
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2480:	e00a      	b.n	2498 <_PrintInt+0x118>
            FieldWidth--;
    2482:	6a3b      	ldr	r3, [r7, #32]
    2484:	3b01      	subs	r3, #1
    2486:	623b      	str	r3, [r7, #32]
            _StoreChar(pBufferDesc, '0');
    2488:	2130      	movs	r1, #48	; 0x30
    248a:	68f8      	ldr	r0, [r7, #12]
    248c:	f7ff fe8e 	bl	21ac <_StoreChar>
            if (pBufferDesc->ReturnValue < 0) {
    2490:	68fb      	ldr	r3, [r7, #12]
    2492:	68db      	ldr	r3, [r3, #12]
    2494:	2b00      	cmp	r3, #0
    2496:	db07      	blt.n	24a8 <_PrintInt+0x128>
      //
      // Print leading zeros if necessary
      //
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
        if (FieldWidth != 0u) {
          while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2498:	6a3b      	ldr	r3, [r7, #32]
    249a:	2b00      	cmp	r3, #0
    249c:	d005      	beq.n	24aa <_PrintInt+0x12a>
    249e:	697a      	ldr	r2, [r7, #20]
    24a0:	6a3b      	ldr	r3, [r7, #32]
    24a2:	429a      	cmp	r2, r3
    24a4:	d3ed      	bcc.n	2482 <_PrintInt+0x102>
    24a6:	e000      	b.n	24aa <_PrintInt+0x12a>
            FieldWidth--;
            _StoreChar(pBufferDesc, '0');
            if (pBufferDesc->ReturnValue < 0) {
              break;
    24a8:	bf00      	nop
            }
          }
        }
      }
      if (pBufferDesc->ReturnValue >= 0) {
    24aa:	68fb      	ldr	r3, [r7, #12]
    24ac:	68db      	ldr	r3, [r3, #12]
    24ae:	2b00      	cmp	r3, #0
    24b0:	db09      	blt.n	24c6 <_PrintInt+0x146>
        //
        // Print number without sign
        //
        _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    24b2:	68b9      	ldr	r1, [r7, #8]
    24b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    24b6:	9301      	str	r3, [sp, #4]
    24b8:	6a3b      	ldr	r3, [r7, #32]
    24ba:	9300      	str	r3, [sp, #0]
    24bc:	683b      	ldr	r3, [r7, #0]
    24be:	687a      	ldr	r2, [r7, #4]
    24c0:	68f8      	ldr	r0, [r7, #12]
    24c2:	f7ff feb1 	bl	2228 <_PrintUnsigned>
      }
    }
  }
}
    24c6:	bf00      	nop
    24c8:	3718      	adds	r7, #24
    24ca:	46bd      	mov	sp, r7
    24cc:	bd80      	pop	{r7, pc}
    24ce:	bf00      	nop

000024d0 <SEGGER_RTT_vprintf>:
*
*  Return values
*    >= 0:  Number of bytes which have been stored in the "Up"-buffer.
*     < 0:  Error
*/
int SEGGER_RTT_vprintf(unsigned BufferIndex, const char * sFormat, va_list * pParamList) {
    24d0:	b580      	push	{r7, lr}
    24d2:	b0b2      	sub	sp, #200	; 0xc8
    24d4:	af02      	add	r7, sp, #8
    24d6:	60f8      	str	r0, [r7, #12]
    24d8:	60b9      	str	r1, [r7, #8]
    24da:	607a      	str	r2, [r7, #4]
  unsigned NumDigits;
  unsigned FormatFlags;
  unsigned FieldWidth;
  char acBuffer[SEGGER_RTT_PRINTF_BUFFER_SIZE];

  BufferDesc.pBuffer        = acBuffer;
    24dc:	f107 0310 	add.w	r3, r7, #16
    24e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  BufferDesc.BufferSize     = SEGGER_RTT_PRINTF_BUFFER_SIZE;
    24e4:	2380      	movs	r3, #128	; 0x80
    24e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  BufferDesc.Cnt            = 0u;
    24ea:	2300      	movs	r3, #0
    24ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  BufferDesc.RTTBufferIndex = BufferIndex;
    24f0:	68fb      	ldr	r3, [r7, #12]
    24f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  BufferDesc.ReturnValue    = 0;
    24f6:	2300      	movs	r3, #0
    24f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  do {
    c = *sFormat;
    24fc:	68bb      	ldr	r3, [r7, #8]
    24fe:	781b      	ldrb	r3, [r3, #0]
    2500:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    sFormat++;
    2504:	68bb      	ldr	r3, [r7, #8]
    2506:	3301      	adds	r3, #1
    2508:	60bb      	str	r3, [r7, #8]
    if (c == 0u) {
    250a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    250e:	2b00      	cmp	r3, #0
    2510:	f000 818e 	beq.w	2830 <SEGGER_RTT_vprintf+0x360>
      break;
    }
    if (c == '%') {
    2514:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    2518:	2b25      	cmp	r3, #37	; 0x25
    251a:	f040 817b 	bne.w	2814 <SEGGER_RTT_vprintf+0x344>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    251e:	2300      	movs	r3, #0
    2520:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      v = 1;
    2524:	2301      	movs	r3, #1
    2526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
      do {
        c = *sFormat;
    252a:	68bb      	ldr	r3, [r7, #8]
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        switch (c) {
    2532:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    2536:	3b23      	subs	r3, #35	; 0x23
    2538:	2b0d      	cmp	r3, #13
    253a:	d847      	bhi.n	25cc <SEGGER_RTT_vprintf+0xfc>
    253c:	a201      	add	r2, pc, #4	; (adr r2, 2544 <SEGGER_RTT_vprintf+0x74>)
    253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2542:	bf00      	nop
    2544:	000025b9 	.word	0x000025b9
    2548:	000025cd 	.word	0x000025cd
    254c:	000025cd 	.word	0x000025cd
    2550:	000025cd 	.word	0x000025cd
    2554:	000025cd 	.word	0x000025cd
    2558:	000025cd 	.word	0x000025cd
    255c:	000025cd 	.word	0x000025cd
    2560:	000025cd 	.word	0x000025cd
    2564:	000025a5 	.word	0x000025a5
    2568:	000025cd 	.word	0x000025cd
    256c:	0000257d 	.word	0x0000257d
    2570:	000025cd 	.word	0x000025cd
    2574:	000025cd 	.word	0x000025cd
    2578:	00002591 	.word	0x00002591
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    257c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    2580:	f043 0301 	orr.w	r3, r3, #1
    2584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    2588:	68bb      	ldr	r3, [r7, #8]
    258a:	3301      	adds	r3, #1
    258c:	60bb      	str	r3, [r7, #8]
    258e:	e021      	b.n	25d4 <SEGGER_RTT_vprintf+0x104>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    2590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    2594:	f043 0302 	orr.w	r3, r3, #2
    2598:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    259c:	68bb      	ldr	r3, [r7, #8]
    259e:	3301      	adds	r3, #1
    25a0:	60bb      	str	r3, [r7, #8]
    25a2:	e017      	b.n	25d4 <SEGGER_RTT_vprintf+0x104>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    25a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    25a8:	f043 0304 	orr.w	r3, r3, #4
    25ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    25b0:	68bb      	ldr	r3, [r7, #8]
    25b2:	3301      	adds	r3, #1
    25b4:	60bb      	str	r3, [r7, #8]
    25b6:	e00d      	b.n	25d4 <SEGGER_RTT_vprintf+0x104>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    25b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    25bc:	f043 0308 	orr.w	r3, r3, #8
    25c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    25c4:	68bb      	ldr	r3, [r7, #8]
    25c6:	3301      	adds	r3, #1
    25c8:	60bb      	str	r3, [r7, #8]
    25ca:	e003      	b.n	25d4 <SEGGER_RTT_vprintf+0x104>
        default:  v = 0; break;
    25cc:	2300      	movs	r3, #0
    25ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    25d2:	bf00      	nop
        }
      } while (v);
    25d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    25d8:	2b00      	cmp	r3, #0
    25da:	d1a6      	bne.n	252a <SEGGER_RTT_vprintf+0x5a>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    25dc:	2300      	movs	r3, #0
    25de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      do {
        c = *sFormat;
    25e2:	68bb      	ldr	r3, [r7, #8]
    25e4:	781b      	ldrb	r3, [r3, #0]
    25e6:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
        if ((c < '0') || (c > '9')) {
    25ea:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    25ee:	2b2f      	cmp	r3, #47	; 0x2f
    25f0:	d914      	bls.n	261c <SEGGER_RTT_vprintf+0x14c>
    25f2:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    25f6:	2b39      	cmp	r3, #57	; 0x39
    25f8:	d810      	bhi.n	261c <SEGGER_RTT_vprintf+0x14c>
          break;
        }
        sFormat++;
    25fa:	68bb      	ldr	r3, [r7, #8]
    25fc:	3301      	adds	r3, #1
    25fe:	60bb      	str	r3, [r7, #8]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    2600:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    2604:	4613      	mov	r3, r2
    2606:	009b      	lsls	r3, r3, #2
    2608:	4413      	add	r3, r2
    260a:	005b      	lsls	r3, r3, #1
    260c:	461a      	mov	r2, r3
    260e:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    2612:	4413      	add	r3, r2
    2614:	3b30      	subs	r3, #48	; 0x30
    2616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      } while (1);
    261a:	e7e2      	b.n	25e2 <SEGGER_RTT_vprintf+0x112>

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    261c:	2300      	movs	r3, #0
    261e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      c = *sFormat;
    2622:	68bb      	ldr	r3, [r7, #8]
    2624:	781b      	ldrb	r3, [r3, #0]
    2626:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
      if (c == '.') {
    262a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    262e:	2b2e      	cmp	r3, #46	; 0x2e
    2630:	d11f      	bne.n	2672 <SEGGER_RTT_vprintf+0x1a2>
        sFormat++;
    2632:	68bb      	ldr	r3, [r7, #8]
    2634:	3301      	adds	r3, #1
    2636:	60bb      	str	r3, [r7, #8]
        do {
          c = *sFormat;
    2638:	68bb      	ldr	r3, [r7, #8]
    263a:	781b      	ldrb	r3, [r3, #0]
    263c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
          if ((c < '0') || (c > '9')) {
    2640:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    2644:	2b2f      	cmp	r3, #47	; 0x2f
    2646:	d914      	bls.n	2672 <SEGGER_RTT_vprintf+0x1a2>
    2648:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    264c:	2b39      	cmp	r3, #57	; 0x39
    264e:	d810      	bhi.n	2672 <SEGGER_RTT_vprintf+0x1a2>
            break;
          }
          sFormat++;
    2650:	68bb      	ldr	r3, [r7, #8]
    2652:	3301      	adds	r3, #1
    2654:	60bb      	str	r3, [r7, #8]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    2656:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    265a:	4613      	mov	r3, r2
    265c:	009b      	lsls	r3, r3, #2
    265e:	4413      	add	r3, r2
    2660:	005b      	lsls	r3, r3, #1
    2662:	461a      	mov	r2, r3
    2664:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    2668:	4413      	add	r3, r2
    266a:	3b30      	subs	r3, #48	; 0x30
    266c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
        } while (1);
    2670:	e7e2      	b.n	2638 <SEGGER_RTT_vprintf+0x168>
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    2672:	68bb      	ldr	r3, [r7, #8]
    2674:	781b      	ldrb	r3, [r3, #0]
    2676:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
      do {
        if ((c == 'l') || (c == 'h')) {
    267a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    267e:	2b6c      	cmp	r3, #108	; 0x6c
    2680:	d003      	beq.n	268a <SEGGER_RTT_vprintf+0x1ba>
    2682:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    2686:	2b68      	cmp	r3, #104	; 0x68
    2688:	d107      	bne.n	269a <SEGGER_RTT_vprintf+0x1ca>
          c = *sFormat;
    268a:	68bb      	ldr	r3, [r7, #8]
    268c:	781b      	ldrb	r3, [r3, #0]
    268e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
          sFormat++;
    2692:	68bb      	ldr	r3, [r7, #8]
    2694:	3301      	adds	r3, #1
    2696:	60bb      	str	r3, [r7, #8]
        } else {
          break;
        }
      } while (1);
    2698:	e7ef      	b.n	267a <SEGGER_RTT_vprintf+0x1aa>
      //
      // Handle specifiers
      //
      switch (c) {
    269a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    269e:	2b64      	cmp	r3, #100	; 0x64
    26a0:	d02b      	beq.n	26fa <SEGGER_RTT_vprintf+0x22a>
    26a2:	2b64      	cmp	r3, #100	; 0x64
    26a4:	dc07      	bgt.n	26b6 <SEGGER_RTT_vprintf+0x1e6>
    26a6:	2b58      	cmp	r3, #88	; 0x58
    26a8:	d057      	beq.n	275a <SEGGER_RTT_vprintf+0x28a>
    26aa:	2b63      	cmp	r3, #99	; 0x63
    26ac:	d010      	beq.n	26d0 <SEGGER_RTT_vprintf+0x200>
    26ae:	2b25      	cmp	r3, #37	; 0x25
    26b0:	f000 80a5 	beq.w	27fe <SEGGER_RTT_vprintf+0x32e>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
    26b4:	e0aa      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    26b6:	2b73      	cmp	r3, #115	; 0x73
    26b8:	d067      	beq.n	278a <SEGGER_RTT_vprintf+0x2ba>
    26ba:	2b73      	cmp	r3, #115	; 0x73
    26bc:	dc03      	bgt.n	26c6 <SEGGER_RTT_vprintf+0x1f6>
    26be:	2b70      	cmp	r3, #112	; 0x70
    26c0:	f000 8088 	beq.w	27d4 <SEGGER_RTT_vprintf+0x304>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
    26c4:	e0a2      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    26c6:	2b75      	cmp	r3, #117	; 0x75
    26c8:	d02f      	beq.n	272a <SEGGER_RTT_vprintf+0x25a>
    26ca:	2b78      	cmp	r3, #120	; 0x78
    26cc:	d045      	beq.n	275a <SEGGER_RTT_vprintf+0x28a>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
    26ce:	e09d      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
      // Handle specifiers
      //
      switch (c) {
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	681b      	ldr	r3, [r3, #0]
    26d4:	1d19      	adds	r1, r3, #4
    26d6:	687a      	ldr	r2, [r7, #4]
    26d8:	6011      	str	r1, [r2, #0]
    26da:	681b      	ldr	r3, [r3, #0]
    26dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        c0 = (char)v;
    26e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    26e4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        _StoreChar(&BufferDesc, c0);
    26e8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
    26ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
    26f0:	4611      	mov	r1, r2
    26f2:	4618      	mov	r0, r3
    26f4:	f7ff fd5a 	bl	21ac <_StoreChar>
        break;
    26f8:	e088      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    26fa:	687b      	ldr	r3, [r7, #4]
    26fc:	681b      	ldr	r3, [r3, #0]
    26fe:	1d19      	adds	r1, r3, #4
    2700:	687a      	ldr	r2, [r7, #4]
    2702:	6011      	str	r1, [r2, #0]
    2704:	681b      	ldr	r3, [r3, #0]
    2706:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    270a:	f107 0090 	add.w	r0, r7, #144	; 0x90
    270e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    2712:	9301      	str	r3, [sp, #4]
    2714:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    2718:	9300      	str	r3, [sp, #0]
    271a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    271e:	220a      	movs	r2, #10
    2720:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
    2724:	f7ff fe2c 	bl	2380 <_PrintInt>
        break;
    2728:	e070      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
      case 'u':
        v = va_arg(*pParamList, int);
    272a:	687b      	ldr	r3, [r7, #4]
    272c:	681b      	ldr	r3, [r3, #0]
    272e:	1d19      	adds	r1, r3, #4
    2730:	687a      	ldr	r2, [r7, #4]
    2732:	6011      	str	r1, [r2, #0]
    2734:	681b      	ldr	r3, [r3, #0]
    2736:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    273a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
    273e:	f107 0090 	add.w	r0, r7, #144	; 0x90
    2742:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    2746:	9301      	str	r3, [sp, #4]
    2748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    274c:	9300      	str	r3, [sp, #0]
    274e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    2752:	220a      	movs	r2, #10
    2754:	f7ff fd68 	bl	2228 <_PrintUnsigned>
        break;
    2758:	e058      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    275a:	687b      	ldr	r3, [r7, #4]
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	1d19      	adds	r1, r3, #4
    2760:	687a      	ldr	r2, [r7, #4]
    2762:	6011      	str	r1, [r2, #0]
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    276a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
    276e:	f107 0090 	add.w	r0, r7, #144	; 0x90
    2772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    2776:	9301      	str	r3, [sp, #4]
    2778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    277c:	9300      	str	r3, [sp, #0]
    277e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    2782:	2210      	movs	r2, #16
    2784:	f7ff fd50 	bl	2228 <_PrintUnsigned>
        break;
    2788:	e040      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
      case 's':
        {
          const char * s = va_arg(*pParamList, const char *);
    278a:	687b      	ldr	r3, [r7, #4]
    278c:	681b      	ldr	r3, [r3, #0]
    278e:	1d19      	adds	r1, r3, #4
    2790:	687a      	ldr	r2, [r7, #4]
    2792:	6011      	str	r1, [r2, #0]
    2794:	681b      	ldr	r3, [r3, #0]
    2796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
          do {
            c = *s;
    279a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    279e:	781b      	ldrb	r3, [r3, #0]
    27a0:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
            s++;
    27a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    27a8:	3301      	adds	r3, #1
    27aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            if (c == '\0') {
    27ae:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    27b2:	2b00      	cmp	r3, #0
    27b4:	d00c      	beq.n	27d0 <SEGGER_RTT_vprintf+0x300>
              break;
            }
           _StoreChar(&BufferDesc, c);
    27b6:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
    27ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
    27be:	4611      	mov	r1, r2
    27c0:	4618      	mov	r0, r3
    27c2:	f7ff fcf3 	bl	21ac <_StoreChar>
          } while (BufferDesc.ReturnValue >= 0);
    27c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    27ca:	2b00      	cmp	r3, #0
    27cc:	dae5      	bge.n	279a <SEGGER_RTT_vprintf+0x2ca>
        }
        break;
    27ce:	e01d      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
          const char * s = va_arg(*pParamList, const char *);
          do {
            c = *s;
            s++;
            if (c == '\0') {
              break;
    27d0:	bf00      	nop
            }
           _StoreChar(&BufferDesc, c);
          } while (BufferDesc.ReturnValue >= 0);
        }
        break;
    27d2:	e01b      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
      case 'p':
        v = va_arg(*pParamList, int);
    27d4:	687b      	ldr	r3, [r7, #4]
    27d6:	681b      	ldr	r3, [r3, #0]
    27d8:	1d19      	adds	r1, r3, #4
    27da:	687a      	ldr	r2, [r7, #4]
    27dc:	6011      	str	r1, [r2, #0]
    27de:	681b      	ldr	r3, [r3, #0]
    27e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    27e4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
    27e8:	f107 0090 	add.w	r0, r7, #144	; 0x90
    27ec:	2300      	movs	r3, #0
    27ee:	9301      	str	r3, [sp, #4]
    27f0:	2308      	movs	r3, #8
    27f2:	9300      	str	r3, [sp, #0]
    27f4:	2308      	movs	r3, #8
    27f6:	2210      	movs	r2, #16
    27f8:	f7ff fd16 	bl	2228 <_PrintUnsigned>
        break;
    27fc:	e006      	b.n	280c <SEGGER_RTT_vprintf+0x33c>
      case '%':
        _StoreChar(&BufferDesc, '%');
    27fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
    2802:	2125      	movs	r1, #37	; 0x25
    2804:	4618      	mov	r0, r3
    2806:	f7ff fcd1 	bl	21ac <_StoreChar>
        break;
    280a:	bf00      	nop
      default:
        break;
      }
      sFormat++;
    280c:	68bb      	ldr	r3, [r7, #8]
    280e:	3301      	adds	r3, #1
    2810:	60bb      	str	r3, [r7, #8]
    2812:	e007      	b.n	2824 <SEGGER_RTT_vprintf+0x354>
    } else {
      _StoreChar(&BufferDesc, c);
    2814:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
    2818:	f107 0390 	add.w	r3, r7, #144	; 0x90
    281c:	4611      	mov	r1, r2
    281e:	4618      	mov	r0, r3
    2820:	f7ff fcc4 	bl	21ac <_StoreChar>
    }
  } while (BufferDesc.ReturnValue >= 0);
    2824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    2828:	2b00      	cmp	r3, #0
    282a:	f6bf ae67 	bge.w	24fc <SEGGER_RTT_vprintf+0x2c>
    282e:	e000      	b.n	2832 <SEGGER_RTT_vprintf+0x362>

  do {
    c = *sFormat;
    sFormat++;
    if (c == 0u) {
      break;
    2830:	bf00      	nop
    } else {
      _StoreChar(&BufferDesc, c);
    }
  } while (BufferDesc.ReturnValue >= 0);

  if (BufferDesc.ReturnValue > 0) {
    2832:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    2836:	2b00      	cmp	r3, #0
    2838:	dd12      	ble.n	2860 <SEGGER_RTT_vprintf+0x390>
    //
    // Write remaining data, if any
    //
    if (BufferDesc.Cnt != 0u) {
    283a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    283e:	2b00      	cmp	r3, #0
    2840:	d007      	beq.n	2852 <SEGGER_RTT_vprintf+0x382>
      SEGGER_RTT_Write(BufferIndex, acBuffer, BufferDesc.Cnt);
    2842:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    2846:	f107 0310 	add.w	r3, r7, #16
    284a:	4619      	mov	r1, r3
    284c:	68f8      	ldr	r0, [r7, #12]
    284e:	f7ff f8ed 	bl	1a2c <SEGGER_RTT_Write>
    }
    BufferDesc.ReturnValue += (int)BufferDesc.Cnt;
    2852:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    2856:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    285a:	4413      	add	r3, r2
    285c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  }
  return BufferDesc.ReturnValue;
    2860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
}
    2864:	4618      	mov	r0, r3
    2866:	37c0      	adds	r7, #192	; 0xc0
    2868:	46bd      	mov	sp, r7
    286a:	bd80      	pop	{r7, pc}

0000286c <SEGGER_RTT_printf>:
*          u: Print the argument as an unsigned integer
*          x: Print the argument as an hexadecimal integer
*          s: Print the string pointed to by the argument
*          p: Print the argument as an 8-digit hexadecimal integer. (Argument shall be a pointer to void.)
*/
int SEGGER_RTT_printf(unsigned BufferIndex, const char * sFormat, ...) {
    286c:	b40e      	push	{r1, r2, r3}
    286e:	b580      	push	{r7, lr}
    2870:	b085      	sub	sp, #20
    2872:	af00      	add	r7, sp, #0
    2874:	6078      	str	r0, [r7, #4]
  va_list ParamList;
  int res;

  va_start(ParamList, sFormat);
    2876:	f107 0320 	add.w	r3, r7, #32
    287a:	60bb      	str	r3, [r7, #8]
  res = SEGGER_RTT_vprintf(BufferIndex, sFormat, &ParamList);
    287c:	f107 0308 	add.w	r3, r7, #8
    2880:	461a      	mov	r2, r3
    2882:	69f9      	ldr	r1, [r7, #28]
    2884:	6878      	ldr	r0, [r7, #4]
    2886:	f7ff fe23 	bl	24d0 <SEGGER_RTT_vprintf>
    288a:	60f8      	str	r0, [r7, #12]
  va_end(ParamList);
  return res;
    288c:	68fb      	ldr	r3, [r7, #12]
}
    288e:	4618      	mov	r0, r3
    2890:	3714      	adds	r7, #20
    2892:	46bd      	mov	sp, r7
    2894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2898:	b003      	add	sp, #12
    289a:	4770      	bx	lr

0000289c <_EncodeData>:
*  Additional information
*    The data is encoded as a count byte followed by the contents
*    of the data buffer.
*    Make sure NumBytes + 1 bytes are free for the payload.
*/
static U8* _EncodeData(U8* pPayload, const char* pSrc, unsigned NumBytes) {
    289c:	b480      	push	{r7}
    289e:	b087      	sub	sp, #28
    28a0:	af00      	add	r7, sp, #0
    28a2:	60f8      	str	r0, [r7, #12]
    28a4:	60b9      	str	r1, [r7, #8]
    28a6:	607a      	str	r2, [r7, #4]
  unsigned n;
  //
  n = 0;
    28a8:	2300      	movs	r3, #0
    28aa:	617b      	str	r3, [r7, #20]
  *pPayload++ = NumBytes;
    28ac:	68fb      	ldr	r3, [r7, #12]
    28ae:	1c5a      	adds	r2, r3, #1
    28b0:	60fa      	str	r2, [r7, #12]
    28b2:	687a      	ldr	r2, [r7, #4]
    28b4:	b2d2      	uxtb	r2, r2
    28b6:	701a      	strb	r2, [r3, #0]
  while (n < NumBytes) {
    28b8:	e00a      	b.n	28d0 <_EncodeData+0x34>
    *pPayload++ = *pSrc++;
    28ba:	68fb      	ldr	r3, [r7, #12]
    28bc:	1c5a      	adds	r2, r3, #1
    28be:	60fa      	str	r2, [r7, #12]
    28c0:	68ba      	ldr	r2, [r7, #8]
    28c2:	1c51      	adds	r1, r2, #1
    28c4:	60b9      	str	r1, [r7, #8]
    28c6:	7812      	ldrb	r2, [r2, #0]
    28c8:	701a      	strb	r2, [r3, #0]
    n++;
    28ca:	697b      	ldr	r3, [r7, #20]
    28cc:	3301      	adds	r3, #1
    28ce:	617b      	str	r3, [r7, #20]
static U8* _EncodeData(U8* pPayload, const char* pSrc, unsigned NumBytes) {
  unsigned n;
  //
  n = 0;
  *pPayload++ = NumBytes;
  while (n < NumBytes) {
    28d0:	697a      	ldr	r2, [r7, #20]
    28d2:	687b      	ldr	r3, [r7, #4]
    28d4:	429a      	cmp	r2, r3
    28d6:	d3f0      	bcc.n	28ba <_EncodeData+0x1e>
    *pPayload++ = *pSrc++;
    n++;
  }
  return pPayload;
    28d8:	68fb      	ldr	r3, [r7, #12]
}
    28da:	4618      	mov	r0, r3
    28dc:	371c      	adds	r7, #28
    28de:	46bd      	mov	sp, r7
    28e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    28e4:	4770      	bx	lr
    28e6:	bf00      	nop

000028e8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned Limit) {
    28e8:	b480      	push	{r7}
    28ea:	b087      	sub	sp, #28
    28ec:	af00      	add	r7, sp, #0
    28ee:	60f8      	str	r0, [r7, #12]
    28f0:	60b9      	str	r1, [r7, #8]
    28f2:	607a      	str	r2, [r7, #4]
  unsigned n;
  unsigned Len;
  //
  // Compute string len
  //
  Len = 0;
    28f4:	2300      	movs	r3, #0
    28f6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
    28f8:	e002      	b.n	2900 <_EncodeStr+0x18>
    Len++;
    28fa:	693b      	ldr	r3, [r7, #16]
    28fc:	3301      	adds	r3, #1
    28fe:	613b      	str	r3, [r7, #16]
  unsigned Len;
  //
  // Compute string len
  //
  Len = 0;
  while(*(pText + Len) != 0) {
    2900:	68ba      	ldr	r2, [r7, #8]
    2902:	693b      	ldr	r3, [r7, #16]
    2904:	4413      	add	r3, r2
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	2b00      	cmp	r3, #0
    290a:	d1f6      	bne.n	28fa <_EncodeStr+0x12>
    Len++;
  }
  if (Len > Limit) {
    290c:	693a      	ldr	r2, [r7, #16]
    290e:	687b      	ldr	r3, [r7, #4]
    2910:	429a      	cmp	r2, r3
    2912:	d901      	bls.n	2918 <_EncodeStr+0x30>
    Len = Limit;
    2914:	687b      	ldr	r3, [r7, #4]
    2916:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
    2918:	693b      	ldr	r3, [r7, #16]
    291a:	2bfe      	cmp	r3, #254	; 0xfe
    291c:	d806      	bhi.n	292c <_EncodeStr+0x44>
    *pPayload++ = Len; 
    291e:	68fb      	ldr	r3, [r7, #12]
    2920:	1c5a      	adds	r2, r3, #1
    2922:	60fa      	str	r2, [r7, #12]
    2924:	693a      	ldr	r2, [r7, #16]
    2926:	b2d2      	uxtb	r2, r2
    2928:	701a      	strb	r2, [r3, #0]
    292a:	e011      	b.n	2950 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
    292c:	68fb      	ldr	r3, [r7, #12]
    292e:	1c5a      	adds	r2, r3, #1
    2930:	60fa      	str	r2, [r7, #12]
    2932:	22ff      	movs	r2, #255	; 0xff
    2934:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
    2936:	68fb      	ldr	r3, [r7, #12]
    2938:	1c5a      	adds	r2, r3, #1
    293a:	60fa      	str	r2, [r7, #12]
    293c:	693a      	ldr	r2, [r7, #16]
    293e:	b2d2      	uxtb	r2, r2
    2940:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
    2942:	68fb      	ldr	r3, [r7, #12]
    2944:	1c5a      	adds	r2, r3, #1
    2946:	60fa      	str	r2, [r7, #12]
    2948:	693a      	ldr	r2, [r7, #16]
    294a:	0a12      	lsrs	r2, r2, #8
    294c:	b2d2      	uxtb	r2, r2
    294e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
    2950:	2300      	movs	r3, #0
    2952:	617b      	str	r3, [r7, #20]
  while (n < Len) {
    2954:	e00a      	b.n	296c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
    2956:	68fb      	ldr	r3, [r7, #12]
    2958:	1c5a      	adds	r2, r3, #1
    295a:	60fa      	str	r2, [r7, #12]
    295c:	68ba      	ldr	r2, [r7, #8]
    295e:	1c51      	adds	r1, r2, #1
    2960:	60b9      	str	r1, [r7, #8]
    2962:	7812      	ldrb	r2, [r2, #0]
    2964:	701a      	strb	r2, [r3, #0]
    n++;
    2966:	697b      	ldr	r3, [r7, #20]
    2968:	3301      	adds	r3, #1
    296a:	617b      	str	r3, [r7, #20]
  }
  //
  // copy string
  //
  n = 0;
  while (n < Len) {
    296c:	697a      	ldr	r2, [r7, #20]
    296e:	693b      	ldr	r3, [r7, #16]
    2970:	429a      	cmp	r2, r3
    2972:	d3f0      	bcc.n	2956 <_EncodeStr+0x6e>
    *pPayload++ = *pText++;
    n++;
  }
  return pPayload;
    2974:	68fb      	ldr	r3, [r7, #12]
}
    2976:	4618      	mov	r0, r3
    2978:	371c      	adds	r7, #28
    297a:	46bd      	mov	sp, r7
    297c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2980:	4770      	bx	lr
    2982:	bf00      	nop

00002984 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
    2984:	b480      	push	{r7}
    2986:	b083      	sub	sp, #12
    2988:	af00      	add	r7, sp, #0
    298a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
    298c:	687b      	ldr	r3, [r7, #4]
    298e:	3304      	adds	r3, #4
}
    2990:	4618      	mov	r0, r3
    2992:	370c      	adds	r7, #12
    2994:	46bd      	mov	sp, r7
    2996:	f85d 7b04 	ldr.w	r7, [sp], #4
    299a:	4770      	bx	lr

0000299c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
    299c:	b580      	push	{r7, lr}
    299e:	b082      	sub	sp, #8
    29a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
    29a2:	1cfb      	adds	r3, r7, #3
    29a4:	2201      	movs	r2, #1
    29a6:	4619      	mov	r1, r3
    29a8:	2001      	movs	r0, #1
    29aa:	f7fe fe27 	bl	15fc <SEGGER_RTT_ReadNoLock>
    29ae:	4603      	mov	r3, r0
    29b0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
    29b2:	687b      	ldr	r3, [r7, #4]
    29b4:	2b00      	cmp	r3, #0
    29b6:	dd47      	ble.n	2a48 <_HandleIncomingPacket+0xac>
    switch (Cmd) {
    29b8:	78fb      	ldrb	r3, [r7, #3]
    29ba:	2b04      	cmp	r3, #4
    29bc:	d01a      	beq.n	29f4 <_HandleIncomingPacket+0x58>
    29be:	2b04      	cmp	r3, #4
    29c0:	dc06      	bgt.n	29d0 <_HandleIncomingPacket+0x34>
    29c2:	2b02      	cmp	r3, #2
    29c4:	d010      	beq.n	29e8 <_HandleIncomingPacket+0x4c>
    29c6:	2b02      	cmp	r3, #2
    29c8:	dc11      	bgt.n	29ee <_HandleIncomingPacket+0x52>
    29ca:	2b01      	cmp	r3, #1
    29cc:	d009      	beq.n	29e2 <_HandleIncomingPacket+0x46>
    29ce:	e02d      	b.n	2a2c <_HandleIncomingPacket+0x90>
    29d0:	2b06      	cmp	r3, #6
    29d2:	d015      	beq.n	2a00 <_HandleIncomingPacket+0x64>
    29d4:	2b06      	cmp	r3, #6
    29d6:	db10      	blt.n	29fa <_HandleIncomingPacket+0x5e>
    29d8:	2b07      	cmp	r3, #7
    29da:	d014      	beq.n	2a06 <_HandleIncomingPacket+0x6a>
    29dc:	2b80      	cmp	r3, #128	; 0x80
    29de:	d015      	beq.n	2a0c <_HandleIncomingPacket+0x70>
    29e0:	e024      	b.n	2a2c <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
    29e2:	f001 fd83 	bl	44ec <SEGGER_SYSVIEW_Start>
      break;
    29e6:	e02f      	b.n	2a48 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
    29e8:	f001 fe3c 	bl	4664 <SEGGER_SYSVIEW_Stop>
      break;
    29ec:	e02c      	b.n	2a48 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
    29ee:	f002 f817 	bl	4a20 <SEGGER_SYSVIEW_RecordSystime>
      break;
    29f2:	e029      	b.n	2a48 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
    29f4:	f001 ffdc 	bl	49b0 <SEGGER_SYSVIEW_SendTaskList>
      break;
    29f8:	e026      	b.n	2a48 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
    29fa:	f001 fe59 	bl	46b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
    29fe:	e023      	b.n	2a48 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
    2a00:	f002 fe14 	bl	562c <SEGGER_SYSVIEW_SendNumModules>
      break;
    2a04:	e020      	b.n	2a48 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
    2a06:	f002 fdf3 	bl	55f0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
    2a0a:	e01d      	b.n	2a48 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
    2a0c:	1cfb      	adds	r3, r7, #3
    2a0e:	2201      	movs	r2, #1
    2a10:	4619      	mov	r1, r3
    2a12:	2001      	movs	r0, #1
    2a14:	f7fe fdf2 	bl	15fc <SEGGER_RTT_ReadNoLock>
    2a18:	4603      	mov	r3, r0
    2a1a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
    2a1c:	687b      	ldr	r3, [r7, #4]
    2a1e:	2b00      	cmp	r3, #0
    2a20:	dd0f      	ble.n	2a42 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
    2a22:	78fb      	ldrb	r3, [r7, #3]
    2a24:	4618      	mov	r0, r3
    2a26:	f002 fd63 	bl	54f0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
    2a2a:	e00a      	b.n	2a42 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
    2a2c:	78fb      	ldrb	r3, [r7, #3]
    2a2e:	b25b      	sxtb	r3, r3
    2a30:	2b00      	cmp	r3, #0
    2a32:	da08      	bge.n	2a46 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
    2a34:	1cfb      	adds	r3, r7, #3
    2a36:	2201      	movs	r2, #1
    2a38:	4619      	mov	r1, r3
    2a3a:	2001      	movs	r0, #1
    2a3c:	f7fe fdde 	bl	15fc <SEGGER_RTT_ReadNoLock>
      }
      break;
    2a40:	e001      	b.n	2a46 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
      if (Status > 0) {
        SEGGER_SYSVIEW_SendModule(Cmd);
      }
      break;
    2a42:	bf00      	nop
    2a44:	e000      	b.n	2a48 <_HandleIncomingPacket+0xac>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
      }
      break;
    2a46:	bf00      	nop
    }
  }
}
    2a48:	bf00      	nop
    2a4a:	3708      	adds	r7, #8
    2a4c:	46bd      	mov	sp, r7
    2a4e:	bd80      	pop	{r7, pc}

00002a50 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
    2a50:	b580      	push	{r7, lr}
    2a52:	b08c      	sub	sp, #48	; 0x30
    2a54:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
    2a56:	2301      	movs	r3, #1
    2a58:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
    2a5a:	1d3b      	adds	r3, r7, #4
    2a5c:	3301      	adds	r3, #1
    2a5e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
    2a60:	69fb      	ldr	r3, [r7, #28]
    2a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    2a64:	4b33      	ldr	r3, [pc, #204]	; (2b34 <_TrySendOverflowPacket+0xe4>)
    2a66:	695b      	ldr	r3, [r3, #20]
    2a68:	62bb      	str	r3, [r7, #40]	; 0x28
    2a6a:	e00b      	b.n	2a84 <_TrySendOverflowPacket+0x34>
    2a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a6e:	1c5a      	adds	r2, r3, #1
    2a70:	62fa      	str	r2, [r7, #44]	; 0x2c
    2a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2a74:	b2d2      	uxtb	r2, r2
    2a76:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2a7a:	b2d2      	uxtb	r2, r2
    2a7c:	701a      	strb	r2, [r3, #0]
    2a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a80:	09db      	lsrs	r3, r3, #7
    2a82:	62bb      	str	r3, [r7, #40]	; 0x28
    2a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a86:	2b7f      	cmp	r3, #127	; 0x7f
    2a88:	d8f0      	bhi.n	2a6c <_TrySendOverflowPacket+0x1c>
    2a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a8c:	1c5a      	adds	r2, r3, #1
    2a8e:	62fa      	str	r2, [r7, #44]	; 0x2c
    2a90:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2a92:	b2d2      	uxtb	r2, r2
    2a94:	701a      	strb	r2, [r3, #0]
    2a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a98:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
    2a9a:	4b27      	ldr	r3, [pc, #156]	; (2b38 <_TrySendOverflowPacket+0xe8>)
    2a9c:	681b      	ldr	r3, [r3, #0]
    2a9e:	091b      	lsrs	r3, r3, #4
    2aa0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
    2aa2:	4b24      	ldr	r3, [pc, #144]	; (2b34 <_TrySendOverflowPacket+0xe4>)
    2aa4:	68db      	ldr	r3, [r3, #12]
    2aa6:	69ba      	ldr	r2, [r7, #24]
    2aa8:	1ad3      	subs	r3, r2, r3
    2aaa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
    2aac:	697b      	ldr	r3, [r7, #20]
    2aae:	011b      	lsls	r3, r3, #4
    2ab0:	617b      	str	r3, [r7, #20]
    2ab2:	697b      	ldr	r3, [r7, #20]
    2ab4:	111b      	asrs	r3, r3, #4
    2ab6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Delta);
    2ab8:	69fb      	ldr	r3, [r7, #28]
    2aba:	627b      	str	r3, [r7, #36]	; 0x24
    2abc:	697b      	ldr	r3, [r7, #20]
    2abe:	623b      	str	r3, [r7, #32]
    2ac0:	e00b      	b.n	2ada <_TrySendOverflowPacket+0x8a>
    2ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ac4:	1c5a      	adds	r2, r3, #1
    2ac6:	627a      	str	r2, [r7, #36]	; 0x24
    2ac8:	6a3a      	ldr	r2, [r7, #32]
    2aca:	b2d2      	uxtb	r2, r2
    2acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2ad0:	b2d2      	uxtb	r2, r2
    2ad2:	701a      	strb	r2, [r3, #0]
    2ad4:	6a3b      	ldr	r3, [r7, #32]
    2ad6:	09db      	lsrs	r3, r3, #7
    2ad8:	623b      	str	r3, [r7, #32]
    2ada:	6a3b      	ldr	r3, [r7, #32]
    2adc:	2b7f      	cmp	r3, #127	; 0x7f
    2ade:	d8f0      	bhi.n	2ac2 <_TrySendOverflowPacket+0x72>
    2ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ae2:	1c5a      	adds	r2, r3, #1
    2ae4:	627a      	str	r2, [r7, #36]	; 0x24
    2ae6:	6a3a      	ldr	r2, [r7, #32]
    2ae8:	b2d2      	uxtb	r2, r2
    2aea:	701a      	strb	r2, [r3, #0]
    2aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2aee:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
    2af0:	69fa      	ldr	r2, [r7, #28]
    2af2:	1d3b      	adds	r3, r7, #4
    2af4:	1ad3      	subs	r3, r2, r3
    2af6:	461a      	mov	r2, r3
    2af8:	1d3b      	adds	r3, r7, #4
    2afa:	4619      	mov	r1, r3
    2afc:	2001      	movs	r0, #1
    2afe:	f7fe fea9 	bl	1854 <SEGGER_RTT_WriteSkipNoLock>
    2b02:	4603      	mov	r3, r0
    2b04:	613b      	str	r3, [r7, #16]
  if (Status) {
    2b06:	693b      	ldr	r3, [r7, #16]
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d009      	beq.n	2b20 <_TrySendOverflowPacket+0xd0>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
    2b0c:	4a09      	ldr	r2, [pc, #36]	; (2b34 <_TrySendOverflowPacket+0xe4>)
    2b0e:	69bb      	ldr	r3, [r7, #24]
    2b10:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
    2b12:	4b08      	ldr	r3, [pc, #32]	; (2b34 <_TrySendOverflowPacket+0xe4>)
    2b14:	781b      	ldrb	r3, [r3, #0]
    2b16:	3b01      	subs	r3, #1
    2b18:	b2da      	uxtb	r2, r3
    2b1a:	4b06      	ldr	r3, [pc, #24]	; (2b34 <_TrySendOverflowPacket+0xe4>)
    2b1c:	701a      	strb	r2, [r3, #0]
    2b1e:	e004      	b.n	2b2a <_TrySendOverflowPacket+0xda>
  } else {
    _SYSVIEW_Globals.DropCount++;
    2b20:	4b04      	ldr	r3, [pc, #16]	; (2b34 <_TrySendOverflowPacket+0xe4>)
    2b22:	695b      	ldr	r3, [r3, #20]
    2b24:	3301      	adds	r3, #1
    2b26:	4a03      	ldr	r2, [pc, #12]	; (2b34 <_TrySendOverflowPacket+0xe4>)
    2b28:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
    2b2a:	693b      	ldr	r3, [r7, #16]
}
    2b2c:	4618      	mov	r0, r3
    2b2e:	3730      	adds	r7, #48	; 0x30
    2b30:	46bd      	mov	sp, r7
    2b32:	bd80      	pop	{r7, pc}
    2b34:	20000900 	.word	0x20000900
    2b38:	e0001004 	.word	0xe0001004

00002b3c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned EventId) {
    2b3c:	b580      	push	{r7, lr}
    2b3e:	b08a      	sub	sp, #40	; 0x28
    2b40:	af00      	add	r7, sp, #0
    2b42:	60f8      	str	r0, [r7, #12]
    2b44:	60b9      	str	r1, [r7, #8]
    2b46:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
    2b48:	4b65      	ldr	r3, [pc, #404]	; (2ce0 <_SendPacket+0x1a4>)
    2b4a:	781b      	ldrb	r3, [r3, #0]
    2b4c:	2b01      	cmp	r3, #1
    2b4e:	d010      	beq.n	2b72 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
    2b50:	4b63      	ldr	r3, [pc, #396]	; (2ce0 <_SendPacket+0x1a4>)
    2b52:	781b      	ldrb	r3, [r3, #0]
    2b54:	2b00      	cmp	r3, #0
    2b56:	f000 80a6 	beq.w	2ca6 <_SendPacket+0x16a>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
    2b5a:	4b61      	ldr	r3, [pc, #388]	; (2ce0 <_SendPacket+0x1a4>)
    2b5c:	781b      	ldrb	r3, [r3, #0]
    2b5e:	2b02      	cmp	r3, #2
    2b60:	d108      	bne.n	2b74 <_SendPacket+0x38>
    _TrySendOverflowPacket();
    2b62:	f7ff ff75 	bl	2a50 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
    2b66:	4b5e      	ldr	r3, [pc, #376]	; (2ce0 <_SendPacket+0x1a4>)
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	2b01      	cmp	r3, #1
    2b6c:	f040 809d 	bne.w	2caa <_SendPacket+0x16e>
    2b70:	e000      	b.n	2b74 <_SendPacket+0x38>
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
    goto Send;
    2b72:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
    2b74:	687b      	ldr	r3, [r7, #4]
    2b76:	2b1f      	cmp	r3, #31
    2b78:	d809      	bhi.n	2b8e <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
    2b7a:	4b59      	ldr	r3, [pc, #356]	; (2ce0 <_SendPacket+0x1a4>)
    2b7c:	69da      	ldr	r2, [r3, #28]
    2b7e:	687b      	ldr	r3, [r7, #4]
    2b80:	fa22 f303 	lsr.w	r3, r2, r3
    2b84:	f003 0301 	and.w	r3, r3, #1
    2b88:	2b00      	cmp	r3, #0
    2b8a:	f040 8090 	bne.w	2cae <_SendPacket+0x172>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
    2b8e:	687b      	ldr	r3, [r7, #4]
    2b90:	2b17      	cmp	r3, #23
    2b92:	d807      	bhi.n	2ba4 <_SendPacket+0x68>
    *--pStartPacket = EventId;
    2b94:	68fb      	ldr	r3, [r7, #12]
    2b96:	3b01      	subs	r3, #1
    2b98:	60fb      	str	r3, [r7, #12]
    2b9a:	687b      	ldr	r3, [r7, #4]
    2b9c:	b2da      	uxtb	r2, r3
    2b9e:	68fb      	ldr	r3, [r7, #12]
    2ba0:	701a      	strb	r2, [r3, #0]
    2ba2:	e03d      	b.n	2c20 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
    2ba4:	68ba      	ldr	r2, [r7, #8]
    2ba6:	68fb      	ldr	r3, [r7, #12]
    2ba8:	1ad3      	subs	r3, r2, r3
    2baa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
    2bac:	69fb      	ldr	r3, [r7, #28]
    2bae:	2b7f      	cmp	r3, #127	; 0x7f
    2bb0:	d912      	bls.n	2bd8 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
    2bb2:	68fb      	ldr	r3, [r7, #12]
    2bb4:	3b01      	subs	r3, #1
    2bb6:	60fb      	str	r3, [r7, #12]
    2bb8:	69fb      	ldr	r3, [r7, #28]
    2bba:	09db      	lsrs	r3, r3, #7
    2bbc:	b2da      	uxtb	r2, r3
    2bbe:	68fb      	ldr	r3, [r7, #12]
    2bc0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
    2bc2:	68fb      	ldr	r3, [r7, #12]
    2bc4:	3b01      	subs	r3, #1
    2bc6:	60fb      	str	r3, [r7, #12]
    2bc8:	69fb      	ldr	r3, [r7, #28]
    2bca:	b2db      	uxtb	r3, r3
    2bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2bd0:	b2da      	uxtb	r2, r3
    2bd2:	68fb      	ldr	r3, [r7, #12]
    2bd4:	701a      	strb	r2, [r3, #0]
    2bd6:	e006      	b.n	2be6 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
    2bd8:	68fb      	ldr	r3, [r7, #12]
    2bda:	3b01      	subs	r3, #1
    2bdc:	60fb      	str	r3, [r7, #12]
    2bde:	69fb      	ldr	r3, [r7, #28]
    2be0:	b2da      	uxtb	r2, r3
    2be2:	68fb      	ldr	r3, [r7, #12]
    2be4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
    2be6:	687b      	ldr	r3, [r7, #4]
    2be8:	2b7f      	cmp	r3, #127	; 0x7f
    2bea:	d912      	bls.n	2c12 <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
    2bec:	68fb      	ldr	r3, [r7, #12]
    2bee:	3b01      	subs	r3, #1
    2bf0:	60fb      	str	r3, [r7, #12]
    2bf2:	687b      	ldr	r3, [r7, #4]
    2bf4:	09db      	lsrs	r3, r3, #7
    2bf6:	b2da      	uxtb	r2, r3
    2bf8:	68fb      	ldr	r3, [r7, #12]
    2bfa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
    2bfc:	68fb      	ldr	r3, [r7, #12]
    2bfe:	3b01      	subs	r3, #1
    2c00:	60fb      	str	r3, [r7, #12]
    2c02:	687b      	ldr	r3, [r7, #4]
    2c04:	b2db      	uxtb	r3, r3
    2c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2c0a:	b2da      	uxtb	r2, r3
    2c0c:	68fb      	ldr	r3, [r7, #12]
    2c0e:	701a      	strb	r2, [r3, #0]
    2c10:	e006      	b.n	2c20 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
    2c12:	68fb      	ldr	r3, [r7, #12]
    2c14:	3b01      	subs	r3, #1
    2c16:	60fb      	str	r3, [r7, #12]
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	b2da      	uxtb	r2, r3
    2c1c:	68fb      	ldr	r3, [r7, #12]
    2c1e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
    2c20:	4b30      	ldr	r3, [pc, #192]	; (2ce4 <_SendPacket+0x1a8>)
    2c22:	681b      	ldr	r3, [r3, #0]
    2c24:	091b      	lsrs	r3, r3, #4
    2c26:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
    2c28:	4b2d      	ldr	r3, [pc, #180]	; (2ce0 <_SendPacket+0x1a4>)
    2c2a:	68db      	ldr	r3, [r3, #12]
    2c2c:	69ba      	ldr	r2, [r7, #24]
    2c2e:	1ad3      	subs	r3, r2, r3
    2c30:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
    2c32:	697b      	ldr	r3, [r7, #20]
    2c34:	011b      	lsls	r3, r3, #4
    2c36:	617b      	str	r3, [r7, #20]
    2c38:	697b      	ldr	r3, [r7, #20]
    2c3a:	091b      	lsrs	r3, r3, #4
    2c3c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pEndPacket, Delta);
    2c3e:	68bb      	ldr	r3, [r7, #8]
    2c40:	627b      	str	r3, [r7, #36]	; 0x24
    2c42:	697b      	ldr	r3, [r7, #20]
    2c44:	623b      	str	r3, [r7, #32]
    2c46:	e00b      	b.n	2c60 <_SendPacket+0x124>
    2c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c4a:	1c5a      	adds	r2, r3, #1
    2c4c:	627a      	str	r2, [r7, #36]	; 0x24
    2c4e:	6a3a      	ldr	r2, [r7, #32]
    2c50:	b2d2      	uxtb	r2, r2
    2c52:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2c56:	b2d2      	uxtb	r2, r2
    2c58:	701a      	strb	r2, [r3, #0]
    2c5a:	6a3b      	ldr	r3, [r7, #32]
    2c5c:	09db      	lsrs	r3, r3, #7
    2c5e:	623b      	str	r3, [r7, #32]
    2c60:	6a3b      	ldr	r3, [r7, #32]
    2c62:	2b7f      	cmp	r3, #127	; 0x7f
    2c64:	d8f0      	bhi.n	2c48 <_SendPacket+0x10c>
    2c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c68:	1c5a      	adds	r2, r3, #1
    2c6a:	627a      	str	r2, [r7, #36]	; 0x24
    2c6c:	6a3a      	ldr	r2, [r7, #32]
    2c6e:	b2d2      	uxtb	r2, r2
    2c70:	701a      	strb	r2, [r3, #0]
    2c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c74:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
    2c76:	68ba      	ldr	r2, [r7, #8]
    2c78:	68fb      	ldr	r3, [r7, #12]
    2c7a:	1ad3      	subs	r3, r2, r3
    2c7c:	461a      	mov	r2, r3
    2c7e:	68f9      	ldr	r1, [r7, #12]
    2c80:	2001      	movs	r0, #1
    2c82:	f7fe fde7 	bl	1854 <SEGGER_RTT_WriteSkipNoLock>
    2c86:	4603      	mov	r3, r0
    2c88:	613b      	str	r3, [r7, #16]
  if (Status) {
    2c8a:	693b      	ldr	r3, [r7, #16]
    2c8c:	2b00      	cmp	r3, #0
    2c8e:	d003      	beq.n	2c98 <_SendPacket+0x15c>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
    2c90:	4a13      	ldr	r2, [pc, #76]	; (2ce0 <_SendPacket+0x1a4>)
    2c92:	69bb      	ldr	r3, [r7, #24]
    2c94:	60d3      	str	r3, [r2, #12]
    2c96:	e00b      	b.n	2cb0 <_SendPacket+0x174>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
    2c98:	4b11      	ldr	r3, [pc, #68]	; (2ce0 <_SendPacket+0x1a4>)
    2c9a:	781b      	ldrb	r3, [r3, #0]
    2c9c:	3301      	adds	r3, #1
    2c9e:	b2da      	uxtb	r2, r3
    2ca0:	4b0f      	ldr	r3, [pc, #60]	; (2ce0 <_SendPacket+0x1a4>)
    2ca2:	701a      	strb	r2, [r3, #0]
    2ca4:	e004      	b.n	2cb0 <_SendPacket+0x174>
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
    2ca6:	bf00      	nop
    2ca8:	e002      	b.n	2cb0 <_SendPacket+0x174>
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
    _TrySendOverflowPacket();
    if (_SYSVIEW_Globals.EnableState != 1) {
      goto SendDone;
    2caa:	bf00      	nop
    2cac:	e000      	b.n	2cb0 <_SendPacket+0x174>
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
      goto SendDone;
    2cae:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
    2cb0:	4b0d      	ldr	r3, [pc, #52]	; (2ce8 <_SendPacket+0x1ac>)
    2cb2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    2cb6:	4b0c      	ldr	r3, [pc, #48]	; (2ce8 <_SendPacket+0x1ac>)
    2cb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    2cbc:	429a      	cmp	r2, r3
    2cbe:	d00b      	beq.n	2cd8 <_SendPacket+0x19c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
    2cc0:	4b07      	ldr	r3, [pc, #28]	; (2ce0 <_SendPacket+0x1a4>)
    2cc2:	789b      	ldrb	r3, [r3, #2]
    2cc4:	2b00      	cmp	r3, #0
    2cc6:	d107      	bne.n	2cd8 <_SendPacket+0x19c>
      _SYSVIEW_Globals.RecursionCnt = 1;
    2cc8:	4b05      	ldr	r3, [pc, #20]	; (2ce0 <_SendPacket+0x1a4>)
    2cca:	2201      	movs	r2, #1
    2ccc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
    2cce:	f7ff fe65 	bl	299c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
    2cd2:	4b03      	ldr	r3, [pc, #12]	; (2ce0 <_SendPacket+0x1a4>)
    2cd4:	2200      	movs	r2, #0
    2cd6:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
    2cd8:	bf00      	nop
    2cda:	3728      	adds	r7, #40	; 0x28
    2cdc:	46bd      	mov	sp, r7
    2cde:	bd80      	pop	{r7, pc}
    2ce0:	20000900 	.word	0x20000900
    2ce4:	e0001004 	.word	0xe0001004
    2ce8:	20003518 	.word	0x20003518

00002cec <_APrintHost>:
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pArguments   Pointer to array of arguments for the format string.
*    NumArguments Number of arguments in the array.
*/
static void _APrintHost(const char* s, U32 Options, U32* pArguments, U32 NumArguments) {
    2cec:	b580      	push	{r7, lr}
    2cee:	b08e      	sub	sp, #56	; 0x38
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	60f8      	str	r0, [r7, #12]
    2cf4:	60b9      	str	r1, [r7, #8]
    2cf6:	607a      	str	r2, [r7, #4]
    2cf8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;

  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
    2cfa:	f3ef 8311 	mrs	r3, BASEPRI
    2cfe:	f04f 0150 	mov.w	r1, #80	; 0x50
    2d02:	f381 8811 	msr	BASEPRI, r1
    2d06:	61bb      	str	r3, [r7, #24]
    2d08:	4839      	ldr	r0, [pc, #228]	; (2df0 <_APrintHost+0x104>)
    2d0a:	f7ff fe3b 	bl	2984 <_PreparePacket>
    2d0e:	6178      	str	r0, [r7, #20]
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
    2d10:	2280      	movs	r2, #128	; 0x80
    2d12:	68f9      	ldr	r1, [r7, #12]
    2d14:	6978      	ldr	r0, [r7, #20]
    2d16:	f7ff fde7 	bl	28e8 <_EncodeStr>
    2d1a:	6378      	str	r0, [r7, #52]	; 0x34
  ENCODE_U32(pPayload, Options);
    2d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d1e:	633b      	str	r3, [r7, #48]	; 0x30
    2d20:	68bb      	ldr	r3, [r7, #8]
    2d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d24:	e00b      	b.n	2d3e <_APrintHost+0x52>
    2d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d28:	1c5a      	adds	r2, r3, #1
    2d2a:	633a      	str	r2, [r7, #48]	; 0x30
    2d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d2e:	b2d2      	uxtb	r2, r2
    2d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2d34:	b2d2      	uxtb	r2, r2
    2d36:	701a      	strb	r2, [r3, #0]
    2d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d3a:	09db      	lsrs	r3, r3, #7
    2d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    2d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2d40:	2b7f      	cmp	r3, #127	; 0x7f
    2d42:	d8f0      	bhi.n	2d26 <_APrintHost+0x3a>
    2d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d46:	1c5a      	adds	r2, r3, #1
    2d48:	633a      	str	r2, [r7, #48]	; 0x30
    2d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2d4c:	b2d2      	uxtb	r2, r2
    2d4e:	701a      	strb	r2, [r3, #0]
    2d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2d52:	637b      	str	r3, [r7, #52]	; 0x34
  ENCODE_U32(pPayload, NumArguments);
    2d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d56:	62bb      	str	r3, [r7, #40]	; 0x28
    2d58:	683b      	ldr	r3, [r7, #0]
    2d5a:	627b      	str	r3, [r7, #36]	; 0x24
    2d5c:	e00b      	b.n	2d76 <_APrintHost+0x8a>
    2d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d60:	1c5a      	adds	r2, r3, #1
    2d62:	62ba      	str	r2, [r7, #40]	; 0x28
    2d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2d66:	b2d2      	uxtb	r2, r2
    2d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2d6c:	b2d2      	uxtb	r2, r2
    2d6e:	701a      	strb	r2, [r3, #0]
    2d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d72:	09db      	lsrs	r3, r3, #7
    2d74:	627b      	str	r3, [r7, #36]	; 0x24
    2d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2d78:	2b7f      	cmp	r3, #127	; 0x7f
    2d7a:	d8f0      	bhi.n	2d5e <_APrintHost+0x72>
    2d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d7e:	1c5a      	adds	r2, r3, #1
    2d80:	62ba      	str	r2, [r7, #40]	; 0x28
    2d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2d84:	b2d2      	uxtb	r2, r2
    2d86:	701a      	strb	r2, [r3, #0]
    2d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2d8a:	637b      	str	r3, [r7, #52]	; 0x34
  while (NumArguments--) {
    2d8c:	e01e      	b.n	2dcc <_APrintHost+0xe0>
    ENCODE_U32(pPayload, (*pArguments++));
    2d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2d90:	623b      	str	r3, [r7, #32]
    2d92:	687b      	ldr	r3, [r7, #4]
    2d94:	1d1a      	adds	r2, r3, #4
    2d96:	607a      	str	r2, [r7, #4]
    2d98:	681b      	ldr	r3, [r3, #0]
    2d9a:	61fb      	str	r3, [r7, #28]
    2d9c:	e00b      	b.n	2db6 <_APrintHost+0xca>
    2d9e:	6a3b      	ldr	r3, [r7, #32]
    2da0:	1c5a      	adds	r2, r3, #1
    2da2:	623a      	str	r2, [r7, #32]
    2da4:	69fa      	ldr	r2, [r7, #28]
    2da6:	b2d2      	uxtb	r2, r2
    2da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2dac:	b2d2      	uxtb	r2, r2
    2dae:	701a      	strb	r2, [r3, #0]
    2db0:	69fb      	ldr	r3, [r7, #28]
    2db2:	09db      	lsrs	r3, r3, #7
    2db4:	61fb      	str	r3, [r7, #28]
    2db6:	69fb      	ldr	r3, [r7, #28]
    2db8:	2b7f      	cmp	r3, #127	; 0x7f
    2dba:	d8f0      	bhi.n	2d9e <_APrintHost+0xb2>
    2dbc:	6a3b      	ldr	r3, [r7, #32]
    2dbe:	1c5a      	adds	r2, r3, #1
    2dc0:	623a      	str	r2, [r7, #32]
    2dc2:	69fa      	ldr	r2, [r7, #28]
    2dc4:	b2d2      	uxtb	r2, r2
    2dc6:	701a      	strb	r2, [r3, #0]
    2dc8:	6a3b      	ldr	r3, [r7, #32]
    2dca:	637b      	str	r3, [r7, #52]	; 0x34

  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
  ENCODE_U32(pPayload, Options);
  ENCODE_U32(pPayload, NumArguments);
  while (NumArguments--) {
    2dcc:	683b      	ldr	r3, [r7, #0]
    2dce:	1e5a      	subs	r2, r3, #1
    2dd0:	603a      	str	r2, [r7, #0]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	d1db      	bne.n	2d8e <_APrintHost+0xa2>
    ENCODE_U32(pPayload, (*pArguments++));
  }
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
    2dd6:	221a      	movs	r2, #26
    2dd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    2dda:	6978      	ldr	r0, [r7, #20]
    2ddc:	f7ff feae 	bl	2b3c <_SendPacket>
  RECORD_END();
    2de0:	69bb      	ldr	r3, [r7, #24]
    2de2:	f383 8811 	msr	BASEPRI, r3
}
    2de6:	bf00      	nop
    2de8:	3738      	adds	r7, #56	; 0x38
    2dea:	46bd      	mov	sp, r7
    2dec:	bd80      	pop	{r7, pc}
    2dee:	bf00      	nop
    2df0:	20000930 	.word	0x20000930

00002df4 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
    2df4:	b580      	push	{r7, lr}
    2df6:	b096      	sub	sp, #88	; 0x58
    2df8:	af00      	add	r7, sp, #0
    2dfa:	60f8      	str	r0, [r7, #12]
    2dfc:	60b9      	str	r1, [r7, #8]
    2dfe:	607a      	str	r2, [r7, #4]
  U32 aParas[SEGGER_SYSVIEW_MAX_ARGUMENTS];
  U32 NumArguments;
  const char* p;
  
  p = s;
    2e00:	68fb      	ldr	r3, [r7, #12]
    2e02:	653b      	str	r3, [r7, #80]	; 0x50
  NumArguments = 0;
    2e04:	2300      	movs	r3, #0
    2e06:	657b      	str	r3, [r7, #84]	; 0x54
  while (*p) {
    2e08:	e018      	b.n	2e3c <_VPrintHost+0x48>
    if (*p == '%') {
    2e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	2b25      	cmp	r3, #37	; 0x25
    2e10:	d111      	bne.n	2e36 <_VPrintHost+0x42>
      aParas[NumArguments++] = va_arg(*pParamList, int);
    2e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2e14:	1c5a      	adds	r2, r3, #1
    2e16:	657a      	str	r2, [r7, #84]	; 0x54
    2e18:	687a      	ldr	r2, [r7, #4]
    2e1a:	6812      	ldr	r2, [r2, #0]
    2e1c:	1d10      	adds	r0, r2, #4
    2e1e:	6879      	ldr	r1, [r7, #4]
    2e20:	6008      	str	r0, [r1, #0]
    2e22:	6812      	ldr	r2, [r2, #0]
    2e24:	009b      	lsls	r3, r3, #2
    2e26:	f107 0158 	add.w	r1, r7, #88	; 0x58
    2e2a:	440b      	add	r3, r1
    2e2c:	f843 2c48 	str.w	r2, [r3, #-72]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
    2e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2e32:	2b10      	cmp	r3, #16
    2e34:	d007      	beq.n	2e46 <_VPrintHost+0x52>
        break;
      }
    }
    p++;
    2e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e38:	3301      	adds	r3, #1
    2e3a:	653b      	str	r3, [r7, #80]	; 0x50
  U32 NumArguments;
  const char* p;
  
  p = s;
  NumArguments = 0;
  while (*p) {
    2e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e3e:	781b      	ldrb	r3, [r3, #0]
    2e40:	2b00      	cmp	r3, #0
    2e42:	d1e2      	bne.n	2e0a <_VPrintHost+0x16>
    2e44:	e000      	b.n	2e48 <_VPrintHost+0x54>
    if (*p == '%') {
      aParas[NumArguments++] = va_arg(*pParamList, int);
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
        break;
    2e46:	bf00      	nop
      }
    }
    p++;
  }
  _APrintHost(s, Options, aParas, NumArguments);
    2e48:	f107 0210 	add.w	r2, r7, #16
    2e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2e4e:	68b9      	ldr	r1, [r7, #8]
    2e50:	68f8      	ldr	r0, [r7, #12]
    2e52:	f7ff ff4b 	bl	2cec <_APrintHost>
}
    2e56:	bf00      	nop
    2e58:	3758      	adds	r7, #88	; 0x58
    2e5a:	46bd      	mov	sp, r7
    2e5c:	bd80      	pop	{r7, pc}
    2e5e:	bf00      	nop

00002e60 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
    2e60:	b580      	push	{r7, lr}
    2e62:	b08a      	sub	sp, #40	; 0x28
    2e64:	af00      	add	r7, sp, #0
    2e66:	6078      	str	r0, [r7, #4]
    2e68:	460b      	mov	r3, r1
    2e6a:	70fb      	strb	r3, [r7, #3]
  unsigned Cnt;
  U8* pPayload;
  U32 Options;

  Cnt = p->Cnt;
    2e6c:	687b      	ldr	r3, [r7, #4]
    2e6e:	691b      	ldr	r3, [r3, #16]
    2e70:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
    2e72:	697b      	ldr	r3, [r7, #20]
    2e74:	3301      	adds	r3, #1
    2e76:	2b80      	cmp	r3, #128	; 0x80
    2e78:	d80a      	bhi.n	2e90 <_StoreChar+0x30>
    *(p->pPayload++) = c;
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	685b      	ldr	r3, [r3, #4]
    2e7e:	1c59      	adds	r1, r3, #1
    2e80:	687a      	ldr	r2, [r7, #4]
    2e82:	6051      	str	r1, [r2, #4]
    2e84:	78fa      	ldrb	r2, [r7, #3]
    2e86:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
    2e88:	697b      	ldr	r3, [r7, #20]
    2e8a:	1c5a      	adds	r2, r3, #1
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
    2e90:	687b      	ldr	r3, [r7, #4]
    2e92:	691b      	ldr	r3, [r3, #16]
    2e94:	2b80      	cmp	r3, #128	; 0x80
    2e96:	d15a      	bne.n	2f4e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
    2e98:	687b      	ldr	r3, [r7, #4]
    2e9a:	689b      	ldr	r3, [r3, #8]
    2e9c:	687a      	ldr	r2, [r7, #4]
    2e9e:	6912      	ldr	r2, [r2, #16]
    2ea0:	b2d2      	uxtb	r2, r2
    2ea2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
    2ea4:	687b      	ldr	r3, [r7, #4]
    2ea6:	685b      	ldr	r3, [r3, #4]
    2ea8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
    2eaa:	687b      	ldr	r3, [r7, #4]
    2eac:	68db      	ldr	r3, [r3, #12]
    2eae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
    2eb0:	693b      	ldr	r3, [r7, #16]
    2eb2:	627b      	str	r3, [r7, #36]	; 0x24
    2eb4:	68fb      	ldr	r3, [r7, #12]
    2eb6:	623b      	str	r3, [r7, #32]
    2eb8:	e00b      	b.n	2ed2 <_StoreChar+0x72>
    2eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ebc:	1c5a      	adds	r2, r3, #1
    2ebe:	627a      	str	r2, [r7, #36]	; 0x24
    2ec0:	6a3a      	ldr	r2, [r7, #32]
    2ec2:	b2d2      	uxtb	r2, r2
    2ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2ec8:	b2d2      	uxtb	r2, r2
    2eca:	701a      	strb	r2, [r3, #0]
    2ecc:	6a3b      	ldr	r3, [r7, #32]
    2ece:	09db      	lsrs	r3, r3, #7
    2ed0:	623b      	str	r3, [r7, #32]
    2ed2:	6a3b      	ldr	r3, [r7, #32]
    2ed4:	2b7f      	cmp	r3, #127	; 0x7f
    2ed6:	d8f0      	bhi.n	2eba <_StoreChar+0x5a>
    2ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2eda:	1c5a      	adds	r2, r3, #1
    2edc:	627a      	str	r2, [r7, #36]	; 0x24
    2ede:	6a3a      	ldr	r2, [r7, #32]
    2ee0:	b2d2      	uxtb	r2, r2
    2ee2:	701a      	strb	r2, [r3, #0]
    2ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ee6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
    2ee8:	693b      	ldr	r3, [r7, #16]
    2eea:	61fb      	str	r3, [r7, #28]
    2eec:	2300      	movs	r3, #0
    2eee:	61bb      	str	r3, [r7, #24]
    2ef0:	e00b      	b.n	2f0a <_StoreChar+0xaa>
    2ef2:	69fb      	ldr	r3, [r7, #28]
    2ef4:	1c5a      	adds	r2, r3, #1
    2ef6:	61fa      	str	r2, [r7, #28]
    2ef8:	69ba      	ldr	r2, [r7, #24]
    2efa:	b2d2      	uxtb	r2, r2
    2efc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2f00:	b2d2      	uxtb	r2, r2
    2f02:	701a      	strb	r2, [r3, #0]
    2f04:	69bb      	ldr	r3, [r7, #24]
    2f06:	09db      	lsrs	r3, r3, #7
    2f08:	61bb      	str	r3, [r7, #24]
    2f0a:	69bb      	ldr	r3, [r7, #24]
    2f0c:	2b7f      	cmp	r3, #127	; 0x7f
    2f0e:	d8f0      	bhi.n	2ef2 <_StoreChar+0x92>
    2f10:	69fb      	ldr	r3, [r7, #28]
    2f12:	1c5a      	adds	r2, r3, #1
    2f14:	61fa      	str	r2, [r7, #28]
    2f16:	69ba      	ldr	r2, [r7, #24]
    2f18:	b2d2      	uxtb	r2, r2
    2f1a:	701a      	strb	r2, [r3, #0]
    2f1c:	69fb      	ldr	r3, [r7, #28]
    2f1e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	689b      	ldr	r3, [r3, #8]
    2f24:	221a      	movs	r2, #26
    2f26:	6939      	ldr	r1, [r7, #16]
    2f28:	4618      	mov	r0, r3
    2f2a:	f7ff fe07 	bl	2b3c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	681b      	ldr	r3, [r3, #0]
    2f32:	4618      	mov	r0, r3
    2f34:	f7ff fd26 	bl	2984 <_PreparePacket>
    2f38:	4602      	mov	r2, r0
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
    2f3e:	687b      	ldr	r3, [r7, #4]
    2f40:	689b      	ldr	r3, [r3, #8]
    2f42:	1c5a      	adds	r2, r3, #1
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
    2f48:	687b      	ldr	r3, [r7, #4]
    2f4a:	2200      	movs	r2, #0
    2f4c:	611a      	str	r2, [r3, #16]
  }
}
    2f4e:	bf00      	nop
    2f50:	3728      	adds	r7, #40	; 0x28
    2f52:	46bd      	mov	sp, r7
    2f54:	bd80      	pop	{r7, pc}
    2f56:	bf00      	nop

00002f58 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    2f58:	b580      	push	{r7, lr}
    2f5a:	b08a      	sub	sp, #40	; 0x28
    2f5c:	af00      	add	r7, sp, #0
    2f5e:	60f8      	str	r0, [r7, #12]
    2f60:	60b9      	str	r1, [r7, #8]
    2f62:	607a      	str	r2, [r7, #4]
    2f64:	603b      	str	r3, [r7, #0]
  unsigned Digit;
  unsigned Number;
  unsigned Width;
  char c;

  Number = v;
    2f66:	68bb      	ldr	r3, [r7, #8]
    2f68:	623b      	str	r3, [r7, #32]
  Digit = 1u;
    2f6a:	2301      	movs	r3, #1
    2f6c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
    2f6e:	2301      	movs	r3, #1
    2f70:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
    2f72:	e007      	b.n	2f84 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
    2f74:	6a3a      	ldr	r2, [r7, #32]
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	fbb2 f3f3 	udiv	r3, r2, r3
    2f7c:	623b      	str	r3, [r7, #32]
    Width++;
    2f7e:	69fb      	ldr	r3, [r7, #28]
    2f80:	3301      	adds	r3, #1
    2f82:	61fb      	str	r3, [r7, #28]
  Digit = 1u;
  //
  // Get actual field width
  //
  Width = 1u;
  while (Number >= Base) {
    2f84:	6a3a      	ldr	r2, [r7, #32]
    2f86:	687b      	ldr	r3, [r7, #4]
    2f88:	429a      	cmp	r2, r3
    2f8a:	d2f3      	bcs.n	2f74 <_PrintUnsigned+0x1c>
    Number = (Number / Base);
    Width++;
  }
  if (NumDigits > Width) {
    2f8c:	683a      	ldr	r2, [r7, #0]
    2f8e:	69fb      	ldr	r3, [r7, #28]
    2f90:	429a      	cmp	r2, r3
    2f92:	d901      	bls.n	2f98 <_PrintUnsigned+0x40>
    Width = NumDigits;
    2f94:	683b      	ldr	r3, [r7, #0]
    2f96:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
    2f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f9a:	f003 0301 	and.w	r3, r3, #1
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d11f      	bne.n	2fe2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
    2fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2fa4:	2b00      	cmp	r3, #0
    2fa6:	d01c      	beq.n	2fe2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
    2fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2faa:	f003 0302 	and.w	r3, r3, #2
    2fae:	2b00      	cmp	r3, #0
    2fb0:	d005      	beq.n	2fbe <_PrintUnsigned+0x66>
    2fb2:	683b      	ldr	r3, [r7, #0]
    2fb4:	2b00      	cmp	r3, #0
    2fb6:	d102      	bne.n	2fbe <_PrintUnsigned+0x66>
        c = '0';
    2fb8:	2330      	movs	r3, #48	; 0x30
    2fba:	76fb      	strb	r3, [r7, #27]
    2fbc:	e001      	b.n	2fc2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
    2fbe:	2320      	movs	r3, #32
    2fc0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2fc2:	e007      	b.n	2fd4 <_PrintUnsigned+0x7c>
        FieldWidth--;
    2fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2fc6:	3b01      	subs	r3, #1
    2fc8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
    2fca:	7efb      	ldrb	r3, [r7, #27]
    2fcc:	4619      	mov	r1, r3
    2fce:	68f8      	ldr	r0, [r7, #12]
    2fd0:	f7ff ff46 	bl	2e60 <_StoreChar>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
        c = '0';
      } else {
        c = ' ';
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    2fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2fd6:	2b00      	cmp	r3, #0
    2fd8:	d003      	beq.n	2fe2 <_PrintUnsigned+0x8a>
    2fda:	69fa      	ldr	r2, [r7, #28]
    2fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2fde:	429a      	cmp	r2, r3
    2fe0:	d3f0      	bcc.n	2fc4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
    2fe2:	683b      	ldr	r3, [r7, #0]
    2fe4:	2b01      	cmp	r3, #1
    2fe6:	d903      	bls.n	2ff0 <_PrintUnsigned+0x98>
      NumDigits--;
    2fe8:	683b      	ldr	r3, [r7, #0]
    2fea:	3b01      	subs	r3, #1
    2fec:	603b      	str	r3, [r7, #0]
    2fee:	e009      	b.n	3004 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
    2ff0:	68ba      	ldr	r2, [r7, #8]
    2ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2ff4:	fbb2 f3f3 	udiv	r3, r2, r3
    2ff8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
    2ffa:	697a      	ldr	r2, [r7, #20]
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	429a      	cmp	r2, r3
    3000:	d200      	bcs.n	3004 <_PrintUnsigned+0xac>
        break;
    3002:	e005      	b.n	3010 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
    3004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3006:	687a      	ldr	r2, [r7, #4]
    3008:	fb02 f303 	mul.w	r3, r2, r3
    300c:	627b      	str	r3, [r7, #36]	; 0x24
  }
    300e:	e7e8      	b.n	2fe2 <_PrintUnsigned+0x8a>
  //
  // Output digits
  //
  do {
    Div = v / Digit;
    3010:	68ba      	ldr	r2, [r7, #8]
    3012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3014:	fbb2 f3f3 	udiv	r3, r2, r3
    3018:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
    301a:	697b      	ldr	r3, [r7, #20]
    301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    301e:	fb02 f303 	mul.w	r3, r2, r3
    3022:	68ba      	ldr	r2, [r7, #8]
    3024:	1ad3      	subs	r3, r2, r3
    3026:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
    3028:	4a15      	ldr	r2, [pc, #84]	; (3080 <_PrintUnsigned+0x128>)
    302a:	697b      	ldr	r3, [r7, #20]
    302c:	4413      	add	r3, r2
    302e:	781b      	ldrb	r3, [r3, #0]
    3030:	4619      	mov	r1, r3
    3032:	68f8      	ldr	r0, [r7, #12]
    3034:	f7ff ff14 	bl	2e60 <_StoreChar>
    Digit /= Base;
    3038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    303a:	687b      	ldr	r3, [r7, #4]
    303c:	fbb2 f3f3 	udiv	r3, r2, r3
    3040:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
    3042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3044:	2b00      	cmp	r3, #0
    3046:	d1e3      	bne.n	3010 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    3048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    304a:	f003 0301 	and.w	r3, r3, #1
    304e:	2b00      	cmp	r3, #0
    3050:	d011      	beq.n	3076 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
    3052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3054:	2b00      	cmp	r3, #0
    3056:	d00e      	beq.n	3076 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    3058:	e006      	b.n	3068 <_PrintUnsigned+0x110>
        FieldWidth--;
    305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    305c:	3b01      	subs	r3, #1
    305e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
    3060:	2120      	movs	r1, #32
    3062:	68f8      	ldr	r0, [r7, #12]
    3064:	f7ff fefc 	bl	2e60 <_StoreChar>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
    if (FieldWidth != 0u) {
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    3068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    306a:	2b00      	cmp	r3, #0
    306c:	d003      	beq.n	3076 <_PrintUnsigned+0x11e>
    306e:	69fa      	ldr	r2, [r7, #28]
    3070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3072:	429a      	cmp	r2, r3
    3074:	d3f1      	bcc.n	305a <_PrintUnsigned+0x102>
        FieldWidth--;
        _StoreChar(pBufferDesc, ' ');
      }
    }
  }
}
    3076:	bf00      	nop
    3078:	3728      	adds	r7, #40	; 0x28
    307a:	46bd      	mov	sp, r7
    307c:	bd80      	pop	{r7, pc}
    307e:	bf00      	nop
    3080:	0000fde4 	.word	0x0000fde4

00003084 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned Base, unsigned NumDigits, unsigned FieldWidth, unsigned FormatFlags) {
    3084:	b580      	push	{r7, lr}
    3086:	b088      	sub	sp, #32
    3088:	af02      	add	r7, sp, #8
    308a:	60f8      	str	r0, [r7, #12]
    308c:	60b9      	str	r1, [r7, #8]
    308e:	607a      	str	r2, [r7, #4]
    3090:	603b      	str	r3, [r7, #0]
  unsigned Width;
  int Number;

  Number = (v < 0) ? -v : v;
    3092:	68bb      	ldr	r3, [r7, #8]
    3094:	2b00      	cmp	r3, #0
    3096:	bfb8      	it	lt
    3098:	425b      	neglt	r3, r3
    309a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
    309c:	2301      	movs	r3, #1
    309e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
    30a0:	e007      	b.n	30b2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
    30a2:	687b      	ldr	r3, [r7, #4]
    30a4:	693a      	ldr	r2, [r7, #16]
    30a6:	fb92 f3f3 	sdiv	r3, r2, r3
    30aa:	613b      	str	r3, [r7, #16]
    Width++;
    30ac:	697b      	ldr	r3, [r7, #20]
    30ae:	3301      	adds	r3, #1
    30b0:	617b      	str	r3, [r7, #20]

  //
  // Get actual field width
  //
  Width = 1u;
  while (Number >= (int)Base) {
    30b2:	687b      	ldr	r3, [r7, #4]
    30b4:	693a      	ldr	r2, [r7, #16]
    30b6:	429a      	cmp	r2, r3
    30b8:	daf3      	bge.n	30a2 <_PrintInt+0x1e>
    Number = (Number / (int)Base);
    Width++;
  }
  if (NumDigits > Width) {
    30ba:	683a      	ldr	r2, [r7, #0]
    30bc:	697b      	ldr	r3, [r7, #20]
    30be:	429a      	cmp	r2, r3
    30c0:	d901      	bls.n	30c6 <_PrintInt+0x42>
    Width = NumDigits;
    30c2:	683b      	ldr	r3, [r7, #0]
    30c4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
    30c6:	6a3b      	ldr	r3, [r7, #32]
    30c8:	2b00      	cmp	r3, #0
    30ca:	d00a      	beq.n	30e2 <_PrintInt+0x5e>
    30cc:	68bb      	ldr	r3, [r7, #8]
    30ce:	2b00      	cmp	r3, #0
    30d0:	db04      	blt.n	30dc <_PrintInt+0x58>
    30d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30d4:	f003 0304 	and.w	r3, r3, #4
    30d8:	2b00      	cmp	r3, #0
    30da:	d002      	beq.n	30e2 <_PrintInt+0x5e>
    FieldWidth--;
    30dc:	6a3b      	ldr	r3, [r7, #32]
    30de:	3b01      	subs	r3, #1
    30e0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    30e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30e4:	f003 0302 	and.w	r3, r3, #2
    30e8:	2b00      	cmp	r3, #0
    30ea:	d002      	beq.n	30f2 <_PrintInt+0x6e>
    30ec:	683b      	ldr	r3, [r7, #0]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d016      	beq.n	3120 <_PrintInt+0x9c>
    30f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30f4:	f003 0301 	and.w	r3, r3, #1
    30f8:	2b00      	cmp	r3, #0
    30fa:	d111      	bne.n	3120 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
    30fc:	6a3b      	ldr	r3, [r7, #32]
    30fe:	2b00      	cmp	r3, #0
    3100:	d00e      	beq.n	3120 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    3102:	e006      	b.n	3112 <_PrintInt+0x8e>
        FieldWidth--;
    3104:	6a3b      	ldr	r3, [r7, #32]
    3106:	3b01      	subs	r3, #1
    3108:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
    310a:	2120      	movs	r1, #32
    310c:	68f8      	ldr	r0, [r7, #12]
    310e:	f7ff fea7 	bl	2e60 <_StoreChar>
  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
    if (FieldWidth != 0u) {
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    3112:	6a3b      	ldr	r3, [r7, #32]
    3114:	2b00      	cmp	r3, #0
    3116:	d003      	beq.n	3120 <_PrintInt+0x9c>
    3118:	697a      	ldr	r2, [r7, #20]
    311a:	6a3b      	ldr	r3, [r7, #32]
    311c:	429a      	cmp	r2, r3
    311e:	d3f1      	bcc.n	3104 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
    3120:	68bb      	ldr	r3, [r7, #8]
    3122:	2b00      	cmp	r3, #0
    3124:	da07      	bge.n	3136 <_PrintInt+0xb2>
    v = -v;
    3126:	68bb      	ldr	r3, [r7, #8]
    3128:	425b      	negs	r3, r3
    312a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
    312c:	212d      	movs	r1, #45	; 0x2d
    312e:	68f8      	ldr	r0, [r7, #12]
    3130:	f7ff fe96 	bl	2e60 <_StoreChar>
    3134:	e008      	b.n	3148 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
    3136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3138:	f003 0304 	and.w	r3, r3, #4
    313c:	2b00      	cmp	r3, #0
    313e:	d003      	beq.n	3148 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
    3140:	212b      	movs	r1, #43	; 0x2b
    3142:	68f8      	ldr	r0, [r7, #12]
    3144:	f7ff fe8c 	bl	2e60 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    3148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    314a:	f003 0302 	and.w	r3, r3, #2
    314e:	2b00      	cmp	r3, #0
    3150:	d019      	beq.n	3186 <_PrintInt+0x102>
    3152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3154:	f003 0301 	and.w	r3, r3, #1
    3158:	2b00      	cmp	r3, #0
    315a:	d114      	bne.n	3186 <_PrintInt+0x102>
    315c:	683b      	ldr	r3, [r7, #0]
    315e:	2b00      	cmp	r3, #0
    3160:	d111      	bne.n	3186 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
    3162:	6a3b      	ldr	r3, [r7, #32]
    3164:	2b00      	cmp	r3, #0
    3166:	d00e      	beq.n	3186 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    3168:	e006      	b.n	3178 <_PrintInt+0xf4>
        FieldWidth--;
    316a:	6a3b      	ldr	r3, [r7, #32]
    316c:	3b01      	subs	r3, #1
    316e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
    3170:	2130      	movs	r1, #48	; 0x30
    3172:	68f8      	ldr	r0, [r7, #12]
    3174:	f7ff fe74 	bl	2e60 <_StoreChar>
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
    if (FieldWidth != 0u) {
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
    3178:	6a3b      	ldr	r3, [r7, #32]
    317a:	2b00      	cmp	r3, #0
    317c:	d003      	beq.n	3186 <_PrintInt+0x102>
    317e:	697a      	ldr	r2, [r7, #20]
    3180:	6a3b      	ldr	r3, [r7, #32]
    3182:	429a      	cmp	r2, r3
    3184:	d3f1      	bcc.n	316a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned)v, Base, NumDigits, FieldWidth, FormatFlags);
    3186:	68b9      	ldr	r1, [r7, #8]
    3188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    318a:	9301      	str	r3, [sp, #4]
    318c:	6a3b      	ldr	r3, [r7, #32]
    318e:	9300      	str	r3, [sp, #0]
    3190:	683b      	ldr	r3, [r7, #0]
    3192:	687a      	ldr	r2, [r7, #4]
    3194:	68f8      	ldr	r0, [r7, #12]
    3196:	f7ff fedf 	bl	2f58 <_PrintUnsigned>
}
    319a:	bf00      	nop
    319c:	3718      	adds	r7, #24
    319e:	46bd      	mov	sp, r7
    31a0:	bd80      	pop	{r7, pc}
    31a2:	bf00      	nop

000031a4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
    31a4:	b580      	push	{r7, lr}
    31a6:	b098      	sub	sp, #96	; 0x60
    31a8:	af02      	add	r7, sp, #8
    31aa:	60f8      	str	r0, [r7, #12]
    31ac:	60b9      	str	r1, [r7, #8]
    31ae:	607a      	str	r2, [r7, #4]
  U8*       pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
    31b0:	f3ef 8311 	mrs	r3, BASEPRI
    31b4:	f04f 0150 	mov.w	r1, #80	; 0x50
    31b8:	f381 8811 	msr	BASEPRI, r1
    31bc:	633b      	str	r3, [r7, #48]	; 0x30
    31be:	48ac      	ldr	r0, [pc, #688]	; (3470 <_VPrintTarget+0x2cc>)
    31c0:	f7ff fbe0 	bl	2984 <_PreparePacket>
    31c4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
    31c6:	4baa      	ldr	r3, [pc, #680]	; (3470 <_VPrintTarget+0x2cc>)
    31c8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
    31ca:	2300      	movs	r3, #0
    31cc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
    31ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    31d0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
    31d2:	69fb      	ldr	r3, [r7, #28]
    31d4:	3301      	adds	r3, #1
    31d6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
    31d8:	68bb      	ldr	r3, [r7, #8]
    31da:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
    31dc:	68fb      	ldr	r3, [r7, #12]
    31de:	781b      	ldrb	r3, [r3, #0]
    31e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
    31e4:	68fb      	ldr	r3, [r7, #12]
    31e6:	3301      	adds	r3, #1
    31e8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
    31ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    31ee:	2b00      	cmp	r3, #0
    31f0:	f000 8140 	beq.w	3474 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
    31f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    31f8:	2b25      	cmp	r3, #37	; 0x25
    31fa:	f040 812a 	bne.w	3452 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
    31fe:	2300      	movs	r3, #0
    3200:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
    3202:	2301      	movs	r3, #1
    3204:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
    3206:	68fb      	ldr	r3, [r7, #12]
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
    320e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    3212:	3b23      	subs	r3, #35	; 0x23
    3214:	2b0d      	cmp	r3, #13
    3216:	d83f      	bhi.n	3298 <_VPrintTarget+0xf4>
    3218:	a201      	add	r2, pc, #4	; (adr r2, 3220 <_VPrintTarget+0x7c>)
    321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    321e:	bf00      	nop
    3220:	00003289 	.word	0x00003289
    3224:	00003299 	.word	0x00003299
    3228:	00003299 	.word	0x00003299
    322c:	00003299 	.word	0x00003299
    3230:	00003299 	.word	0x00003299
    3234:	00003299 	.word	0x00003299
    3238:	00003299 	.word	0x00003299
    323c:	00003299 	.word	0x00003299
    3240:	00003279 	.word	0x00003279
    3244:	00003299 	.word	0x00003299
    3248:	00003259 	.word	0x00003259
    324c:	00003299 	.word	0x00003299
    3250:	00003299 	.word	0x00003299
    3254:	00003269 	.word	0x00003269
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
    3258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    325a:	f043 0301 	orr.w	r3, r3, #1
    325e:	64bb      	str	r3, [r7, #72]	; 0x48
    3260:	68fb      	ldr	r3, [r7, #12]
    3262:	3301      	adds	r3, #1
    3264:	60fb      	str	r3, [r7, #12]
    3266:	e01a      	b.n	329e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
    3268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    326a:	f043 0302 	orr.w	r3, r3, #2
    326e:	64bb      	str	r3, [r7, #72]	; 0x48
    3270:	68fb      	ldr	r3, [r7, #12]
    3272:	3301      	adds	r3, #1
    3274:	60fb      	str	r3, [r7, #12]
    3276:	e012      	b.n	329e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
    3278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    327a:	f043 0304 	orr.w	r3, r3, #4
    327e:	64bb      	str	r3, [r7, #72]	; 0x48
    3280:	68fb      	ldr	r3, [r7, #12]
    3282:	3301      	adds	r3, #1
    3284:	60fb      	str	r3, [r7, #12]
    3286:	e00a      	b.n	329e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
    3288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    328a:	f043 0308 	orr.w	r3, r3, #8
    328e:	64bb      	str	r3, [r7, #72]	; 0x48
    3290:	68fb      	ldr	r3, [r7, #12]
    3292:	3301      	adds	r3, #1
    3294:	60fb      	str	r3, [r7, #12]
    3296:	e002      	b.n	329e <_VPrintTarget+0xfa>
        default:  v = 0; break;
    3298:	2300      	movs	r3, #0
    329a:	653b      	str	r3, [r7, #80]	; 0x50
    329c:	bf00      	nop
        }
      } while (v);
    329e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    32a0:	2b00      	cmp	r3, #0
    32a2:	d1b0      	bne.n	3206 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
    32a4:	2300      	movs	r3, #0
    32a6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
    32a8:	68fb      	ldr	r3, [r7, #12]
    32aa:	781b      	ldrb	r3, [r3, #0]
    32ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
    32b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    32b4:	2b2f      	cmp	r3, #47	; 0x2f
    32b6:	d912      	bls.n	32de <_VPrintTarget+0x13a>
    32b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    32bc:	2b39      	cmp	r3, #57	; 0x39
    32be:	d80e      	bhi.n	32de <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
    32c0:	68fb      	ldr	r3, [r7, #12]
    32c2:	3301      	adds	r3, #1
    32c4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned)c - '0');
    32c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    32c8:	4613      	mov	r3, r2
    32ca:	009b      	lsls	r3, r3, #2
    32cc:	4413      	add	r3, r2
    32ce:	005b      	lsls	r3, r3, #1
    32d0:	461a      	mov	r2, r3
    32d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    32d6:	4413      	add	r3, r2
    32d8:	3b30      	subs	r3, #48	; 0x30
    32da:	647b      	str	r3, [r7, #68]	; 0x44
      } while (1);
    32dc:	e7e4      	b.n	32a8 <_VPrintTarget+0x104>

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
    32de:	2300      	movs	r3, #0
    32e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
    32e2:	68fb      	ldr	r3, [r7, #12]
    32e4:	781b      	ldrb	r3, [r3, #0]
    32e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
    32ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    32ee:	2b2e      	cmp	r3, #46	; 0x2e
    32f0:	d11d      	bne.n	332e <_VPrintTarget+0x18a>
        sFormat++;
    32f2:	68fb      	ldr	r3, [r7, #12]
    32f4:	3301      	adds	r3, #1
    32f6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
    32f8:	68fb      	ldr	r3, [r7, #12]
    32fa:	781b      	ldrb	r3, [r3, #0]
    32fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
    3300:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    3304:	2b2f      	cmp	r3, #47	; 0x2f
    3306:	d912      	bls.n	332e <_VPrintTarget+0x18a>
    3308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    330c:	2b39      	cmp	r3, #57	; 0x39
    330e:	d80e      	bhi.n	332e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
    3310:	68fb      	ldr	r3, [r7, #12]
    3312:	3301      	adds	r3, #1
    3314:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned)c - '0');
    3316:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    3318:	4613      	mov	r3, r2
    331a:	009b      	lsls	r3, r3, #2
    331c:	4413      	add	r3, r2
    331e:	005b      	lsls	r3, r3, #1
    3320:	461a      	mov	r2, r3
    3322:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    3326:	4413      	add	r3, r2
    3328:	3b30      	subs	r3, #48	; 0x30
    332a:	64fb      	str	r3, [r7, #76]	; 0x4c
        } while (1);
    332c:	e7e4      	b.n	32f8 <_VPrintTarget+0x154>
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
    332e:	68fb      	ldr	r3, [r7, #12]
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
    3336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    333a:	2b6c      	cmp	r3, #108	; 0x6c
    333c:	d003      	beq.n	3346 <_VPrintTarget+0x1a2>
    333e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    3342:	2b68      	cmp	r3, #104	; 0x68
    3344:	d107      	bne.n	3356 <_VPrintTarget+0x1b2>
          c = *sFormat;
    3346:	68fb      	ldr	r3, [r7, #12]
    3348:	781b      	ldrb	r3, [r3, #0]
    334a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
    334e:	68fb      	ldr	r3, [r7, #12]
    3350:	3301      	adds	r3, #1
    3352:	60fb      	str	r3, [r7, #12]
        } else {
          break;
        }
      } while (1);
    3354:	e7ef      	b.n	3336 <_VPrintTarget+0x192>
      //
      // Handle specifiers
      //
      switch (c) {
    3356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    335a:	2b64      	cmp	r3, #100	; 0x64
    335c:	d022      	beq.n	33a4 <_VPrintTarget+0x200>
    335e:	2b64      	cmp	r3, #100	; 0x64
    3360:	dc06      	bgt.n	3370 <_VPrintTarget+0x1cc>
    3362:	2b58      	cmp	r3, #88	; 0x58
    3364:	d044      	beq.n	33f0 <_VPrintTarget+0x24c>
    3366:	2b63      	cmp	r3, #99	; 0x63
    3368:	d009      	beq.n	337e <_VPrintTarget+0x1da>
    336a:	2b25      	cmp	r3, #37	; 0x25
    336c:	d066      	beq.n	343c <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
    336e:	e06c      	b.n	344a <_VPrintTarget+0x2a6>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
    3370:	2b75      	cmp	r3, #117	; 0x75
    3372:	d02a      	beq.n	33ca <_VPrintTarget+0x226>
    3374:	2b78      	cmp	r3, #120	; 0x78
    3376:	d03b      	beq.n	33f0 <_VPrintTarget+0x24c>
    3378:	2b70      	cmp	r3, #112	; 0x70
    337a:	d04c      	beq.n	3416 <_VPrintTarget+0x272>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
    337c:	e065      	b.n	344a <_VPrintTarget+0x2a6>
      // Handle specifiers
      //
      switch (c) {
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	681b      	ldr	r3, [r3, #0]
    3382:	1d19      	adds	r1, r3, #4
    3384:	687a      	ldr	r2, [r7, #4]
    3386:	6011      	str	r1, [r2, #0]
    3388:	681b      	ldr	r3, [r3, #0]
    338a:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
    338c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    338e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
    3392:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
    3396:	f107 0314 	add.w	r3, r7, #20
    339a:	4611      	mov	r1, r2
    339c:	4618      	mov	r0, r3
    339e:	f7ff fd5f 	bl	2e60 <_StoreChar>
        break;
    33a2:	e052      	b.n	344a <_VPrintTarget+0x2a6>
      }
      case 'd':
        v = va_arg(*pParamList, int);
    33a4:	687b      	ldr	r3, [r7, #4]
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	1d19      	adds	r1, r3, #4
    33aa:	687a      	ldr	r2, [r7, #4]
    33ac:	6011      	str	r1, [r2, #0]
    33ae:	681b      	ldr	r3, [r3, #0]
    33b0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
    33b2:	f107 0014 	add.w	r0, r7, #20
    33b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    33b8:	9301      	str	r3, [sp, #4]
    33ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    33bc:	9300      	str	r3, [sp, #0]
    33be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33c0:	220a      	movs	r2, #10
    33c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
    33c4:	f7ff fe5e 	bl	3084 <_PrintInt>
        break;
    33c8:	e03f      	b.n	344a <_VPrintTarget+0x2a6>
      case 'u':
        v = va_arg(*pParamList, int);
    33ca:	687b      	ldr	r3, [r7, #4]
    33cc:	681b      	ldr	r3, [r3, #0]
    33ce:	1d19      	adds	r1, r3, #4
    33d0:	687a      	ldr	r2, [r7, #4]
    33d2:	6011      	str	r1, [r2, #0]
    33d4:	681b      	ldr	r3, [r3, #0]
    33d6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned)v, 10u, NumDigits, FieldWidth, FormatFlags);
    33d8:	6d39      	ldr	r1, [r7, #80]	; 0x50
    33da:	f107 0014 	add.w	r0, r7, #20
    33de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    33e0:	9301      	str	r3, [sp, #4]
    33e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    33e4:	9300      	str	r3, [sp, #0]
    33e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    33e8:	220a      	movs	r2, #10
    33ea:	f7ff fdb5 	bl	2f58 <_PrintUnsigned>
        break;
    33ee:	e02c      	b.n	344a <_VPrintTarget+0x2a6>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
    33f0:	687b      	ldr	r3, [r7, #4]
    33f2:	681b      	ldr	r3, [r3, #0]
    33f4:	1d19      	adds	r1, r3, #4
    33f6:	687a      	ldr	r2, [r7, #4]
    33f8:	6011      	str	r1, [r2, #0]
    33fa:	681b      	ldr	r3, [r3, #0]
    33fc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, NumDigits, FieldWidth, FormatFlags);
    33fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3400:	f107 0014 	add.w	r0, r7, #20
    3404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3406:	9301      	str	r3, [sp, #4]
    3408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    340a:	9300      	str	r3, [sp, #0]
    340c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    340e:	2210      	movs	r2, #16
    3410:	f7ff fda2 	bl	2f58 <_PrintUnsigned>
        break;
    3414:	e019      	b.n	344a <_VPrintTarget+0x2a6>
      case 'p':
        v = va_arg(*pParamList, int);
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	681b      	ldr	r3, [r3, #0]
    341a:	1d19      	adds	r1, r3, #4
    341c:	687a      	ldr	r2, [r7, #4]
    341e:	6011      	str	r1, [r2, #0]
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned)v, 16u, 8u, 8u, 0u);
    3424:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3426:	f107 0014 	add.w	r0, r7, #20
    342a:	2300      	movs	r3, #0
    342c:	9301      	str	r3, [sp, #4]
    342e:	2308      	movs	r3, #8
    3430:	9300      	str	r3, [sp, #0]
    3432:	2308      	movs	r3, #8
    3434:	2210      	movs	r2, #16
    3436:	f7ff fd8f 	bl	2f58 <_PrintUnsigned>
        break;
    343a:	e006      	b.n	344a <_VPrintTarget+0x2a6>
      case '%':
        _StoreChar(&BufferDesc, '%');
    343c:	f107 0314 	add.w	r3, r7, #20
    3440:	2125      	movs	r1, #37	; 0x25
    3442:	4618      	mov	r0, r3
    3444:	f7ff fd0c 	bl	2e60 <_StoreChar>
        break;
    3448:	bf00      	nop
      default:
        break;
      }
      sFormat++;
    344a:	68fb      	ldr	r3, [r7, #12]
    344c:	3301      	adds	r3, #1
    344e:	60fb      	str	r3, [r7, #12]
    3450:	e007      	b.n	3462 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
    3452:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
    3456:	f107 0314 	add.w	r3, r7, #20
    345a:	4611      	mov	r1, r2
    345c:	4618      	mov	r0, r3
    345e:	f7ff fcff 	bl	2e60 <_StoreChar>
    }
  } while (*sFormat);
    3462:	68fb      	ldr	r3, [r7, #12]
    3464:	781b      	ldrb	r3, [r3, #0]
    3466:	2b00      	cmp	r3, #0
    3468:	f47f aeb8 	bne.w	31dc <_VPrintTarget+0x38>
    346c:	e003      	b.n	3476 <_VPrintTarget+0x2d2>
    346e:	bf00      	nop
    3470:	20000930 	.word	0x20000930

  do {
    c = *sFormat;
    sFormat++;
    if (c == 0u) {
      break;
    3474:	bf00      	nop
  } while (*sFormat);

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
    3476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3478:	2b00      	cmp	r3, #0
    347a:	d041      	beq.n	3500 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
    347c:	69fb      	ldr	r3, [r7, #28]
    347e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3480:	b2d2      	uxtb	r2, r2
    3482:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
    3484:	69bb      	ldr	r3, [r7, #24]
    3486:	643b      	str	r3, [r7, #64]	; 0x40
    3488:	6a3b      	ldr	r3, [r7, #32]
    348a:	63fb      	str	r3, [r7, #60]	; 0x3c
    348c:	e00b      	b.n	34a6 <_VPrintTarget+0x302>
    348e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3490:	1c5a      	adds	r2, r3, #1
    3492:	643a      	str	r2, [r7, #64]	; 0x40
    3494:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    3496:	b2d2      	uxtb	r2, r2
    3498:	f062 027f 	orn	r2, r2, #127	; 0x7f
    349c:	b2d2      	uxtb	r2, r2
    349e:	701a      	strb	r2, [r3, #0]
    34a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a2:	09db      	lsrs	r3, r3, #7
    34a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    34a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    34a8:	2b7f      	cmp	r3, #127	; 0x7f
    34aa:	d8f0      	bhi.n	348e <_VPrintTarget+0x2ea>
    34ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    34ae:	1c5a      	adds	r2, r3, #1
    34b0:	643a      	str	r2, [r7, #64]	; 0x40
    34b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    34b4:	b2d2      	uxtb	r2, r2
    34b6:	701a      	strb	r2, [r3, #0]
    34b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    34ba:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
    34bc:	69bb      	ldr	r3, [r7, #24]
    34be:	63bb      	str	r3, [r7, #56]	; 0x38
    34c0:	2300      	movs	r3, #0
    34c2:	637b      	str	r3, [r7, #52]	; 0x34
    34c4:	e00b      	b.n	34de <_VPrintTarget+0x33a>
    34c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34c8:	1c5a      	adds	r2, r3, #1
    34ca:	63ba      	str	r2, [r7, #56]	; 0x38
    34cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    34ce:	b2d2      	uxtb	r2, r2
    34d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    34d4:	b2d2      	uxtb	r2, r2
    34d6:	701a      	strb	r2, [r3, #0]
    34d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34da:	09db      	lsrs	r3, r3, #7
    34dc:	637b      	str	r3, [r7, #52]	; 0x34
    34de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    34e0:	2b7f      	cmp	r3, #127	; 0x7f
    34e2:	d8f0      	bhi.n	34c6 <_VPrintTarget+0x322>
    34e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34e6:	1c5a      	adds	r2, r3, #1
    34e8:	63ba      	str	r2, [r7, #56]	; 0x38
    34ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    34ec:	b2d2      	uxtb	r2, r2
    34ee:	701a      	strb	r2, [r3, #0]
    34f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    34f2:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
    34f4:	69fb      	ldr	r3, [r7, #28]
    34f6:	69b9      	ldr	r1, [r7, #24]
    34f8:	221a      	movs	r2, #26
    34fa:	4618      	mov	r0, r3
    34fc:	f7ff fb1e 	bl	2b3c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
    3500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3502:	f383 8811 	msr	BASEPRI, r3
#endif
}
    3506:	bf00      	nop
    3508:	3758      	adds	r7, #88	; 0x58
    350a:	46bd      	mov	sp, r7
    350c:	bd80      	pop	{r7, pc}
    350e:	bf00      	nop

00003510 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
    3510:	b580      	push	{r7, lr}
    3512:	b086      	sub	sp, #24
    3514:	af02      	add	r7, sp, #8
    3516:	60f8      	str	r0, [r7, #12]
    3518:	60b9      	str	r1, [r7, #8]
    351a:	607a      	str	r2, [r7, #4]
    351c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
    351e:	2300      	movs	r3, #0
    3520:	9300      	str	r3, [sp, #0]
    3522:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3526:	4a14      	ldr	r2, [pc, #80]	; (3578 <SEGGER_SYSVIEW_Init+0x68>)
    3528:	4914      	ldr	r1, [pc, #80]	; (357c <SEGGER_SYSVIEW_Init+0x6c>)
    352a:	2001      	movs	r0, #1
    352c:	f7fe fc10 	bl	1d50 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
    3530:	2300      	movs	r3, #0
    3532:	9300      	str	r3, [sp, #0]
    3534:	2308      	movs	r3, #8
    3536:	4a12      	ldr	r2, [pc, #72]	; (3580 <SEGGER_SYSVIEW_Init+0x70>)
    3538:	4910      	ldr	r1, [pc, #64]	; (357c <SEGGER_SYSVIEW_Init+0x6c>)
    353a:	2001      	movs	r0, #1
    353c:	f7fe fc72 	bl	1e24 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
    3540:	4b10      	ldr	r3, [pc, #64]	; (3584 <SEGGER_SYSVIEW_Init+0x74>)
    3542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3546:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
    3548:	4b0f      	ldr	r3, [pc, #60]	; (3588 <SEGGER_SYSVIEW_Init+0x78>)
    354a:	681b      	ldr	r3, [r3, #0]
    354c:	091b      	lsrs	r3, r3, #4
    354e:	4a0d      	ldr	r2, [pc, #52]	; (3584 <SEGGER_SYSVIEW_Init+0x74>)
    3550:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
    3552:	4a0c      	ldr	r2, [pc, #48]	; (3584 <SEGGER_SYSVIEW_Init+0x74>)
    3554:	687b      	ldr	r3, [r7, #4]
    3556:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
    3558:	4a0a      	ldr	r2, [pc, #40]	; (3584 <SEGGER_SYSVIEW_Init+0x74>)
    355a:	68fb      	ldr	r3, [r7, #12]
    355c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
    355e:	4a09      	ldr	r2, [pc, #36]	; (3584 <SEGGER_SYSVIEW_Init+0x74>)
    3560:	68bb      	ldr	r3, [r7, #8]
    3562:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
    3564:	4a07      	ldr	r2, [pc, #28]	; (3584 <SEGGER_SYSVIEW_Init+0x74>)
    3566:	683b      	ldr	r3, [r7, #0]
    3568:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
    356a:	4b06      	ldr	r3, [pc, #24]	; (3584 <SEGGER_SYSVIEW_Init+0x74>)
    356c:	2200      	movs	r2, #0
    356e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
    3570:	bf00      	nop
    3572:	3710      	adds	r7, #16
    3574:	46bd      	mov	sp, r7
    3576:	bd80      	pop	{r7, pc}
    3578:	200004f8 	.word	0x200004f8
    357c:	0000fddc 	.word	0x0000fddc
    3580:	200008f8 	.word	0x200008f8
    3584:	20000900 	.word	0x20000900
    3588:	e0001004 	.word	0xe0001004

0000358c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
    358c:	b480      	push	{r7}
    358e:	b083      	sub	sp, #12
    3590:	af00      	add	r7, sp, #0
    3592:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
    3594:	4a04      	ldr	r2, [pc, #16]	; (35a8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
    3596:	687b      	ldr	r3, [r7, #4]
    3598:	6113      	str	r3, [r2, #16]
}
    359a:	bf00      	nop
    359c:	370c      	adds	r7, #12
    359e:	46bd      	mov	sp, r7
    35a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35a4:	4770      	bx	lr
    35a6:	bf00      	nop
    35a8:	20000900 	.word	0x20000900

000035ac <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned EventID) {
    35ac:	b580      	push	{r7, lr}
    35ae:	b084      	sub	sp, #16
    35b0:	af00      	add	r7, sp, #0
    35b2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
    35b4:	f3ef 8311 	mrs	r3, BASEPRI
    35b8:	f04f 0150 	mov.w	r1, #80	; 0x50
    35bc:	f381 8811 	msr	BASEPRI, r1
    35c0:	60fb      	str	r3, [r7, #12]
    35c2:	4808      	ldr	r0, [pc, #32]	; (35e4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
    35c4:	f7ff f9de 	bl	2984 <_PreparePacket>
    35c8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
    35ca:	687a      	ldr	r2, [r7, #4]
    35cc:	68b9      	ldr	r1, [r7, #8]
    35ce:	68b8      	ldr	r0, [r7, #8]
    35d0:	f7ff fab4 	bl	2b3c <_SendPacket>
  RECORD_END();
    35d4:	68fb      	ldr	r3, [r7, #12]
    35d6:	f383 8811 	msr	BASEPRI, r3
}
    35da:	bf00      	nop
    35dc:	3710      	adds	r7, #16
    35de:	46bd      	mov	sp, r7
    35e0:	bd80      	pop	{r7, pc}
    35e2:	bf00      	nop
    35e4:	20000930 	.word	0x20000930

000035e8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned EventID, U32 Value) {
    35e8:	b580      	push	{r7, lr}
    35ea:	b088      	sub	sp, #32
    35ec:	af00      	add	r7, sp, #0
    35ee:	6078      	str	r0, [r7, #4]
    35f0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    35f2:	f3ef 8311 	mrs	r3, BASEPRI
    35f6:	f04f 0150 	mov.w	r1, #80	; 0x50
    35fa:	f381 8811 	msr	BASEPRI, r1
    35fe:	617b      	str	r3, [r7, #20]
    3600:	4816      	ldr	r0, [pc, #88]	; (365c <SEGGER_SYSVIEW_RecordU32+0x74>)
    3602:	f7ff f9bf 	bl	2984 <_PreparePacket>
    3606:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    3608:	693b      	ldr	r3, [r7, #16]
    360a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
    360c:	68fb      	ldr	r3, [r7, #12]
    360e:	61fb      	str	r3, [r7, #28]
    3610:	683b      	ldr	r3, [r7, #0]
    3612:	61bb      	str	r3, [r7, #24]
    3614:	e00b      	b.n	362e <SEGGER_SYSVIEW_RecordU32+0x46>
    3616:	69fb      	ldr	r3, [r7, #28]
    3618:	1c5a      	adds	r2, r3, #1
    361a:	61fa      	str	r2, [r7, #28]
    361c:	69ba      	ldr	r2, [r7, #24]
    361e:	b2d2      	uxtb	r2, r2
    3620:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3624:	b2d2      	uxtb	r2, r2
    3626:	701a      	strb	r2, [r3, #0]
    3628:	69bb      	ldr	r3, [r7, #24]
    362a:	09db      	lsrs	r3, r3, #7
    362c:	61bb      	str	r3, [r7, #24]
    362e:	69bb      	ldr	r3, [r7, #24]
    3630:	2b7f      	cmp	r3, #127	; 0x7f
    3632:	d8f0      	bhi.n	3616 <SEGGER_SYSVIEW_RecordU32+0x2e>
    3634:	69fb      	ldr	r3, [r7, #28]
    3636:	1c5a      	adds	r2, r3, #1
    3638:	61fa      	str	r2, [r7, #28]
    363a:	69ba      	ldr	r2, [r7, #24]
    363c:	b2d2      	uxtb	r2, r2
    363e:	701a      	strb	r2, [r3, #0]
    3640:	69fb      	ldr	r3, [r7, #28]
    3642:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
    3644:	687a      	ldr	r2, [r7, #4]
    3646:	68f9      	ldr	r1, [r7, #12]
    3648:	6938      	ldr	r0, [r7, #16]
    364a:	f7ff fa77 	bl	2b3c <_SendPacket>
  RECORD_END();
    364e:	697b      	ldr	r3, [r7, #20]
    3650:	f383 8811 	msr	BASEPRI, r3
}
    3654:	bf00      	nop
    3656:	3720      	adds	r7, #32
    3658:	46bd      	mov	sp, r7
    365a:	bd80      	pop	{r7, pc}
    365c:	20000930 	.word	0x20000930

00003660 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned EventID, U32 Para0, U32 Para1) {
    3660:	b580      	push	{r7, lr}
    3662:	b08c      	sub	sp, #48	; 0x30
    3664:	af00      	add	r7, sp, #0
    3666:	60f8      	str	r0, [r7, #12]
    3668:	60b9      	str	r1, [r7, #8]
    366a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
    366c:	f3ef 8311 	mrs	r3, BASEPRI
    3670:	f04f 0150 	mov.w	r1, #80	; 0x50
    3674:	f381 8811 	msr	BASEPRI, r1
    3678:	61fb      	str	r3, [r7, #28]
    367a:	4825      	ldr	r0, [pc, #148]	; (3710 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
    367c:	f7ff f982 	bl	2984 <_PreparePacket>
    3680:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    3682:	69bb      	ldr	r3, [r7, #24]
    3684:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    3686:	697b      	ldr	r3, [r7, #20]
    3688:	62fb      	str	r3, [r7, #44]	; 0x2c
    368a:	68bb      	ldr	r3, [r7, #8]
    368c:	62bb      	str	r3, [r7, #40]	; 0x28
    368e:	e00b      	b.n	36a8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
    3690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3692:	1c5a      	adds	r2, r3, #1
    3694:	62fa      	str	r2, [r7, #44]	; 0x2c
    3696:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3698:	b2d2      	uxtb	r2, r2
    369a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    369e:	b2d2      	uxtb	r2, r2
    36a0:	701a      	strb	r2, [r3, #0]
    36a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36a4:	09db      	lsrs	r3, r3, #7
    36a6:	62bb      	str	r3, [r7, #40]	; 0x28
    36a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36aa:	2b7f      	cmp	r3, #127	; 0x7f
    36ac:	d8f0      	bhi.n	3690 <SEGGER_SYSVIEW_RecordU32x2+0x30>
    36ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36b0:	1c5a      	adds	r2, r3, #1
    36b2:	62fa      	str	r2, [r7, #44]	; 0x2c
    36b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    36b6:	b2d2      	uxtb	r2, r2
    36b8:	701a      	strb	r2, [r3, #0]
    36ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    36bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    36be:	697b      	ldr	r3, [r7, #20]
    36c0:	627b      	str	r3, [r7, #36]	; 0x24
    36c2:	687b      	ldr	r3, [r7, #4]
    36c4:	623b      	str	r3, [r7, #32]
    36c6:	e00b      	b.n	36e0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
    36c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36ca:	1c5a      	adds	r2, r3, #1
    36cc:	627a      	str	r2, [r7, #36]	; 0x24
    36ce:	6a3a      	ldr	r2, [r7, #32]
    36d0:	b2d2      	uxtb	r2, r2
    36d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    36d6:	b2d2      	uxtb	r2, r2
    36d8:	701a      	strb	r2, [r3, #0]
    36da:	6a3b      	ldr	r3, [r7, #32]
    36dc:	09db      	lsrs	r3, r3, #7
    36de:	623b      	str	r3, [r7, #32]
    36e0:	6a3b      	ldr	r3, [r7, #32]
    36e2:	2b7f      	cmp	r3, #127	; 0x7f
    36e4:	d8f0      	bhi.n	36c8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
    36e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36e8:	1c5a      	adds	r2, r3, #1
    36ea:	627a      	str	r2, [r7, #36]	; 0x24
    36ec:	6a3a      	ldr	r2, [r7, #32]
    36ee:	b2d2      	uxtb	r2, r2
    36f0:	701a      	strb	r2, [r3, #0]
    36f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    36f4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    36f6:	68fa      	ldr	r2, [r7, #12]
    36f8:	6979      	ldr	r1, [r7, #20]
    36fa:	69b8      	ldr	r0, [r7, #24]
    36fc:	f7ff fa1e 	bl	2b3c <_SendPacket>
  RECORD_END();
    3700:	69fb      	ldr	r3, [r7, #28]
    3702:	f383 8811 	msr	BASEPRI, r3
}
    3706:	bf00      	nop
    3708:	3730      	adds	r7, #48	; 0x30
    370a:	46bd      	mov	sp, r7
    370c:	bd80      	pop	{r7, pc}
    370e:	bf00      	nop
    3710:	20000930 	.word	0x20000930

00003714 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned EventID, U32 Para0, U32 Para1, U32 Para2) {
    3714:	b580      	push	{r7, lr}
    3716:	b08e      	sub	sp, #56	; 0x38
    3718:	af00      	add	r7, sp, #0
    371a:	60f8      	str	r0, [r7, #12]
    371c:	60b9      	str	r1, [r7, #8]
    371e:	607a      	str	r2, [r7, #4]
    3720:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
    3722:	f3ef 8311 	mrs	r3, BASEPRI
    3726:	f04f 0150 	mov.w	r1, #80	; 0x50
    372a:	f381 8811 	msr	BASEPRI, r1
    372e:	61fb      	str	r3, [r7, #28]
    3730:	4832      	ldr	r0, [pc, #200]	; (37fc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
    3732:	f7ff f927 	bl	2984 <_PreparePacket>
    3736:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    3738:	69bb      	ldr	r3, [r7, #24]
    373a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    373c:	697b      	ldr	r3, [r7, #20]
    373e:	637b      	str	r3, [r7, #52]	; 0x34
    3740:	68bb      	ldr	r3, [r7, #8]
    3742:	633b      	str	r3, [r7, #48]	; 0x30
    3744:	e00b      	b.n	375e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
    3746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3748:	1c5a      	adds	r2, r3, #1
    374a:	637a      	str	r2, [r7, #52]	; 0x34
    374c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    374e:	b2d2      	uxtb	r2, r2
    3750:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3754:	b2d2      	uxtb	r2, r2
    3756:	701a      	strb	r2, [r3, #0]
    3758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    375a:	09db      	lsrs	r3, r3, #7
    375c:	633b      	str	r3, [r7, #48]	; 0x30
    375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3760:	2b7f      	cmp	r3, #127	; 0x7f
    3762:	d8f0      	bhi.n	3746 <SEGGER_SYSVIEW_RecordU32x3+0x32>
    3764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3766:	1c5a      	adds	r2, r3, #1
    3768:	637a      	str	r2, [r7, #52]	; 0x34
    376a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    376c:	b2d2      	uxtb	r2, r2
    376e:	701a      	strb	r2, [r3, #0]
    3770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3772:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    3774:	697b      	ldr	r3, [r7, #20]
    3776:	62fb      	str	r3, [r7, #44]	; 0x2c
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	62bb      	str	r3, [r7, #40]	; 0x28
    377c:	e00b      	b.n	3796 <SEGGER_SYSVIEW_RecordU32x3+0x82>
    377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3780:	1c5a      	adds	r2, r3, #1
    3782:	62fa      	str	r2, [r7, #44]	; 0x2c
    3784:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3786:	b2d2      	uxtb	r2, r2
    3788:	f062 027f 	orn	r2, r2, #127	; 0x7f
    378c:	b2d2      	uxtb	r2, r2
    378e:	701a      	strb	r2, [r3, #0]
    3790:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3792:	09db      	lsrs	r3, r3, #7
    3794:	62bb      	str	r3, [r7, #40]	; 0x28
    3796:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3798:	2b7f      	cmp	r3, #127	; 0x7f
    379a:	d8f0      	bhi.n	377e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
    379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    379e:	1c5a      	adds	r2, r3, #1
    37a0:	62fa      	str	r2, [r7, #44]	; 0x2c
    37a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    37a4:	b2d2      	uxtb	r2, r2
    37a6:	701a      	strb	r2, [r3, #0]
    37a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    37aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    37ac:	697b      	ldr	r3, [r7, #20]
    37ae:	627b      	str	r3, [r7, #36]	; 0x24
    37b0:	683b      	ldr	r3, [r7, #0]
    37b2:	623b      	str	r3, [r7, #32]
    37b4:	e00b      	b.n	37ce <SEGGER_SYSVIEW_RecordU32x3+0xba>
    37b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37b8:	1c5a      	adds	r2, r3, #1
    37ba:	627a      	str	r2, [r7, #36]	; 0x24
    37bc:	6a3a      	ldr	r2, [r7, #32]
    37be:	b2d2      	uxtb	r2, r2
    37c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    37c4:	b2d2      	uxtb	r2, r2
    37c6:	701a      	strb	r2, [r3, #0]
    37c8:	6a3b      	ldr	r3, [r7, #32]
    37ca:	09db      	lsrs	r3, r3, #7
    37cc:	623b      	str	r3, [r7, #32]
    37ce:	6a3b      	ldr	r3, [r7, #32]
    37d0:	2b7f      	cmp	r3, #127	; 0x7f
    37d2:	d8f0      	bhi.n	37b6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
    37d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37d6:	1c5a      	adds	r2, r3, #1
    37d8:	627a      	str	r2, [r7, #36]	; 0x24
    37da:	6a3a      	ldr	r2, [r7, #32]
    37dc:	b2d2      	uxtb	r2, r2
    37de:	701a      	strb	r2, [r3, #0]
    37e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    37e2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    37e4:	68fa      	ldr	r2, [r7, #12]
    37e6:	6979      	ldr	r1, [r7, #20]
    37e8:	69b8      	ldr	r0, [r7, #24]
    37ea:	f7ff f9a7 	bl	2b3c <_SendPacket>
  RECORD_END();
    37ee:	69fb      	ldr	r3, [r7, #28]
    37f0:	f383 8811 	msr	BASEPRI, r3
}
    37f4:	bf00      	nop
    37f6:	3738      	adds	r7, #56	; 0x38
    37f8:	46bd      	mov	sp, r7
    37fa:	bd80      	pop	{r7, pc}
    37fc:	20000930 	.word	0x20000930

00003800 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
    3800:	b580      	push	{r7, lr}
    3802:	b090      	sub	sp, #64	; 0x40
    3804:	af00      	add	r7, sp, #0
    3806:	60f8      	str	r0, [r7, #12]
    3808:	60b9      	str	r1, [r7, #8]
    380a:	607a      	str	r2, [r7, #4]
    380c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
    380e:	f3ef 8311 	mrs	r3, BASEPRI
    3812:	f04f 0150 	mov.w	r1, #80	; 0x50
    3816:	f381 8811 	msr	BASEPRI, r1
    381a:	61fb      	str	r3, [r7, #28]
    381c:	4840      	ldr	r0, [pc, #256]	; (3920 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
    381e:	f7ff f8b1 	bl	2984 <_PreparePacket>
    3822:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    3824:	69bb      	ldr	r3, [r7, #24]
    3826:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    3828:	697b      	ldr	r3, [r7, #20]
    382a:	63fb      	str	r3, [r7, #60]	; 0x3c
    382c:	68bb      	ldr	r3, [r7, #8]
    382e:	63bb      	str	r3, [r7, #56]	; 0x38
    3830:	e00b      	b.n	384a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
    3832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3834:	1c5a      	adds	r2, r3, #1
    3836:	63fa      	str	r2, [r7, #60]	; 0x3c
    3838:	6bba      	ldr	r2, [r7, #56]	; 0x38
    383a:	b2d2      	uxtb	r2, r2
    383c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3840:	b2d2      	uxtb	r2, r2
    3842:	701a      	strb	r2, [r3, #0]
    3844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3846:	09db      	lsrs	r3, r3, #7
    3848:	63bb      	str	r3, [r7, #56]	; 0x38
    384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    384c:	2b7f      	cmp	r3, #127	; 0x7f
    384e:	d8f0      	bhi.n	3832 <SEGGER_SYSVIEW_RecordU32x4+0x32>
    3850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3852:	1c5a      	adds	r2, r3, #1
    3854:	63fa      	str	r2, [r7, #60]	; 0x3c
    3856:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3858:	b2d2      	uxtb	r2, r2
    385a:	701a      	strb	r2, [r3, #0]
    385c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    385e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    3860:	697b      	ldr	r3, [r7, #20]
    3862:	637b      	str	r3, [r7, #52]	; 0x34
    3864:	687b      	ldr	r3, [r7, #4]
    3866:	633b      	str	r3, [r7, #48]	; 0x30
    3868:	e00b      	b.n	3882 <SEGGER_SYSVIEW_RecordU32x4+0x82>
    386a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    386c:	1c5a      	adds	r2, r3, #1
    386e:	637a      	str	r2, [r7, #52]	; 0x34
    3870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3872:	b2d2      	uxtb	r2, r2
    3874:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3878:	b2d2      	uxtb	r2, r2
    387a:	701a      	strb	r2, [r3, #0]
    387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    387e:	09db      	lsrs	r3, r3, #7
    3880:	633b      	str	r3, [r7, #48]	; 0x30
    3882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3884:	2b7f      	cmp	r3, #127	; 0x7f
    3886:	d8f0      	bhi.n	386a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
    3888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    388a:	1c5a      	adds	r2, r3, #1
    388c:	637a      	str	r2, [r7, #52]	; 0x34
    388e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3890:	b2d2      	uxtb	r2, r2
    3892:	701a      	strb	r2, [r3, #0]
    3894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3896:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    3898:	697b      	ldr	r3, [r7, #20]
    389a:	62fb      	str	r3, [r7, #44]	; 0x2c
    389c:	683b      	ldr	r3, [r7, #0]
    389e:	62bb      	str	r3, [r7, #40]	; 0x28
    38a0:	e00b      	b.n	38ba <SEGGER_SYSVIEW_RecordU32x4+0xba>
    38a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38a4:	1c5a      	adds	r2, r3, #1
    38a6:	62fa      	str	r2, [r7, #44]	; 0x2c
    38a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    38aa:	b2d2      	uxtb	r2, r2
    38ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
    38b0:	b2d2      	uxtb	r2, r2
    38b2:	701a      	strb	r2, [r3, #0]
    38b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38b6:	09db      	lsrs	r3, r3, #7
    38b8:	62bb      	str	r3, [r7, #40]	; 0x28
    38ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38bc:	2b7f      	cmp	r3, #127	; 0x7f
    38be:	d8f0      	bhi.n	38a2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
    38c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38c2:	1c5a      	adds	r2, r3, #1
    38c4:	62fa      	str	r2, [r7, #44]	; 0x2c
    38c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    38c8:	b2d2      	uxtb	r2, r2
    38ca:	701a      	strb	r2, [r3, #0]
    38cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
    38d0:	697b      	ldr	r3, [r7, #20]
    38d2:	627b      	str	r3, [r7, #36]	; 0x24
    38d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    38d6:	623b      	str	r3, [r7, #32]
    38d8:	e00b      	b.n	38f2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
    38da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38dc:	1c5a      	adds	r2, r3, #1
    38de:	627a      	str	r2, [r7, #36]	; 0x24
    38e0:	6a3a      	ldr	r2, [r7, #32]
    38e2:	b2d2      	uxtb	r2, r2
    38e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    38e8:	b2d2      	uxtb	r2, r2
    38ea:	701a      	strb	r2, [r3, #0]
    38ec:	6a3b      	ldr	r3, [r7, #32]
    38ee:	09db      	lsrs	r3, r3, #7
    38f0:	623b      	str	r3, [r7, #32]
    38f2:	6a3b      	ldr	r3, [r7, #32]
    38f4:	2b7f      	cmp	r3, #127	; 0x7f
    38f6:	d8f0      	bhi.n	38da <SEGGER_SYSVIEW_RecordU32x4+0xda>
    38f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    38fa:	1c5a      	adds	r2, r3, #1
    38fc:	627a      	str	r2, [r7, #36]	; 0x24
    38fe:	6a3a      	ldr	r2, [r7, #32]
    3900:	b2d2      	uxtb	r2, r2
    3902:	701a      	strb	r2, [r3, #0]
    3904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3906:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    3908:	68fa      	ldr	r2, [r7, #12]
    390a:	6979      	ldr	r1, [r7, #20]
    390c:	69b8      	ldr	r0, [r7, #24]
    390e:	f7ff f915 	bl	2b3c <_SendPacket>
  RECORD_END();
    3912:	69fb      	ldr	r3, [r7, #28]
    3914:	f383 8811 	msr	BASEPRI, r3
}
    3918:	bf00      	nop
    391a:	3740      	adds	r7, #64	; 0x40
    391c:	46bd      	mov	sp, r7
    391e:	bd80      	pop	{r7, pc}
    3920:	20000930 	.word	0x20000930

00003924 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
    3924:	b580      	push	{r7, lr}
    3926:	b092      	sub	sp, #72	; 0x48
    3928:	af00      	add	r7, sp, #0
    392a:	60f8      	str	r0, [r7, #12]
    392c:	60b9      	str	r1, [r7, #8]
    392e:	607a      	str	r2, [r7, #4]
    3930:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
    3932:	f3ef 8311 	mrs	r3, BASEPRI
    3936:	f04f 0150 	mov.w	r1, #80	; 0x50
    393a:	f381 8811 	msr	BASEPRI, r1
    393e:	61fb      	str	r3, [r7, #28]
    3940:	484e      	ldr	r0, [pc, #312]	; (3a7c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
    3942:	f7ff f81f 	bl	2984 <_PreparePacket>
    3946:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    3948:	69bb      	ldr	r3, [r7, #24]
    394a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    394c:	697b      	ldr	r3, [r7, #20]
    394e:	647b      	str	r3, [r7, #68]	; 0x44
    3950:	68bb      	ldr	r3, [r7, #8]
    3952:	643b      	str	r3, [r7, #64]	; 0x40
    3954:	e00b      	b.n	396e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
    3956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3958:	1c5a      	adds	r2, r3, #1
    395a:	647a      	str	r2, [r7, #68]	; 0x44
    395c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    395e:	b2d2      	uxtb	r2, r2
    3960:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3964:	b2d2      	uxtb	r2, r2
    3966:	701a      	strb	r2, [r3, #0]
    3968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    396a:	09db      	lsrs	r3, r3, #7
    396c:	643b      	str	r3, [r7, #64]	; 0x40
    396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3970:	2b7f      	cmp	r3, #127	; 0x7f
    3972:	d8f0      	bhi.n	3956 <SEGGER_SYSVIEW_RecordU32x5+0x32>
    3974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3976:	1c5a      	adds	r2, r3, #1
    3978:	647a      	str	r2, [r7, #68]	; 0x44
    397a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    397c:	b2d2      	uxtb	r2, r2
    397e:	701a      	strb	r2, [r3, #0]
    3980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3982:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    3984:	697b      	ldr	r3, [r7, #20]
    3986:	63fb      	str	r3, [r7, #60]	; 0x3c
    3988:	687b      	ldr	r3, [r7, #4]
    398a:	63bb      	str	r3, [r7, #56]	; 0x38
    398c:	e00b      	b.n	39a6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
    398e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3990:	1c5a      	adds	r2, r3, #1
    3992:	63fa      	str	r2, [r7, #60]	; 0x3c
    3994:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3996:	b2d2      	uxtb	r2, r2
    3998:	f062 027f 	orn	r2, r2, #127	; 0x7f
    399c:	b2d2      	uxtb	r2, r2
    399e:	701a      	strb	r2, [r3, #0]
    39a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    39a2:	09db      	lsrs	r3, r3, #7
    39a4:	63bb      	str	r3, [r7, #56]	; 0x38
    39a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    39a8:	2b7f      	cmp	r3, #127	; 0x7f
    39aa:	d8f0      	bhi.n	398e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
    39ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    39ae:	1c5a      	adds	r2, r3, #1
    39b0:	63fa      	str	r2, [r7, #60]	; 0x3c
    39b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    39b4:	b2d2      	uxtb	r2, r2
    39b6:	701a      	strb	r2, [r3, #0]
    39b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    39ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    39bc:	697b      	ldr	r3, [r7, #20]
    39be:	637b      	str	r3, [r7, #52]	; 0x34
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	633b      	str	r3, [r7, #48]	; 0x30
    39c4:	e00b      	b.n	39de <SEGGER_SYSVIEW_RecordU32x5+0xba>
    39c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39c8:	1c5a      	adds	r2, r3, #1
    39ca:	637a      	str	r2, [r7, #52]	; 0x34
    39cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39ce:	b2d2      	uxtb	r2, r2
    39d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    39d4:	b2d2      	uxtb	r2, r2
    39d6:	701a      	strb	r2, [r3, #0]
    39d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39da:	09db      	lsrs	r3, r3, #7
    39dc:	633b      	str	r3, [r7, #48]	; 0x30
    39de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    39e0:	2b7f      	cmp	r3, #127	; 0x7f
    39e2:	d8f0      	bhi.n	39c6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
    39e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39e6:	1c5a      	adds	r2, r3, #1
    39e8:	637a      	str	r2, [r7, #52]	; 0x34
    39ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    39ec:	b2d2      	uxtb	r2, r2
    39ee:	701a      	strb	r2, [r3, #0]
    39f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    39f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
    39f4:	697b      	ldr	r3, [r7, #20]
    39f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    39f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    39fa:	62bb      	str	r3, [r7, #40]	; 0x28
    39fc:	e00b      	b.n	3a16 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
    39fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a00:	1c5a      	adds	r2, r3, #1
    3a02:	62fa      	str	r2, [r7, #44]	; 0x2c
    3a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3a06:	b2d2      	uxtb	r2, r2
    3a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3a0c:	b2d2      	uxtb	r2, r2
    3a0e:	701a      	strb	r2, [r3, #0]
    3a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a12:	09db      	lsrs	r3, r3, #7
    3a14:	62bb      	str	r3, [r7, #40]	; 0x28
    3a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a18:	2b7f      	cmp	r3, #127	; 0x7f
    3a1a:	d8f0      	bhi.n	39fe <SEGGER_SYSVIEW_RecordU32x5+0xda>
    3a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a1e:	1c5a      	adds	r2, r3, #1
    3a20:	62fa      	str	r2, [r7, #44]	; 0x2c
    3a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3a24:	b2d2      	uxtb	r2, r2
    3a26:	701a      	strb	r2, [r3, #0]
    3a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3a2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
    3a2c:	697b      	ldr	r3, [r7, #20]
    3a2e:	627b      	str	r3, [r7, #36]	; 0x24
    3a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3a32:	623b      	str	r3, [r7, #32]
    3a34:	e00b      	b.n	3a4e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
    3a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a38:	1c5a      	adds	r2, r3, #1
    3a3a:	627a      	str	r2, [r7, #36]	; 0x24
    3a3c:	6a3a      	ldr	r2, [r7, #32]
    3a3e:	b2d2      	uxtb	r2, r2
    3a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3a44:	b2d2      	uxtb	r2, r2
    3a46:	701a      	strb	r2, [r3, #0]
    3a48:	6a3b      	ldr	r3, [r7, #32]
    3a4a:	09db      	lsrs	r3, r3, #7
    3a4c:	623b      	str	r3, [r7, #32]
    3a4e:	6a3b      	ldr	r3, [r7, #32]
    3a50:	2b7f      	cmp	r3, #127	; 0x7f
    3a52:	d8f0      	bhi.n	3a36 <SEGGER_SYSVIEW_RecordU32x5+0x112>
    3a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a56:	1c5a      	adds	r2, r3, #1
    3a58:	627a      	str	r2, [r7, #36]	; 0x24
    3a5a:	6a3a      	ldr	r2, [r7, #32]
    3a5c:	b2d2      	uxtb	r2, r2
    3a5e:	701a      	strb	r2, [r3, #0]
    3a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a62:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    3a64:	68fa      	ldr	r2, [r7, #12]
    3a66:	6979      	ldr	r1, [r7, #20]
    3a68:	69b8      	ldr	r0, [r7, #24]
    3a6a:	f7ff f867 	bl	2b3c <_SendPacket>
  RECORD_END();
    3a6e:	69fb      	ldr	r3, [r7, #28]
    3a70:	f383 8811 	msr	BASEPRI, r3
}
    3a74:	bf00      	nop
    3a76:	3748      	adds	r7, #72	; 0x48
    3a78:	46bd      	mov	sp, r7
    3a7a:	bd80      	pop	{r7, pc}
    3a7c:	20000930 	.word	0x20000930

00003a80 <SEGGER_SYSVIEW_RecordU32x6>:
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*    Para5   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x6(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5) {
    3a80:	b580      	push	{r7, lr}
    3a82:	b094      	sub	sp, #80	; 0x50
    3a84:	af00      	add	r7, sp, #0
    3a86:	60f8      	str	r0, [r7, #12]
    3a88:	60b9      	str	r1, [r7, #8]
    3a8a:	607a      	str	r2, [r7, #4]
    3a8c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 6 * SEGGER_SYSVIEW_QUANTA_U32);
    3a8e:	f3ef 8311 	mrs	r3, BASEPRI
    3a92:	f04f 0150 	mov.w	r1, #80	; 0x50
    3a96:	f381 8811 	msr	BASEPRI, r1
    3a9a:	61fb      	str	r3, [r7, #28]
    3a9c:	485c      	ldr	r0, [pc, #368]	; (3c10 <SEGGER_SYSVIEW_RecordU32x6+0x190>)
    3a9e:	f7fe ff71 	bl	2984 <_PreparePacket>
    3aa2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    3aa4:	69bb      	ldr	r3, [r7, #24]
    3aa6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    3aa8:	697b      	ldr	r3, [r7, #20]
    3aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
    3aac:	68bb      	ldr	r3, [r7, #8]
    3aae:	64bb      	str	r3, [r7, #72]	; 0x48
    3ab0:	e00b      	b.n	3aca <SEGGER_SYSVIEW_RecordU32x6+0x4a>
    3ab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ab4:	1c5a      	adds	r2, r3, #1
    3ab6:	64fa      	str	r2, [r7, #76]	; 0x4c
    3ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3aba:	b2d2      	uxtb	r2, r2
    3abc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ac0:	b2d2      	uxtb	r2, r2
    3ac2:	701a      	strb	r2, [r3, #0]
    3ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3ac6:	09db      	lsrs	r3, r3, #7
    3ac8:	64bb      	str	r3, [r7, #72]	; 0x48
    3aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3acc:	2b7f      	cmp	r3, #127	; 0x7f
    3ace:	d8f0      	bhi.n	3ab2 <SEGGER_SYSVIEW_RecordU32x6+0x32>
    3ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ad2:	1c5a      	adds	r2, r3, #1
    3ad4:	64fa      	str	r2, [r7, #76]	; 0x4c
    3ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3ad8:	b2d2      	uxtb	r2, r2
    3ada:	701a      	strb	r2, [r3, #0]
    3adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ade:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    3ae0:	697b      	ldr	r3, [r7, #20]
    3ae2:	647b      	str	r3, [r7, #68]	; 0x44
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	643b      	str	r3, [r7, #64]	; 0x40
    3ae8:	e00b      	b.n	3b02 <SEGGER_SYSVIEW_RecordU32x6+0x82>
    3aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3aec:	1c5a      	adds	r2, r3, #1
    3aee:	647a      	str	r2, [r7, #68]	; 0x44
    3af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3af2:	b2d2      	uxtb	r2, r2
    3af4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3af8:	b2d2      	uxtb	r2, r2
    3afa:	701a      	strb	r2, [r3, #0]
    3afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3afe:	09db      	lsrs	r3, r3, #7
    3b00:	643b      	str	r3, [r7, #64]	; 0x40
    3b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3b04:	2b7f      	cmp	r3, #127	; 0x7f
    3b06:	d8f0      	bhi.n	3aea <SEGGER_SYSVIEW_RecordU32x6+0x6a>
    3b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b0a:	1c5a      	adds	r2, r3, #1
    3b0c:	647a      	str	r2, [r7, #68]	; 0x44
    3b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3b10:	b2d2      	uxtb	r2, r2
    3b12:	701a      	strb	r2, [r3, #0]
    3b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3b16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    3b18:	697b      	ldr	r3, [r7, #20]
    3b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
    3b1c:	683b      	ldr	r3, [r7, #0]
    3b1e:	63bb      	str	r3, [r7, #56]	; 0x38
    3b20:	e00b      	b.n	3b3a <SEGGER_SYSVIEW_RecordU32x6+0xba>
    3b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b24:	1c5a      	adds	r2, r3, #1
    3b26:	63fa      	str	r2, [r7, #60]	; 0x3c
    3b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3b2a:	b2d2      	uxtb	r2, r2
    3b2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3b30:	b2d2      	uxtb	r2, r2
    3b32:	701a      	strb	r2, [r3, #0]
    3b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b36:	09db      	lsrs	r3, r3, #7
    3b38:	63bb      	str	r3, [r7, #56]	; 0x38
    3b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3b3c:	2b7f      	cmp	r3, #127	; 0x7f
    3b3e:	d8f0      	bhi.n	3b22 <SEGGER_SYSVIEW_RecordU32x6+0xa2>
    3b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b42:	1c5a      	adds	r2, r3, #1
    3b44:	63fa      	str	r2, [r7, #60]	; 0x3c
    3b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3b48:	b2d2      	uxtb	r2, r2
    3b4a:	701a      	strb	r2, [r3, #0]
    3b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3b4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
    3b50:	697b      	ldr	r3, [r7, #20]
    3b52:	637b      	str	r3, [r7, #52]	; 0x34
    3b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3b56:	633b      	str	r3, [r7, #48]	; 0x30
    3b58:	e00b      	b.n	3b72 <SEGGER_SYSVIEW_RecordU32x6+0xf2>
    3b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b5c:	1c5a      	adds	r2, r3, #1
    3b5e:	637a      	str	r2, [r7, #52]	; 0x34
    3b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b62:	b2d2      	uxtb	r2, r2
    3b64:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3b68:	b2d2      	uxtb	r2, r2
    3b6a:	701a      	strb	r2, [r3, #0]
    3b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b6e:	09db      	lsrs	r3, r3, #7
    3b70:	633b      	str	r3, [r7, #48]	; 0x30
    3b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3b74:	2b7f      	cmp	r3, #127	; 0x7f
    3b76:	d8f0      	bhi.n	3b5a <SEGGER_SYSVIEW_RecordU32x6+0xda>
    3b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b7a:	1c5a      	adds	r2, r3, #1
    3b7c:	637a      	str	r2, [r7, #52]	; 0x34
    3b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3b80:	b2d2      	uxtb	r2, r2
    3b82:	701a      	strb	r2, [r3, #0]
    3b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3b86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
    3b88:	697b      	ldr	r3, [r7, #20]
    3b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    3b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    3b90:	e00b      	b.n	3baa <SEGGER_SYSVIEW_RecordU32x6+0x12a>
    3b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3b94:	1c5a      	adds	r2, r3, #1
    3b96:	62fa      	str	r2, [r7, #44]	; 0x2c
    3b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3b9a:	b2d2      	uxtb	r2, r2
    3b9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ba0:	b2d2      	uxtb	r2, r2
    3ba2:	701a      	strb	r2, [r3, #0]
    3ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3ba6:	09db      	lsrs	r3, r3, #7
    3ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    3baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3bac:	2b7f      	cmp	r3, #127	; 0x7f
    3bae:	d8f0      	bhi.n	3b92 <SEGGER_SYSVIEW_RecordU32x6+0x112>
    3bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3bb2:	1c5a      	adds	r2, r3, #1
    3bb4:	62fa      	str	r2, [r7, #44]	; 0x2c
    3bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3bb8:	b2d2      	uxtb	r2, r2
    3bba:	701a      	strb	r2, [r3, #0]
    3bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3bbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para5);
    3bc0:	697b      	ldr	r3, [r7, #20]
    3bc2:	627b      	str	r3, [r7, #36]	; 0x24
    3bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3bc6:	623b      	str	r3, [r7, #32]
    3bc8:	e00b      	b.n	3be2 <SEGGER_SYSVIEW_RecordU32x6+0x162>
    3bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bcc:	1c5a      	adds	r2, r3, #1
    3bce:	627a      	str	r2, [r7, #36]	; 0x24
    3bd0:	6a3a      	ldr	r2, [r7, #32]
    3bd2:	b2d2      	uxtb	r2, r2
    3bd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3bd8:	b2d2      	uxtb	r2, r2
    3bda:	701a      	strb	r2, [r3, #0]
    3bdc:	6a3b      	ldr	r3, [r7, #32]
    3bde:	09db      	lsrs	r3, r3, #7
    3be0:	623b      	str	r3, [r7, #32]
    3be2:	6a3b      	ldr	r3, [r7, #32]
    3be4:	2b7f      	cmp	r3, #127	; 0x7f
    3be6:	d8f0      	bhi.n	3bca <SEGGER_SYSVIEW_RecordU32x6+0x14a>
    3be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bea:	1c5a      	adds	r2, r3, #1
    3bec:	627a      	str	r2, [r7, #36]	; 0x24
    3bee:	6a3a      	ldr	r2, [r7, #32]
    3bf0:	b2d2      	uxtb	r2, r2
    3bf2:	701a      	strb	r2, [r3, #0]
    3bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3bf6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    3bf8:	68fa      	ldr	r2, [r7, #12]
    3bfa:	6979      	ldr	r1, [r7, #20]
    3bfc:	69b8      	ldr	r0, [r7, #24]
    3bfe:	f7fe ff9d 	bl	2b3c <_SendPacket>
  RECORD_END();
    3c02:	69fb      	ldr	r3, [r7, #28]
    3c04:	f383 8811 	msr	BASEPRI, r3
}
    3c08:	bf00      	nop
    3c0a:	3750      	adds	r7, #80	; 0x50
    3c0c:	46bd      	mov	sp, r7
    3c0e:	bd80      	pop	{r7, pc}
    3c10:	20000930 	.word	0x20000930

00003c14 <SEGGER_SYSVIEW_RecordU32x7>:
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*    Para5   - The 32-bit parameter encoded to SystemView packet payload.
*    Para6   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x7(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6) {
    3c14:	b580      	push	{r7, lr}
    3c16:	b096      	sub	sp, #88	; 0x58
    3c18:	af00      	add	r7, sp, #0
    3c1a:	60f8      	str	r0, [r7, #12]
    3c1c:	60b9      	str	r1, [r7, #8]
    3c1e:	607a      	str	r2, [r7, #4]
    3c20:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 7 * SEGGER_SYSVIEW_QUANTA_U32);
    3c22:	f3ef 8311 	mrs	r3, BASEPRI
    3c26:	f04f 0150 	mov.w	r1, #80	; 0x50
    3c2a:	f381 8811 	msr	BASEPRI, r1
    3c2e:	61fb      	str	r3, [r7, #28]
    3c30:	486a      	ldr	r0, [pc, #424]	; (3ddc <SEGGER_SYSVIEW_RecordU32x7+0x1c8>)
    3c32:	f7fe fea7 	bl	2984 <_PreparePacket>
    3c36:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    3c38:	69bb      	ldr	r3, [r7, #24]
    3c3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    3c3c:	697b      	ldr	r3, [r7, #20]
    3c3e:	657b      	str	r3, [r7, #84]	; 0x54
    3c40:	68bb      	ldr	r3, [r7, #8]
    3c42:	653b      	str	r3, [r7, #80]	; 0x50
    3c44:	e00b      	b.n	3c5e <SEGGER_SYSVIEW_RecordU32x7+0x4a>
    3c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c48:	1c5a      	adds	r2, r3, #1
    3c4a:	657a      	str	r2, [r7, #84]	; 0x54
    3c4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3c4e:	b2d2      	uxtb	r2, r2
    3c50:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3c54:	b2d2      	uxtb	r2, r2
    3c56:	701a      	strb	r2, [r3, #0]
    3c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3c5a:	09db      	lsrs	r3, r3, #7
    3c5c:	653b      	str	r3, [r7, #80]	; 0x50
    3c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3c60:	2b7f      	cmp	r3, #127	; 0x7f
    3c62:	d8f0      	bhi.n	3c46 <SEGGER_SYSVIEW_RecordU32x7+0x32>
    3c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c66:	1c5a      	adds	r2, r3, #1
    3c68:	657a      	str	r2, [r7, #84]	; 0x54
    3c6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3c6c:	b2d2      	uxtb	r2, r2
    3c6e:	701a      	strb	r2, [r3, #0]
    3c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3c72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    3c74:	697b      	ldr	r3, [r7, #20]
    3c76:	64fb      	str	r3, [r7, #76]	; 0x4c
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	64bb      	str	r3, [r7, #72]	; 0x48
    3c7c:	e00b      	b.n	3c96 <SEGGER_SYSVIEW_RecordU32x7+0x82>
    3c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c80:	1c5a      	adds	r2, r3, #1
    3c82:	64fa      	str	r2, [r7, #76]	; 0x4c
    3c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3c86:	b2d2      	uxtb	r2, r2
    3c88:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3c8c:	b2d2      	uxtb	r2, r2
    3c8e:	701a      	strb	r2, [r3, #0]
    3c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c92:	09db      	lsrs	r3, r3, #7
    3c94:	64bb      	str	r3, [r7, #72]	; 0x48
    3c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3c98:	2b7f      	cmp	r3, #127	; 0x7f
    3c9a:	d8f0      	bhi.n	3c7e <SEGGER_SYSVIEW_RecordU32x7+0x6a>
    3c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3c9e:	1c5a      	adds	r2, r3, #1
    3ca0:	64fa      	str	r2, [r7, #76]	; 0x4c
    3ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3ca4:	b2d2      	uxtb	r2, r2
    3ca6:	701a      	strb	r2, [r3, #0]
    3ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3caa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    3cac:	697b      	ldr	r3, [r7, #20]
    3cae:	647b      	str	r3, [r7, #68]	; 0x44
    3cb0:	683b      	ldr	r3, [r7, #0]
    3cb2:	643b      	str	r3, [r7, #64]	; 0x40
    3cb4:	e00b      	b.n	3cce <SEGGER_SYSVIEW_RecordU32x7+0xba>
    3cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3cb8:	1c5a      	adds	r2, r3, #1
    3cba:	647a      	str	r2, [r7, #68]	; 0x44
    3cbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3cbe:	b2d2      	uxtb	r2, r2
    3cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3cc4:	b2d2      	uxtb	r2, r2
    3cc6:	701a      	strb	r2, [r3, #0]
    3cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3cca:	09db      	lsrs	r3, r3, #7
    3ccc:	643b      	str	r3, [r7, #64]	; 0x40
    3cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3cd0:	2b7f      	cmp	r3, #127	; 0x7f
    3cd2:	d8f0      	bhi.n	3cb6 <SEGGER_SYSVIEW_RecordU32x7+0xa2>
    3cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3cd6:	1c5a      	adds	r2, r3, #1
    3cd8:	647a      	str	r2, [r7, #68]	; 0x44
    3cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3cdc:	b2d2      	uxtb	r2, r2
    3cde:	701a      	strb	r2, [r3, #0]
    3ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3ce2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
    3ce4:	697b      	ldr	r3, [r7, #20]
    3ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    3ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    3cea:	63bb      	str	r3, [r7, #56]	; 0x38
    3cec:	e00b      	b.n	3d06 <SEGGER_SYSVIEW_RecordU32x7+0xf2>
    3cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3cf0:	1c5a      	adds	r2, r3, #1
    3cf2:	63fa      	str	r2, [r7, #60]	; 0x3c
    3cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3cf6:	b2d2      	uxtb	r2, r2
    3cf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3cfc:	b2d2      	uxtb	r2, r2
    3cfe:	701a      	strb	r2, [r3, #0]
    3d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d02:	09db      	lsrs	r3, r3, #7
    3d04:	63bb      	str	r3, [r7, #56]	; 0x38
    3d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3d08:	2b7f      	cmp	r3, #127	; 0x7f
    3d0a:	d8f0      	bhi.n	3cee <SEGGER_SYSVIEW_RecordU32x7+0xda>
    3d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d0e:	1c5a      	adds	r2, r3, #1
    3d10:	63fa      	str	r2, [r7, #60]	; 0x3c
    3d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3d14:	b2d2      	uxtb	r2, r2
    3d16:	701a      	strb	r2, [r3, #0]
    3d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
    3d1c:	697b      	ldr	r3, [r7, #20]
    3d1e:	637b      	str	r3, [r7, #52]	; 0x34
    3d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    3d22:	633b      	str	r3, [r7, #48]	; 0x30
    3d24:	e00b      	b.n	3d3e <SEGGER_SYSVIEW_RecordU32x7+0x12a>
    3d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d28:	1c5a      	adds	r2, r3, #1
    3d2a:	637a      	str	r2, [r7, #52]	; 0x34
    3d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3d2e:	b2d2      	uxtb	r2, r2
    3d30:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3d34:	b2d2      	uxtb	r2, r2
    3d36:	701a      	strb	r2, [r3, #0]
    3d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d3a:	09db      	lsrs	r3, r3, #7
    3d3c:	633b      	str	r3, [r7, #48]	; 0x30
    3d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3d40:	2b7f      	cmp	r3, #127	; 0x7f
    3d42:	d8f0      	bhi.n	3d26 <SEGGER_SYSVIEW_RecordU32x7+0x112>
    3d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d46:	1c5a      	adds	r2, r3, #1
    3d48:	637a      	str	r2, [r7, #52]	; 0x34
    3d4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3d4c:	b2d2      	uxtb	r2, r2
    3d4e:	701a      	strb	r2, [r3, #0]
    3d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3d52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para5);
    3d54:	697b      	ldr	r3, [r7, #20]
    3d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    3d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    3d5c:	e00b      	b.n	3d76 <SEGGER_SYSVIEW_RecordU32x7+0x162>
    3d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d60:	1c5a      	adds	r2, r3, #1
    3d62:	62fa      	str	r2, [r7, #44]	; 0x2c
    3d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d66:	b2d2      	uxtb	r2, r2
    3d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3d6c:	b2d2      	uxtb	r2, r2
    3d6e:	701a      	strb	r2, [r3, #0]
    3d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d72:	09db      	lsrs	r3, r3, #7
    3d74:	62bb      	str	r3, [r7, #40]	; 0x28
    3d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3d78:	2b7f      	cmp	r3, #127	; 0x7f
    3d7a:	d8f0      	bhi.n	3d5e <SEGGER_SYSVIEW_RecordU32x7+0x14a>
    3d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d7e:	1c5a      	adds	r2, r3, #1
    3d80:	62fa      	str	r2, [r7, #44]	; 0x2c
    3d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d84:	b2d2      	uxtb	r2, r2
    3d86:	701a      	strb	r2, [r3, #0]
    3d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3d8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para6);
    3d8c:	697b      	ldr	r3, [r7, #20]
    3d8e:	627b      	str	r3, [r7, #36]	; 0x24
    3d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    3d92:	623b      	str	r3, [r7, #32]
    3d94:	e00b      	b.n	3dae <SEGGER_SYSVIEW_RecordU32x7+0x19a>
    3d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d98:	1c5a      	adds	r2, r3, #1
    3d9a:	627a      	str	r2, [r7, #36]	; 0x24
    3d9c:	6a3a      	ldr	r2, [r7, #32]
    3d9e:	b2d2      	uxtb	r2, r2
    3da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3da4:	b2d2      	uxtb	r2, r2
    3da6:	701a      	strb	r2, [r3, #0]
    3da8:	6a3b      	ldr	r3, [r7, #32]
    3daa:	09db      	lsrs	r3, r3, #7
    3dac:	623b      	str	r3, [r7, #32]
    3dae:	6a3b      	ldr	r3, [r7, #32]
    3db0:	2b7f      	cmp	r3, #127	; 0x7f
    3db2:	d8f0      	bhi.n	3d96 <SEGGER_SYSVIEW_RecordU32x7+0x182>
    3db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3db6:	1c5a      	adds	r2, r3, #1
    3db8:	627a      	str	r2, [r7, #36]	; 0x24
    3dba:	6a3a      	ldr	r2, [r7, #32]
    3dbc:	b2d2      	uxtb	r2, r2
    3dbe:	701a      	strb	r2, [r3, #0]
    3dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3dc2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    3dc4:	68fa      	ldr	r2, [r7, #12]
    3dc6:	6979      	ldr	r1, [r7, #20]
    3dc8:	69b8      	ldr	r0, [r7, #24]
    3dca:	f7fe feb7 	bl	2b3c <_SendPacket>
  RECORD_END();
    3dce:	69fb      	ldr	r3, [r7, #28]
    3dd0:	f383 8811 	msr	BASEPRI, r3
}
    3dd4:	bf00      	nop
    3dd6:	3758      	adds	r7, #88	; 0x58
    3dd8:	46bd      	mov	sp, r7
    3dda:	bd80      	pop	{r7, pc}
    3ddc:	20000930 	.word	0x20000930

00003de0 <SEGGER_SYSVIEW_RecordU32x8>:
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*    Para5   - The 32-bit parameter encoded to SystemView packet payload.
*    Para6   - The 32-bit parameter encoded to SystemView packet payload.
*    Para7   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x8(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6, U32 Para7) {
    3de0:	b580      	push	{r7, lr}
    3de2:	b098      	sub	sp, #96	; 0x60
    3de4:	af00      	add	r7, sp, #0
    3de6:	60f8      	str	r0, [r7, #12]
    3de8:	60b9      	str	r1, [r7, #8]
    3dea:	607a      	str	r2, [r7, #4]
    3dec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 8 * SEGGER_SYSVIEW_QUANTA_U32);
    3dee:	f3ef 8311 	mrs	r3, BASEPRI
    3df2:	f04f 0150 	mov.w	r1, #80	; 0x50
    3df6:	f381 8811 	msr	BASEPRI, r1
    3dfa:	61fb      	str	r3, [r7, #28]
    3dfc:	4878      	ldr	r0, [pc, #480]	; (3fe0 <SEGGER_SYSVIEW_RecordU32x8+0x200>)
    3dfe:	f7fe fdc1 	bl	2984 <_PreparePacket>
    3e02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    3e04:	69bb      	ldr	r3, [r7, #24]
    3e06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    3e08:	697b      	ldr	r3, [r7, #20]
    3e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    3e0c:	68bb      	ldr	r3, [r7, #8]
    3e0e:	65bb      	str	r3, [r7, #88]	; 0x58
    3e10:	e00b      	b.n	3e2a <SEGGER_SYSVIEW_RecordU32x8+0x4a>
    3e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3e14:	1c5a      	adds	r2, r3, #1
    3e16:	65fa      	str	r2, [r7, #92]	; 0x5c
    3e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3e1a:	b2d2      	uxtb	r2, r2
    3e1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3e20:	b2d2      	uxtb	r2, r2
    3e22:	701a      	strb	r2, [r3, #0]
    3e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e26:	09db      	lsrs	r3, r3, #7
    3e28:	65bb      	str	r3, [r7, #88]	; 0x58
    3e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3e2c:	2b7f      	cmp	r3, #127	; 0x7f
    3e2e:	d8f0      	bhi.n	3e12 <SEGGER_SYSVIEW_RecordU32x8+0x32>
    3e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3e32:	1c5a      	adds	r2, r3, #1
    3e34:	65fa      	str	r2, [r7, #92]	; 0x5c
    3e36:	6dba      	ldr	r2, [r7, #88]	; 0x58
    3e38:	b2d2      	uxtb	r2, r2
    3e3a:	701a      	strb	r2, [r3, #0]
    3e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    3e3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    3e40:	697b      	ldr	r3, [r7, #20]
    3e42:	657b      	str	r3, [r7, #84]	; 0x54
    3e44:	687b      	ldr	r3, [r7, #4]
    3e46:	653b      	str	r3, [r7, #80]	; 0x50
    3e48:	e00b      	b.n	3e62 <SEGGER_SYSVIEW_RecordU32x8+0x82>
    3e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e4c:	1c5a      	adds	r2, r3, #1
    3e4e:	657a      	str	r2, [r7, #84]	; 0x54
    3e50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3e52:	b2d2      	uxtb	r2, r2
    3e54:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3e58:	b2d2      	uxtb	r2, r2
    3e5a:	701a      	strb	r2, [r3, #0]
    3e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3e5e:	09db      	lsrs	r3, r3, #7
    3e60:	653b      	str	r3, [r7, #80]	; 0x50
    3e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    3e64:	2b7f      	cmp	r3, #127	; 0x7f
    3e66:	d8f0      	bhi.n	3e4a <SEGGER_SYSVIEW_RecordU32x8+0x6a>
    3e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e6a:	1c5a      	adds	r2, r3, #1
    3e6c:	657a      	str	r2, [r7, #84]	; 0x54
    3e6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    3e70:	b2d2      	uxtb	r2, r2
    3e72:	701a      	strb	r2, [r3, #0]
    3e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    3e76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    3e78:	697b      	ldr	r3, [r7, #20]
    3e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    3e7c:	683b      	ldr	r3, [r7, #0]
    3e7e:	64bb      	str	r3, [r7, #72]	; 0x48
    3e80:	e00b      	b.n	3e9a <SEGGER_SYSVIEW_RecordU32x8+0xba>
    3e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3e84:	1c5a      	adds	r2, r3, #1
    3e86:	64fa      	str	r2, [r7, #76]	; 0x4c
    3e88:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3e8a:	b2d2      	uxtb	r2, r2
    3e8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3e90:	b2d2      	uxtb	r2, r2
    3e92:	701a      	strb	r2, [r3, #0]
    3e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3e96:	09db      	lsrs	r3, r3, #7
    3e98:	64bb      	str	r3, [r7, #72]	; 0x48
    3e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3e9c:	2b7f      	cmp	r3, #127	; 0x7f
    3e9e:	d8f0      	bhi.n	3e82 <SEGGER_SYSVIEW_RecordU32x8+0xa2>
    3ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3ea2:	1c5a      	adds	r2, r3, #1
    3ea4:	64fa      	str	r2, [r7, #76]	; 0x4c
    3ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
    3ea8:	b2d2      	uxtb	r2, r2
    3eaa:	701a      	strb	r2, [r3, #0]
    3eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3eae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
    3eb0:	697b      	ldr	r3, [r7, #20]
    3eb2:	647b      	str	r3, [r7, #68]	; 0x44
    3eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    3eb6:	643b      	str	r3, [r7, #64]	; 0x40
    3eb8:	e00b      	b.n	3ed2 <SEGGER_SYSVIEW_RecordU32x8+0xf2>
    3eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3ebc:	1c5a      	adds	r2, r3, #1
    3ebe:	647a      	str	r2, [r7, #68]	; 0x44
    3ec0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3ec2:	b2d2      	uxtb	r2, r2
    3ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ec8:	b2d2      	uxtb	r2, r2
    3eca:	701a      	strb	r2, [r3, #0]
    3ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3ece:	09db      	lsrs	r3, r3, #7
    3ed0:	643b      	str	r3, [r7, #64]	; 0x40
    3ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    3ed4:	2b7f      	cmp	r3, #127	; 0x7f
    3ed6:	d8f0      	bhi.n	3eba <SEGGER_SYSVIEW_RecordU32x8+0xda>
    3ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3eda:	1c5a      	adds	r2, r3, #1
    3edc:	647a      	str	r2, [r7, #68]	; 0x44
    3ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    3ee0:	b2d2      	uxtb	r2, r2
    3ee2:	701a      	strb	r2, [r3, #0]
    3ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    3ee6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
    3ee8:	697b      	ldr	r3, [r7, #20]
    3eea:	63fb      	str	r3, [r7, #60]	; 0x3c
    3eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    3eee:	63bb      	str	r3, [r7, #56]	; 0x38
    3ef0:	e00b      	b.n	3f0a <SEGGER_SYSVIEW_RecordU32x8+0x12a>
    3ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3ef4:	1c5a      	adds	r2, r3, #1
    3ef6:	63fa      	str	r2, [r7, #60]	; 0x3c
    3ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3efa:	b2d2      	uxtb	r2, r2
    3efc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3f00:	b2d2      	uxtb	r2, r2
    3f02:	701a      	strb	r2, [r3, #0]
    3f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f06:	09db      	lsrs	r3, r3, #7
    3f08:	63bb      	str	r3, [r7, #56]	; 0x38
    3f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3f0c:	2b7f      	cmp	r3, #127	; 0x7f
    3f0e:	d8f0      	bhi.n	3ef2 <SEGGER_SYSVIEW_RecordU32x8+0x112>
    3f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f12:	1c5a      	adds	r2, r3, #1
    3f14:	63fa      	str	r2, [r7, #60]	; 0x3c
    3f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
    3f18:	b2d2      	uxtb	r2, r2
    3f1a:	701a      	strb	r2, [r3, #0]
    3f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para5);
    3f20:	697b      	ldr	r3, [r7, #20]
    3f22:	637b      	str	r3, [r7, #52]	; 0x34
    3f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    3f26:	633b      	str	r3, [r7, #48]	; 0x30
    3f28:	e00b      	b.n	3f42 <SEGGER_SYSVIEW_RecordU32x8+0x162>
    3f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f2c:	1c5a      	adds	r2, r3, #1
    3f2e:	637a      	str	r2, [r7, #52]	; 0x34
    3f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3f32:	b2d2      	uxtb	r2, r2
    3f34:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3f38:	b2d2      	uxtb	r2, r2
    3f3a:	701a      	strb	r2, [r3, #0]
    3f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f3e:	09db      	lsrs	r3, r3, #7
    3f40:	633b      	str	r3, [r7, #48]	; 0x30
    3f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3f44:	2b7f      	cmp	r3, #127	; 0x7f
    3f46:	d8f0      	bhi.n	3f2a <SEGGER_SYSVIEW_RecordU32x8+0x14a>
    3f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f4a:	1c5a      	adds	r2, r3, #1
    3f4c:	637a      	str	r2, [r7, #52]	; 0x34
    3f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    3f50:	b2d2      	uxtb	r2, r2
    3f52:	701a      	strb	r2, [r3, #0]
    3f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3f56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para6);
    3f58:	697b      	ldr	r3, [r7, #20]
    3f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    3f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    3f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    3f60:	e00b      	b.n	3f7a <SEGGER_SYSVIEW_RecordU32x8+0x19a>
    3f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f64:	1c5a      	adds	r2, r3, #1
    3f66:	62fa      	str	r2, [r7, #44]	; 0x2c
    3f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f6a:	b2d2      	uxtb	r2, r2
    3f6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3f70:	b2d2      	uxtb	r2, r2
    3f72:	701a      	strb	r2, [r3, #0]
    3f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f76:	09db      	lsrs	r3, r3, #7
    3f78:	62bb      	str	r3, [r7, #40]	; 0x28
    3f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f7c:	2b7f      	cmp	r3, #127	; 0x7f
    3f7e:	d8f0      	bhi.n	3f62 <SEGGER_SYSVIEW_RecordU32x8+0x182>
    3f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f82:	1c5a      	adds	r2, r3, #1
    3f84:	62fa      	str	r2, [r7, #44]	; 0x2c
    3f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3f88:	b2d2      	uxtb	r2, r2
    3f8a:	701a      	strb	r2, [r3, #0]
    3f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para7);
    3f90:	697b      	ldr	r3, [r7, #20]
    3f92:	627b      	str	r3, [r7, #36]	; 0x24
    3f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    3f96:	623b      	str	r3, [r7, #32]
    3f98:	e00b      	b.n	3fb2 <SEGGER_SYSVIEW_RecordU32x8+0x1d2>
    3f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3f9c:	1c5a      	adds	r2, r3, #1
    3f9e:	627a      	str	r2, [r7, #36]	; 0x24
    3fa0:	6a3a      	ldr	r2, [r7, #32]
    3fa2:	b2d2      	uxtb	r2, r2
    3fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3fa8:	b2d2      	uxtb	r2, r2
    3faa:	701a      	strb	r2, [r3, #0]
    3fac:	6a3b      	ldr	r3, [r7, #32]
    3fae:	09db      	lsrs	r3, r3, #7
    3fb0:	623b      	str	r3, [r7, #32]
    3fb2:	6a3b      	ldr	r3, [r7, #32]
    3fb4:	2b7f      	cmp	r3, #127	; 0x7f
    3fb6:	d8f0      	bhi.n	3f9a <SEGGER_SYSVIEW_RecordU32x8+0x1ba>
    3fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fba:	1c5a      	adds	r2, r3, #1
    3fbc:	627a      	str	r2, [r7, #36]	; 0x24
    3fbe:	6a3a      	ldr	r2, [r7, #32]
    3fc0:	b2d2      	uxtb	r2, r2
    3fc2:	701a      	strb	r2, [r3, #0]
    3fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fc6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    3fc8:	68fa      	ldr	r2, [r7, #12]
    3fca:	6979      	ldr	r1, [r7, #20]
    3fcc:	69b8      	ldr	r0, [r7, #24]
    3fce:	f7fe fdb5 	bl	2b3c <_SendPacket>
  RECORD_END();
    3fd2:	69fb      	ldr	r3, [r7, #28]
    3fd4:	f383 8811 	msr	BASEPRI, r3
}
    3fd8:	bf00      	nop
    3fda:	3760      	adds	r7, #96	; 0x60
    3fdc:	46bd      	mov	sp, r7
    3fde:	bd80      	pop	{r7, pc}
    3fe0:	20000930 	.word	0x20000930

00003fe4 <SEGGER_SYSVIEW_RecordU32x9>:
*    Para5   - The 32-bit parameter encoded to SystemView packet payload.
*    Para6   - The 32-bit parameter encoded to SystemView packet payload.
*    Para7   - The 32-bit parameter encoded to SystemView packet payload.
*    Para8   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x9(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6, U32 Para7, U32 Para8) {
    3fe4:	b580      	push	{r7, lr}
    3fe6:	b09a      	sub	sp, #104	; 0x68
    3fe8:	af00      	add	r7, sp, #0
    3fea:	60f8      	str	r0, [r7, #12]
    3fec:	60b9      	str	r1, [r7, #8]
    3fee:	607a      	str	r2, [r7, #4]
    3ff0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 9 * SEGGER_SYSVIEW_QUANTA_U32);
    3ff2:	f3ef 8311 	mrs	r3, BASEPRI
    3ff6:	f04f 0150 	mov.w	r1, #80	; 0x50
    3ffa:	f381 8811 	msr	BASEPRI, r1
    3ffe:	61fb      	str	r3, [r7, #28]
    4000:	4887      	ldr	r0, [pc, #540]	; (4220 <SEGGER_SYSVIEW_RecordU32x9+0x23c>)
    4002:	f7fe fcbf 	bl	2984 <_PreparePacket>
    4006:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    4008:	69bb      	ldr	r3, [r7, #24]
    400a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    400c:	697b      	ldr	r3, [r7, #20]
    400e:	667b      	str	r3, [r7, #100]	; 0x64
    4010:	68bb      	ldr	r3, [r7, #8]
    4012:	663b      	str	r3, [r7, #96]	; 0x60
    4014:	e00b      	b.n	402e <SEGGER_SYSVIEW_RecordU32x9+0x4a>
    4016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4018:	1c5a      	adds	r2, r3, #1
    401a:	667a      	str	r2, [r7, #100]	; 0x64
    401c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    401e:	b2d2      	uxtb	r2, r2
    4020:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4024:	b2d2      	uxtb	r2, r2
    4026:	701a      	strb	r2, [r3, #0]
    4028:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    402a:	09db      	lsrs	r3, r3, #7
    402c:	663b      	str	r3, [r7, #96]	; 0x60
    402e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4030:	2b7f      	cmp	r3, #127	; 0x7f
    4032:	d8f0      	bhi.n	4016 <SEGGER_SYSVIEW_RecordU32x9+0x32>
    4034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4036:	1c5a      	adds	r2, r3, #1
    4038:	667a      	str	r2, [r7, #100]	; 0x64
    403a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    403c:	b2d2      	uxtb	r2, r2
    403e:	701a      	strb	r2, [r3, #0]
    4040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4042:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    4044:	697b      	ldr	r3, [r7, #20]
    4046:	65fb      	str	r3, [r7, #92]	; 0x5c
    4048:	687b      	ldr	r3, [r7, #4]
    404a:	65bb      	str	r3, [r7, #88]	; 0x58
    404c:	e00b      	b.n	4066 <SEGGER_SYSVIEW_RecordU32x9+0x82>
    404e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4050:	1c5a      	adds	r2, r3, #1
    4052:	65fa      	str	r2, [r7, #92]	; 0x5c
    4054:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4056:	b2d2      	uxtb	r2, r2
    4058:	f062 027f 	orn	r2, r2, #127	; 0x7f
    405c:	b2d2      	uxtb	r2, r2
    405e:	701a      	strb	r2, [r3, #0]
    4060:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4062:	09db      	lsrs	r3, r3, #7
    4064:	65bb      	str	r3, [r7, #88]	; 0x58
    4066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4068:	2b7f      	cmp	r3, #127	; 0x7f
    406a:	d8f0      	bhi.n	404e <SEGGER_SYSVIEW_RecordU32x9+0x6a>
    406c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    406e:	1c5a      	adds	r2, r3, #1
    4070:	65fa      	str	r2, [r7, #92]	; 0x5c
    4072:	6dba      	ldr	r2, [r7, #88]	; 0x58
    4074:	b2d2      	uxtb	r2, r2
    4076:	701a      	strb	r2, [r3, #0]
    4078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    407a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    407c:	697b      	ldr	r3, [r7, #20]
    407e:	657b      	str	r3, [r7, #84]	; 0x54
    4080:	683b      	ldr	r3, [r7, #0]
    4082:	653b      	str	r3, [r7, #80]	; 0x50
    4084:	e00b      	b.n	409e <SEGGER_SYSVIEW_RecordU32x9+0xba>
    4086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4088:	1c5a      	adds	r2, r3, #1
    408a:	657a      	str	r2, [r7, #84]	; 0x54
    408c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    408e:	b2d2      	uxtb	r2, r2
    4090:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4094:	b2d2      	uxtb	r2, r2
    4096:	701a      	strb	r2, [r3, #0]
    4098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    409a:	09db      	lsrs	r3, r3, #7
    409c:	653b      	str	r3, [r7, #80]	; 0x50
    409e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    40a0:	2b7f      	cmp	r3, #127	; 0x7f
    40a2:	d8f0      	bhi.n	4086 <SEGGER_SYSVIEW_RecordU32x9+0xa2>
    40a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40a6:	1c5a      	adds	r2, r3, #1
    40a8:	657a      	str	r2, [r7, #84]	; 0x54
    40aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    40ac:	b2d2      	uxtb	r2, r2
    40ae:	701a      	strb	r2, [r3, #0]
    40b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    40b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
    40b4:	697b      	ldr	r3, [r7, #20]
    40b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    40b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    40ba:	64bb      	str	r3, [r7, #72]	; 0x48
    40bc:	e00b      	b.n	40d6 <SEGGER_SYSVIEW_RecordU32x9+0xf2>
    40be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40c0:	1c5a      	adds	r2, r3, #1
    40c2:	64fa      	str	r2, [r7, #76]	; 0x4c
    40c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    40c6:	b2d2      	uxtb	r2, r2
    40c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    40cc:	b2d2      	uxtb	r2, r2
    40ce:	701a      	strb	r2, [r3, #0]
    40d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40d2:	09db      	lsrs	r3, r3, #7
    40d4:	64bb      	str	r3, [r7, #72]	; 0x48
    40d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    40d8:	2b7f      	cmp	r3, #127	; 0x7f
    40da:	d8f0      	bhi.n	40be <SEGGER_SYSVIEW_RecordU32x9+0xda>
    40dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40de:	1c5a      	adds	r2, r3, #1
    40e0:	64fa      	str	r2, [r7, #76]	; 0x4c
    40e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    40e4:	b2d2      	uxtb	r2, r2
    40e6:	701a      	strb	r2, [r3, #0]
    40e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
    40ec:	697b      	ldr	r3, [r7, #20]
    40ee:	647b      	str	r3, [r7, #68]	; 0x44
    40f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    40f2:	643b      	str	r3, [r7, #64]	; 0x40
    40f4:	e00b      	b.n	410e <SEGGER_SYSVIEW_RecordU32x9+0x12a>
    40f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    40f8:	1c5a      	adds	r2, r3, #1
    40fa:	647a      	str	r2, [r7, #68]	; 0x44
    40fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    40fe:	b2d2      	uxtb	r2, r2
    4100:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4104:	b2d2      	uxtb	r2, r2
    4106:	701a      	strb	r2, [r3, #0]
    4108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    410a:	09db      	lsrs	r3, r3, #7
    410c:	643b      	str	r3, [r7, #64]	; 0x40
    410e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4110:	2b7f      	cmp	r3, #127	; 0x7f
    4112:	d8f0      	bhi.n	40f6 <SEGGER_SYSVIEW_RecordU32x9+0x112>
    4114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4116:	1c5a      	adds	r2, r3, #1
    4118:	647a      	str	r2, [r7, #68]	; 0x44
    411a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    411c:	b2d2      	uxtb	r2, r2
    411e:	701a      	strb	r2, [r3, #0]
    4120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4122:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para5);
    4124:	697b      	ldr	r3, [r7, #20]
    4126:	63fb      	str	r3, [r7, #60]	; 0x3c
    4128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    412a:	63bb      	str	r3, [r7, #56]	; 0x38
    412c:	e00b      	b.n	4146 <SEGGER_SYSVIEW_RecordU32x9+0x162>
    412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4130:	1c5a      	adds	r2, r3, #1
    4132:	63fa      	str	r2, [r7, #60]	; 0x3c
    4134:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4136:	b2d2      	uxtb	r2, r2
    4138:	f062 027f 	orn	r2, r2, #127	; 0x7f
    413c:	b2d2      	uxtb	r2, r2
    413e:	701a      	strb	r2, [r3, #0]
    4140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4142:	09db      	lsrs	r3, r3, #7
    4144:	63bb      	str	r3, [r7, #56]	; 0x38
    4146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4148:	2b7f      	cmp	r3, #127	; 0x7f
    414a:	d8f0      	bhi.n	412e <SEGGER_SYSVIEW_RecordU32x9+0x14a>
    414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    414e:	1c5a      	adds	r2, r3, #1
    4150:	63fa      	str	r2, [r7, #60]	; 0x3c
    4152:	6bba      	ldr	r2, [r7, #56]	; 0x38
    4154:	b2d2      	uxtb	r2, r2
    4156:	701a      	strb	r2, [r3, #0]
    4158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    415a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para6);
    415c:	697b      	ldr	r3, [r7, #20]
    415e:	637b      	str	r3, [r7, #52]	; 0x34
    4160:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4162:	633b      	str	r3, [r7, #48]	; 0x30
    4164:	e00b      	b.n	417e <SEGGER_SYSVIEW_RecordU32x9+0x19a>
    4166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4168:	1c5a      	adds	r2, r3, #1
    416a:	637a      	str	r2, [r7, #52]	; 0x34
    416c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    416e:	b2d2      	uxtb	r2, r2
    4170:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4174:	b2d2      	uxtb	r2, r2
    4176:	701a      	strb	r2, [r3, #0]
    4178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    417a:	09db      	lsrs	r3, r3, #7
    417c:	633b      	str	r3, [r7, #48]	; 0x30
    417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4180:	2b7f      	cmp	r3, #127	; 0x7f
    4182:	d8f0      	bhi.n	4166 <SEGGER_SYSVIEW_RecordU32x9+0x182>
    4184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4186:	1c5a      	adds	r2, r3, #1
    4188:	637a      	str	r2, [r7, #52]	; 0x34
    418a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    418c:	b2d2      	uxtb	r2, r2
    418e:	701a      	strb	r2, [r3, #0]
    4190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4192:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para7);
    4194:	697b      	ldr	r3, [r7, #20]
    4196:	62fb      	str	r3, [r7, #44]	; 0x2c
    4198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    419c:	62bb      	str	r3, [r7, #40]	; 0x28
    419e:	e00b      	b.n	41b8 <SEGGER_SYSVIEW_RecordU32x9+0x1d4>
    41a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41a2:	1c5a      	adds	r2, r3, #1
    41a4:	62fa      	str	r2, [r7, #44]	; 0x2c
    41a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    41a8:	b2d2      	uxtb	r2, r2
    41aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
    41ae:	b2d2      	uxtb	r2, r2
    41b0:	701a      	strb	r2, [r3, #0]
    41b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    41b4:	09db      	lsrs	r3, r3, #7
    41b6:	62bb      	str	r3, [r7, #40]	; 0x28
    41b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    41ba:	2b7f      	cmp	r3, #127	; 0x7f
    41bc:	d8f0      	bhi.n	41a0 <SEGGER_SYSVIEW_RecordU32x9+0x1bc>
    41be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41c0:	1c5a      	adds	r2, r3, #1
    41c2:	62fa      	str	r2, [r7, #44]	; 0x2c
    41c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    41c6:	b2d2      	uxtb	r2, r2
    41c8:	701a      	strb	r2, [r3, #0]
    41ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para8);
    41ce:	697b      	ldr	r3, [r7, #20]
    41d0:	627b      	str	r3, [r7, #36]	; 0x24
    41d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    41d6:	623b      	str	r3, [r7, #32]
    41d8:	e00b      	b.n	41f2 <SEGGER_SYSVIEW_RecordU32x9+0x20e>
    41da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41dc:	1c5a      	adds	r2, r3, #1
    41de:	627a      	str	r2, [r7, #36]	; 0x24
    41e0:	6a3a      	ldr	r2, [r7, #32]
    41e2:	b2d2      	uxtb	r2, r2
    41e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    41e8:	b2d2      	uxtb	r2, r2
    41ea:	701a      	strb	r2, [r3, #0]
    41ec:	6a3b      	ldr	r3, [r7, #32]
    41ee:	09db      	lsrs	r3, r3, #7
    41f0:	623b      	str	r3, [r7, #32]
    41f2:	6a3b      	ldr	r3, [r7, #32]
    41f4:	2b7f      	cmp	r3, #127	; 0x7f
    41f6:	d8f0      	bhi.n	41da <SEGGER_SYSVIEW_RecordU32x9+0x1f6>
    41f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    41fa:	1c5a      	adds	r2, r3, #1
    41fc:	627a      	str	r2, [r7, #36]	; 0x24
    41fe:	6a3a      	ldr	r2, [r7, #32]
    4200:	b2d2      	uxtb	r2, r2
    4202:	701a      	strb	r2, [r3, #0]
    4204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4206:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    4208:	68fa      	ldr	r2, [r7, #12]
    420a:	6979      	ldr	r1, [r7, #20]
    420c:	69b8      	ldr	r0, [r7, #24]
    420e:	f7fe fc95 	bl	2b3c <_SendPacket>
  RECORD_END();
    4212:	69fb      	ldr	r3, [r7, #28]
    4214:	f383 8811 	msr	BASEPRI, r3
}
    4218:	bf00      	nop
    421a:	3768      	adds	r7, #104	; 0x68
    421c:	46bd      	mov	sp, r7
    421e:	bd80      	pop	{r7, pc}
    4220:	20000930 	.word	0x20000930

00004224 <SEGGER_SYSVIEW_RecordU32x10>:
*    Para6   - The 32-bit parameter encoded to SystemView packet payload.
*    Para7   - The 32-bit parameter encoded to SystemView packet payload.
*    Para8   - The 32-bit parameter encoded to SystemView packet payload.
*    Para9   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x10(unsigned EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4, U32 Para5, U32 Para6, U32 Para7, U32 Para8, U32 Para9) {
    4224:	b580      	push	{r7, lr}
    4226:	b09c      	sub	sp, #112	; 0x70
    4228:	af00      	add	r7, sp, #0
    422a:	60f8      	str	r0, [r7, #12]
    422c:	60b9      	str	r1, [r7, #8]
    422e:	607a      	str	r2, [r7, #4]
    4230:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 10 * SEGGER_SYSVIEW_QUANTA_U32);
    4232:	f3ef 8311 	mrs	r3, BASEPRI
    4236:	f04f 0150 	mov.w	r1, #80	; 0x50
    423a:	f381 8811 	msr	BASEPRI, r1
    423e:	61fb      	str	r3, [r7, #28]
    4240:	4885      	ldr	r0, [pc, #532]	; (4458 <SEGGER_SYSVIEW_RecordU32x10+0x234>)
    4242:	f7fe fb9f 	bl	2984 <_PreparePacket>
    4246:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
    4248:	69bb      	ldr	r3, [r7, #24]
    424a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
    424c:	697b      	ldr	r3, [r7, #20]
    424e:	66fb      	str	r3, [r7, #108]	; 0x6c
    4250:	68bb      	ldr	r3, [r7, #8]
    4252:	66bb      	str	r3, [r7, #104]	; 0x68
    4254:	e00b      	b.n	426e <SEGGER_SYSVIEW_RecordU32x10+0x4a>
    4256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4258:	1c5a      	adds	r2, r3, #1
    425a:	66fa      	str	r2, [r7, #108]	; 0x6c
    425c:	6eba      	ldr	r2, [r7, #104]	; 0x68
    425e:	b2d2      	uxtb	r2, r2
    4260:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4264:	b2d2      	uxtb	r2, r2
    4266:	701a      	strb	r2, [r3, #0]
    4268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    426a:	09db      	lsrs	r3, r3, #7
    426c:	66bb      	str	r3, [r7, #104]	; 0x68
    426e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    4270:	2b7f      	cmp	r3, #127	; 0x7f
    4272:	d8f0      	bhi.n	4256 <SEGGER_SYSVIEW_RecordU32x10+0x32>
    4274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4276:	1c5a      	adds	r2, r3, #1
    4278:	66fa      	str	r2, [r7, #108]	; 0x6c
    427a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    427c:	b2d2      	uxtb	r2, r2
    427e:	701a      	strb	r2, [r3, #0]
    4280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    4282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
    4284:	697b      	ldr	r3, [r7, #20]
    4286:	667b      	str	r3, [r7, #100]	; 0x64
    4288:	687b      	ldr	r3, [r7, #4]
    428a:	663b      	str	r3, [r7, #96]	; 0x60
    428c:	e00b      	b.n	42a6 <SEGGER_SYSVIEW_RecordU32x10+0x82>
    428e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4290:	1c5a      	adds	r2, r3, #1
    4292:	667a      	str	r2, [r7, #100]	; 0x64
    4294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    4296:	b2d2      	uxtb	r2, r2
    4298:	f062 027f 	orn	r2, r2, #127	; 0x7f
    429c:	b2d2      	uxtb	r2, r2
    429e:	701a      	strb	r2, [r3, #0]
    42a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    42a2:	09db      	lsrs	r3, r3, #7
    42a4:	663b      	str	r3, [r7, #96]	; 0x60
    42a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    42a8:	2b7f      	cmp	r3, #127	; 0x7f
    42aa:	d8f0      	bhi.n	428e <SEGGER_SYSVIEW_RecordU32x10+0x6a>
    42ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    42ae:	1c5a      	adds	r2, r3, #1
    42b0:	667a      	str	r2, [r7, #100]	; 0x64
    42b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    42b4:	b2d2      	uxtb	r2, r2
    42b6:	701a      	strb	r2, [r3, #0]
    42b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    42ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
    42bc:	697b      	ldr	r3, [r7, #20]
    42be:	65fb      	str	r3, [r7, #92]	; 0x5c
    42c0:	683b      	ldr	r3, [r7, #0]
    42c2:	65bb      	str	r3, [r7, #88]	; 0x58
    42c4:	e00b      	b.n	42de <SEGGER_SYSVIEW_RecordU32x10+0xba>
    42c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    42c8:	1c5a      	adds	r2, r3, #1
    42ca:	65fa      	str	r2, [r7, #92]	; 0x5c
    42cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
    42ce:	b2d2      	uxtb	r2, r2
    42d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    42d4:	b2d2      	uxtb	r2, r2
    42d6:	701a      	strb	r2, [r3, #0]
    42d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    42da:	09db      	lsrs	r3, r3, #7
    42dc:	65bb      	str	r3, [r7, #88]	; 0x58
    42de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    42e0:	2b7f      	cmp	r3, #127	; 0x7f
    42e2:	d8f0      	bhi.n	42c6 <SEGGER_SYSVIEW_RecordU32x10+0xa2>
    42e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    42e6:	1c5a      	adds	r2, r3, #1
    42e8:	65fa      	str	r2, [r7, #92]	; 0x5c
    42ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
    42ec:	b2d2      	uxtb	r2, r2
    42ee:	701a      	strb	r2, [r3, #0]
    42f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    42f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
    42f4:	697b      	ldr	r3, [r7, #20]
    42f6:	657b      	str	r3, [r7, #84]	; 0x54
    42f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    42fa:	653b      	str	r3, [r7, #80]	; 0x50
    42fc:	e00b      	b.n	4316 <SEGGER_SYSVIEW_RecordU32x10+0xf2>
    42fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    4300:	1c5a      	adds	r2, r3, #1
    4302:	657a      	str	r2, [r7, #84]	; 0x54
    4304:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4306:	b2d2      	uxtb	r2, r2
    4308:	f062 027f 	orn	r2, r2, #127	; 0x7f
    430c:	b2d2      	uxtb	r2, r2
    430e:	701a      	strb	r2, [r3, #0]
    4310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4312:	09db      	lsrs	r3, r3, #7
    4314:	653b      	str	r3, [r7, #80]	; 0x50
    4316:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    4318:	2b7f      	cmp	r3, #127	; 0x7f
    431a:	d8f0      	bhi.n	42fe <SEGGER_SYSVIEW_RecordU32x10+0xda>
    431c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    431e:	1c5a      	adds	r2, r3, #1
    4320:	657a      	str	r2, [r7, #84]	; 0x54
    4322:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    4324:	b2d2      	uxtb	r2, r2
    4326:	701a      	strb	r2, [r3, #0]
    4328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    432a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
    432c:	697b      	ldr	r3, [r7, #20]
    432e:	64fb      	str	r3, [r7, #76]	; 0x4c
    4330:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    4332:	64bb      	str	r3, [r7, #72]	; 0x48
    4334:	e00b      	b.n	434e <SEGGER_SYSVIEW_RecordU32x10+0x12a>
    4336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4338:	1c5a      	adds	r2, r3, #1
    433a:	64fa      	str	r2, [r7, #76]	; 0x4c
    433c:	6cba      	ldr	r2, [r7, #72]	; 0x48
    433e:	b2d2      	uxtb	r2, r2
    4340:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4344:	b2d2      	uxtb	r2, r2
    4346:	701a      	strb	r2, [r3, #0]
    4348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    434a:	09db      	lsrs	r3, r3, #7
    434c:	64bb      	str	r3, [r7, #72]	; 0x48
    434e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4350:	2b7f      	cmp	r3, #127	; 0x7f
    4352:	d8f0      	bhi.n	4336 <SEGGER_SYSVIEW_RecordU32x10+0x112>
    4354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4356:	1c5a      	adds	r2, r3, #1
    4358:	64fa      	str	r2, [r7, #76]	; 0x4c
    435a:	6cba      	ldr	r2, [r7, #72]	; 0x48
    435c:	b2d2      	uxtb	r2, r2
    435e:	701a      	strb	r2, [r3, #0]
    4360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4362:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para5);
    4364:	697b      	ldr	r3, [r7, #20]
    4366:	647b      	str	r3, [r7, #68]	; 0x44
    4368:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    436c:	643b      	str	r3, [r7, #64]	; 0x40
    436e:	e00b      	b.n	4388 <SEGGER_SYSVIEW_RecordU32x10+0x164>
    4370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4372:	1c5a      	adds	r2, r3, #1
    4374:	647a      	str	r2, [r7, #68]	; 0x44
    4376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4378:	b2d2      	uxtb	r2, r2
    437a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    437e:	b2d2      	uxtb	r2, r2
    4380:	701a      	strb	r2, [r3, #0]
    4382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4384:	09db      	lsrs	r3, r3, #7
    4386:	643b      	str	r3, [r7, #64]	; 0x40
    4388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    438a:	2b7f      	cmp	r3, #127	; 0x7f
    438c:	d8f0      	bhi.n	4370 <SEGGER_SYSVIEW_RecordU32x10+0x14c>
    438e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4390:	1c5a      	adds	r2, r3, #1
    4392:	647a      	str	r2, [r7, #68]	; 0x44
    4394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4396:	b2d2      	uxtb	r2, r2
    4398:	701a      	strb	r2, [r3, #0]
    439a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    439c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para6);
    439e:	697b      	ldr	r3, [r7, #20]
    43a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    43a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    43a6:	63bb      	str	r3, [r7, #56]	; 0x38
    43a8:	e00b      	b.n	43c2 <SEGGER_SYSVIEW_RecordU32x10+0x19e>
    43aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43ac:	1c5a      	adds	r2, r3, #1
    43ae:	63fa      	str	r2, [r7, #60]	; 0x3c
    43b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    43b2:	b2d2      	uxtb	r2, r2
    43b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    43b8:	b2d2      	uxtb	r2, r2
    43ba:	701a      	strb	r2, [r3, #0]
    43bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43be:	09db      	lsrs	r3, r3, #7
    43c0:	63bb      	str	r3, [r7, #56]	; 0x38
    43c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    43c4:	2b7f      	cmp	r3, #127	; 0x7f
    43c6:	d8f0      	bhi.n	43aa <SEGGER_SYSVIEW_RecordU32x10+0x186>
    43c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43ca:	1c5a      	adds	r2, r3, #1
    43cc:	63fa      	str	r2, [r7, #60]	; 0x3c
    43ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
    43d0:	b2d2      	uxtb	r2, r2
    43d2:	701a      	strb	r2, [r3, #0]
    43d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    43d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para7);
    43d8:	697b      	ldr	r3, [r7, #20]
    43da:	637b      	str	r3, [r7, #52]	; 0x34
    43dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    43e0:	633b      	str	r3, [r7, #48]	; 0x30
    43e2:	e00b      	b.n	43fc <SEGGER_SYSVIEW_RecordU32x10+0x1d8>
    43e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    43e6:	1c5a      	adds	r2, r3, #1
    43e8:	637a      	str	r2, [r7, #52]	; 0x34
    43ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    43ec:	b2d2      	uxtb	r2, r2
    43ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
    43f2:	b2d2      	uxtb	r2, r2
    43f4:	701a      	strb	r2, [r3, #0]
    43f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    43f8:	09db      	lsrs	r3, r3, #7
    43fa:	633b      	str	r3, [r7, #48]	; 0x30
    43fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    43fe:	2b7f      	cmp	r3, #127	; 0x7f
    4400:	d8f0      	bhi.n	43e4 <SEGGER_SYSVIEW_RecordU32x10+0x1c0>
    4402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4404:	1c5a      	adds	r2, r3, #1
    4406:	637a      	str	r2, [r7, #52]	; 0x34
    4408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    440a:	b2d2      	uxtb	r2, r2
    440c:	701a      	strb	r2, [r3, #0]
    440e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4410:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para8);
    4412:	697b      	ldr	r3, [r7, #20]
    4414:	62fb      	str	r3, [r7, #44]	; 0x2c
    4416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    441a:	62bb      	str	r3, [r7, #40]	; 0x28
    441c:	e00b      	b.n	4436 <SEGGER_SYSVIEW_RecordU32x10+0x212>
    441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4420:	1c5a      	adds	r2, r3, #1
    4422:	62fa      	str	r2, [r7, #44]	; 0x2c
    4424:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4426:	b2d2      	uxtb	r2, r2
    4428:	f062 027f 	orn	r2, r2, #127	; 0x7f
    442c:	b2d2      	uxtb	r2, r2
    442e:	701a      	strb	r2, [r3, #0]
    4430:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4432:	09db      	lsrs	r3, r3, #7
    4434:	62bb      	str	r3, [r7, #40]	; 0x28
    4436:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4438:	2b7f      	cmp	r3, #127	; 0x7f
    443a:	d8f0      	bhi.n	441e <SEGGER_SYSVIEW_RecordU32x10+0x1fa>
    443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    443e:	1c5a      	adds	r2, r3, #1
    4440:	62fa      	str	r2, [r7, #44]	; 0x2c
    4442:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4444:	b2d2      	uxtb	r2, r2
    4446:	701a      	strb	r2, [r3, #0]
    4448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    444a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para9);
    444c:	697b      	ldr	r3, [r7, #20]
    444e:	627b      	str	r3, [r7, #36]	; 0x24
    4450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    4454:	623b      	str	r3, [r7, #32]
    4456:	e00d      	b.n	4474 <SEGGER_SYSVIEW_RecordU32x10+0x250>
    4458:	20000930 	.word	0x20000930
    445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    445e:	1c5a      	adds	r2, r3, #1
    4460:	627a      	str	r2, [r7, #36]	; 0x24
    4462:	6a3a      	ldr	r2, [r7, #32]
    4464:	b2d2      	uxtb	r2, r2
    4466:	f062 027f 	orn	r2, r2, #127	; 0x7f
    446a:	b2d2      	uxtb	r2, r2
    446c:	701a      	strb	r2, [r3, #0]
    446e:	6a3b      	ldr	r3, [r7, #32]
    4470:	09db      	lsrs	r3, r3, #7
    4472:	623b      	str	r3, [r7, #32]
    4474:	6a3b      	ldr	r3, [r7, #32]
    4476:	2b7f      	cmp	r3, #127	; 0x7f
    4478:	d8f0      	bhi.n	445c <SEGGER_SYSVIEW_RecordU32x10+0x238>
    447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    447c:	1c5a      	adds	r2, r3, #1
    447e:	627a      	str	r2, [r7, #36]	; 0x24
    4480:	6a3a      	ldr	r2, [r7, #32]
    4482:	b2d2      	uxtb	r2, r2
    4484:	701a      	strb	r2, [r3, #0]
    4486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4488:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
    448a:	68fa      	ldr	r2, [r7, #12]
    448c:	6979      	ldr	r1, [r7, #20]
    448e:	69b8      	ldr	r0, [r7, #24]
    4490:	f7fe fb54 	bl	2b3c <_SendPacket>
  RECORD_END();
    4494:	69fb      	ldr	r3, [r7, #28]
    4496:	f383 8811 	msr	BASEPRI, r3
}
    449a:	bf00      	nop
    449c:	3770      	adds	r7, #112	; 0x70
    449e:	46bd      	mov	sp, r7
    44a0:	bd80      	pop	{r7, pc}
    44a2:	bf00      	nop

000044a4 <SEGGER_SYSVIEW_RecordString>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than SEGGER_SYSVIEW_MAX_STRING_LEN bytes will be encoded to the payload.
*/
void SEGGER_SYSVIEW_RecordString(unsigned EventID, const char* pString) {
    44a4:	b580      	push	{r7, lr}
    44a6:	b086      	sub	sp, #24
    44a8:	af00      	add	r7, sp, #0
    44aa:	6078      	str	r0, [r7, #4]
    44ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    44ae:	f3ef 8311 	mrs	r3, BASEPRI
    44b2:	f04f 0150 	mov.w	r1, #80	; 0x50
    44b6:	f381 8811 	msr	BASEPRI, r1
    44ba:	617b      	str	r3, [r7, #20]
    44bc:	480a      	ldr	r0, [pc, #40]	; (44e8 <SEGGER_SYSVIEW_RecordString+0x44>)
    44be:	f7fe fa61 	bl	2984 <_PreparePacket>
    44c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, pString, SEGGER_SYSVIEW_MAX_STRING_LEN);
    44c4:	2280      	movs	r2, #128	; 0x80
    44c6:	6839      	ldr	r1, [r7, #0]
    44c8:	6938      	ldr	r0, [r7, #16]
    44ca:	f7fe fa0d 	bl	28e8 <_EncodeStr>
    44ce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
    44d0:	687a      	ldr	r2, [r7, #4]
    44d2:	68f9      	ldr	r1, [r7, #12]
    44d4:	6938      	ldr	r0, [r7, #16]
    44d6:	f7fe fb31 	bl	2b3c <_SendPacket>
  RECORD_END();
    44da:	697b      	ldr	r3, [r7, #20]
    44dc:	f383 8811 	msr	BASEPRI, r3
}
    44e0:	bf00      	nop
    44e2:	3718      	adds	r7, #24
    44e4:	46bd      	mov	sp, r7
    44e6:	bd80      	pop	{r7, pc}
    44e8:	20000930 	.word	0x20000930

000044ec <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
    44ec:	b580      	push	{r7, lr}
    44ee:	b08c      	sub	sp, #48	; 0x30
    44f0:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
    44f2:	4b59      	ldr	r3, [pc, #356]	; (4658 <SEGGER_SYSVIEW_Start+0x16c>)
    44f4:	781b      	ldrb	r3, [r3, #0]
    44f6:	2b00      	cmp	r3, #0
    44f8:	f040 80aa 	bne.w	4650 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
    44fc:	4b56      	ldr	r3, [pc, #344]	; (4658 <SEGGER_SYSVIEW_Start+0x16c>)
    44fe:	2201      	movs	r2, #1
    4500:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
    4502:	f3ef 8311 	mrs	r3, BASEPRI
    4506:	f04f 0150 	mov.w	r1, #80	; 0x50
    450a:	f381 8811 	msr	BASEPRI, r1
    450e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
    4510:	220a      	movs	r2, #10
    4512:	4952      	ldr	r1, [pc, #328]	; (465c <SEGGER_SYSVIEW_Start+0x170>)
    4514:	2001      	movs	r0, #1
    4516:	f7fd f99d 	bl	1854 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
    451a:	68fb      	ldr	r3, [r7, #12]
    451c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
    4520:	200a      	movs	r0, #10
    4522:	f7ff f843 	bl	35ac <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
    4526:	f3ef 8311 	mrs	r3, BASEPRI
    452a:	f04f 0150 	mov.w	r1, #80	; 0x50
    452e:	f381 8811 	msr	BASEPRI, r1
    4532:	60bb      	str	r3, [r7, #8]
    4534:	484a      	ldr	r0, [pc, #296]	; (4660 <SEGGER_SYSVIEW_Start+0x174>)
    4536:	f7fe fa25 	bl	2984 <_PreparePacket>
    453a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
    4540:	683b      	ldr	r3, [r7, #0]
    4542:	62fb      	str	r3, [r7, #44]	; 0x2c
    4544:	4b44      	ldr	r3, [pc, #272]	; (4658 <SEGGER_SYSVIEW_Start+0x16c>)
    4546:	685b      	ldr	r3, [r3, #4]
    4548:	62bb      	str	r3, [r7, #40]	; 0x28
    454a:	e00b      	b.n	4564 <SEGGER_SYSVIEW_Start+0x78>
    454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    454e:	1c5a      	adds	r2, r3, #1
    4550:	62fa      	str	r2, [r7, #44]	; 0x2c
    4552:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4554:	b2d2      	uxtb	r2, r2
    4556:	f062 027f 	orn	r2, r2, #127	; 0x7f
    455a:	b2d2      	uxtb	r2, r2
    455c:	701a      	strb	r2, [r3, #0]
    455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4560:	09db      	lsrs	r3, r3, #7
    4562:	62bb      	str	r3, [r7, #40]	; 0x28
    4564:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4566:	2b7f      	cmp	r3, #127	; 0x7f
    4568:	d8f0      	bhi.n	454c <SEGGER_SYSVIEW_Start+0x60>
    456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    456c:	1c5a      	adds	r2, r3, #1
    456e:	62fa      	str	r2, [r7, #44]	; 0x2c
    4570:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4572:	b2d2      	uxtb	r2, r2
    4574:	701a      	strb	r2, [r3, #0]
    4576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4578:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
    457a:	683b      	ldr	r3, [r7, #0]
    457c:	627b      	str	r3, [r7, #36]	; 0x24
    457e:	4b36      	ldr	r3, [pc, #216]	; (4658 <SEGGER_SYSVIEW_Start+0x16c>)
    4580:	689b      	ldr	r3, [r3, #8]
    4582:	623b      	str	r3, [r7, #32]
    4584:	e00b      	b.n	459e <SEGGER_SYSVIEW_Start+0xb2>
    4586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4588:	1c5a      	adds	r2, r3, #1
    458a:	627a      	str	r2, [r7, #36]	; 0x24
    458c:	6a3a      	ldr	r2, [r7, #32]
    458e:	b2d2      	uxtb	r2, r2
    4590:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4594:	b2d2      	uxtb	r2, r2
    4596:	701a      	strb	r2, [r3, #0]
    4598:	6a3b      	ldr	r3, [r7, #32]
    459a:	09db      	lsrs	r3, r3, #7
    459c:	623b      	str	r3, [r7, #32]
    459e:	6a3b      	ldr	r3, [r7, #32]
    45a0:	2b7f      	cmp	r3, #127	; 0x7f
    45a2:	d8f0      	bhi.n	4586 <SEGGER_SYSVIEW_Start+0x9a>
    45a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45a6:	1c5a      	adds	r2, r3, #1
    45a8:	627a      	str	r2, [r7, #36]	; 0x24
    45aa:	6a3a      	ldr	r2, [r7, #32]
    45ac:	b2d2      	uxtb	r2, r2
    45ae:	701a      	strb	r2, [r3, #0]
    45b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    45b2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
    45b4:	683b      	ldr	r3, [r7, #0]
    45b6:	61fb      	str	r3, [r7, #28]
    45b8:	4b27      	ldr	r3, [pc, #156]	; (4658 <SEGGER_SYSVIEW_Start+0x16c>)
    45ba:	691b      	ldr	r3, [r3, #16]
    45bc:	61bb      	str	r3, [r7, #24]
    45be:	e00b      	b.n	45d8 <SEGGER_SYSVIEW_Start+0xec>
    45c0:	69fb      	ldr	r3, [r7, #28]
    45c2:	1c5a      	adds	r2, r3, #1
    45c4:	61fa      	str	r2, [r7, #28]
    45c6:	69ba      	ldr	r2, [r7, #24]
    45c8:	b2d2      	uxtb	r2, r2
    45ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
    45ce:	b2d2      	uxtb	r2, r2
    45d0:	701a      	strb	r2, [r3, #0]
    45d2:	69bb      	ldr	r3, [r7, #24]
    45d4:	09db      	lsrs	r3, r3, #7
    45d6:	61bb      	str	r3, [r7, #24]
    45d8:	69bb      	ldr	r3, [r7, #24]
    45da:	2b7f      	cmp	r3, #127	; 0x7f
    45dc:	d8f0      	bhi.n	45c0 <SEGGER_SYSVIEW_Start+0xd4>
    45de:	69fb      	ldr	r3, [r7, #28]
    45e0:	1c5a      	adds	r2, r3, #1
    45e2:	61fa      	str	r2, [r7, #28]
    45e4:	69ba      	ldr	r2, [r7, #24]
    45e6:	b2d2      	uxtb	r2, r2
    45e8:	701a      	strb	r2, [r3, #0]
    45ea:	69fb      	ldr	r3, [r7, #28]
    45ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
    45ee:	683b      	ldr	r3, [r7, #0]
    45f0:	617b      	str	r3, [r7, #20]
    45f2:	2302      	movs	r3, #2
    45f4:	613b      	str	r3, [r7, #16]
    45f6:	e00b      	b.n	4610 <SEGGER_SYSVIEW_Start+0x124>
    45f8:	697b      	ldr	r3, [r7, #20]
    45fa:	1c5a      	adds	r2, r3, #1
    45fc:	617a      	str	r2, [r7, #20]
    45fe:	693a      	ldr	r2, [r7, #16]
    4600:	b2d2      	uxtb	r2, r2
    4602:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4606:	b2d2      	uxtb	r2, r2
    4608:	701a      	strb	r2, [r3, #0]
    460a:	693b      	ldr	r3, [r7, #16]
    460c:	09db      	lsrs	r3, r3, #7
    460e:	613b      	str	r3, [r7, #16]
    4610:	693b      	ldr	r3, [r7, #16]
    4612:	2b7f      	cmp	r3, #127	; 0x7f
    4614:	d8f0      	bhi.n	45f8 <SEGGER_SYSVIEW_Start+0x10c>
    4616:	697b      	ldr	r3, [r7, #20]
    4618:	1c5a      	adds	r2, r3, #1
    461a:	617a      	str	r2, [r7, #20]
    461c:	693a      	ldr	r2, [r7, #16]
    461e:	b2d2      	uxtb	r2, r2
    4620:	701a      	strb	r2, [r3, #0]
    4622:	697b      	ldr	r3, [r7, #20]
    4624:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
    4626:	2218      	movs	r2, #24
    4628:	6839      	ldr	r1, [r7, #0]
    462a:	6878      	ldr	r0, [r7, #4]
    462c:	f7fe fa86 	bl	2b3c <_SendPacket>
      RECORD_END();
    4630:	68bb      	ldr	r3, [r7, #8]
    4632:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
    4636:	4b08      	ldr	r3, [pc, #32]	; (4658 <SEGGER_SYSVIEW_Start+0x16c>)
    4638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    463a:	2b00      	cmp	r3, #0
    463c:	d002      	beq.n	4644 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
    463e:	4b06      	ldr	r3, [pc, #24]	; (4658 <SEGGER_SYSVIEW_Start+0x16c>)
    4640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4642:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
    4644:	f000 f9ec 	bl	4a20 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
    4648:	f000 f9b2 	bl	49b0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
    464c:	f000 ffee 	bl	562c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
    4650:	bf00      	nop
    4652:	3730      	adds	r7, #48	; 0x30
    4654:	46bd      	mov	sp, r7
    4656:	bd80      	pop	{r7, pc}
    4658:	20000900 	.word	0x20000900
    465c:	0000fdd0 	.word	0x0000fdd0
    4660:	20000930 	.word	0x20000930

00004664 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
    4664:	b580      	push	{r7, lr}
    4666:	b082      	sub	sp, #8
    4668:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
    466a:	f3ef 8311 	mrs	r3, BASEPRI
    466e:	f04f 0150 	mov.w	r1, #80	; 0x50
    4672:	f381 8811 	msr	BASEPRI, r1
    4676:	607b      	str	r3, [r7, #4]
    4678:	480b      	ldr	r0, [pc, #44]	; (46a8 <SEGGER_SYSVIEW_Stop+0x44>)
    467a:	f7fe f983 	bl	2984 <_PreparePacket>
    467e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
    4680:	4b0a      	ldr	r3, [pc, #40]	; (46ac <SEGGER_SYSVIEW_Stop+0x48>)
    4682:	781b      	ldrb	r3, [r3, #0]
    4684:	2b00      	cmp	r3, #0
    4686:	d007      	beq.n	4698 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
    4688:	220b      	movs	r2, #11
    468a:	6839      	ldr	r1, [r7, #0]
    468c:	6838      	ldr	r0, [r7, #0]
    468e:	f7fe fa55 	bl	2b3c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
    4692:	4b06      	ldr	r3, [pc, #24]	; (46ac <SEGGER_SYSVIEW_Stop+0x48>)
    4694:	2200      	movs	r2, #0
    4696:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
    4698:	687b      	ldr	r3, [r7, #4]
    469a:	f383 8811 	msr	BASEPRI, r3
}
    469e:	bf00      	nop
    46a0:	3708      	adds	r7, #8
    46a2:	46bd      	mov	sp, r7
    46a4:	bd80      	pop	{r7, pc}
    46a6:	bf00      	nop
    46a8:	20000930 	.word	0x20000930
    46ac:	20000900 	.word	0x20000900

000046b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
    46b0:	b580      	push	{r7, lr}
    46b2:	b08c      	sub	sp, #48	; 0x30
    46b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
    46b6:	f3ef 8311 	mrs	r3, BASEPRI
    46ba:	f04f 0150 	mov.w	r1, #80	; 0x50
    46be:	f381 8811 	msr	BASEPRI, r1
    46c2:	60fb      	str	r3, [r7, #12]
    46c4:	4845      	ldr	r0, [pc, #276]	; (47dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
    46c6:	f7fe f95d 	bl	2984 <_PreparePacket>
    46ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
    46cc:	68bb      	ldr	r3, [r7, #8]
    46ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
    46d0:	687b      	ldr	r3, [r7, #4]
    46d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    46d4:	4b42      	ldr	r3, [pc, #264]	; (47e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
    46d6:	685b      	ldr	r3, [r3, #4]
    46d8:	62bb      	str	r3, [r7, #40]	; 0x28
    46da:	e00b      	b.n	46f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
    46dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    46de:	1c5a      	adds	r2, r3, #1
    46e0:	62fa      	str	r2, [r7, #44]	; 0x2c
    46e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    46e4:	b2d2      	uxtb	r2, r2
    46e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    46ea:	b2d2      	uxtb	r2, r2
    46ec:	701a      	strb	r2, [r3, #0]
    46ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    46f0:	09db      	lsrs	r3, r3, #7
    46f2:	62bb      	str	r3, [r7, #40]	; 0x28
    46f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    46f6:	2b7f      	cmp	r3, #127	; 0x7f
    46f8:	d8f0      	bhi.n	46dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
    46fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    46fc:	1c5a      	adds	r2, r3, #1
    46fe:	62fa      	str	r2, [r7, #44]	; 0x2c
    4700:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4702:	b2d2      	uxtb	r2, r2
    4704:	701a      	strb	r2, [r3, #0]
    4706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4708:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	627b      	str	r3, [r7, #36]	; 0x24
    470e:	4b34      	ldr	r3, [pc, #208]	; (47e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
    4710:	689b      	ldr	r3, [r3, #8]
    4712:	623b      	str	r3, [r7, #32]
    4714:	e00b      	b.n	472e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
    4716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4718:	1c5a      	adds	r2, r3, #1
    471a:	627a      	str	r2, [r7, #36]	; 0x24
    471c:	6a3a      	ldr	r2, [r7, #32]
    471e:	b2d2      	uxtb	r2, r2
    4720:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4724:	b2d2      	uxtb	r2, r2
    4726:	701a      	strb	r2, [r3, #0]
    4728:	6a3b      	ldr	r3, [r7, #32]
    472a:	09db      	lsrs	r3, r3, #7
    472c:	623b      	str	r3, [r7, #32]
    472e:	6a3b      	ldr	r3, [r7, #32]
    4730:	2b7f      	cmp	r3, #127	; 0x7f
    4732:	d8f0      	bhi.n	4716 <SEGGER_SYSVIEW_GetSysDesc+0x66>
    4734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4736:	1c5a      	adds	r2, r3, #1
    4738:	627a      	str	r2, [r7, #36]	; 0x24
    473a:	6a3a      	ldr	r2, [r7, #32]
    473c:	b2d2      	uxtb	r2, r2
    473e:	701a      	strb	r2, [r3, #0]
    4740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4742:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
    4744:	687b      	ldr	r3, [r7, #4]
    4746:	61fb      	str	r3, [r7, #28]
    4748:	4b25      	ldr	r3, [pc, #148]	; (47e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
    474a:	691b      	ldr	r3, [r3, #16]
    474c:	61bb      	str	r3, [r7, #24]
    474e:	e00b      	b.n	4768 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
    4750:	69fb      	ldr	r3, [r7, #28]
    4752:	1c5a      	adds	r2, r3, #1
    4754:	61fa      	str	r2, [r7, #28]
    4756:	69ba      	ldr	r2, [r7, #24]
    4758:	b2d2      	uxtb	r2, r2
    475a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    475e:	b2d2      	uxtb	r2, r2
    4760:	701a      	strb	r2, [r3, #0]
    4762:	69bb      	ldr	r3, [r7, #24]
    4764:	09db      	lsrs	r3, r3, #7
    4766:	61bb      	str	r3, [r7, #24]
    4768:	69bb      	ldr	r3, [r7, #24]
    476a:	2b7f      	cmp	r3, #127	; 0x7f
    476c:	d8f0      	bhi.n	4750 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
    476e:	69fb      	ldr	r3, [r7, #28]
    4770:	1c5a      	adds	r2, r3, #1
    4772:	61fa      	str	r2, [r7, #28]
    4774:	69ba      	ldr	r2, [r7, #24]
    4776:	b2d2      	uxtb	r2, r2
    4778:	701a      	strb	r2, [r3, #0]
    477a:	69fb      	ldr	r3, [r7, #28]
    477c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
    477e:	687b      	ldr	r3, [r7, #4]
    4780:	617b      	str	r3, [r7, #20]
    4782:	2302      	movs	r3, #2
    4784:	613b      	str	r3, [r7, #16]
    4786:	e00b      	b.n	47a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
    4788:	697b      	ldr	r3, [r7, #20]
    478a:	1c5a      	adds	r2, r3, #1
    478c:	617a      	str	r2, [r7, #20]
    478e:	693a      	ldr	r2, [r7, #16]
    4790:	b2d2      	uxtb	r2, r2
    4792:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4796:	b2d2      	uxtb	r2, r2
    4798:	701a      	strb	r2, [r3, #0]
    479a:	693b      	ldr	r3, [r7, #16]
    479c:	09db      	lsrs	r3, r3, #7
    479e:	613b      	str	r3, [r7, #16]
    47a0:	693b      	ldr	r3, [r7, #16]
    47a2:	2b7f      	cmp	r3, #127	; 0x7f
    47a4:	d8f0      	bhi.n	4788 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
    47a6:	697b      	ldr	r3, [r7, #20]
    47a8:	1c5a      	adds	r2, r3, #1
    47aa:	617a      	str	r2, [r7, #20]
    47ac:	693a      	ldr	r2, [r7, #16]
    47ae:	b2d2      	uxtb	r2, r2
    47b0:	701a      	strb	r2, [r3, #0]
    47b2:	697b      	ldr	r3, [r7, #20]
    47b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
    47b6:	2218      	movs	r2, #24
    47b8:	6879      	ldr	r1, [r7, #4]
    47ba:	68b8      	ldr	r0, [r7, #8]
    47bc:	f7fe f9be 	bl	2b3c <_SendPacket>
  RECORD_END();
    47c0:	68fb      	ldr	r3, [r7, #12]
    47c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
    47c6:	4b06      	ldr	r3, [pc, #24]	; (47e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
    47c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47ca:	2b00      	cmp	r3, #0
    47cc:	d002      	beq.n	47d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
    47ce:	4b04      	ldr	r3, [pc, #16]	; (47e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
    47d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47d2:	4798      	blx	r3
  }
}
    47d4:	bf00      	nop
    47d6:	3730      	adds	r7, #48	; 0x30
    47d8:	46bd      	mov	sp, r7
    47da:	bd80      	pop	{r7, pc}
    47dc:	20000930 	.word	0x20000930
    47e0:	20000900 	.word	0x20000900

000047e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
    47e4:	b580      	push	{r7, lr}
    47e6:	b092      	sub	sp, #72	; 0x48
    47e8:	af00      	add	r7, sp, #0
    47ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
    47ec:	f3ef 8311 	mrs	r3, BASEPRI
    47f0:	f04f 0150 	mov.w	r1, #80	; 0x50
    47f4:	f381 8811 	msr	BASEPRI, r1
    47f8:	617b      	str	r3, [r7, #20]
    47fa:	486b      	ldr	r0, [pc, #428]	; (49a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
    47fc:	f7fe f8c2 	bl	2984 <_PreparePacket>
    4800:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4802:	693b      	ldr	r3, [r7, #16]
    4804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
    4806:	68fb      	ldr	r3, [r7, #12]
    4808:	647b      	str	r3, [r7, #68]	; 0x44
    480a:	687b      	ldr	r3, [r7, #4]
    480c:	681a      	ldr	r2, [r3, #0]
    480e:	4b67      	ldr	r3, [pc, #412]	; (49ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
    4810:	691b      	ldr	r3, [r3, #16]
    4812:	1ad3      	subs	r3, r2, r3
    4814:	089b      	lsrs	r3, r3, #2
    4816:	643b      	str	r3, [r7, #64]	; 0x40
    4818:	e00b      	b.n	4832 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
    481a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    481c:	1c5a      	adds	r2, r3, #1
    481e:	647a      	str	r2, [r7, #68]	; 0x44
    4820:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4822:	b2d2      	uxtb	r2, r2
    4824:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4828:	b2d2      	uxtb	r2, r2
    482a:	701a      	strb	r2, [r3, #0]
    482c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    482e:	09db      	lsrs	r3, r3, #7
    4830:	643b      	str	r3, [r7, #64]	; 0x40
    4832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4834:	2b7f      	cmp	r3, #127	; 0x7f
    4836:	d8f0      	bhi.n	481a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
    4838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    483a:	1c5a      	adds	r2, r3, #1
    483c:	647a      	str	r2, [r7, #68]	; 0x44
    483e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    4840:	b2d2      	uxtb	r2, r2
    4842:	701a      	strb	r2, [r3, #0]
    4844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4846:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
    4848:	68fb      	ldr	r3, [r7, #12]
    484a:	63fb      	str	r3, [r7, #60]	; 0x3c
    484c:	687b      	ldr	r3, [r7, #4]
    484e:	689b      	ldr	r3, [r3, #8]
    4850:	63bb      	str	r3, [r7, #56]	; 0x38
    4852:	e00b      	b.n	486c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
    4854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4856:	1c5a      	adds	r2, r3, #1
    4858:	63fa      	str	r2, [r7, #60]	; 0x3c
    485a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    485c:	b2d2      	uxtb	r2, r2
    485e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4862:	b2d2      	uxtb	r2, r2
    4864:	701a      	strb	r2, [r3, #0]
    4866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4868:	09db      	lsrs	r3, r3, #7
    486a:	63bb      	str	r3, [r7, #56]	; 0x38
    486c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    486e:	2b7f      	cmp	r3, #127	; 0x7f
    4870:	d8f0      	bhi.n	4854 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
    4872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4874:	1c5a      	adds	r2, r3, #1
    4876:	63fa      	str	r2, [r7, #60]	; 0x3c
    4878:	6bba      	ldr	r2, [r7, #56]	; 0x38
    487a:	b2d2      	uxtb	r2, r2
    487c:	701a      	strb	r2, [r3, #0]
    487e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4880:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	685b      	ldr	r3, [r3, #4]
    4886:	2220      	movs	r2, #32
    4888:	4619      	mov	r1, r3
    488a:	68f8      	ldr	r0, [r7, #12]
    488c:	f7fe f82c 	bl	28e8 <_EncodeStr>
    4890:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
    4892:	2209      	movs	r2, #9
    4894:	68f9      	ldr	r1, [r7, #12]
    4896:	6938      	ldr	r0, [r7, #16]
    4898:	f7fe f950 	bl	2b3c <_SendPacket>
  //
  pPayload = pPayloadStart;
    489c:	693b      	ldr	r3, [r7, #16]
    489e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
    48a0:	68fb      	ldr	r3, [r7, #12]
    48a2:	637b      	str	r3, [r7, #52]	; 0x34
    48a4:	687b      	ldr	r3, [r7, #4]
    48a6:	681a      	ldr	r2, [r3, #0]
    48a8:	4b40      	ldr	r3, [pc, #256]	; (49ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
    48aa:	691b      	ldr	r3, [r3, #16]
    48ac:	1ad3      	subs	r3, r2, r3
    48ae:	089b      	lsrs	r3, r3, #2
    48b0:	633b      	str	r3, [r7, #48]	; 0x30
    48b2:	e00b      	b.n	48cc <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
    48b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48b6:	1c5a      	adds	r2, r3, #1
    48b8:	637a      	str	r2, [r7, #52]	; 0x34
    48ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    48bc:	b2d2      	uxtb	r2, r2
    48be:	f062 027f 	orn	r2, r2, #127	; 0x7f
    48c2:	b2d2      	uxtb	r2, r2
    48c4:	701a      	strb	r2, [r3, #0]
    48c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    48c8:	09db      	lsrs	r3, r3, #7
    48ca:	633b      	str	r3, [r7, #48]	; 0x30
    48cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    48ce:	2b7f      	cmp	r3, #127	; 0x7f
    48d0:	d8f0      	bhi.n	48b4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
    48d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48d4:	1c5a      	adds	r2, r3, #1
    48d6:	637a      	str	r2, [r7, #52]	; 0x34
    48d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    48da:	b2d2      	uxtb	r2, r2
    48dc:	701a      	strb	r2, [r3, #0]
    48de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    48e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
    48e2:	68fb      	ldr	r3, [r7, #12]
    48e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    48e6:	687b      	ldr	r3, [r7, #4]
    48e8:	68db      	ldr	r3, [r3, #12]
    48ea:	62bb      	str	r3, [r7, #40]	; 0x28
    48ec:	e00b      	b.n	4906 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
    48ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    48f0:	1c5a      	adds	r2, r3, #1
    48f2:	62fa      	str	r2, [r7, #44]	; 0x2c
    48f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    48f6:	b2d2      	uxtb	r2, r2
    48f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    48fc:	b2d2      	uxtb	r2, r2
    48fe:	701a      	strb	r2, [r3, #0]
    4900:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4902:	09db      	lsrs	r3, r3, #7
    4904:	62bb      	str	r3, [r7, #40]	; 0x28
    4906:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4908:	2b7f      	cmp	r3, #127	; 0x7f
    490a:	d8f0      	bhi.n	48ee <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
    490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    490e:	1c5a      	adds	r2, r3, #1
    4910:	62fa      	str	r2, [r7, #44]	; 0x2c
    4912:	6aba      	ldr	r2, [r7, #40]	; 0x28
    4914:	b2d2      	uxtb	r2, r2
    4916:	701a      	strb	r2, [r3, #0]
    4918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    491a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
    491c:	68fb      	ldr	r3, [r7, #12]
    491e:	627b      	str	r3, [r7, #36]	; 0x24
    4920:	687b      	ldr	r3, [r7, #4]
    4922:	691b      	ldr	r3, [r3, #16]
    4924:	623b      	str	r3, [r7, #32]
    4926:	e00b      	b.n	4940 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
    4928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    492a:	1c5a      	adds	r2, r3, #1
    492c:	627a      	str	r2, [r7, #36]	; 0x24
    492e:	6a3a      	ldr	r2, [r7, #32]
    4930:	b2d2      	uxtb	r2, r2
    4932:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4936:	b2d2      	uxtb	r2, r2
    4938:	701a      	strb	r2, [r3, #0]
    493a:	6a3b      	ldr	r3, [r7, #32]
    493c:	09db      	lsrs	r3, r3, #7
    493e:	623b      	str	r3, [r7, #32]
    4940:	6a3b      	ldr	r3, [r7, #32]
    4942:	2b7f      	cmp	r3, #127	; 0x7f
    4944:	d8f0      	bhi.n	4928 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
    4946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4948:	1c5a      	adds	r2, r3, #1
    494a:	627a      	str	r2, [r7, #36]	; 0x24
    494c:	6a3a      	ldr	r2, [r7, #32]
    494e:	b2d2      	uxtb	r2, r2
    4950:	701a      	strb	r2, [r3, #0]
    4952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4954:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
    4956:	68fb      	ldr	r3, [r7, #12]
    4958:	61fb      	str	r3, [r7, #28]
    495a:	2300      	movs	r3, #0
    495c:	61bb      	str	r3, [r7, #24]
    495e:	e00b      	b.n	4978 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
    4960:	69fb      	ldr	r3, [r7, #28]
    4962:	1c5a      	adds	r2, r3, #1
    4964:	61fa      	str	r2, [r7, #28]
    4966:	69ba      	ldr	r2, [r7, #24]
    4968:	b2d2      	uxtb	r2, r2
    496a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    496e:	b2d2      	uxtb	r2, r2
    4970:	701a      	strb	r2, [r3, #0]
    4972:	69bb      	ldr	r3, [r7, #24]
    4974:	09db      	lsrs	r3, r3, #7
    4976:	61bb      	str	r3, [r7, #24]
    4978:	69bb      	ldr	r3, [r7, #24]
    497a:	2b7f      	cmp	r3, #127	; 0x7f
    497c:	d8f0      	bhi.n	4960 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
    497e:	69fb      	ldr	r3, [r7, #28]
    4980:	1c5a      	adds	r2, r3, #1
    4982:	61fa      	str	r2, [r7, #28]
    4984:	69ba      	ldr	r2, [r7, #24]
    4986:	b2d2      	uxtb	r2, r2
    4988:	701a      	strb	r2, [r3, #0]
    498a:	69fb      	ldr	r3, [r7, #28]
    498c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
    498e:	2215      	movs	r2, #21
    4990:	68f9      	ldr	r1, [r7, #12]
    4992:	6938      	ldr	r0, [r7, #16]
    4994:	f7fe f8d2 	bl	2b3c <_SendPacket>
  RECORD_END();
    4998:	697b      	ldr	r3, [r7, #20]
    499a:	f383 8811 	msr	BASEPRI, r3
}
    499e:	bf00      	nop
    49a0:	3748      	adds	r7, #72	; 0x48
    49a2:	46bd      	mov	sp, r7
    49a4:	bd80      	pop	{r7, pc}
    49a6:	bf00      	nop
    49a8:	20000930 	.word	0x20000930
    49ac:	20000900 	.word	0x20000900

000049b0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
    49b0:	b580      	push	{r7, lr}
    49b2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
    49b4:	4b07      	ldr	r3, [pc, #28]	; (49d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
    49b6:	6a1b      	ldr	r3, [r3, #32]
    49b8:	2b00      	cmp	r3, #0
    49ba:	d008      	beq.n	49ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    49bc:	4b05      	ldr	r3, [pc, #20]	; (49d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
    49be:	6a1b      	ldr	r3, [r3, #32]
    49c0:	685b      	ldr	r3, [r3, #4]
    49c2:	2b00      	cmp	r3, #0
    49c4:	d003      	beq.n	49ce <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
    49c6:	4b03      	ldr	r3, [pc, #12]	; (49d4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
    49c8:	6a1b      	ldr	r3, [r3, #32]
    49ca:	685b      	ldr	r3, [r3, #4]
    49cc:	4798      	blx	r3
  }
}
    49ce:	bf00      	nop
    49d0:	bd80      	pop	{r7, pc}
    49d2:	bf00      	nop
    49d4:	20000900 	.word	0x20000900

000049d8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
    49d8:	b580      	push	{r7, lr}
    49da:	b086      	sub	sp, #24
    49dc:	af00      	add	r7, sp, #0
    49de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    49e0:	f3ef 8311 	mrs	r3, BASEPRI
    49e4:	f04f 0150 	mov.w	r1, #80	; 0x50
    49e8:	f381 8811 	msr	BASEPRI, r1
    49ec:	617b      	str	r3, [r7, #20]
    49ee:	480b      	ldr	r0, [pc, #44]	; (4a1c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
    49f0:	f7fd ffc8 	bl	2984 <_PreparePacket>
    49f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
    49f6:	2280      	movs	r2, #128	; 0x80
    49f8:	6879      	ldr	r1, [r7, #4]
    49fa:	6938      	ldr	r0, [r7, #16]
    49fc:	f7fd ff74 	bl	28e8 <_EncodeStr>
    4a00:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
    4a02:	220e      	movs	r2, #14
    4a04:	68f9      	ldr	r1, [r7, #12]
    4a06:	6938      	ldr	r0, [r7, #16]
    4a08:	f7fe f898 	bl	2b3c <_SendPacket>
  RECORD_END();
    4a0c:	697b      	ldr	r3, [r7, #20]
    4a0e:	f383 8811 	msr	BASEPRI, r3
}
    4a12:	bf00      	nop
    4a14:	3718      	adds	r7, #24
    4a16:	46bd      	mov	sp, r7
    4a18:	bd80      	pop	{r7, pc}
    4a1a:	bf00      	nop
    4a1c:	20000930 	.word	0x20000930

00004a20 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
    4a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a22:	b083      	sub	sp, #12
    4a24:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
    4a26:	4b12      	ldr	r3, [pc, #72]	; (4a70 <SEGGER_SYSVIEW_RecordSystime+0x50>)
    4a28:	6a1b      	ldr	r3, [r3, #32]
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d015      	beq.n	4a5a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    4a2e:	4b10      	ldr	r3, [pc, #64]	; (4a70 <SEGGER_SYSVIEW_RecordSystime+0x50>)
    4a30:	6a1b      	ldr	r3, [r3, #32]
    4a32:	681b      	ldr	r3, [r3, #0]
    4a34:	2b00      	cmp	r3, #0
    4a36:	d010      	beq.n	4a5a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
    4a38:	4b0d      	ldr	r3, [pc, #52]	; (4a70 <SEGGER_SYSVIEW_RecordSystime+0x50>)
    4a3a:	6a1b      	ldr	r3, [r3, #32]
    4a3c:	681b      	ldr	r3, [r3, #0]
    4a3e:	4798      	blx	r3
    4a40:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
    4a44:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
    4a46:	e897 0018 	ldmia.w	r7, {r3, r4}
    4a4a:	0025      	movs	r5, r4
    4a4c:	2600      	movs	r6, #0
void SEGGER_SYSVIEW_RecordSystime(void) {
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
    4a4e:	462b      	mov	r3, r5
    4a50:	461a      	mov	r2, r3
    4a52:	200d      	movs	r0, #13
    4a54:	f7fe fe04 	bl	3660 <SEGGER_SYSVIEW_RecordU32x2>
    4a58:	e006      	b.n	4a68 <SEGGER_SYSVIEW_RecordSystime+0x48>
                               (U32)(Systime),
                               (U32)(Systime >> 32));
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
    4a5a:	4b06      	ldr	r3, [pc, #24]	; (4a74 <SEGGER_SYSVIEW_RecordSystime+0x54>)
    4a5c:	681b      	ldr	r3, [r3, #0]
    4a5e:	091b      	lsrs	r3, r3, #4
    4a60:	4619      	mov	r1, r3
    4a62:	200c      	movs	r0, #12
    4a64:	f7fe fdc0 	bl	35e8 <SEGGER_SYSVIEW_RecordU32>
  }
}
    4a68:	bf00      	nop
    4a6a:	370c      	adds	r7, #12
    4a6c:	46bd      	mov	sp, r7
    4a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a70:	20000900 	.word	0x20000900
    4a74:	e0001004 	.word	0xe0001004

00004a78 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
    4a78:	b580      	push	{r7, lr}
    4a7a:	b086      	sub	sp, #24
    4a7c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    4a7e:	f3ef 8311 	mrs	r3, BASEPRI
    4a82:	f04f 0150 	mov.w	r1, #80	; 0x50
    4a86:	f381 8811 	msr	BASEPRI, r1
    4a8a:	60fb      	str	r3, [r7, #12]
    4a8c:	4819      	ldr	r0, [pc, #100]	; (4af4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
    4a8e:	f7fd ff79 	bl	2984 <_PreparePacket>
    4a92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
    4a94:	68bb      	ldr	r3, [r7, #8]
    4a96:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
    4a98:	4b17      	ldr	r3, [pc, #92]	; (4af8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
    4a9a:	681b      	ldr	r3, [r3, #0]
    4a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4aa0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	617b      	str	r3, [r7, #20]
    4aa6:	683b      	ldr	r3, [r7, #0]
    4aa8:	613b      	str	r3, [r7, #16]
    4aaa:	e00b      	b.n	4ac4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
    4aac:	697b      	ldr	r3, [r7, #20]
    4aae:	1c5a      	adds	r2, r3, #1
    4ab0:	617a      	str	r2, [r7, #20]
    4ab2:	693a      	ldr	r2, [r7, #16]
    4ab4:	b2d2      	uxtb	r2, r2
    4ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4aba:	b2d2      	uxtb	r2, r2
    4abc:	701a      	strb	r2, [r3, #0]
    4abe:	693b      	ldr	r3, [r7, #16]
    4ac0:	09db      	lsrs	r3, r3, #7
    4ac2:	613b      	str	r3, [r7, #16]
    4ac4:	693b      	ldr	r3, [r7, #16]
    4ac6:	2b7f      	cmp	r3, #127	; 0x7f
    4ac8:	d8f0      	bhi.n	4aac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
    4aca:	697b      	ldr	r3, [r7, #20]
    4acc:	1c5a      	adds	r2, r3, #1
    4ace:	617a      	str	r2, [r7, #20]
    4ad0:	693a      	ldr	r2, [r7, #16]
    4ad2:	b2d2      	uxtb	r2, r2
    4ad4:	701a      	strb	r2, [r3, #0]
    4ad6:	697b      	ldr	r3, [r7, #20]
    4ad8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
    4ada:	2202      	movs	r2, #2
    4adc:	6879      	ldr	r1, [r7, #4]
    4ade:	68b8      	ldr	r0, [r7, #8]
    4ae0:	f7fe f82c 	bl	2b3c <_SendPacket>
  RECORD_END();
    4ae4:	68fb      	ldr	r3, [r7, #12]
    4ae6:	f383 8811 	msr	BASEPRI, r3
}
    4aea:	bf00      	nop
    4aec:	3718      	adds	r7, #24
    4aee:	46bd      	mov	sp, r7
    4af0:	bd80      	pop	{r7, pc}
    4af2:	bf00      	nop
    4af4:	20000930 	.word	0x20000930
    4af8:	e000ed04 	.word	0xe000ed04

00004afc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
    4afc:	b580      	push	{r7, lr}
    4afe:	b082      	sub	sp, #8
    4b00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
    4b02:	f3ef 8311 	mrs	r3, BASEPRI
    4b06:	f04f 0150 	mov.w	r1, #80	; 0x50
    4b0a:	f381 8811 	msr	BASEPRI, r1
    4b0e:	607b      	str	r3, [r7, #4]
    4b10:	4807      	ldr	r0, [pc, #28]	; (4b30 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
    4b12:	f7fd ff37 	bl	2984 <_PreparePacket>
    4b16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
    4b18:	2203      	movs	r2, #3
    4b1a:	6839      	ldr	r1, [r7, #0]
    4b1c:	6838      	ldr	r0, [r7, #0]
    4b1e:	f7fe f80d 	bl	2b3c <_SendPacket>
  RECORD_END();
    4b22:	687b      	ldr	r3, [r7, #4]
    4b24:	f383 8811 	msr	BASEPRI, r3
}
    4b28:	bf00      	nop
    4b2a:	3708      	adds	r7, #8
    4b2c:	46bd      	mov	sp, r7
    4b2e:	bd80      	pop	{r7, pc}
    4b30:	20000930 	.word	0x20000930

00004b34 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
    4b34:	b580      	push	{r7, lr}
    4b36:	b082      	sub	sp, #8
    4b38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
    4b3a:	f3ef 8311 	mrs	r3, BASEPRI
    4b3e:	f04f 0150 	mov.w	r1, #80	; 0x50
    4b42:	f381 8811 	msr	BASEPRI, r1
    4b46:	607b      	str	r3, [r7, #4]
    4b48:	4807      	ldr	r0, [pc, #28]	; (4b68 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
    4b4a:	f7fd ff1b 	bl	2984 <_PreparePacket>
    4b4e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
    4b50:	2212      	movs	r2, #18
    4b52:	6839      	ldr	r1, [r7, #0]
    4b54:	6838      	ldr	r0, [r7, #0]
    4b56:	f7fd fff1 	bl	2b3c <_SendPacket>
  RECORD_END();
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	f383 8811 	msr	BASEPRI, r3
}
    4b60:	bf00      	nop
    4b62:	3708      	adds	r7, #8
    4b64:	46bd      	mov	sp, r7
    4b66:	bd80      	pop	{r7, pc}
    4b68:	20000930 	.word	0x20000930

00004b6c <SEGGER_SYSVIEW_RecordEnterTimer>:
*    Format and send a Timer entry event.
*  
*  Parameters
*    TimerId - Id of the timer which starts.
*/
void SEGGER_SYSVIEW_RecordEnterTimer(U32 TimerId) {
    4b6c:	b580      	push	{r7, lr}
    4b6e:	b088      	sub	sp, #32
    4b70:	af00      	add	r7, sp, #0
    4b72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    4b74:	f3ef 8311 	mrs	r3, BASEPRI
    4b78:	f04f 0150 	mov.w	r1, #80	; 0x50
    4b7c:	f381 8811 	msr	BASEPRI, r1
    4b80:	617b      	str	r3, [r7, #20]
    4b82:	4819      	ldr	r0, [pc, #100]	; (4be8 <SEGGER_SYSVIEW_RecordEnterTimer+0x7c>)
    4b84:	f7fd fefe 	bl	2984 <_PreparePacket>
    4b88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4b8a:	693b      	ldr	r3, [r7, #16]
    4b8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(TimerId));
    4b8e:	68fb      	ldr	r3, [r7, #12]
    4b90:	61fb      	str	r3, [r7, #28]
    4b92:	4b16      	ldr	r3, [pc, #88]	; (4bec <SEGGER_SYSVIEW_RecordEnterTimer+0x80>)
    4b94:	691b      	ldr	r3, [r3, #16]
    4b96:	687a      	ldr	r2, [r7, #4]
    4b98:	1ad3      	subs	r3, r2, r3
    4b9a:	089b      	lsrs	r3, r3, #2
    4b9c:	61bb      	str	r3, [r7, #24]
    4b9e:	e00b      	b.n	4bb8 <SEGGER_SYSVIEW_RecordEnterTimer+0x4c>
    4ba0:	69fb      	ldr	r3, [r7, #28]
    4ba2:	1c5a      	adds	r2, r3, #1
    4ba4:	61fa      	str	r2, [r7, #28]
    4ba6:	69ba      	ldr	r2, [r7, #24]
    4ba8:	b2d2      	uxtb	r2, r2
    4baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4bae:	b2d2      	uxtb	r2, r2
    4bb0:	701a      	strb	r2, [r3, #0]
    4bb2:	69bb      	ldr	r3, [r7, #24]
    4bb4:	09db      	lsrs	r3, r3, #7
    4bb6:	61bb      	str	r3, [r7, #24]
    4bb8:	69bb      	ldr	r3, [r7, #24]
    4bba:	2b7f      	cmp	r3, #127	; 0x7f
    4bbc:	d8f0      	bhi.n	4ba0 <SEGGER_SYSVIEW_RecordEnterTimer+0x34>
    4bbe:	69fb      	ldr	r3, [r7, #28]
    4bc0:	1c5a      	adds	r2, r3, #1
    4bc2:	61fa      	str	r2, [r7, #28]
    4bc4:	69ba      	ldr	r2, [r7, #24]
    4bc6:	b2d2      	uxtb	r2, r2
    4bc8:	701a      	strb	r2, [r3, #0]
    4bca:	69fb      	ldr	r3, [r7, #28]
    4bcc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TIMER_ENTER);
    4bce:	2213      	movs	r2, #19
    4bd0:	68f9      	ldr	r1, [r7, #12]
    4bd2:	6938      	ldr	r0, [r7, #16]
    4bd4:	f7fd ffb2 	bl	2b3c <_SendPacket>
  RECORD_END();
    4bd8:	697b      	ldr	r3, [r7, #20]
    4bda:	f383 8811 	msr	BASEPRI, r3
}
    4bde:	bf00      	nop
    4be0:	3720      	adds	r7, #32
    4be2:	46bd      	mov	sp, r7
    4be4:	bd80      	pop	{r7, pc}
    4be6:	bf00      	nop
    4be8:	20000930 	.word	0x20000930
    4bec:	20000900 	.word	0x20000900

00004bf0 <SEGGER_SYSVIEW_RecordExitTimer>:
*       SEGGER_SYSVIEW_RecordExitTimer()
*
*  Function description
*    Format and send a Timer exit event.
*/
void SEGGER_SYSVIEW_RecordExitTimer(void) {
    4bf0:	b580      	push	{r7, lr}
    4bf2:	b082      	sub	sp, #8
    4bf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
    4bf6:	f3ef 8311 	mrs	r3, BASEPRI
    4bfa:	f04f 0150 	mov.w	r1, #80	; 0x50
    4bfe:	f381 8811 	msr	BASEPRI, r1
    4c02:	607b      	str	r3, [r7, #4]
    4c04:	4807      	ldr	r0, [pc, #28]	; (4c24 <SEGGER_SYSVIEW_RecordExitTimer+0x34>)
    4c06:	f7fd febd 	bl	2984 <_PreparePacket>
    4c0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TIMER_EXIT);
    4c0c:	2214      	movs	r2, #20
    4c0e:	6839      	ldr	r1, [r7, #0]
    4c10:	6838      	ldr	r0, [r7, #0]
    4c12:	f7fd ff93 	bl	2b3c <_SendPacket>
  RECORD_END();
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	f383 8811 	msr	BASEPRI, r3
}
    4c1c:	bf00      	nop
    4c1e:	3708      	adds	r7, #8
    4c20:	46bd      	mov	sp, r7
    4c22:	bd80      	pop	{r7, pc}
    4c24:	20000930 	.word	0x20000930

00004c28 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*  
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned EventID) {
    4c28:	b580      	push	{r7, lr}
    4c2a:	b088      	sub	sp, #32
    4c2c:	af00      	add	r7, sp, #0
    4c2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    4c30:	f3ef 8311 	mrs	r3, BASEPRI
    4c34:	f04f 0150 	mov.w	r1, #80	; 0x50
    4c38:	f381 8811 	msr	BASEPRI, r1
    4c3c:	617b      	str	r3, [r7, #20]
    4c3e:	4817      	ldr	r0, [pc, #92]	; (4c9c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
    4c40:	f7fd fea0 	bl	2984 <_PreparePacket>
    4c44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4c46:	693b      	ldr	r3, [r7, #16]
    4c48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
    4c4a:	68fb      	ldr	r3, [r7, #12]
    4c4c:	61fb      	str	r3, [r7, #28]
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	61bb      	str	r3, [r7, #24]
    4c52:	e00b      	b.n	4c6c <SEGGER_SYSVIEW_RecordEndCall+0x44>
    4c54:	69fb      	ldr	r3, [r7, #28]
    4c56:	1c5a      	adds	r2, r3, #1
    4c58:	61fa      	str	r2, [r7, #28]
    4c5a:	69ba      	ldr	r2, [r7, #24]
    4c5c:	b2d2      	uxtb	r2, r2
    4c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4c62:	b2d2      	uxtb	r2, r2
    4c64:	701a      	strb	r2, [r3, #0]
    4c66:	69bb      	ldr	r3, [r7, #24]
    4c68:	09db      	lsrs	r3, r3, #7
    4c6a:	61bb      	str	r3, [r7, #24]
    4c6c:	69bb      	ldr	r3, [r7, #24]
    4c6e:	2b7f      	cmp	r3, #127	; 0x7f
    4c70:	d8f0      	bhi.n	4c54 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
    4c72:	69fb      	ldr	r3, [r7, #28]
    4c74:	1c5a      	adds	r2, r3, #1
    4c76:	61fa      	str	r2, [r7, #28]
    4c78:	69ba      	ldr	r2, [r7, #24]
    4c7a:	b2d2      	uxtb	r2, r2
    4c7c:	701a      	strb	r2, [r3, #0]
    4c7e:	69fb      	ldr	r3, [r7, #28]
    4c80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
    4c82:	221c      	movs	r2, #28
    4c84:	68f9      	ldr	r1, [r7, #12]
    4c86:	6938      	ldr	r0, [r7, #16]
    4c88:	f7fd ff58 	bl	2b3c <_SendPacket>
  RECORD_END();
    4c8c:	697b      	ldr	r3, [r7, #20]
    4c8e:	f383 8811 	msr	BASEPRI, r3
}
    4c92:	bf00      	nop
    4c94:	3720      	adds	r7, #32
    4c96:	46bd      	mov	sp, r7
    4c98:	bd80      	pop	{r7, pc}
    4c9a:	bf00      	nop
    4c9c:	20000930 	.word	0x20000930

00004ca0 <SEGGER_SYSVIEW_RecordEndCallU32>:
*  
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned EventID, U32 Para0) {
    4ca0:	b580      	push	{r7, lr}
    4ca2:	b08a      	sub	sp, #40	; 0x28
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]
    4ca8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
    4caa:	f3ef 8311 	mrs	r3, BASEPRI
    4cae:	f04f 0150 	mov.w	r1, #80	; 0x50
    4cb2:	f381 8811 	msr	BASEPRI, r1
    4cb6:	617b      	str	r3, [r7, #20]
    4cb8:	4824      	ldr	r0, [pc, #144]	; (4d4c <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
    4cba:	f7fd fe63 	bl	2984 <_PreparePacket>
    4cbe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4cc0:	693b      	ldr	r3, [r7, #16]
    4cc2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
    4cc4:	68fb      	ldr	r3, [r7, #12]
    4cc6:	627b      	str	r3, [r7, #36]	; 0x24
    4cc8:	687b      	ldr	r3, [r7, #4]
    4cca:	623b      	str	r3, [r7, #32]
    4ccc:	e00b      	b.n	4ce6 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
    4cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cd0:	1c5a      	adds	r2, r3, #1
    4cd2:	627a      	str	r2, [r7, #36]	; 0x24
    4cd4:	6a3a      	ldr	r2, [r7, #32]
    4cd6:	b2d2      	uxtb	r2, r2
    4cd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4cdc:	b2d2      	uxtb	r2, r2
    4cde:	701a      	strb	r2, [r3, #0]
    4ce0:	6a3b      	ldr	r3, [r7, #32]
    4ce2:	09db      	lsrs	r3, r3, #7
    4ce4:	623b      	str	r3, [r7, #32]
    4ce6:	6a3b      	ldr	r3, [r7, #32]
    4ce8:	2b7f      	cmp	r3, #127	; 0x7f
    4cea:	d8f0      	bhi.n	4cce <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
    4cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cee:	1c5a      	adds	r2, r3, #1
    4cf0:	627a      	str	r2, [r7, #36]	; 0x24
    4cf2:	6a3a      	ldr	r2, [r7, #32]
    4cf4:	b2d2      	uxtb	r2, r2
    4cf6:	701a      	strb	r2, [r3, #0]
    4cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4cfa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
    4cfc:	68fb      	ldr	r3, [r7, #12]
    4cfe:	61fb      	str	r3, [r7, #28]
    4d00:	683b      	ldr	r3, [r7, #0]
    4d02:	61bb      	str	r3, [r7, #24]
    4d04:	e00b      	b.n	4d1e <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
    4d06:	69fb      	ldr	r3, [r7, #28]
    4d08:	1c5a      	adds	r2, r3, #1
    4d0a:	61fa      	str	r2, [r7, #28]
    4d0c:	69ba      	ldr	r2, [r7, #24]
    4d0e:	b2d2      	uxtb	r2, r2
    4d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4d14:	b2d2      	uxtb	r2, r2
    4d16:	701a      	strb	r2, [r3, #0]
    4d18:	69bb      	ldr	r3, [r7, #24]
    4d1a:	09db      	lsrs	r3, r3, #7
    4d1c:	61bb      	str	r3, [r7, #24]
    4d1e:	69bb      	ldr	r3, [r7, #24]
    4d20:	2b7f      	cmp	r3, #127	; 0x7f
    4d22:	d8f0      	bhi.n	4d06 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
    4d24:	69fb      	ldr	r3, [r7, #28]
    4d26:	1c5a      	adds	r2, r3, #1
    4d28:	61fa      	str	r2, [r7, #28]
    4d2a:	69ba      	ldr	r2, [r7, #24]
    4d2c:	b2d2      	uxtb	r2, r2
    4d2e:	701a      	strb	r2, [r3, #0]
    4d30:	69fb      	ldr	r3, [r7, #28]
    4d32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
    4d34:	221c      	movs	r2, #28
    4d36:	68f9      	ldr	r1, [r7, #12]
    4d38:	6938      	ldr	r0, [r7, #16]
    4d3a:	f7fd feff 	bl	2b3c <_SendPacket>
  RECORD_END();
    4d3e:	697b      	ldr	r3, [r7, #20]
    4d40:	f383 8811 	msr	BASEPRI, r3
}
    4d44:	bf00      	nop
    4d46:	3728      	adds	r7, #40	; 0x28
    4d48:	46bd      	mov	sp, r7
    4d4a:	bd80      	pop	{r7, pc}
    4d4c:	20000930 	.word	0x20000930

00004d50 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
    4d50:	b580      	push	{r7, lr}
    4d52:	b082      	sub	sp, #8
    4d54:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
    4d56:	f3ef 8311 	mrs	r3, BASEPRI
    4d5a:	f04f 0150 	mov.w	r1, #80	; 0x50
    4d5e:	f381 8811 	msr	BASEPRI, r1
    4d62:	607b      	str	r3, [r7, #4]
    4d64:	4807      	ldr	r0, [pc, #28]	; (4d84 <SEGGER_SYSVIEW_OnIdle+0x34>)
    4d66:	f7fd fe0d 	bl	2984 <_PreparePacket>
    4d6a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
    4d6c:	2211      	movs	r2, #17
    4d6e:	6839      	ldr	r1, [r7, #0]
    4d70:	6838      	ldr	r0, [r7, #0]
    4d72:	f7fd fee3 	bl	2b3c <_SendPacket>
  RECORD_END();
    4d76:	687b      	ldr	r3, [r7, #4]
    4d78:	f383 8811 	msr	BASEPRI, r3
}
    4d7c:	bf00      	nop
    4d7e:	3708      	adds	r7, #8
    4d80:	46bd      	mov	sp, r7
    4d82:	bd80      	pop	{r7, pc}
    4d84:	20000930 	.word	0x20000930

00004d88 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(unsigned TaskId) {
    4d88:	b580      	push	{r7, lr}
    4d8a:	b088      	sub	sp, #32
    4d8c:	af00      	add	r7, sp, #0
    4d8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    4d90:	f3ef 8311 	mrs	r3, BASEPRI
    4d94:	f04f 0150 	mov.w	r1, #80	; 0x50
    4d98:	f381 8811 	msr	BASEPRI, r1
    4d9c:	617b      	str	r3, [r7, #20]
    4d9e:	481a      	ldr	r0, [pc, #104]	; (4e08 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
    4da0:	f7fd fdf0 	bl	2984 <_PreparePacket>
    4da4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4da6:	693b      	ldr	r3, [r7, #16]
    4da8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
    4daa:	4b18      	ldr	r3, [pc, #96]	; (4e0c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
    4dac:	691b      	ldr	r3, [r3, #16]
    4dae:	687a      	ldr	r2, [r7, #4]
    4db0:	1ad3      	subs	r3, r2, r3
    4db2:	089b      	lsrs	r3, r3, #2
    4db4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
    4db6:	68fb      	ldr	r3, [r7, #12]
    4db8:	61fb      	str	r3, [r7, #28]
    4dba:	687b      	ldr	r3, [r7, #4]
    4dbc:	61bb      	str	r3, [r7, #24]
    4dbe:	e00b      	b.n	4dd8 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
    4dc0:	69fb      	ldr	r3, [r7, #28]
    4dc2:	1c5a      	adds	r2, r3, #1
    4dc4:	61fa      	str	r2, [r7, #28]
    4dc6:	69ba      	ldr	r2, [r7, #24]
    4dc8:	b2d2      	uxtb	r2, r2
    4dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4dce:	b2d2      	uxtb	r2, r2
    4dd0:	701a      	strb	r2, [r3, #0]
    4dd2:	69bb      	ldr	r3, [r7, #24]
    4dd4:	09db      	lsrs	r3, r3, #7
    4dd6:	61bb      	str	r3, [r7, #24]
    4dd8:	69bb      	ldr	r3, [r7, #24]
    4dda:	2b7f      	cmp	r3, #127	; 0x7f
    4ddc:	d8f0      	bhi.n	4dc0 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
    4dde:	69fb      	ldr	r3, [r7, #28]
    4de0:	1c5a      	adds	r2, r3, #1
    4de2:	61fa      	str	r2, [r7, #28]
    4de4:	69ba      	ldr	r2, [r7, #24]
    4de6:	b2d2      	uxtb	r2, r2
    4de8:	701a      	strb	r2, [r3, #0]
    4dea:	69fb      	ldr	r3, [r7, #28]
    4dec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
    4dee:	2208      	movs	r2, #8
    4df0:	68f9      	ldr	r1, [r7, #12]
    4df2:	6938      	ldr	r0, [r7, #16]
    4df4:	f7fd fea2 	bl	2b3c <_SendPacket>
  RECORD_END();
    4df8:	697b      	ldr	r3, [r7, #20]
    4dfa:	f383 8811 	msr	BASEPRI, r3
}
    4dfe:	bf00      	nop
    4e00:	3720      	adds	r7, #32
    4e02:	46bd      	mov	sp, r7
    4e04:	bd80      	pop	{r7, pc}
    4e06:	bf00      	nop
    4e08:	20000930 	.word	0x20000930
    4e0c:	20000900 	.word	0x20000900

00004e10 <SEGGER_SYSVIEW_OnTaskTerminate>:
*    SEGGER_SYSVIEW_OnTaskStopExec may be used, either.
*
*  Parameters
*    TaskId        - Task ID of terminated task.
*/
void SEGGER_SYSVIEW_OnTaskTerminate(unsigned TaskId) {
    4e10:	b580      	push	{r7, lr}
    4e12:	b088      	sub	sp, #32
    4e14:	af00      	add	r7, sp, #0
    4e16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    4e18:	f3ef 8311 	mrs	r3, BASEPRI
    4e1c:	f04f 0150 	mov.w	r1, #80	; 0x50
    4e20:	f381 8811 	msr	BASEPRI, r1
    4e24:	617b      	str	r3, [r7, #20]
    4e26:	481a      	ldr	r0, [pc, #104]	; (4e90 <SEGGER_SYSVIEW_OnTaskTerminate+0x80>)
    4e28:	f7fd fdac 	bl	2984 <_PreparePacket>
    4e2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4e2e:	693b      	ldr	r3, [r7, #16]
    4e30:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
    4e32:	4b18      	ldr	r3, [pc, #96]	; (4e94 <SEGGER_SYSVIEW_OnTaskTerminate+0x84>)
    4e34:	691b      	ldr	r3, [r3, #16]
    4e36:	687a      	ldr	r2, [r7, #4]
    4e38:	1ad3      	subs	r3, r2, r3
    4e3a:	089b      	lsrs	r3, r3, #2
    4e3c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
    4e3e:	68fb      	ldr	r3, [r7, #12]
    4e40:	61fb      	str	r3, [r7, #28]
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	61bb      	str	r3, [r7, #24]
    4e46:	e00b      	b.n	4e60 <SEGGER_SYSVIEW_OnTaskTerminate+0x50>
    4e48:	69fb      	ldr	r3, [r7, #28]
    4e4a:	1c5a      	adds	r2, r3, #1
    4e4c:	61fa      	str	r2, [r7, #28]
    4e4e:	69ba      	ldr	r2, [r7, #24]
    4e50:	b2d2      	uxtb	r2, r2
    4e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4e56:	b2d2      	uxtb	r2, r2
    4e58:	701a      	strb	r2, [r3, #0]
    4e5a:	69bb      	ldr	r3, [r7, #24]
    4e5c:	09db      	lsrs	r3, r3, #7
    4e5e:	61bb      	str	r3, [r7, #24]
    4e60:	69bb      	ldr	r3, [r7, #24]
    4e62:	2b7f      	cmp	r3, #127	; 0x7f
    4e64:	d8f0      	bhi.n	4e48 <SEGGER_SYSVIEW_OnTaskTerminate+0x38>
    4e66:	69fb      	ldr	r3, [r7, #28]
    4e68:	1c5a      	adds	r2, r3, #1
    4e6a:	61fa      	str	r2, [r7, #28]
    4e6c:	69ba      	ldr	r2, [r7, #24]
    4e6e:	b2d2      	uxtb	r2, r2
    4e70:	701a      	strb	r2, [r3, #0]
    4e72:	69fb      	ldr	r3, [r7, #28]
    4e74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_TERMINATE);
    4e76:	221d      	movs	r2, #29
    4e78:	68f9      	ldr	r1, [r7, #12]
    4e7a:	6938      	ldr	r0, [r7, #16]
    4e7c:	f7fd fe5e 	bl	2b3c <_SendPacket>
  RECORD_END();
    4e80:	697b      	ldr	r3, [r7, #20]
    4e82:	f383 8811 	msr	BASEPRI, r3
}
    4e86:	bf00      	nop
    4e88:	3720      	adds	r7, #32
    4e8a:	46bd      	mov	sp, r7
    4e8c:	bd80      	pop	{r7, pc}
    4e8e:	bf00      	nop
    4e90:	20000930 	.word	0x20000930
    4e94:	20000900 	.word	0x20000900

00004e98 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(unsigned TaskId) {
    4e98:	b580      	push	{r7, lr}
    4e9a:	b088      	sub	sp, #32
    4e9c:	af00      	add	r7, sp, #0
    4e9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    4ea0:	f3ef 8311 	mrs	r3, BASEPRI
    4ea4:	f04f 0150 	mov.w	r1, #80	; 0x50
    4ea8:	f381 8811 	msr	BASEPRI, r1
    4eac:	617b      	str	r3, [r7, #20]
    4eae:	481a      	ldr	r0, [pc, #104]	; (4f18 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
    4eb0:	f7fd fd68 	bl	2984 <_PreparePacket>
    4eb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4eb6:	693b      	ldr	r3, [r7, #16]
    4eb8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
    4eba:	4b18      	ldr	r3, [pc, #96]	; (4f1c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
    4ebc:	691b      	ldr	r3, [r3, #16]
    4ebe:	687a      	ldr	r2, [r7, #4]
    4ec0:	1ad3      	subs	r3, r2, r3
    4ec2:	089b      	lsrs	r3, r3, #2
    4ec4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
    4ec6:	68fb      	ldr	r3, [r7, #12]
    4ec8:	61fb      	str	r3, [r7, #28]
    4eca:	687b      	ldr	r3, [r7, #4]
    4ecc:	61bb      	str	r3, [r7, #24]
    4ece:	e00b      	b.n	4ee8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
    4ed0:	69fb      	ldr	r3, [r7, #28]
    4ed2:	1c5a      	adds	r2, r3, #1
    4ed4:	61fa      	str	r2, [r7, #28]
    4ed6:	69ba      	ldr	r2, [r7, #24]
    4ed8:	b2d2      	uxtb	r2, r2
    4eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4ede:	b2d2      	uxtb	r2, r2
    4ee0:	701a      	strb	r2, [r3, #0]
    4ee2:	69bb      	ldr	r3, [r7, #24]
    4ee4:	09db      	lsrs	r3, r3, #7
    4ee6:	61bb      	str	r3, [r7, #24]
    4ee8:	69bb      	ldr	r3, [r7, #24]
    4eea:	2b7f      	cmp	r3, #127	; 0x7f
    4eec:	d8f0      	bhi.n	4ed0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
    4eee:	69fb      	ldr	r3, [r7, #28]
    4ef0:	1c5a      	adds	r2, r3, #1
    4ef2:	61fa      	str	r2, [r7, #28]
    4ef4:	69ba      	ldr	r2, [r7, #24]
    4ef6:	b2d2      	uxtb	r2, r2
    4ef8:	701a      	strb	r2, [r3, #0]
    4efa:	69fb      	ldr	r3, [r7, #28]
    4efc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
    4efe:	2204      	movs	r2, #4
    4f00:	68f9      	ldr	r1, [r7, #12]
    4f02:	6938      	ldr	r0, [r7, #16]
    4f04:	f7fd fe1a 	bl	2b3c <_SendPacket>
  RECORD_END();
    4f08:	697b      	ldr	r3, [r7, #20]
    4f0a:	f383 8811 	msr	BASEPRI, r3
}
    4f0e:	bf00      	nop
    4f10:	3720      	adds	r7, #32
    4f12:	46bd      	mov	sp, r7
    4f14:	bd80      	pop	{r7, pc}
    4f16:	bf00      	nop
    4f18:	20000930 	.word	0x20000930
    4f1c:	20000900 	.word	0x20000900

00004f20 <SEGGER_SYSVIEW_OnTaskStopExec>:
*
*  Function description
*    Record a Task Stop Execution event.  The Task Stop event
*    corresponds to when a task stops executing and terminates.
*/
void SEGGER_SYSVIEW_OnTaskStopExec(void) {
    4f20:	b580      	push	{r7, lr}
    4f22:	b082      	sub	sp, #8
    4f24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
    4f26:	f3ef 8311 	mrs	r3, BASEPRI
    4f2a:	f04f 0150 	mov.w	r1, #80	; 0x50
    4f2e:	f381 8811 	msr	BASEPRI, r1
    4f32:	607b      	str	r3, [r7, #4]
    4f34:	4807      	ldr	r0, [pc, #28]	; (4f54 <SEGGER_SYSVIEW_OnTaskStopExec+0x34>)
    4f36:	f7fd fd25 	bl	2984 <_PreparePacket>
    4f3a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TASK_STOP_EXEC);
    4f3c:	2205      	movs	r2, #5
    4f3e:	6839      	ldr	r1, [r7, #0]
    4f40:	6838      	ldr	r0, [r7, #0]
    4f42:	f7fd fdfb 	bl	2b3c <_SendPacket>
  RECORD_END();
    4f46:	687b      	ldr	r3, [r7, #4]
    4f48:	f383 8811 	msr	BASEPRI, r3
}
    4f4c:	bf00      	nop
    4f4e:	3708      	adds	r7, #8
    4f50:	46bd      	mov	sp, r7
    4f52:	bd80      	pop	{r7, pc}
    4f54:	20000930 	.word	0x20000930

00004f58 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(unsigned TaskId) {
    4f58:	b580      	push	{r7, lr}
    4f5a:	b088      	sub	sp, #32
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    4f60:	f3ef 8311 	mrs	r3, BASEPRI
    4f64:	f04f 0150 	mov.w	r1, #80	; 0x50
    4f68:	f381 8811 	msr	BASEPRI, r1
    4f6c:	617b      	str	r3, [r7, #20]
    4f6e:	481a      	ldr	r0, [pc, #104]	; (4fd8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
    4f70:	f7fd fd08 	bl	2984 <_PreparePacket>
    4f74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    4f76:	693b      	ldr	r3, [r7, #16]
    4f78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
    4f7a:	4b18      	ldr	r3, [pc, #96]	; (4fdc <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
    4f7c:	691b      	ldr	r3, [r3, #16]
    4f7e:	687a      	ldr	r2, [r7, #4]
    4f80:	1ad3      	subs	r3, r2, r3
    4f82:	089b      	lsrs	r3, r3, #2
    4f84:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
    4f86:	68fb      	ldr	r3, [r7, #12]
    4f88:	61fb      	str	r3, [r7, #28]
    4f8a:	687b      	ldr	r3, [r7, #4]
    4f8c:	61bb      	str	r3, [r7, #24]
    4f8e:	e00b      	b.n	4fa8 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
    4f90:	69fb      	ldr	r3, [r7, #28]
    4f92:	1c5a      	adds	r2, r3, #1
    4f94:	61fa      	str	r2, [r7, #28]
    4f96:	69ba      	ldr	r2, [r7, #24]
    4f98:	b2d2      	uxtb	r2, r2
    4f9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4f9e:	b2d2      	uxtb	r2, r2
    4fa0:	701a      	strb	r2, [r3, #0]
    4fa2:	69bb      	ldr	r3, [r7, #24]
    4fa4:	09db      	lsrs	r3, r3, #7
    4fa6:	61bb      	str	r3, [r7, #24]
    4fa8:	69bb      	ldr	r3, [r7, #24]
    4faa:	2b7f      	cmp	r3, #127	; 0x7f
    4fac:	d8f0      	bhi.n	4f90 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
    4fae:	69fb      	ldr	r3, [r7, #28]
    4fb0:	1c5a      	adds	r2, r3, #1
    4fb2:	61fa      	str	r2, [r7, #28]
    4fb4:	69ba      	ldr	r2, [r7, #24]
    4fb6:	b2d2      	uxtb	r2, r2
    4fb8:	701a      	strb	r2, [r3, #0]
    4fba:	69fb      	ldr	r3, [r7, #28]
    4fbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
    4fbe:	2206      	movs	r2, #6
    4fc0:	68f9      	ldr	r1, [r7, #12]
    4fc2:	6938      	ldr	r0, [r7, #16]
    4fc4:	f7fd fdba 	bl	2b3c <_SendPacket>
  RECORD_END();
    4fc8:	697b      	ldr	r3, [r7, #20]
    4fca:	f383 8811 	msr	BASEPRI, r3
}
    4fce:	bf00      	nop
    4fd0:	3720      	adds	r7, #32
    4fd2:	46bd      	mov	sp, r7
    4fd4:	bd80      	pop	{r7, pc}
    4fd6:	bf00      	nop
    4fd8:	20000930 	.word	0x20000930
    4fdc:	20000900 	.word	0x20000900

00004fe0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(unsigned TaskId, unsigned Cause) {
    4fe0:	b580      	push	{r7, lr}
    4fe2:	b08a      	sub	sp, #40	; 0x28
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	6078      	str	r0, [r7, #4]
    4fe8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
    4fea:	f3ef 8311 	mrs	r3, BASEPRI
    4fee:	f04f 0150 	mov.w	r1, #80	; 0x50
    4ff2:	f381 8811 	msr	BASEPRI, r1
    4ff6:	617b      	str	r3, [r7, #20]
    4ff8:	4827      	ldr	r0, [pc, #156]	; (5098 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
    4ffa:	f7fd fcc3 	bl	2984 <_PreparePacket>
    4ffe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    5000:	693b      	ldr	r3, [r7, #16]
    5002:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
    5004:	4b25      	ldr	r3, [pc, #148]	; (509c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
    5006:	691b      	ldr	r3, [r3, #16]
    5008:	687a      	ldr	r2, [r7, #4]
    500a:	1ad3      	subs	r3, r2, r3
    500c:	089b      	lsrs	r3, r3, #2
    500e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
    5010:	68fb      	ldr	r3, [r7, #12]
    5012:	627b      	str	r3, [r7, #36]	; 0x24
    5014:	687b      	ldr	r3, [r7, #4]
    5016:	623b      	str	r3, [r7, #32]
    5018:	e00b      	b.n	5032 <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
    501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    501c:	1c5a      	adds	r2, r3, #1
    501e:	627a      	str	r2, [r7, #36]	; 0x24
    5020:	6a3a      	ldr	r2, [r7, #32]
    5022:	b2d2      	uxtb	r2, r2
    5024:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5028:	b2d2      	uxtb	r2, r2
    502a:	701a      	strb	r2, [r3, #0]
    502c:	6a3b      	ldr	r3, [r7, #32]
    502e:	09db      	lsrs	r3, r3, #7
    5030:	623b      	str	r3, [r7, #32]
    5032:	6a3b      	ldr	r3, [r7, #32]
    5034:	2b7f      	cmp	r3, #127	; 0x7f
    5036:	d8f0      	bhi.n	501a <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
    5038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    503a:	1c5a      	adds	r2, r3, #1
    503c:	627a      	str	r2, [r7, #36]	; 0x24
    503e:	6a3a      	ldr	r2, [r7, #32]
    5040:	b2d2      	uxtb	r2, r2
    5042:	701a      	strb	r2, [r3, #0]
    5044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5046:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
    5048:	68fb      	ldr	r3, [r7, #12]
    504a:	61fb      	str	r3, [r7, #28]
    504c:	683b      	ldr	r3, [r7, #0]
    504e:	61bb      	str	r3, [r7, #24]
    5050:	e00b      	b.n	506a <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
    5052:	69fb      	ldr	r3, [r7, #28]
    5054:	1c5a      	adds	r2, r3, #1
    5056:	61fa      	str	r2, [r7, #28]
    5058:	69ba      	ldr	r2, [r7, #24]
    505a:	b2d2      	uxtb	r2, r2
    505c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5060:	b2d2      	uxtb	r2, r2
    5062:	701a      	strb	r2, [r3, #0]
    5064:	69bb      	ldr	r3, [r7, #24]
    5066:	09db      	lsrs	r3, r3, #7
    5068:	61bb      	str	r3, [r7, #24]
    506a:	69bb      	ldr	r3, [r7, #24]
    506c:	2b7f      	cmp	r3, #127	; 0x7f
    506e:	d8f0      	bhi.n	5052 <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
    5070:	69fb      	ldr	r3, [r7, #28]
    5072:	1c5a      	adds	r2, r3, #1
    5074:	61fa      	str	r2, [r7, #28]
    5076:	69ba      	ldr	r2, [r7, #24]
    5078:	b2d2      	uxtb	r2, r2
    507a:	701a      	strb	r2, [r3, #0]
    507c:	69fb      	ldr	r3, [r7, #28]
    507e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
    5080:	2207      	movs	r2, #7
    5082:	68f9      	ldr	r1, [r7, #12]
    5084:	6938      	ldr	r0, [r7, #16]
    5086:	f7fd fd59 	bl	2b3c <_SendPacket>
  RECORD_END();
    508a:	697b      	ldr	r3, [r7, #20]
    508c:	f383 8811 	msr	BASEPRI, r3
}
    5090:	bf00      	nop
    5092:	3728      	adds	r7, #40	; 0x28
    5094:	46bd      	mov	sp, r7
    5096:	bd80      	pop	{r7, pc}
    5098:	20000930 	.word	0x20000930
    509c:	20000900 	.word	0x20000900

000050a0 <SEGGER_SYSVIEW_OnUserStart>:
*    Send a user event start, such as start of a subroutine for profiling.
*
*  Parameters
*    UserId  - User defined ID for the event.
*/
void SEGGER_SYSVIEW_OnUserStart(unsigned UserId) {
    50a0:	b580      	push	{r7, lr}
    50a2:	b088      	sub	sp, #32
    50a4:	af00      	add	r7, sp, #0
    50a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    50a8:	f3ef 8311 	mrs	r3, BASEPRI
    50ac:	f04f 0150 	mov.w	r1, #80	; 0x50
    50b0:	f381 8811 	msr	BASEPRI, r1
    50b4:	617b      	str	r3, [r7, #20]
    50b6:	4817      	ldr	r0, [pc, #92]	; (5114 <SEGGER_SYSVIEW_OnUserStart+0x74>)
    50b8:	f7fd fc64 	bl	2984 <_PreparePacket>
    50bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    50be:	693b      	ldr	r3, [r7, #16]
    50c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, UserId);
    50c2:	68fb      	ldr	r3, [r7, #12]
    50c4:	61fb      	str	r3, [r7, #28]
    50c6:	687b      	ldr	r3, [r7, #4]
    50c8:	61bb      	str	r3, [r7, #24]
    50ca:	e00b      	b.n	50e4 <SEGGER_SYSVIEW_OnUserStart+0x44>
    50cc:	69fb      	ldr	r3, [r7, #28]
    50ce:	1c5a      	adds	r2, r3, #1
    50d0:	61fa      	str	r2, [r7, #28]
    50d2:	69ba      	ldr	r2, [r7, #24]
    50d4:	b2d2      	uxtb	r2, r2
    50d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    50da:	b2d2      	uxtb	r2, r2
    50dc:	701a      	strb	r2, [r3, #0]
    50de:	69bb      	ldr	r3, [r7, #24]
    50e0:	09db      	lsrs	r3, r3, #7
    50e2:	61bb      	str	r3, [r7, #24]
    50e4:	69bb      	ldr	r3, [r7, #24]
    50e6:	2b7f      	cmp	r3, #127	; 0x7f
    50e8:	d8f0      	bhi.n	50cc <SEGGER_SYSVIEW_OnUserStart+0x2c>
    50ea:	69fb      	ldr	r3, [r7, #28]
    50ec:	1c5a      	adds	r2, r3, #1
    50ee:	61fa      	str	r2, [r7, #28]
    50f0:	69ba      	ldr	r2, [r7, #24]
    50f2:	b2d2      	uxtb	r2, r2
    50f4:	701a      	strb	r2, [r3, #0]
    50f6:	69fb      	ldr	r3, [r7, #28]
    50f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_USER_START);
    50fa:	220f      	movs	r2, #15
    50fc:	68f9      	ldr	r1, [r7, #12]
    50fe:	6938      	ldr	r0, [r7, #16]
    5100:	f7fd fd1c 	bl	2b3c <_SendPacket>
  RECORD_END();
    5104:	697b      	ldr	r3, [r7, #20]
    5106:	f383 8811 	msr	BASEPRI, r3
}
    510a:	bf00      	nop
    510c:	3720      	adds	r7, #32
    510e:	46bd      	mov	sp, r7
    5110:	bd80      	pop	{r7, pc}
    5112:	bf00      	nop
    5114:	20000930 	.word	0x20000930

00005118 <SEGGER_SYSVIEW_OnUserStop>:
*    Send a user event stop, such as return of a subroutine for profiling.
*
*  Parameters
*    UserId  - User defined ID for the event.
*/
void SEGGER_SYSVIEW_OnUserStop(unsigned UserId) {
    5118:	b580      	push	{r7, lr}
    511a:	b088      	sub	sp, #32
    511c:	af00      	add	r7, sp, #0
    511e:	6078      	str	r0, [r7, #4]
  U8 * pPayload;
  U8 * pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
    5120:	f3ef 8311 	mrs	r3, BASEPRI
    5124:	f04f 0150 	mov.w	r1, #80	; 0x50
    5128:	f381 8811 	msr	BASEPRI, r1
    512c:	617b      	str	r3, [r7, #20]
    512e:	4817      	ldr	r0, [pc, #92]	; (518c <SEGGER_SYSVIEW_OnUserStop+0x74>)
    5130:	f7fd fc28 	bl	2984 <_PreparePacket>
    5134:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    5136:	693b      	ldr	r3, [r7, #16]
    5138:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, UserId);
    513a:	68fb      	ldr	r3, [r7, #12]
    513c:	61fb      	str	r3, [r7, #28]
    513e:	687b      	ldr	r3, [r7, #4]
    5140:	61bb      	str	r3, [r7, #24]
    5142:	e00b      	b.n	515c <SEGGER_SYSVIEW_OnUserStop+0x44>
    5144:	69fb      	ldr	r3, [r7, #28]
    5146:	1c5a      	adds	r2, r3, #1
    5148:	61fa      	str	r2, [r7, #28]
    514a:	69ba      	ldr	r2, [r7, #24]
    514c:	b2d2      	uxtb	r2, r2
    514e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5152:	b2d2      	uxtb	r2, r2
    5154:	701a      	strb	r2, [r3, #0]
    5156:	69bb      	ldr	r3, [r7, #24]
    5158:	09db      	lsrs	r3, r3, #7
    515a:	61bb      	str	r3, [r7, #24]
    515c:	69bb      	ldr	r3, [r7, #24]
    515e:	2b7f      	cmp	r3, #127	; 0x7f
    5160:	d8f0      	bhi.n	5144 <SEGGER_SYSVIEW_OnUserStop+0x2c>
    5162:	69fb      	ldr	r3, [r7, #28]
    5164:	1c5a      	adds	r2, r3, #1
    5166:	61fa      	str	r2, [r7, #28]
    5168:	69ba      	ldr	r2, [r7, #24]
    516a:	b2d2      	uxtb	r2, r2
    516c:	701a      	strb	r2, [r3, #0]
    516e:	69fb      	ldr	r3, [r7, #28]
    5170:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_USER_STOP);
    5172:	2210      	movs	r2, #16
    5174:	68f9      	ldr	r1, [r7, #12]
    5176:	6938      	ldr	r0, [r7, #16]
    5178:	f7fd fce0 	bl	2b3c <_SendPacket>
  RECORD_END();
    517c:	697b      	ldr	r3, [r7, #20]
    517e:	f383 8811 	msr	BASEPRI, r3
}
    5182:	bf00      	nop
    5184:	3720      	adds	r7, #32
    5186:	46bd      	mov	sp, r7
    5188:	bd80      	pop	{r7, pc}
    518a:	bf00      	nop
    518c:	20000930 	.word	0x20000930

00005190 <SEGGER_SYSVIEW_NameResource>:
*
*  Parameters
*    ResourceId - Id of the resource to be named. i.e. its address.
*    sName      - Pointer to the resource name. (Max. SEGGER_SYSVIEW_MAX_STRING_LEN Bytes)
*/
void SEGGER_SYSVIEW_NameResource(U32 ResourceId, const char* sName) {
    5190:	b580      	push	{r7, lr}
    5192:	b088      	sub	sp, #32
    5194:	af00      	add	r7, sp, #0
    5196:	6078      	str	r0, [r7, #4]
    5198:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    519a:	f3ef 8311 	mrs	r3, BASEPRI
    519e:	f04f 0150 	mov.w	r1, #80	; 0x50
    51a2:	f381 8811 	msr	BASEPRI, r1
    51a6:	617b      	str	r3, [r7, #20]
    51a8:	481b      	ldr	r0, [pc, #108]	; (5218 <SEGGER_SYSVIEW_NameResource+0x88>)
    51aa:	f7fd fbeb 	bl	2984 <_PreparePacket>
    51ae:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
    51b0:	693b      	ldr	r3, [r7, #16]
    51b2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(ResourceId));
    51b4:	68fb      	ldr	r3, [r7, #12]
    51b6:	61fb      	str	r3, [r7, #28]
    51b8:	4b18      	ldr	r3, [pc, #96]	; (521c <SEGGER_SYSVIEW_NameResource+0x8c>)
    51ba:	691b      	ldr	r3, [r3, #16]
    51bc:	687a      	ldr	r2, [r7, #4]
    51be:	1ad3      	subs	r3, r2, r3
    51c0:	089b      	lsrs	r3, r3, #2
    51c2:	61bb      	str	r3, [r7, #24]
    51c4:	e00b      	b.n	51de <SEGGER_SYSVIEW_NameResource+0x4e>
    51c6:	69fb      	ldr	r3, [r7, #28]
    51c8:	1c5a      	adds	r2, r3, #1
    51ca:	61fa      	str	r2, [r7, #28]
    51cc:	69ba      	ldr	r2, [r7, #24]
    51ce:	b2d2      	uxtb	r2, r2
    51d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    51d4:	b2d2      	uxtb	r2, r2
    51d6:	701a      	strb	r2, [r3, #0]
    51d8:	69bb      	ldr	r3, [r7, #24]
    51da:	09db      	lsrs	r3, r3, #7
    51dc:	61bb      	str	r3, [r7, #24]
    51de:	69bb      	ldr	r3, [r7, #24]
    51e0:	2b7f      	cmp	r3, #127	; 0x7f
    51e2:	d8f0      	bhi.n	51c6 <SEGGER_SYSVIEW_NameResource+0x36>
    51e4:	69fb      	ldr	r3, [r7, #28]
    51e6:	1c5a      	adds	r2, r3, #1
    51e8:	61fa      	str	r2, [r7, #28]
    51ea:	69ba      	ldr	r2, [r7, #24]
    51ec:	b2d2      	uxtb	r2, r2
    51ee:	701a      	strb	r2, [r3, #0]
    51f0:	69fb      	ldr	r3, [r7, #28]
    51f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, sName, SEGGER_SYSVIEW_MAX_STRING_LEN);
    51f4:	2280      	movs	r2, #128	; 0x80
    51f6:	6839      	ldr	r1, [r7, #0]
    51f8:	68f8      	ldr	r0, [r7, #12]
    51fa:	f7fd fb75 	bl	28e8 <_EncodeStr>
    51fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NAME_RESOURCE);
    5200:	2219      	movs	r2, #25
    5202:	68f9      	ldr	r1, [r7, #12]
    5204:	6938      	ldr	r0, [r7, #16]
    5206:	f7fd fc99 	bl	2b3c <_SendPacket>
  RECORD_END();
    520a:	697b      	ldr	r3, [r7, #20]
    520c:	f383 8811 	msr	BASEPRI, r3
}
    5210:	bf00      	nop
    5212:	3720      	adds	r7, #32
    5214:	46bd      	mov	sp, r7
    5216:	bd80      	pop	{r7, pc}
    5218:	20000930 	.word	0x20000930
    521c:	20000900 	.word	0x20000900

00005220 <SEGGER_SYSVIEW_SendPacket>:
*
*  Return value
*    !=0:  Success, Message sent.
*    ==0:  Buffer full, Message *NOT* sent.
*/
int SEGGER_SYSVIEW_SendPacket(U8* pPacket, U8* pPayloadEnd, unsigned EventId) {
    5220:	b580      	push	{r7, lr}
    5222:	b086      	sub	sp, #24
    5224:	af00      	add	r7, sp, #0
    5226:	60f8      	str	r0, [r7, #12]
    5228:	60b9      	str	r1, [r7, #8]
    522a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 1)
  SEGGER_SYSVIEW_LOCK();
    522c:	f3ef 8311 	mrs	r3, BASEPRI
    5230:	f04f 0150 	mov.w	r1, #80	; 0x50
    5234:	f381 8811 	msr	BASEPRI, r1
    5238:	617b      	str	r3, [r7, #20]
#endif
  _SendPacket(pPacket + 4, pPayloadEnd, EventId);
    523a:	68fb      	ldr	r3, [r7, #12]
    523c:	3304      	adds	r3, #4
    523e:	687a      	ldr	r2, [r7, #4]
    5240:	68b9      	ldr	r1, [r7, #8]
    5242:	4618      	mov	r0, r3
    5244:	f7fd fc7a 	bl	2b3c <_SendPacket>
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 1)
  SEGGER_SYSVIEW_UNLOCK();
    5248:	697b      	ldr	r3, [r7, #20]
    524a:	f383 8811 	msr	BASEPRI, r3
#endif
  return 0;
    524e:	2300      	movs	r3, #0
}
    5250:	4618      	mov	r0, r3
    5252:	3718      	adds	r7, #24
    5254:	46bd      	mov	sp, r7
    5256:	bd80      	pop	{r7, pc}

00005258 <SEGGER_SYSVIEW_EncodeU32>:
*  Return value
*    Pointer to the byte following the value, i.e. the first free
*    byte in the payload and the next position to store payload
*    content.
*/
U8* SEGGER_SYSVIEW_EncodeU32(U8* pPayload, unsigned Value) {
    5258:	b480      	push	{r7}
    525a:	b085      	sub	sp, #20
    525c:	af00      	add	r7, sp, #0
    525e:	6078      	str	r0, [r7, #4]
    5260:	6039      	str	r1, [r7, #0]
  ENCODE_U32(pPayload, Value);
    5262:	687b      	ldr	r3, [r7, #4]
    5264:	60fb      	str	r3, [r7, #12]
    5266:	683b      	ldr	r3, [r7, #0]
    5268:	60bb      	str	r3, [r7, #8]
    526a:	e00b      	b.n	5284 <SEGGER_SYSVIEW_EncodeU32+0x2c>
    526c:	68fb      	ldr	r3, [r7, #12]
    526e:	1c5a      	adds	r2, r3, #1
    5270:	60fa      	str	r2, [r7, #12]
    5272:	68ba      	ldr	r2, [r7, #8]
    5274:	b2d2      	uxtb	r2, r2
    5276:	f062 027f 	orn	r2, r2, #127	; 0x7f
    527a:	b2d2      	uxtb	r2, r2
    527c:	701a      	strb	r2, [r3, #0]
    527e:	68bb      	ldr	r3, [r7, #8]
    5280:	09db      	lsrs	r3, r3, #7
    5282:	60bb      	str	r3, [r7, #8]
    5284:	68bb      	ldr	r3, [r7, #8]
    5286:	2b7f      	cmp	r3, #127	; 0x7f
    5288:	d8f0      	bhi.n	526c <SEGGER_SYSVIEW_EncodeU32+0x14>
    528a:	68fb      	ldr	r3, [r7, #12]
    528c:	1c5a      	adds	r2, r3, #1
    528e:	60fa      	str	r2, [r7, #12]
    5290:	68ba      	ldr	r2, [r7, #8]
    5292:	b2d2      	uxtb	r2, r2
    5294:	701a      	strb	r2, [r3, #0]
    5296:	68fb      	ldr	r3, [r7, #12]
    5298:	607b      	str	r3, [r7, #4]
  return pPayload;
    529a:	687b      	ldr	r3, [r7, #4]
}
    529c:	4618      	mov	r0, r3
    529e:	3714      	adds	r7, #20
    52a0:	46bd      	mov	sp, r7
    52a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    52a6:	4770      	bx	lr

000052a8 <SEGGER_SYSVIEW_EncodeString>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + MaxLen bytes will be encoded to the payload.
*/
U8* SEGGER_SYSVIEW_EncodeString(U8* pPayload, const char* s, unsigned MaxLen) {
    52a8:	b580      	push	{r7, lr}
    52aa:	b084      	sub	sp, #16
    52ac:	af00      	add	r7, sp, #0
    52ae:	60f8      	str	r0, [r7, #12]
    52b0:	60b9      	str	r1, [r7, #8]
    52b2:	607a      	str	r2, [r7, #4]
  return _EncodeStr(pPayload, s, MaxLen);
    52b4:	687a      	ldr	r2, [r7, #4]
    52b6:	68b9      	ldr	r1, [r7, #8]
    52b8:	68f8      	ldr	r0, [r7, #12]
    52ba:	f7fd fb15 	bl	28e8 <_EncodeStr>
    52be:	4603      	mov	r3, r0
}
    52c0:	4618      	mov	r0, r3
    52c2:	3710      	adds	r7, #16
    52c4:	46bd      	mov	sp, r7
    52c6:	bd80      	pop	{r7, pc}

000052c8 <SEGGER_SYSVIEW_EncodeData>:
*  Additional information
*    The data is encoded as a count byte followed by the contents
*    of the data buffer.
*    Make sure NumBytes + 1 bytes are free for the payload.
*/
U8* SEGGER_SYSVIEW_EncodeData(U8 *pPayload, const char* pSrc, unsigned NumBytes) {
    52c8:	b580      	push	{r7, lr}
    52ca:	b084      	sub	sp, #16
    52cc:	af00      	add	r7, sp, #0
    52ce:	60f8      	str	r0, [r7, #12]
    52d0:	60b9      	str	r1, [r7, #8]
    52d2:	607a      	str	r2, [r7, #4]
  return _EncodeData(pPayload, pSrc, NumBytes);
    52d4:	687a      	ldr	r2, [r7, #4]
    52d6:	68b9      	ldr	r1, [r7, #8]
    52d8:	68f8      	ldr	r0, [r7, #12]
    52da:	f7fd fadf 	bl	289c <_EncodeData>
    52de:	4603      	mov	r3, r0
}
    52e0:	4618      	mov	r0, r3
    52e2:	3710      	adds	r7, #16
    52e4:	46bd      	mov	sp, r7
    52e6:	bd80      	pop	{r7, pc}

000052e8 <SEGGER_SYSVIEW_EncodeId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U8* SEGGER_SYSVIEW_EncodeId(U8* pPayload, unsigned Id) {
    52e8:	b480      	push	{r7}
    52ea:	b085      	sub	sp, #20
    52ec:	af00      	add	r7, sp, #0
    52ee:	6078      	str	r0, [r7, #4]
    52f0:	6039      	str	r1, [r7, #0]
  Id = SHRINK_ID(Id);
    52f2:	4b14      	ldr	r3, [pc, #80]	; (5344 <SEGGER_SYSVIEW_EncodeId+0x5c>)
    52f4:	691b      	ldr	r3, [r3, #16]
    52f6:	683a      	ldr	r2, [r7, #0]
    52f8:	1ad3      	subs	r3, r2, r3
    52fa:	089b      	lsrs	r3, r3, #2
    52fc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, Id);
    52fe:	687b      	ldr	r3, [r7, #4]
    5300:	60fb      	str	r3, [r7, #12]
    5302:	683b      	ldr	r3, [r7, #0]
    5304:	60bb      	str	r3, [r7, #8]
    5306:	e00b      	b.n	5320 <SEGGER_SYSVIEW_EncodeId+0x38>
    5308:	68fb      	ldr	r3, [r7, #12]
    530a:	1c5a      	adds	r2, r3, #1
    530c:	60fa      	str	r2, [r7, #12]
    530e:	68ba      	ldr	r2, [r7, #8]
    5310:	b2d2      	uxtb	r2, r2
    5312:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5316:	b2d2      	uxtb	r2, r2
    5318:	701a      	strb	r2, [r3, #0]
    531a:	68bb      	ldr	r3, [r7, #8]
    531c:	09db      	lsrs	r3, r3, #7
    531e:	60bb      	str	r3, [r7, #8]
    5320:	68bb      	ldr	r3, [r7, #8]
    5322:	2b7f      	cmp	r3, #127	; 0x7f
    5324:	d8f0      	bhi.n	5308 <SEGGER_SYSVIEW_EncodeId+0x20>
    5326:	68fb      	ldr	r3, [r7, #12]
    5328:	1c5a      	adds	r2, r3, #1
    532a:	60fa      	str	r2, [r7, #12]
    532c:	68ba      	ldr	r2, [r7, #8]
    532e:	b2d2      	uxtb	r2, r2
    5330:	701a      	strb	r2, [r3, #0]
    5332:	68fb      	ldr	r3, [r7, #12]
    5334:	607b      	str	r3, [r7, #4]
  return pPayload;
    5336:	687b      	ldr	r3, [r7, #4]
}
    5338:	4618      	mov	r0, r3
    533a:	3714      	adds	r7, #20
    533c:	46bd      	mov	sp, r7
    533e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5342:	4770      	bx	lr
    5344:	20000900 	.word	0x20000900

00005348 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
    5348:	b480      	push	{r7}
    534a:	b083      	sub	sp, #12
    534c:	af00      	add	r7, sp, #0
    534e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
    5350:	4b05      	ldr	r3, [pc, #20]	; (5368 <SEGGER_SYSVIEW_ShrinkId+0x20>)
    5352:	691b      	ldr	r3, [r3, #16]
    5354:	687a      	ldr	r2, [r7, #4]
    5356:	1ad3      	subs	r3, r2, r3
    5358:	089b      	lsrs	r3, r3, #2
}
    535a:	4618      	mov	r0, r3
    535c:	370c      	adds	r7, #12
    535e:	46bd      	mov	sp, r7
    5360:	f85d 7b04 	ldr.w	r7, [sp], #4
    5364:	4770      	bx	lr
    5366:	bf00      	nop
    5368:	20000900 	.word	0x20000900

0000536c <SEGGER_SYSVIEW_RegisterModule>:
*      NumEvents         - Number of events the module wants to register.
*      EventOffset       - Offset to be added to the event Ids. Out parameter, set by this function. Do not modify after calling this function.
*      pfSendModuleDesc  - Callback function pointer to send more detailed module description to SystemViewer.
*      pNext             - Pointer to next registered module. Out parameter, set by this function. Do not modify after calling this function.
*/
void SEGGER_SYSVIEW_RegisterModule(SEGGER_SYSVIEW_MODULE* pModule) {
    536c:	b580      	push	{r7, lr}
    536e:	b084      	sub	sp, #16
    5370:	af00      	add	r7, sp, #0
    5372:	6078      	str	r0, [r7, #4]
  SEGGER_SYSVIEW_LOCK();
    5374:	f3ef 8311 	mrs	r3, BASEPRI
    5378:	f04f 0150 	mov.w	r1, #80	; 0x50
    537c:	f381 8811 	msr	BASEPRI, r1
    5380:	60fb      	str	r3, [r7, #12]
  if (_pFirstModule == 0) {
    5382:	4b1c      	ldr	r3, [pc, #112]	; (53f4 <SEGGER_SYSVIEW_RegisterModule+0x88>)
    5384:	681b      	ldr	r3, [r3, #0]
    5386:	2b00      	cmp	r3, #0
    5388:	d10d      	bne.n	53a6 <SEGGER_SYSVIEW_RegisterModule+0x3a>
    //
    // No module registered, yet.
    // Start list with new module.
    // EventOffset is the base offset for modules
    //
    pModule->EventOffset = MODULE_EVENT_OFFSET;
    538a:	687b      	ldr	r3, [r7, #4]
    538c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5390:	609a      	str	r2, [r3, #8]
    pModule->pNext = 0;
    5392:	687b      	ldr	r3, [r7, #4]
    5394:	2200      	movs	r2, #0
    5396:	611a      	str	r2, [r3, #16]
    _pFirstModule = pModule;
    5398:	4a16      	ldr	r2, [pc, #88]	; (53f4 <SEGGER_SYSVIEW_RegisterModule+0x88>)
    539a:	687b      	ldr	r3, [r7, #4]
    539c:	6013      	str	r3, [r2, #0]
    _NumModules = 1;
    539e:	4b16      	ldr	r3, [pc, #88]	; (53f8 <SEGGER_SYSVIEW_RegisterModule+0x8c>)
    53a0:	2201      	movs	r2, #1
    53a2:	701a      	strb	r2, [r3, #0]
    53a4:	e015      	b.n	53d2 <SEGGER_SYSVIEW_RegisterModule+0x66>
    //
    // Registreded module(s) present.
    // Prepend new module in list.
    // EventOffset set from number of events and offset of previous module.
    //
    pModule->EventOffset = _pFirstModule->EventOffset + _pFirstModule->NumEvents;
    53a6:	4b13      	ldr	r3, [pc, #76]	; (53f4 <SEGGER_SYSVIEW_RegisterModule+0x88>)
    53a8:	681b      	ldr	r3, [r3, #0]
    53aa:	689a      	ldr	r2, [r3, #8]
    53ac:	4b11      	ldr	r3, [pc, #68]	; (53f4 <SEGGER_SYSVIEW_RegisterModule+0x88>)
    53ae:	681b      	ldr	r3, [r3, #0]
    53b0:	685b      	ldr	r3, [r3, #4]
    53b2:	441a      	add	r2, r3
    53b4:	687b      	ldr	r3, [r7, #4]
    53b6:	609a      	str	r2, [r3, #8]
    pModule->pNext = _pFirstModule;
    53b8:	4b0e      	ldr	r3, [pc, #56]	; (53f4 <SEGGER_SYSVIEW_RegisterModule+0x88>)
    53ba:	681a      	ldr	r2, [r3, #0]
    53bc:	687b      	ldr	r3, [r7, #4]
    53be:	611a      	str	r2, [r3, #16]
    _pFirstModule = pModule;
    53c0:	4a0c      	ldr	r2, [pc, #48]	; (53f4 <SEGGER_SYSVIEW_RegisterModule+0x88>)
    53c2:	687b      	ldr	r3, [r7, #4]
    53c4:	6013      	str	r3, [r2, #0]
    _NumModules++;
    53c6:	4b0c      	ldr	r3, [pc, #48]	; (53f8 <SEGGER_SYSVIEW_RegisterModule+0x8c>)
    53c8:	781b      	ldrb	r3, [r3, #0]
    53ca:	3301      	adds	r3, #1
    53cc:	b2da      	uxtb	r2, r3
    53ce:	4b0a      	ldr	r3, [pc, #40]	; (53f8 <SEGGER_SYSVIEW_RegisterModule+0x8c>)
    53d0:	701a      	strb	r2, [r3, #0]
  }
  SEGGER_SYSVIEW_SendModule(0);
    53d2:	2000      	movs	r0, #0
    53d4:	f000 f88c 	bl	54f0 <SEGGER_SYSVIEW_SendModule>
  if (pModule->pfSendModuleDesc) {
    53d8:	687b      	ldr	r3, [r7, #4]
    53da:	68db      	ldr	r3, [r3, #12]
    53dc:	2b00      	cmp	r3, #0
    53de:	d002      	beq.n	53e6 <SEGGER_SYSVIEW_RegisterModule+0x7a>
    pModule->pfSendModuleDesc();
    53e0:	687b      	ldr	r3, [r7, #4]
    53e2:	68db      	ldr	r3, [r3, #12]
    53e4:	4798      	blx	r3
  }
  SEGGER_SYSVIEW_UNLOCK();
    53e6:	68fb      	ldr	r3, [r7, #12]
    53e8:	f383 8811 	msr	BASEPRI, r3
}
    53ec:	bf00      	nop
    53ee:	3710      	adds	r7, #16
    53f0:	46bd      	mov	sp, r7
    53f2:	bd80      	pop	{r7, pc}
    53f4:	20000928 	.word	0x20000928
    53f8:	2000092c 	.word	0x2000092c

000053fc <SEGGER_SYSVIEW_RecordModuleDescription>:
*
*  Parameters
*    pModule      - Pointer to the described module.
*    sDescription - Pointer to a description string.
*/
void SEGGER_SYSVIEW_RecordModuleDescription(const SEGGER_SYSVIEW_MODULE* pModule, const char* sDescription) {
    53fc:	b580      	push	{r7, lr}
    53fe:	b08c      	sub	sp, #48	; 0x30
    5400:	af00      	add	r7, sp, #0
    5402:	6078      	str	r0, [r7, #4]
    5404:	6039      	str	r1, [r7, #0]
  U8  ModuleId;
  SEGGER_SYSVIEW_MODULE* p;

  p = _pFirstModule;
    5406:	4b38      	ldr	r3, [pc, #224]	; (54e8 <SEGGER_SYSVIEW_RecordModuleDescription+0xec>)
    5408:	681b      	ldr	r3, [r3, #0]
    540a:	62bb      	str	r3, [r7, #40]	; 0x28
  ModuleId = 0;
    540c:	2300      	movs	r3, #0
    540e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  do {
    if (p == pModule) {
    5412:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	429a      	cmp	r2, r3
    5418:	d00b      	beq.n	5432 <SEGGER_SYSVIEW_RecordModuleDescription+0x36>
      break;
    }
    ModuleId++;
    541a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    541e:	3301      	adds	r3, #1
    5420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    p = p->pNext;
    5424:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5426:	691b      	ldr	r3, [r3, #16]
    5428:	62bb      	str	r3, [r7, #40]	; 0x28
  } while (p);
    542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    542c:	2b00      	cmp	r3, #0
    542e:	d1f0      	bne.n	5412 <SEGGER_SYSVIEW_RecordModuleDescription+0x16>
    5430:	e000      	b.n	5434 <SEGGER_SYSVIEW_RecordModuleDescription+0x38>

  p = _pFirstModule;
  ModuleId = 0;
  do {
    if (p == pModule) {
      break;
    5432:	bf00      	nop
    p = p->pNext;
  } while (p);
  {
    U8* pPayload;
    U8* pPayloadStart;
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    5434:	f3ef 8311 	mrs	r3, BASEPRI
    5438:	f04f 0150 	mov.w	r1, #80	; 0x50
    543c:	f381 8811 	msr	BASEPRI, r1
    5440:	617b      	str	r3, [r7, #20]
    5442:	482a      	ldr	r0, [pc, #168]	; (54ec <SEGGER_SYSVIEW_RecordModuleDescription+0xf0>)
    5444:	f7fd fa9e 	bl	2984 <_PreparePacket>
    5448:	6138      	str	r0, [r7, #16]
    //
    pPayload = pPayloadStart;
    544a:	693b      	ldr	r3, [r7, #16]
    544c:	60fb      	str	r3, [r7, #12]
    //
    // Send module description
    // Send event offset and number of events
    //
    ENCODE_U32(pPayload, ModuleId);
    544e:	68fb      	ldr	r3, [r7, #12]
    5450:	627b      	str	r3, [r7, #36]	; 0x24
    5452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    5456:	623b      	str	r3, [r7, #32]
    5458:	e00b      	b.n	5472 <SEGGER_SYSVIEW_RecordModuleDescription+0x76>
    545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    545c:	1c5a      	adds	r2, r3, #1
    545e:	627a      	str	r2, [r7, #36]	; 0x24
    5460:	6a3a      	ldr	r2, [r7, #32]
    5462:	b2d2      	uxtb	r2, r2
    5464:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5468:	b2d2      	uxtb	r2, r2
    546a:	701a      	strb	r2, [r3, #0]
    546c:	6a3b      	ldr	r3, [r7, #32]
    546e:	09db      	lsrs	r3, r3, #7
    5470:	623b      	str	r3, [r7, #32]
    5472:	6a3b      	ldr	r3, [r7, #32]
    5474:	2b7f      	cmp	r3, #127	; 0x7f
    5476:	d8f0      	bhi.n	545a <SEGGER_SYSVIEW_RecordModuleDescription+0x5e>
    5478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    547a:	1c5a      	adds	r2, r3, #1
    547c:	627a      	str	r2, [r7, #36]	; 0x24
    547e:	6a3a      	ldr	r2, [r7, #32]
    5480:	b2d2      	uxtb	r2, r2
    5482:	701a      	strb	r2, [r3, #0]
    5484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5486:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, (pModule->EventOffset));
    5488:	68fb      	ldr	r3, [r7, #12]
    548a:	61fb      	str	r3, [r7, #28]
    548c:	687b      	ldr	r3, [r7, #4]
    548e:	689b      	ldr	r3, [r3, #8]
    5490:	61bb      	str	r3, [r7, #24]
    5492:	e00b      	b.n	54ac <SEGGER_SYSVIEW_RecordModuleDescription+0xb0>
    5494:	69fb      	ldr	r3, [r7, #28]
    5496:	1c5a      	adds	r2, r3, #1
    5498:	61fa      	str	r2, [r7, #28]
    549a:	69ba      	ldr	r2, [r7, #24]
    549c:	b2d2      	uxtb	r2, r2
    549e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    54a2:	b2d2      	uxtb	r2, r2
    54a4:	701a      	strb	r2, [r3, #0]
    54a6:	69bb      	ldr	r3, [r7, #24]
    54a8:	09db      	lsrs	r3, r3, #7
    54aa:	61bb      	str	r3, [r7, #24]
    54ac:	69bb      	ldr	r3, [r7, #24]
    54ae:	2b7f      	cmp	r3, #127	; 0x7f
    54b0:	d8f0      	bhi.n	5494 <SEGGER_SYSVIEW_RecordModuleDescription+0x98>
    54b2:	69fb      	ldr	r3, [r7, #28]
    54b4:	1c5a      	adds	r2, r3, #1
    54b6:	61fa      	str	r2, [r7, #28]
    54b8:	69ba      	ldr	r2, [r7, #24]
    54ba:	b2d2      	uxtb	r2, r2
    54bc:	701a      	strb	r2, [r3, #0]
    54be:	69fb      	ldr	r3, [r7, #28]
    54c0:	60fb      	str	r3, [r7, #12]
    pPayload = _EncodeStr(pPayload, sDescription, SEGGER_SYSVIEW_MAX_STRING_LEN);
    54c2:	2280      	movs	r2, #128	; 0x80
    54c4:	6839      	ldr	r1, [r7, #0]
    54c6:	68f8      	ldr	r0, [r7, #12]
    54c8:	f7fd fa0e 	bl	28e8 <_EncodeStr>
    54cc:	60f8      	str	r0, [r7, #12]
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
    54ce:	2216      	movs	r2, #22
    54d0:	68f9      	ldr	r1, [r7, #12]
    54d2:	6938      	ldr	r0, [r7, #16]
    54d4:	f7fd fb32 	bl	2b3c <_SendPacket>
    RECORD_END();
    54d8:	697b      	ldr	r3, [r7, #20]
    54da:	f383 8811 	msr	BASEPRI, r3
  }
}
    54de:	bf00      	nop
    54e0:	3730      	adds	r7, #48	; 0x30
    54e2:	46bd      	mov	sp, r7
    54e4:	bd80      	pop	{r7, pc}
    54e6:	bf00      	nop
    54e8:	20000928 	.word	0x20000928
    54ec:	20000930 	.word	0x20000930

000054f0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
    54f0:	b580      	push	{r7, lr}
    54f2:	b08c      	sub	sp, #48	; 0x30
    54f4:	af00      	add	r7, sp, #0
    54f6:	4603      	mov	r3, r0
    54f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
    54fa:	4b3b      	ldr	r3, [pc, #236]	; (55e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	2b00      	cmp	r3, #0
    5500:	d06d      	beq.n	55de <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
    5502:	4b39      	ldr	r3, [pc, #228]	; (55e8 <SEGGER_SYSVIEW_SendModule+0xf8>)
    5504:	681b      	ldr	r3, [r3, #0]
    5506:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
    5508:	2300      	movs	r3, #0
    550a:	62bb      	str	r3, [r7, #40]	; 0x28
    550c:	e008      	b.n	5520 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
    550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5510:	691b      	ldr	r3, [r3, #16]
    5512:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
    5514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5516:	2b00      	cmp	r3, #0
    5518:	d007      	beq.n	552a <SEGGER_SYSVIEW_SendModule+0x3a>
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
    pModule = _pFirstModule;
    for (n = 0; n < ModuleId; n++) {
    551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    551c:	3301      	adds	r3, #1
    551e:	62bb      	str	r3, [r7, #40]	; 0x28
    5520:	79fa      	ldrb	r2, [r7, #7]
    5522:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5524:	429a      	cmp	r2, r3
    5526:	d8f2      	bhi.n	550e <SEGGER_SYSVIEW_SendModule+0x1e>
    5528:	e000      	b.n	552c <SEGGER_SYSVIEW_SendModule+0x3c>
      pModule = pModule->pNext;
      if (pModule == 0) {
        break;
    552a:	bf00      	nop
      }
    }
    if (pModule != 0) {
    552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    552e:	2b00      	cmp	r3, #0
    5530:	d055      	beq.n	55de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    5532:	f3ef 8311 	mrs	r3, BASEPRI
    5536:	f04f 0150 	mov.w	r1, #80	; 0x50
    553a:	f381 8811 	msr	BASEPRI, r1
    553e:	617b      	str	r3, [r7, #20]
    5540:	482a      	ldr	r0, [pc, #168]	; (55ec <SEGGER_SYSVIEW_SendModule+0xfc>)
    5542:	f7fd fa1f 	bl	2984 <_PreparePacket>
    5546:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
    5548:	693b      	ldr	r3, [r7, #16]
    554a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
    554c:	68fb      	ldr	r3, [r7, #12]
    554e:	627b      	str	r3, [r7, #36]	; 0x24
    5550:	79fb      	ldrb	r3, [r7, #7]
    5552:	623b      	str	r3, [r7, #32]
    5554:	e00b      	b.n	556e <SEGGER_SYSVIEW_SendModule+0x7e>
    5556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5558:	1c5a      	adds	r2, r3, #1
    555a:	627a      	str	r2, [r7, #36]	; 0x24
    555c:	6a3a      	ldr	r2, [r7, #32]
    555e:	b2d2      	uxtb	r2, r2
    5560:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5564:	b2d2      	uxtb	r2, r2
    5566:	701a      	strb	r2, [r3, #0]
    5568:	6a3b      	ldr	r3, [r7, #32]
    556a:	09db      	lsrs	r3, r3, #7
    556c:	623b      	str	r3, [r7, #32]
    556e:	6a3b      	ldr	r3, [r7, #32]
    5570:	2b7f      	cmp	r3, #127	; 0x7f
    5572:	d8f0      	bhi.n	5556 <SEGGER_SYSVIEW_SendModule+0x66>
    5574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5576:	1c5a      	adds	r2, r3, #1
    5578:	627a      	str	r2, [r7, #36]	; 0x24
    557a:	6a3a      	ldr	r2, [r7, #32]
    557c:	b2d2      	uxtb	r2, r2
    557e:	701a      	strb	r2, [r3, #0]
    5580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5582:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
    5584:	68fb      	ldr	r3, [r7, #12]
    5586:	61fb      	str	r3, [r7, #28]
    5588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    558a:	689b      	ldr	r3, [r3, #8]
    558c:	61bb      	str	r3, [r7, #24]
    558e:	e00b      	b.n	55a8 <SEGGER_SYSVIEW_SendModule+0xb8>
    5590:	69fb      	ldr	r3, [r7, #28]
    5592:	1c5a      	adds	r2, r3, #1
    5594:	61fa      	str	r2, [r7, #28]
    5596:	69ba      	ldr	r2, [r7, #24]
    5598:	b2d2      	uxtb	r2, r2
    559a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    559e:	b2d2      	uxtb	r2, r2
    55a0:	701a      	strb	r2, [r3, #0]
    55a2:	69bb      	ldr	r3, [r7, #24]
    55a4:	09db      	lsrs	r3, r3, #7
    55a6:	61bb      	str	r3, [r7, #24]
    55a8:	69bb      	ldr	r3, [r7, #24]
    55aa:	2b7f      	cmp	r3, #127	; 0x7f
    55ac:	d8f0      	bhi.n	5590 <SEGGER_SYSVIEW_SendModule+0xa0>
    55ae:	69fb      	ldr	r3, [r7, #28]
    55b0:	1c5a      	adds	r2, r3, #1
    55b2:	61fa      	str	r2, [r7, #28]
    55b4:	69ba      	ldr	r2, [r7, #24]
    55b6:	b2d2      	uxtb	r2, r2
    55b8:	701a      	strb	r2, [r3, #0]
    55ba:	69fb      	ldr	r3, [r7, #28]
    55bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
    55be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    55c0:	681b      	ldr	r3, [r3, #0]
    55c2:	2280      	movs	r2, #128	; 0x80
    55c4:	4619      	mov	r1, r3
    55c6:	68f8      	ldr	r0, [r7, #12]
    55c8:	f7fd f98e 	bl	28e8 <_EncodeStr>
    55cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
    55ce:	2216      	movs	r2, #22
    55d0:	68f9      	ldr	r1, [r7, #12]
    55d2:	6938      	ldr	r0, [r7, #16]
    55d4:	f7fd fab2 	bl	2b3c <_SendPacket>
      RECORD_END();
    55d8:	697b      	ldr	r3, [r7, #20]
    55da:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
    55de:	bf00      	nop
    55e0:	3730      	adds	r7, #48	; 0x30
    55e2:	46bd      	mov	sp, r7
    55e4:	bd80      	pop	{r7, pc}
    55e6:	bf00      	nop
    55e8:	20000928 	.word	0x20000928
    55ec:	20000930 	.word	0x20000930

000055f0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
    55f0:	b580      	push	{r7, lr}
    55f2:	b082      	sub	sp, #8
    55f4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
    55f6:	4b0c      	ldr	r3, [pc, #48]	; (5628 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
    55f8:	681b      	ldr	r3, [r3, #0]
    55fa:	2b00      	cmp	r3, #0
    55fc:	d00f      	beq.n	561e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
    55fe:	4b0a      	ldr	r3, [pc, #40]	; (5628 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
    5600:	681b      	ldr	r3, [r3, #0]
    5602:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
    5604:	687b      	ldr	r3, [r7, #4]
    5606:	68db      	ldr	r3, [r3, #12]
    5608:	2b00      	cmp	r3, #0
    560a:	d002      	beq.n	5612 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
    560c:	687b      	ldr	r3, [r7, #4]
    560e:	68db      	ldr	r3, [r3, #12]
    5610:	4798      	blx	r3
      }
      pModule = pModule->pNext;
    5612:	687b      	ldr	r3, [r7, #4]
    5614:	691b      	ldr	r3, [r3, #16]
    5616:	607b      	str	r3, [r7, #4]
    } while (pModule);
    5618:	687b      	ldr	r3, [r7, #4]
    561a:	2b00      	cmp	r3, #0
    561c:	d1f2      	bne.n	5604 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
    561e:	bf00      	nop
    5620:	3708      	adds	r7, #8
    5622:	46bd      	mov	sp, r7
    5624:	bd80      	pop	{r7, pc}
    5626:	bf00      	nop
    5628:	20000928 	.word	0x20000928

0000562c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
    562c:	b580      	push	{r7, lr}
    562e:	b086      	sub	sp, #24
    5630:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
    5632:	f3ef 8311 	mrs	r3, BASEPRI
    5636:	f04f 0150 	mov.w	r1, #80	; 0x50
    563a:	f381 8811 	msr	BASEPRI, r1
    563e:	60fb      	str	r3, [r7, #12]
    5640:	4817      	ldr	r0, [pc, #92]	; (56a0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
    5642:	f7fd f99f 	bl	2984 <_PreparePacket>
    5646:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
    5648:	68bb      	ldr	r3, [r7, #8]
    564a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
    564c:	687b      	ldr	r3, [r7, #4]
    564e:	617b      	str	r3, [r7, #20]
    5650:	4b14      	ldr	r3, [pc, #80]	; (56a4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
    5652:	781b      	ldrb	r3, [r3, #0]
    5654:	613b      	str	r3, [r7, #16]
    5656:	e00b      	b.n	5670 <SEGGER_SYSVIEW_SendNumModules+0x44>
    5658:	697b      	ldr	r3, [r7, #20]
    565a:	1c5a      	adds	r2, r3, #1
    565c:	617a      	str	r2, [r7, #20]
    565e:	693a      	ldr	r2, [r7, #16]
    5660:	b2d2      	uxtb	r2, r2
    5662:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5666:	b2d2      	uxtb	r2, r2
    5668:	701a      	strb	r2, [r3, #0]
    566a:	693b      	ldr	r3, [r7, #16]
    566c:	09db      	lsrs	r3, r3, #7
    566e:	613b      	str	r3, [r7, #16]
    5670:	693b      	ldr	r3, [r7, #16]
    5672:	2b7f      	cmp	r3, #127	; 0x7f
    5674:	d8f0      	bhi.n	5658 <SEGGER_SYSVIEW_SendNumModules+0x2c>
    5676:	697b      	ldr	r3, [r7, #20]
    5678:	1c5a      	adds	r2, r3, #1
    567a:	617a      	str	r2, [r7, #20]
    567c:	693a      	ldr	r2, [r7, #16]
    567e:	b2d2      	uxtb	r2, r2
    5680:	701a      	strb	r2, [r3, #0]
    5682:	697b      	ldr	r3, [r7, #20]
    5684:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
    5686:	221b      	movs	r2, #27
    5688:	6879      	ldr	r1, [r7, #4]
    568a:	68b8      	ldr	r0, [r7, #8]
    568c:	f7fd fa56 	bl	2b3c <_SendPacket>
  RECORD_END();
    5690:	68fb      	ldr	r3, [r7, #12]
    5692:	f383 8811 	msr	BASEPRI, r3
}
    5696:	bf00      	nop
    5698:	3718      	adds	r7, #24
    569a:	46bd      	mov	sp, r7
    569c:	bd80      	pop	{r7, pc}
    569e:	bf00      	nop
    56a0:	20000930 	.word	0x20000930
    56a4:	2000092c 	.word	0x2000092c

000056a8 <SEGGER_SYSVIEW_PrintfHostEx>:
*    Options  - Options for the string. i.e. Log level.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHostEx(const char* s, U32 Options, ...) {
    56a8:	b40e      	push	{r1, r2, r3}
    56aa:	b580      	push	{r7, lr}
    56ac:	b085      	sub	sp, #20
    56ae:	af00      	add	r7, sp, #0
    56b0:	6078      	str	r0, [r7, #4]
  va_list ParamList;

  va_start(ParamList, Options);
    56b2:	f107 0320 	add.w	r3, r7, #32
    56b6:	60fb      	str	r3, [r7, #12]
  _VPrintHost(s, Options, &ParamList);
    56b8:	f107 030c 	add.w	r3, r7, #12
    56bc:	461a      	mov	r2, r3
    56be:	69f9      	ldr	r1, [r7, #28]
    56c0:	6878      	ldr	r0, [r7, #4]
    56c2:	f7fd fb97 	bl	2df4 <_VPrintHost>
  va_end(ParamList);
}
    56c6:	bf00      	nop
    56c8:	3714      	adds	r7, #20
    56ca:	46bd      	mov	sp, r7
    56cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    56d0:	b003      	add	sp, #12
    56d2:	4770      	bx	lr

000056d4 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
    56d4:	b40f      	push	{r0, r1, r2, r3}
    56d6:	b580      	push	{r7, lr}
    56d8:	b082      	sub	sp, #8
    56da:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
    56dc:	f107 0314 	add.w	r3, r7, #20
    56e0:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
    56e2:	1d3b      	adds	r3, r7, #4
    56e4:	461a      	mov	r2, r3
    56e6:	2100      	movs	r1, #0
    56e8:	6938      	ldr	r0, [r7, #16]
    56ea:	f7fd fb83 	bl	2df4 <_VPrintHost>
  va_end(ParamList);
}
    56ee:	bf00      	nop
    56f0:	3708      	adds	r7, #8
    56f2:	46bd      	mov	sp, r7
    56f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    56f8:	b004      	add	sp, #16
    56fa:	4770      	bx	lr

000056fc <SEGGER_SYSVIEW_WarnfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_WarnfHost(const char* s, ...) {
    56fc:	b40f      	push	{r0, r1, r2, r3}
    56fe:	b580      	push	{r7, lr}
    5700:	b082      	sub	sp, #8
    5702:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
    5704:	f107 0314 	add.w	r3, r7, #20
    5708:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_WARNING, &ParamList);
    570a:	1d3b      	adds	r3, r7, #4
    570c:	461a      	mov	r2, r3
    570e:	2101      	movs	r1, #1
    5710:	6938      	ldr	r0, [r7, #16]
    5712:	f7fd fb6f 	bl	2df4 <_VPrintHost>
  va_end(ParamList);
}
    5716:	bf00      	nop
    5718:	3708      	adds	r7, #8
    571a:	46bd      	mov	sp, r7
    571c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    5720:	b004      	add	sp, #16
    5722:	4770      	bx	lr

00005724 <SEGGER_SYSVIEW_ErrorfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_ErrorfHost(const char* s, ...) {
    5724:	b40f      	push	{r0, r1, r2, r3}
    5726:	b580      	push	{r7, lr}
    5728:	b082      	sub	sp, #8
    572a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
    572c:	f107 0314 	add.w	r3, r7, #20
    5730:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_ERROR, &ParamList);
    5732:	1d3b      	adds	r3, r7, #4
    5734:	461a      	mov	r2, r3
    5736:	2102      	movs	r1, #2
    5738:	6938      	ldr	r0, [r7, #16]
    573a:	f7fd fb5b 	bl	2df4 <_VPrintHost>
  va_end(ParamList);
}
    573e:	bf00      	nop
    5740:	3708      	adds	r7, #8
    5742:	46bd      	mov	sp, r7
    5744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    5748:	b004      	add	sp, #16
    574a:	4770      	bx	lr

0000574c <SEGGER_SYSVIEW_PrintfTargetEx>:
*
*  Parameters
*    s        - String to be formatted.
*    Options  - Options for the string. i.e. Log level.
*/
void SEGGER_SYSVIEW_PrintfTargetEx(const char* s, U32 Options, ...) {
    574c:	b40e      	push	{r1, r2, r3}
    574e:	b580      	push	{r7, lr}
    5750:	b085      	sub	sp, #20
    5752:	af00      	add	r7, sp, #0
    5754:	6078      	str	r0, [r7, #4]
  va_list ParamList;

  va_start(ParamList, Options);
    5756:	f107 0320 	add.w	r3, r7, #32
    575a:	60fb      	str	r3, [r7, #12]
  _VPrintTarget(s, Options, &ParamList);
    575c:	f107 030c 	add.w	r3, r7, #12
    5760:	461a      	mov	r2, r3
    5762:	69f9      	ldr	r1, [r7, #28]
    5764:	6878      	ldr	r0, [r7, #4]
    5766:	f7fd fd1d 	bl	31a4 <_VPrintTarget>
  va_end(ParamList);
}
    576a:	bf00      	nop
    576c:	3714      	adds	r7, #20
    576e:	46bd      	mov	sp, r7
    5770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    5774:	b003      	add	sp, #12
    5776:	4770      	bx	lr

00005778 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
    5778:	b40f      	push	{r0, r1, r2, r3}
    577a:	b580      	push	{r7, lr}
    577c:	b082      	sub	sp, #8
    577e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
    5780:	f107 0314 	add.w	r3, r7, #20
    5784:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    5786:	1d3b      	adds	r3, r7, #4
    5788:	461a      	mov	r2, r3
    578a:	2100      	movs	r1, #0
    578c:	6938      	ldr	r0, [r7, #16]
    578e:	f7fd fd09 	bl	31a4 <_VPrintTarget>
  va_end(ParamList);
}
    5792:	bf00      	nop
    5794:	3708      	adds	r7, #8
    5796:	46bd      	mov	sp, r7
    5798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    579c:	b004      	add	sp, #16
    579e:	4770      	bx	lr

000057a0 <SEGGER_SYSVIEW_WarnfTarget>:
*    sent to the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_WarnfTarget(const char* s, ...) {
    57a0:	b40f      	push	{r0, r1, r2, r3}
    57a2:	b580      	push	{r7, lr}
    57a4:	b082      	sub	sp, #8
    57a6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
    57a8:	f107 0314 	add.w	r3, r7, #20
    57ac:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_WARNING, &ParamList);
    57ae:	1d3b      	adds	r3, r7, #4
    57b0:	461a      	mov	r2, r3
    57b2:	2101      	movs	r1, #1
    57b4:	6938      	ldr	r0, [r7, #16]
    57b6:	f7fd fcf5 	bl	31a4 <_VPrintTarget>
  va_end(ParamList);
}
    57ba:	bf00      	nop
    57bc:	3708      	adds	r7, #8
    57be:	46bd      	mov	sp, r7
    57c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    57c4:	b004      	add	sp, #16
    57c6:	4770      	bx	lr

000057c8 <SEGGER_SYSVIEW_ErrorfTarget>:
*    sent to the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_ErrorfTarget(const char* s, ...) {
    57c8:	b40f      	push	{r0, r1, r2, r3}
    57ca:	b580      	push	{r7, lr}
    57cc:	b082      	sub	sp, #8
    57ce:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
    57d0:	f107 0314 	add.w	r3, r7, #20
    57d4:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_ERROR, &ParamList);
    57d6:	1d3b      	adds	r3, r7, #4
    57d8:	461a      	mov	r2, r3
    57da:	2102      	movs	r1, #2
    57dc:	6938      	ldr	r0, [r7, #16]
    57de:	f7fd fce1 	bl	31a4 <_VPrintTarget>
  va_end(ParamList);
}
    57e2:	bf00      	nop
    57e4:	3708      	adds	r7, #8
    57e6:	46bd      	mov	sp, r7
    57e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    57ec:	b004      	add	sp, #16
    57ee:	4770      	bx	lr

000057f0 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
    57f0:	b580      	push	{r7, lr}
    57f2:	b08a      	sub	sp, #40	; 0x28
    57f4:	af00      	add	r7, sp, #0
    57f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    57f8:	f3ef 8311 	mrs	r3, BASEPRI
    57fc:	f04f 0150 	mov.w	r1, #80	; 0x50
    5800:	f381 8811 	msr	BASEPRI, r1
    5804:	617b      	str	r3, [r7, #20]
    5806:	4827      	ldr	r0, [pc, #156]	; (58a4 <SEGGER_SYSVIEW_Print+0xb4>)
    5808:	f7fd f8bc 	bl	2984 <_PreparePacket>
    580c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
    580e:	2280      	movs	r2, #128	; 0x80
    5810:	6879      	ldr	r1, [r7, #4]
    5812:	6938      	ldr	r0, [r7, #16]
    5814:	f7fd f868 	bl	28e8 <_EncodeStr>
    5818:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
    581a:	68fb      	ldr	r3, [r7, #12]
    581c:	627b      	str	r3, [r7, #36]	; 0x24
    581e:	2300      	movs	r3, #0
    5820:	623b      	str	r3, [r7, #32]
    5822:	e00b      	b.n	583c <SEGGER_SYSVIEW_Print+0x4c>
    5824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5826:	1c5a      	adds	r2, r3, #1
    5828:	627a      	str	r2, [r7, #36]	; 0x24
    582a:	6a3a      	ldr	r2, [r7, #32]
    582c:	b2d2      	uxtb	r2, r2
    582e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5832:	b2d2      	uxtb	r2, r2
    5834:	701a      	strb	r2, [r3, #0]
    5836:	6a3b      	ldr	r3, [r7, #32]
    5838:	09db      	lsrs	r3, r3, #7
    583a:	623b      	str	r3, [r7, #32]
    583c:	6a3b      	ldr	r3, [r7, #32]
    583e:	2b7f      	cmp	r3, #127	; 0x7f
    5840:	d8f0      	bhi.n	5824 <SEGGER_SYSVIEW_Print+0x34>
    5842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5844:	1c5a      	adds	r2, r3, #1
    5846:	627a      	str	r2, [r7, #36]	; 0x24
    5848:	6a3a      	ldr	r2, [r7, #32]
    584a:	b2d2      	uxtb	r2, r2
    584c:	701a      	strb	r2, [r3, #0]
    584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5850:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
    5852:	68fb      	ldr	r3, [r7, #12]
    5854:	61fb      	str	r3, [r7, #28]
    5856:	2300      	movs	r3, #0
    5858:	61bb      	str	r3, [r7, #24]
    585a:	e00b      	b.n	5874 <SEGGER_SYSVIEW_Print+0x84>
    585c:	69fb      	ldr	r3, [r7, #28]
    585e:	1c5a      	adds	r2, r3, #1
    5860:	61fa      	str	r2, [r7, #28]
    5862:	69ba      	ldr	r2, [r7, #24]
    5864:	b2d2      	uxtb	r2, r2
    5866:	f062 027f 	orn	r2, r2, #127	; 0x7f
    586a:	b2d2      	uxtb	r2, r2
    586c:	701a      	strb	r2, [r3, #0]
    586e:	69bb      	ldr	r3, [r7, #24]
    5870:	09db      	lsrs	r3, r3, #7
    5872:	61bb      	str	r3, [r7, #24]
    5874:	69bb      	ldr	r3, [r7, #24]
    5876:	2b7f      	cmp	r3, #127	; 0x7f
    5878:	d8f0      	bhi.n	585c <SEGGER_SYSVIEW_Print+0x6c>
    587a:	69fb      	ldr	r3, [r7, #28]
    587c:	1c5a      	adds	r2, r3, #1
    587e:	61fa      	str	r2, [r7, #28]
    5880:	69ba      	ldr	r2, [r7, #24]
    5882:	b2d2      	uxtb	r2, r2
    5884:	701a      	strb	r2, [r3, #0]
    5886:	69fb      	ldr	r3, [r7, #28]
    5888:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
    588a:	221a      	movs	r2, #26
    588c:	68f9      	ldr	r1, [r7, #12]
    588e:	6938      	ldr	r0, [r7, #16]
    5890:	f7fd f954 	bl	2b3c <_SendPacket>
  RECORD_END();
    5894:	697b      	ldr	r3, [r7, #20]
    5896:	f383 8811 	msr	BASEPRI, r3
}
    589a:	bf00      	nop
    589c:	3728      	adds	r7, #40	; 0x28
    589e:	46bd      	mov	sp, r7
    58a0:	bd80      	pop	{r7, pc}
    58a2:	bf00      	nop
    58a4:	20000930 	.word	0x20000930

000058a8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
    58a8:	b580      	push	{r7, lr}
    58aa:	b08a      	sub	sp, #40	; 0x28
    58ac:	af00      	add	r7, sp, #0
    58ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    58b0:	f3ef 8311 	mrs	r3, BASEPRI
    58b4:	f04f 0150 	mov.w	r1, #80	; 0x50
    58b8:	f381 8811 	msr	BASEPRI, r1
    58bc:	617b      	str	r3, [r7, #20]
    58be:	4827      	ldr	r0, [pc, #156]	; (595c <SEGGER_SYSVIEW_Warn+0xb4>)
    58c0:	f7fd f860 	bl	2984 <_PreparePacket>
    58c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
    58c6:	2280      	movs	r2, #128	; 0x80
    58c8:	6879      	ldr	r1, [r7, #4]
    58ca:	6938      	ldr	r0, [r7, #16]
    58cc:	f7fd f80c 	bl	28e8 <_EncodeStr>
    58d0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
    58d2:	68fb      	ldr	r3, [r7, #12]
    58d4:	627b      	str	r3, [r7, #36]	; 0x24
    58d6:	2301      	movs	r3, #1
    58d8:	623b      	str	r3, [r7, #32]
    58da:	e00b      	b.n	58f4 <SEGGER_SYSVIEW_Warn+0x4c>
    58dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58de:	1c5a      	adds	r2, r3, #1
    58e0:	627a      	str	r2, [r7, #36]	; 0x24
    58e2:	6a3a      	ldr	r2, [r7, #32]
    58e4:	b2d2      	uxtb	r2, r2
    58e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    58ea:	b2d2      	uxtb	r2, r2
    58ec:	701a      	strb	r2, [r3, #0]
    58ee:	6a3b      	ldr	r3, [r7, #32]
    58f0:	09db      	lsrs	r3, r3, #7
    58f2:	623b      	str	r3, [r7, #32]
    58f4:	6a3b      	ldr	r3, [r7, #32]
    58f6:	2b7f      	cmp	r3, #127	; 0x7f
    58f8:	d8f0      	bhi.n	58dc <SEGGER_SYSVIEW_Warn+0x34>
    58fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    58fc:	1c5a      	adds	r2, r3, #1
    58fe:	627a      	str	r2, [r7, #36]	; 0x24
    5900:	6a3a      	ldr	r2, [r7, #32]
    5902:	b2d2      	uxtb	r2, r2
    5904:	701a      	strb	r2, [r3, #0]
    5906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5908:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
    590a:	68fb      	ldr	r3, [r7, #12]
    590c:	61fb      	str	r3, [r7, #28]
    590e:	2300      	movs	r3, #0
    5910:	61bb      	str	r3, [r7, #24]
    5912:	e00b      	b.n	592c <SEGGER_SYSVIEW_Warn+0x84>
    5914:	69fb      	ldr	r3, [r7, #28]
    5916:	1c5a      	adds	r2, r3, #1
    5918:	61fa      	str	r2, [r7, #28]
    591a:	69ba      	ldr	r2, [r7, #24]
    591c:	b2d2      	uxtb	r2, r2
    591e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5922:	b2d2      	uxtb	r2, r2
    5924:	701a      	strb	r2, [r3, #0]
    5926:	69bb      	ldr	r3, [r7, #24]
    5928:	09db      	lsrs	r3, r3, #7
    592a:	61bb      	str	r3, [r7, #24]
    592c:	69bb      	ldr	r3, [r7, #24]
    592e:	2b7f      	cmp	r3, #127	; 0x7f
    5930:	d8f0      	bhi.n	5914 <SEGGER_SYSVIEW_Warn+0x6c>
    5932:	69fb      	ldr	r3, [r7, #28]
    5934:	1c5a      	adds	r2, r3, #1
    5936:	61fa      	str	r2, [r7, #28]
    5938:	69ba      	ldr	r2, [r7, #24]
    593a:	b2d2      	uxtb	r2, r2
    593c:	701a      	strb	r2, [r3, #0]
    593e:	69fb      	ldr	r3, [r7, #28]
    5940:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
    5942:	221a      	movs	r2, #26
    5944:	68f9      	ldr	r1, [r7, #12]
    5946:	6938      	ldr	r0, [r7, #16]
    5948:	f7fd f8f8 	bl	2b3c <_SendPacket>
  RECORD_END();
    594c:	697b      	ldr	r3, [r7, #20]
    594e:	f383 8811 	msr	BASEPRI, r3
}
    5952:	bf00      	nop
    5954:	3728      	adds	r7, #40	; 0x28
    5956:	46bd      	mov	sp, r7
    5958:	bd80      	pop	{r7, pc}
    595a:	bf00      	nop
    595c:	20000930 	.word	0x20000930

00005960 <SEGGER_SYSVIEW_Error>:
*    Print an error string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Error(const char* s) {
    5960:	b580      	push	{r7, lr}
    5962:	b08a      	sub	sp, #40	; 0x28
    5964:	af00      	add	r7, sp, #0
    5966:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
    5968:	f3ef 8311 	mrs	r3, BASEPRI
    596c:	f04f 0150 	mov.w	r1, #80	; 0x50
    5970:	f381 8811 	msr	BASEPRI, r1
    5974:	617b      	str	r3, [r7, #20]
    5976:	4827      	ldr	r0, [pc, #156]	; (5a14 <SEGGER_SYSVIEW_Error+0xb4>)
    5978:	f7fd f804 	bl	2984 <_PreparePacket>
    597c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
    597e:	2280      	movs	r2, #128	; 0x80
    5980:	6879      	ldr	r1, [r7, #4]
    5982:	6938      	ldr	r0, [r7, #16]
    5984:	f7fc ffb0 	bl	28e8 <_EncodeStr>
    5988:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ERROR);
    598a:	68fb      	ldr	r3, [r7, #12]
    598c:	627b      	str	r3, [r7, #36]	; 0x24
    598e:	2302      	movs	r3, #2
    5990:	623b      	str	r3, [r7, #32]
    5992:	e00b      	b.n	59ac <SEGGER_SYSVIEW_Error+0x4c>
    5994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5996:	1c5a      	adds	r2, r3, #1
    5998:	627a      	str	r2, [r7, #36]	; 0x24
    599a:	6a3a      	ldr	r2, [r7, #32]
    599c:	b2d2      	uxtb	r2, r2
    599e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    59a2:	b2d2      	uxtb	r2, r2
    59a4:	701a      	strb	r2, [r3, #0]
    59a6:	6a3b      	ldr	r3, [r7, #32]
    59a8:	09db      	lsrs	r3, r3, #7
    59aa:	623b      	str	r3, [r7, #32]
    59ac:	6a3b      	ldr	r3, [r7, #32]
    59ae:	2b7f      	cmp	r3, #127	; 0x7f
    59b0:	d8f0      	bhi.n	5994 <SEGGER_SYSVIEW_Error+0x34>
    59b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59b4:	1c5a      	adds	r2, r3, #1
    59b6:	627a      	str	r2, [r7, #36]	; 0x24
    59b8:	6a3a      	ldr	r2, [r7, #32]
    59ba:	b2d2      	uxtb	r2, r2
    59bc:	701a      	strb	r2, [r3, #0]
    59be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    59c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
    59c2:	68fb      	ldr	r3, [r7, #12]
    59c4:	61fb      	str	r3, [r7, #28]
    59c6:	2300      	movs	r3, #0
    59c8:	61bb      	str	r3, [r7, #24]
    59ca:	e00b      	b.n	59e4 <SEGGER_SYSVIEW_Error+0x84>
    59cc:	69fb      	ldr	r3, [r7, #28]
    59ce:	1c5a      	adds	r2, r3, #1
    59d0:	61fa      	str	r2, [r7, #28]
    59d2:	69ba      	ldr	r2, [r7, #24]
    59d4:	b2d2      	uxtb	r2, r2
    59d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    59da:	b2d2      	uxtb	r2, r2
    59dc:	701a      	strb	r2, [r3, #0]
    59de:	69bb      	ldr	r3, [r7, #24]
    59e0:	09db      	lsrs	r3, r3, #7
    59e2:	61bb      	str	r3, [r7, #24]
    59e4:	69bb      	ldr	r3, [r7, #24]
    59e6:	2b7f      	cmp	r3, #127	; 0x7f
    59e8:	d8f0      	bhi.n	59cc <SEGGER_SYSVIEW_Error+0x6c>
    59ea:	69fb      	ldr	r3, [r7, #28]
    59ec:	1c5a      	adds	r2, r3, #1
    59ee:	61fa      	str	r2, [r7, #28]
    59f0:	69ba      	ldr	r2, [r7, #24]
    59f2:	b2d2      	uxtb	r2, r2
    59f4:	701a      	strb	r2, [r3, #0]
    59f6:	69fb      	ldr	r3, [r7, #28]
    59f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
    59fa:	221a      	movs	r2, #26
    59fc:	68f9      	ldr	r1, [r7, #12]
    59fe:	6938      	ldr	r0, [r7, #16]
    5a00:	f7fd f89c 	bl	2b3c <_SendPacket>
  RECORD_END();
    5a04:	697b      	ldr	r3, [r7, #20]
    5a06:	f383 8811 	msr	BASEPRI, r3
}
    5a0a:	bf00      	nop
    5a0c:	3728      	adds	r7, #40	; 0x28
    5a0e:	46bd      	mov	sp, r7
    5a10:	bd80      	pop	{r7, pc}
    5a12:	bf00      	nop
    5a14:	20000930 	.word	0x20000930

00005a18 <SEGGER_SYSVIEW_EnableEvents>:
*    Enable standard SystemView events to be generated.
*
*  Parameters
*    EnableMask   - Events to be enabled.
*/
void SEGGER_SYSVIEW_EnableEvents(U32 EnableMask) {
    5a18:	b480      	push	{r7}
    5a1a:	b083      	sub	sp, #12
    5a1c:	af00      	add	r7, sp, #0
    5a1e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.DisabledEvents &= ~EnableMask;
    5a20:	4b06      	ldr	r3, [pc, #24]	; (5a3c <SEGGER_SYSVIEW_EnableEvents+0x24>)
    5a22:	69da      	ldr	r2, [r3, #28]
    5a24:	687b      	ldr	r3, [r7, #4]
    5a26:	43db      	mvns	r3, r3
    5a28:	4013      	ands	r3, r2
    5a2a:	4a04      	ldr	r2, [pc, #16]	; (5a3c <SEGGER_SYSVIEW_EnableEvents+0x24>)
    5a2c:	61d3      	str	r3, [r2, #28]
}
    5a2e:	bf00      	nop
    5a30:	370c      	adds	r7, #12
    5a32:	46bd      	mov	sp, r7
    5a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a38:	4770      	bx	lr
    5a3a:	bf00      	nop
    5a3c:	20000900 	.word	0x20000900

00005a40 <SEGGER_SYSVIEW_DisableEvents>:
*    Disable standard SystemView events to not be generated.
*
*  Parameters
*    DisableMask  - Events to be disabled.
*/
void SEGGER_SYSVIEW_DisableEvents(U32 DisableMask) {
    5a40:	b480      	push	{r7}
    5a42:	b083      	sub	sp, #12
    5a44:	af00      	add	r7, sp, #0
    5a46:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.DisabledEvents |= DisableMask;
    5a48:	4b05      	ldr	r3, [pc, #20]	; (5a60 <SEGGER_SYSVIEW_DisableEvents+0x20>)
    5a4a:	69da      	ldr	r2, [r3, #28]
    5a4c:	687b      	ldr	r3, [r7, #4]
    5a4e:	4313      	orrs	r3, r2
    5a50:	4a03      	ldr	r2, [pc, #12]	; (5a60 <SEGGER_SYSVIEW_DisableEvents+0x20>)
    5a52:	61d3      	str	r3, [r2, #28]
}
    5a54:	bf00      	nop
    5a56:	370c      	adds	r7, #12
    5a58:	46bd      	mov	sp, r7
    5a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a5e:	4770      	bx	lr
    5a60:	20000900 	.word	0x20000900

00005a64 <SEGGER_uxGetTickCounterValue>:
#define SET_TICK_DURATION(val)      portNVIC_SYSTICK_LOAD_REG = val
#define GET_TICK_DURATION()         portNVIC_SYSTICK_LOAD_REG
#define GET_TICK_CURRENT_VAL(addr)  *(addr)=portNVIC_SYSTICK_CURRENT_VALUE_REG


uint32_t SEGGER_uxGetTickCounterValue(void) {
    5a64:	b480      	push	{r7}
    5a66:	b083      	sub	sp, #12
    5a68:	af00      	add	r7, sp, #0
  uint32_t val;

  GET_TICK_CURRENT_VAL(&val);
    5a6a:	4b05      	ldr	r3, [pc, #20]	; (5a80 <SEGGER_uxGetTickCounterValue+0x1c>)
    5a6c:	681b      	ldr	r3, [r3, #0]
    5a6e:	607b      	str	r3, [r7, #4]
  return val;
    5a70:	687b      	ldr	r3, [r7, #4]
}
    5a72:	4618      	mov	r0, r3
    5a74:	370c      	adds	r7, #12
    5a76:	46bd      	mov	sp, r7
    5a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a7c:	4770      	bx	lr
    5a7e:	bf00      	nop
    5a80:	e000e018 	.word	0xe000e018

00005a84 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
    5a84:	b580      	push	{r7, lr}
    5a86:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",O="SYSVIEW_OS_NAME",D="SYSVIEW_DEVICE_NAME);
    5a88:	4803      	ldr	r0, [pc, #12]	; (5a98 <_cbSendSystemDesc+0x14>)
    5a8a:	f7fe ffa5 	bl	49d8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
    5a8e:	4803      	ldr	r0, [pc, #12]	; (5a9c <_cbSendSystemDesc+0x18>)
    5a90:	f7fe ffa2 	bl	49d8 <SEGGER_SYSVIEW_SendSysDesc>
}
    5a94:	bf00      	nop
    5a96:	bd80      	pop	{r7, pc}
    5a98:	0000fdf4 	.word	0x0000fdf4
    5a9c:	0000fe1c 	.word	0x0000fe1c

00005aa0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
    5aa0:	b580      	push	{r7, lr}
    5aa2:	af00      	add	r7, sp, #0
#if SYSVIEW_USING_FREERTOS
  #if configUSE_TRACE_HOOKS /* using Percepio Trace */ && configUSE_SEGGER_SYSTEM_VIEWER_HOOKS /* using SEGGER SystemViewer */
    #warning "Percepio Trace is enabled, this might conflict with Segger System View."
  #endif
#endif
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
    5aa4:	4b06      	ldr	r3, [pc, #24]	; (5ac0 <SEGGER_SYSVIEW_Conf+0x20>)
    5aa6:	4a07      	ldr	r2, [pc, #28]	; (5ac4 <SEGGER_SYSVIEW_Conf+0x24>)
    5aa8:	f04f 71a0 	mov.w	r1, #20971520	; 0x1400000
    5aac:	f44f 10a0 	mov.w	r0, #1310720	; 0x140000
    5ab0:	f7fd fd2e 	bl	3510 <SEGGER_SYSVIEW_Init>
      SYSVIEW_OS_API, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
    5ab4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
    5ab8:	f7fd fd68 	bl	358c <SEGGER_SYSVIEW_SetRAMBase>
}
    5abc:	bf00      	nop
    5abe:	bd80      	pop	{r7, pc}
    5ac0:	00005a85 	.word	0x00005a85
    5ac4:	0000fe84 	.word	0x0000fe84

00005ac8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
    5ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5aca:	b085      	sub	sp, #20
    5acc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
    5ace:	2300      	movs	r3, #0
    5ad0:	607b      	str	r3, [r7, #4]
    5ad2:	e048      	b.n	5b66 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
    5ad4:	4928      	ldr	r1, [pc, #160]	; (5b78 <_cbSendTaskList+0xb0>)
    5ad6:	687a      	ldr	r2, [r7, #4]
    5ad8:	4613      	mov	r3, r2
    5ada:	009b      	lsls	r3, r3, #2
    5adc:	4413      	add	r3, r2
    5ade:	009b      	lsls	r3, r3, #2
    5ae0:	440b      	add	r3, r1
    5ae2:	681b      	ldr	r3, [r3, #0]
    5ae4:	4618      	mov	r0, r3
    5ae6:	f006 f989 	bl	bdfc <uxTaskGetStackHighWaterMark>
    5aea:	4923      	ldr	r1, [pc, #140]	; (5b78 <_cbSendTaskList+0xb0>)
    5aec:	687a      	ldr	r2, [r7, #4]
    5aee:	4613      	mov	r3, r2
    5af0:	009b      	lsls	r3, r3, #2
    5af2:	4413      	add	r3, r2
    5af4:	009b      	lsls	r3, r3, #2
    5af6:	440b      	add	r3, r1
    5af8:	3310      	adds	r3, #16
    5afa:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
    5afc:	491e      	ldr	r1, [pc, #120]	; (5b78 <_cbSendTaskList+0xb0>)
    5afe:	687a      	ldr	r2, [r7, #4]
    5b00:	4613      	mov	r3, r2
    5b02:	009b      	lsls	r3, r3, #2
    5b04:	4413      	add	r3, r2
    5b06:	009b      	lsls	r3, r3, #2
    5b08:	440b      	add	r3, r1
    5b0a:	6818      	ldr	r0, [r3, #0]
    5b0c:	491a      	ldr	r1, [pc, #104]	; (5b78 <_cbSendTaskList+0xb0>)
    5b0e:	687a      	ldr	r2, [r7, #4]
    5b10:	4613      	mov	r3, r2
    5b12:	009b      	lsls	r3, r3, #2
    5b14:	4413      	add	r3, r2
    5b16:	009b      	lsls	r3, r3, #2
    5b18:	440b      	add	r3, r1
    5b1a:	3304      	adds	r3, #4
    5b1c:	681c      	ldr	r4, [r3, #0]
    5b1e:	4916      	ldr	r1, [pc, #88]	; (5b78 <_cbSendTaskList+0xb0>)
    5b20:	687a      	ldr	r2, [r7, #4]
    5b22:	4613      	mov	r3, r2
    5b24:	009b      	lsls	r3, r3, #2
    5b26:	4413      	add	r3, r2
    5b28:	009b      	lsls	r3, r3, #2
    5b2a:	440b      	add	r3, r1
    5b2c:	3308      	adds	r3, #8
    5b2e:	681d      	ldr	r5, [r3, #0]
    5b30:	4911      	ldr	r1, [pc, #68]	; (5b78 <_cbSendTaskList+0xb0>)
    5b32:	687a      	ldr	r2, [r7, #4]
    5b34:	4613      	mov	r3, r2
    5b36:	009b      	lsls	r3, r3, #2
    5b38:	4413      	add	r3, r2
    5b3a:	009b      	lsls	r3, r3, #2
    5b3c:	440b      	add	r3, r1
    5b3e:	330c      	adds	r3, #12
    5b40:	681e      	ldr	r6, [r3, #0]
    5b42:	490d      	ldr	r1, [pc, #52]	; (5b78 <_cbSendTaskList+0xb0>)
    5b44:	687a      	ldr	r2, [r7, #4]
    5b46:	4613      	mov	r3, r2
    5b48:	009b      	lsls	r3, r3, #2
    5b4a:	4413      	add	r3, r2
    5b4c:	009b      	lsls	r3, r3, #2
    5b4e:	440b      	add	r3, r1
    5b50:	3310      	adds	r3, #16
    5b52:	681b      	ldr	r3, [r3, #0]
    5b54:	9300      	str	r3, [sp, #0]
    5b56:	4633      	mov	r3, r6
    5b58:	462a      	mov	r2, r5
    5b5a:	4621      	mov	r1, r4
    5b5c:	f000 f930 	bl	5dc0 <SYSVIEW_SendTaskInfo>
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	3301      	adds	r3, #1
    5b64:	607b      	str	r3, [r7, #4]
    5b66:	4b05      	ldr	r3, [pc, #20]	; (5b7c <_cbSendTaskList+0xb4>)
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	687a      	ldr	r2, [r7, #4]
    5b6c:	429a      	cmp	r2, r3
    5b6e:	d3b1      	bcc.n	5ad4 <_cbSendTaskList+0xc>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
  }
}
    5b70:	bf00      	nop
    5b72:	370c      	adds	r7, #12
    5b74:	46bd      	mov	sp, r7
    5b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b78:	20000a14 	.word	0x20000a14
    5b7c:	20000ab4 	.word	0x20000ab4

00005b80 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
    5b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b84:	b085      	sub	sp, #20
    5b86:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
    5b88:	f005 fb7e 	bl	b288 <xTaskGetTickCountFromISR>
    5b8c:	4603      	mov	r3, r0
    5b8e:	461a      	mov	r2, r3
    5b90:	f04f 0300 	mov.w	r3, #0
    5b94:	e9c7 2302 	strd	r2, r3, [r7, #8]
  Time *= portTICK_PERIOD_MS;
    5b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    5b9c:	1892      	adds	r2, r2, r2
    5b9e:	eb43 0303 	adc.w	r3, r3, r3
    5ba2:	ea4f 0983 	mov.w	r9, r3, lsl #2
    5ba6:	ea49 7992 	orr.w	r9, r9, r2, lsr #30
    5baa:	ea4f 0882 	mov.w	r8, r2, lsl #2
    5bae:	eb12 0208 	adds.w	r2, r2, r8
    5bb2:	eb43 0309 	adc.w	r3, r3, r9
    5bb6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  Time *= 1000;
    5bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    5bbe:	4602      	mov	r2, r0
    5bc0:	460b      	mov	r3, r1
    5bc2:	009e      	lsls	r6, r3, #2
    5bc4:	607e      	str	r6, [r7, #4]
    5bc6:	687e      	ldr	r6, [r7, #4]
    5bc8:	ea46 7692 	orr.w	r6, r6, r2, lsr #30
    5bcc:	607e      	str	r6, [r7, #4]
    5bce:	0093      	lsls	r3, r2, #2
    5bd0:	603b      	str	r3, [r7, #0]
    5bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
    5bd6:	015d      	lsls	r5, r3, #5
    5bd8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
    5bdc:	0154      	lsls	r4, r2, #5
    5bde:	1aa4      	subs	r4, r4, r2
    5be0:	eb65 0503 	sbc.w	r5, r5, r3
    5be4:	1824      	adds	r4, r4, r0
    5be6:	eb45 0501 	adc.w	r5, r5, r1
    5bea:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
    5bee:	ea4b 7b54 	orr.w	fp, fp, r4, lsr #29
    5bf2:	ea4f 0ac4 	mov.w	sl, r4, lsl #3
    5bf6:	4654      	mov	r4, sl
    5bf8:	465d      	mov	r5, fp
    5bfa:	e9c7 4502 	strd	r4, r5, [r7, #8]
  return Time;
    5bfe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
    5c02:	4618      	mov	r0, r3
    5c04:	4621      	mov	r1, r4
    5c06:	3714      	adds	r7, #20
    5c08:	46bd      	mov	sp, r7
    5c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c0e:	bf00      	nop

00005c10 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
    5c10:	b580      	push	{r7, lr}
    5c12:	b086      	sub	sp, #24
    5c14:	af02      	add	r7, sp, #8
    5c16:	60f8      	str	r0, [r7, #12]
    5c18:	60b9      	str	r1, [r7, #8]
    5c1a:	607a      	str	r2, [r7, #4]
    5c1c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
    5c1e:	2205      	movs	r2, #5
    5c20:	492b      	ldr	r1, [pc, #172]	; (5cd0 <SYSVIEW_AddTask+0xc0>)
    5c22:	68b8      	ldr	r0, [r7, #8]
    5c24:	f009 ff5c 	bl	fae0 <memcmp>
    5c28:	4603      	mov	r3, r0
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d04b      	beq.n	5cc6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
    5c2e:	4b29      	ldr	r3, [pc, #164]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5c30:	681b      	ldr	r3, [r3, #0]
    5c32:	2b07      	cmp	r3, #7
    5c34:	d903      	bls.n	5c3e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
    5c36:	4828      	ldr	r0, [pc, #160]	; (5cd8 <SYSVIEW_AddTask+0xc8>)
    5c38:	f7ff fe36 	bl	58a8 <SEGGER_SYSVIEW_Warn>
    return;
    5c3c:	e044      	b.n	5cc8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
    5c3e:	4b25      	ldr	r3, [pc, #148]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5c40:	681a      	ldr	r2, [r3, #0]
    5c42:	4926      	ldr	r1, [pc, #152]	; (5cdc <SYSVIEW_AddTask+0xcc>)
    5c44:	4613      	mov	r3, r2
    5c46:	009b      	lsls	r3, r3, #2
    5c48:	4413      	add	r3, r2
    5c4a:	009b      	lsls	r3, r3, #2
    5c4c:	440b      	add	r3, r1
    5c4e:	68fa      	ldr	r2, [r7, #12]
    5c50:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
    5c52:	4b20      	ldr	r3, [pc, #128]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5c54:	681a      	ldr	r2, [r3, #0]
    5c56:	4921      	ldr	r1, [pc, #132]	; (5cdc <SYSVIEW_AddTask+0xcc>)
    5c58:	4613      	mov	r3, r2
    5c5a:	009b      	lsls	r3, r3, #2
    5c5c:	4413      	add	r3, r2
    5c5e:	009b      	lsls	r3, r3, #2
    5c60:	440b      	add	r3, r1
    5c62:	3304      	adds	r3, #4
    5c64:	68ba      	ldr	r2, [r7, #8]
    5c66:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
    5c68:	4b1a      	ldr	r3, [pc, #104]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5c6a:	681a      	ldr	r2, [r3, #0]
    5c6c:	491b      	ldr	r1, [pc, #108]	; (5cdc <SYSVIEW_AddTask+0xcc>)
    5c6e:	4613      	mov	r3, r2
    5c70:	009b      	lsls	r3, r3, #2
    5c72:	4413      	add	r3, r2
    5c74:	009b      	lsls	r3, r3, #2
    5c76:	440b      	add	r3, r1
    5c78:	3308      	adds	r3, #8
    5c7a:	687a      	ldr	r2, [r7, #4]
    5c7c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
    5c7e:	4b15      	ldr	r3, [pc, #84]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5c80:	681a      	ldr	r2, [r3, #0]
    5c82:	4916      	ldr	r1, [pc, #88]	; (5cdc <SYSVIEW_AddTask+0xcc>)
    5c84:	4613      	mov	r3, r2
    5c86:	009b      	lsls	r3, r3, #2
    5c88:	4413      	add	r3, r2
    5c8a:	009b      	lsls	r3, r3, #2
    5c8c:	440b      	add	r3, r1
    5c8e:	330c      	adds	r3, #12
    5c90:	683a      	ldr	r2, [r7, #0]
    5c92:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
    5c94:	4b0f      	ldr	r3, [pc, #60]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5c96:	681a      	ldr	r2, [r3, #0]
    5c98:	4910      	ldr	r1, [pc, #64]	; (5cdc <SYSVIEW_AddTask+0xcc>)
    5c9a:	4613      	mov	r3, r2
    5c9c:	009b      	lsls	r3, r3, #2
    5c9e:	4413      	add	r3, r2
    5ca0:	009b      	lsls	r3, r3, #2
    5ca2:	440b      	add	r3, r1
    5ca4:	3310      	adds	r3, #16
    5ca6:	69ba      	ldr	r2, [r7, #24]
    5ca8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
    5caa:	4b0a      	ldr	r3, [pc, #40]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5cac:	681b      	ldr	r3, [r3, #0]
    5cae:	3301      	adds	r3, #1
    5cb0:	4a08      	ldr	r2, [pc, #32]	; (5cd4 <SYSVIEW_AddTask+0xc4>)
    5cb2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
    5cb4:	69bb      	ldr	r3, [r7, #24]
    5cb6:	9300      	str	r3, [sp, #0]
    5cb8:	683b      	ldr	r3, [r7, #0]
    5cba:	687a      	ldr	r2, [r7, #4]
    5cbc:	68b9      	ldr	r1, [r7, #8]
    5cbe:	68f8      	ldr	r0, [r7, #12]
    5cc0:	f000 f87e 	bl	5dc0 <SYSVIEW_SendTaskInfo>
    5cc4:	e000      	b.n	5cc8 <SYSVIEW_AddTask+0xb8>
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
    return;
    5cc6:	bf00      	nop

  _NumTasks++;

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);

}
    5cc8:	3710      	adds	r7, #16
    5cca:	46bd      	mov	sp, r7
    5ccc:	bd80      	pop	{r7, pc}
    5cce:	bf00      	nop
    5cd0:	0000fe2c 	.word	0x0000fe2c
    5cd4:	20000ab4 	.word	0x20000ab4
    5cd8:	0000fe34 	.word	0x0000fe34
    5cdc:	20000a14 	.word	0x20000a14

00005ce0 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
    5ce0:	b580      	push	{r7, lr}
    5ce2:	b088      	sub	sp, #32
    5ce4:	af02      	add	r7, sp, #8
    5ce6:	60f8      	str	r0, [r7, #12]
    5ce8:	60b9      	str	r1, [r7, #8]
    5cea:	607a      	str	r2, [r7, #4]
    5cec:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
    5cee:	2205      	movs	r2, #5
    5cf0:	4930      	ldr	r1, [pc, #192]	; (5db4 <SYSVIEW_UpdateTask+0xd4>)
    5cf2:	68b8      	ldr	r0, [r7, #8]
    5cf4:	f009 fef4 	bl	fae0 <memcmp>
    5cf8:	4603      	mov	r3, r0
    5cfa:	2b00      	cmp	r3, #0
    5cfc:	d056      	beq.n	5dac <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
    5cfe:	2300      	movs	r3, #0
    5d00:	617b      	str	r3, [r7, #20]
    5d02:	e00d      	b.n	5d20 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
    5d04:	492c      	ldr	r1, [pc, #176]	; (5db8 <SYSVIEW_UpdateTask+0xd8>)
    5d06:	697a      	ldr	r2, [r7, #20]
    5d08:	4613      	mov	r3, r2
    5d0a:	009b      	lsls	r3, r3, #2
    5d0c:	4413      	add	r3, r2
    5d0e:	009b      	lsls	r3, r3, #2
    5d10:	440b      	add	r3, r1
    5d12:	681a      	ldr	r2, [r3, #0]
    5d14:	68fb      	ldr	r3, [r7, #12]
    5d16:	429a      	cmp	r2, r3
    5d18:	d008      	beq.n	5d2c <SYSVIEW_UpdateTask+0x4c>
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
    5d1a:	697b      	ldr	r3, [r7, #20]
    5d1c:	3301      	adds	r3, #1
    5d1e:	617b      	str	r3, [r7, #20]
    5d20:	4b26      	ldr	r3, [pc, #152]	; (5dbc <SYSVIEW_UpdateTask+0xdc>)
    5d22:	681b      	ldr	r3, [r3, #0]
    5d24:	697a      	ldr	r2, [r7, #20]
    5d26:	429a      	cmp	r2, r3
    5d28:	d3ec      	bcc.n	5d04 <SYSVIEW_UpdateTask+0x24>
    5d2a:	e000      	b.n	5d2e <SYSVIEW_UpdateTask+0x4e>
    if (_aTasks[n].xHandle == xHandle) {
      break;
    5d2c:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
    5d2e:	4b23      	ldr	r3, [pc, #140]	; (5dbc <SYSVIEW_UpdateTask+0xdc>)
    5d30:	681b      	ldr	r3, [r3, #0]
    5d32:	697a      	ldr	r2, [r7, #20]
    5d34:	429a      	cmp	r2, r3
    5d36:	d230      	bcs.n	5d9a <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
    5d38:	491f      	ldr	r1, [pc, #124]	; (5db8 <SYSVIEW_UpdateTask+0xd8>)
    5d3a:	697a      	ldr	r2, [r7, #20]
    5d3c:	4613      	mov	r3, r2
    5d3e:	009b      	lsls	r3, r3, #2
    5d40:	4413      	add	r3, r2
    5d42:	009b      	lsls	r3, r3, #2
    5d44:	440b      	add	r3, r1
    5d46:	3304      	adds	r3, #4
    5d48:	68ba      	ldr	r2, [r7, #8]
    5d4a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
    5d4c:	491a      	ldr	r1, [pc, #104]	; (5db8 <SYSVIEW_UpdateTask+0xd8>)
    5d4e:	697a      	ldr	r2, [r7, #20]
    5d50:	4613      	mov	r3, r2
    5d52:	009b      	lsls	r3, r3, #2
    5d54:	4413      	add	r3, r2
    5d56:	009b      	lsls	r3, r3, #2
    5d58:	440b      	add	r3, r1
    5d5a:	3308      	adds	r3, #8
    5d5c:	687a      	ldr	r2, [r7, #4]
    5d5e:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
    5d60:	4915      	ldr	r1, [pc, #84]	; (5db8 <SYSVIEW_UpdateTask+0xd8>)
    5d62:	697a      	ldr	r2, [r7, #20]
    5d64:	4613      	mov	r3, r2
    5d66:	009b      	lsls	r3, r3, #2
    5d68:	4413      	add	r3, r2
    5d6a:	009b      	lsls	r3, r3, #2
    5d6c:	440b      	add	r3, r1
    5d6e:	330c      	adds	r3, #12
    5d70:	683a      	ldr	r2, [r7, #0]
    5d72:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
    5d74:	4910      	ldr	r1, [pc, #64]	; (5db8 <SYSVIEW_UpdateTask+0xd8>)
    5d76:	697a      	ldr	r2, [r7, #20]
    5d78:	4613      	mov	r3, r2
    5d7a:	009b      	lsls	r3, r3, #2
    5d7c:	4413      	add	r3, r2
    5d7e:	009b      	lsls	r3, r3, #2
    5d80:	440b      	add	r3, r1
    5d82:	3310      	adds	r3, #16
    5d84:	6a3a      	ldr	r2, [r7, #32]
    5d86:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
    5d88:	6a3b      	ldr	r3, [r7, #32]
    5d8a:	9300      	str	r3, [sp, #0]
    5d8c:	683b      	ldr	r3, [r7, #0]
    5d8e:	687a      	ldr	r2, [r7, #4]
    5d90:	68b9      	ldr	r1, [r7, #8]
    5d92:	68f8      	ldr	r0, [r7, #12]
    5d94:	f000 f814 	bl	5dc0 <SYSVIEW_SendTaskInfo>
    5d98:	e009      	b.n	5dae <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
    5d9a:	6a3b      	ldr	r3, [r7, #32]
    5d9c:	9300      	str	r3, [sp, #0]
    5d9e:	683b      	ldr	r3, [r7, #0]
    5da0:	687a      	ldr	r2, [r7, #4]
    5da2:	68b9      	ldr	r1, [r7, #8]
    5da4:	68f8      	ldr	r0, [r7, #12]
    5da6:	f7ff ff33 	bl	5c10 <SYSVIEW_AddTask>
    5daa:	e000      	b.n	5dae <SYSVIEW_UpdateTask+0xce>
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
    return;
    5dac:	bf00      	nop

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
  }
}
    5dae:	3718      	adds	r7, #24
    5db0:	46bd      	mov	sp, r7
    5db2:	bd80      	pop	{r7, pc}
    5db4:	0000fe2c 	.word	0x0000fe2c
    5db8:	20000a14 	.word	0x20000a14
    5dbc:	20000ab4 	.word	0x20000ab4

00005dc0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
    5dc0:	b580      	push	{r7, lr}
    5dc2:	b08a      	sub	sp, #40	; 0x28
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	60f8      	str	r0, [r7, #12]
    5dc8:	60b9      	str	r1, [r7, #8]
    5dca:	607a      	str	r2, [r7, #4]
    5dcc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
    5dce:	f107 0314 	add.w	r3, r7, #20
    5dd2:	2214      	movs	r2, #20
    5dd4:	2100      	movs	r1, #0
    5dd6:	4618      	mov	r0, r3
    5dd8:	f009 fe9c 	bl	fb14 <memset>
  TaskInfo.TaskID     = TaskID;
    5ddc:	68fb      	ldr	r3, [r7, #12]
    5dde:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
    5de0:	68bb      	ldr	r3, [r7, #8]
    5de2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
    5de4:	687b      	ldr	r3, [r7, #4]
    5de6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
    5de8:	683b      	ldr	r3, [r7, #0]
    5dea:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
    5dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5dee:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
    5df0:	f107 0314 	add.w	r3, r7, #20
    5df4:	4618      	mov	r0, r3
    5df6:	f7fe fcf5 	bl	47e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
    5dfa:	bf00      	nop
    5dfc:	3728      	adds	r7, #40	; 0x28
    5dfe:	46bd      	mov	sp, r7
    5e00:	bd80      	pop	{r7, pc}
    5e02:	bf00      	nop

00005e04 <SYSVIEW_RecordU32x4>:
*       SYSVIEW_RecordU32x4()
*
*  Function description
*    Record an event with 4 parameters
*/
void SYSVIEW_RecordU32x4(unsigned Id, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
    5e04:	b580      	push	{r7, lr}
    5e06:	b08e      	sub	sp, #56	; 0x38
    5e08:	af00      	add	r7, sp, #0
    5e0a:	60f8      	str	r0, [r7, #12]
    5e0c:	60b9      	str	r1, [r7, #8]
    5e0e:	607a      	str	r2, [r7, #4]
    5e10:	603b      	str	r3, [r7, #0]
      U8  aPacket[SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32];
      U8* pPayload;
      //
      pPayload = SEGGER_SYSVIEW_PREPARE_PACKET(aPacket);                // Prepare the packet for SystemView
    5e12:	f107 0314 	add.w	r3, r7, #20
    5e16:	3304      	adds	r3, #4
    5e18:	637b      	str	r3, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para0);             // Add the first parameter to the packet
    5e1a:	68b9      	ldr	r1, [r7, #8]
    5e1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e1e:	f7ff fa1b 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e22:	6378      	str	r0, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para1);             // Add the second parameter to the packet
    5e24:	6879      	ldr	r1, [r7, #4]
    5e26:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e28:	f7ff fa16 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e2c:	6378      	str	r0, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para2);             // Add the third parameter to the packet
    5e2e:	6839      	ldr	r1, [r7, #0]
    5e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e32:	f7ff fa11 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e36:	6378      	str	r0, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para3);             // Add the fourth parameter to the packet
    5e38:	6c39      	ldr	r1, [r7, #64]	; 0x40
    5e3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e3c:	f7ff fa0c 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e40:	6378      	str	r0, [r7, #52]	; 0x34
      //
      SEGGER_SYSVIEW_SendPacket(&aPacket[0], pPayload, Id);             // Send the packet
    5e42:	f107 0314 	add.w	r3, r7, #20
    5e46:	68fa      	ldr	r2, [r7, #12]
    5e48:	6b79      	ldr	r1, [r7, #52]	; 0x34
    5e4a:	4618      	mov	r0, r3
    5e4c:	f7ff f9e8 	bl	5220 <SEGGER_SYSVIEW_SendPacket>
}
    5e50:	bf00      	nop
    5e52:	3738      	adds	r7, #56	; 0x38
    5e54:	46bd      	mov	sp, r7
    5e56:	bd80      	pop	{r7, pc}

00005e58 <SYSVIEW_RecordU32x5>:
*       SYSVIEW_RecordU32x5()
*
*  Function description
*    Record an event with 5 parameters
*/
void SYSVIEW_RecordU32x5(unsigned Id, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
    5e58:	b580      	push	{r7, lr}
    5e5a:	b08e      	sub	sp, #56	; 0x38
    5e5c:	af00      	add	r7, sp, #0
    5e5e:	60f8      	str	r0, [r7, #12]
    5e60:	60b9      	str	r1, [r7, #8]
    5e62:	607a      	str	r2, [r7, #4]
    5e64:	603b      	str	r3, [r7, #0]
      U8  aPacket[SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32];
      U8* pPayload;
      //
      pPayload = SEGGER_SYSVIEW_PREPARE_PACKET(aPacket);                // Prepare the packet for SystemView
    5e66:	f107 0310 	add.w	r3, r7, #16
    5e6a:	3304      	adds	r3, #4
    5e6c:	637b      	str	r3, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para0);             // Add the first parameter to the packet
    5e6e:	68b9      	ldr	r1, [r7, #8]
    5e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e72:	f7ff f9f1 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e76:	6378      	str	r0, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para1);             // Add the second parameter to the packet
    5e78:	6879      	ldr	r1, [r7, #4]
    5e7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e7c:	f7ff f9ec 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e80:	6378      	str	r0, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para2);             // Add the third parameter to the packet
    5e82:	6839      	ldr	r1, [r7, #0]
    5e84:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e86:	f7ff f9e7 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e8a:	6378      	str	r0, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para3);             // Add the fourth parameter to the packet
    5e8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
    5e8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e90:	f7ff f9e2 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e94:	6378      	str	r0, [r7, #52]	; 0x34
      pPayload = SEGGER_SYSVIEW_EncodeU32(pPayload, Para4);             // Add the fifth parameter to the packet
    5e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
    5e98:	6b78      	ldr	r0, [r7, #52]	; 0x34
    5e9a:	f7ff f9dd 	bl	5258 <SEGGER_SYSVIEW_EncodeU32>
    5e9e:	6378      	str	r0, [r7, #52]	; 0x34
      //
      SEGGER_SYSVIEW_SendPacket(&aPacket[0], pPayload, Id);             // Send the packet
    5ea0:	f107 0310 	add.w	r3, r7, #16
    5ea4:	68fa      	ldr	r2, [r7, #12]
    5ea6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    5ea8:	4618      	mov	r0, r3
    5eaa:	f7ff f9b9 	bl	5220 <SEGGER_SYSVIEW_SendPacket>
}
    5eae:	bf00      	nop
    5eb0:	3738      	adds	r7, #56	; 0x38
    5eb2:	46bd      	mov	sp, r7
    5eb4:	bd80      	pop	{r7, pc}
    5eb6:	bf00      	nop

00005eb8 <SYS1_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void SYS1_Init(void)
{
    5eb8:	b580      	push	{r7, lr}
    5eba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Conf(); /* initialize Segger System Viewer */
    5ebc:	f7ff fdf0 	bl	5aa0 <SEGGER_SYSVIEW_Conf>
}
    5ec0:	bf00      	nop
    5ec2:	bd80      	pop	{r7, pc}

00005ec4 <UTIL1_strcpy>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] src The source string to copy
*/
void UTIL1_strcpy(uint8_t *dst, size_t dstSize, const unsigned char *src)
{
    5ec4:	b480      	push	{r7}
    5ec6:	b085      	sub	sp, #20
    5ec8:	af00      	add	r7, sp, #0
    5eca:	60f8      	str	r0, [r7, #12]
    5ecc:	60b9      	str	r1, [r7, #8]
    5ece:	607a      	str	r2, [r7, #4]
  dstSize--; /* for zero byte */
    5ed0:	68bb      	ldr	r3, [r7, #8]
    5ed2:	3b01      	subs	r3, #1
    5ed4:	60bb      	str	r3, [r7, #8]
  while (dstSize > 0 && *src != '\0') {
    5ed6:	e00a      	b.n	5eee <UTIL1_strcpy+0x2a>
    *dst++ = *src++;
    5ed8:	68fb      	ldr	r3, [r7, #12]
    5eda:	1c5a      	adds	r2, r3, #1
    5edc:	60fa      	str	r2, [r7, #12]
    5ede:	687a      	ldr	r2, [r7, #4]
    5ee0:	1c51      	adds	r1, r2, #1
    5ee2:	6079      	str	r1, [r7, #4]
    5ee4:	7812      	ldrb	r2, [r2, #0]
    5ee6:	701a      	strb	r2, [r3, #0]
    dstSize--;
    5ee8:	68bb      	ldr	r3, [r7, #8]
    5eea:	3b01      	subs	r3, #1
    5eec:	60bb      	str	r3, [r7, #8]
  \param[in] src The source string to copy
*/
void UTIL1_strcpy(uint8_t *dst, size_t dstSize, const unsigned char *src)
{
  dstSize--; /* for zero byte */
  while (dstSize > 0 && *src != '\0') {
    5eee:	68bb      	ldr	r3, [r7, #8]
    5ef0:	2b00      	cmp	r3, #0
    5ef2:	d003      	beq.n	5efc <UTIL1_strcpy+0x38>
    5ef4:	687b      	ldr	r3, [r7, #4]
    5ef6:	781b      	ldrb	r3, [r3, #0]
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d1ed      	bne.n	5ed8 <UTIL1_strcpy+0x14>
    *dst++ = *src++;
    dstSize--;
  }
  *dst = '\0';
    5efc:	68fb      	ldr	r3, [r7, #12]
    5efe:	2200      	movs	r2, #0
    5f00:	701a      	strb	r2, [r3, #0]
}
    5f02:	bf00      	nop
    5f04:	3714      	adds	r7, #20
    5f06:	46bd      	mov	sp, r7
    5f08:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f0c:	4770      	bx	lr
    5f0e:	bf00      	nop

00005f10 <UTIL1_strcat>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] src The source string to add
  */
void UTIL1_strcat(uint8_t *dst, size_t dstSize, const unsigned char *src)
{
    5f10:	b480      	push	{r7}
    5f12:	b085      	sub	sp, #20
    5f14:	af00      	add	r7, sp, #0
    5f16:	60f8      	str	r0, [r7, #12]
    5f18:	60b9      	str	r1, [r7, #8]
    5f1a:	607a      	str	r2, [r7, #4]
  dstSize--; /* for zero byte */
    5f1c:	68bb      	ldr	r3, [r7, #8]
    5f1e:	3b01      	subs	r3, #1
    5f20:	60bb      	str	r3, [r7, #8]
  /* point to the end of the source */
  while (dstSize > 0 && *dst != '\0') {
    5f22:	e005      	b.n	5f30 <UTIL1_strcat+0x20>
    dst++;
    5f24:	68fb      	ldr	r3, [r7, #12]
    5f26:	3301      	adds	r3, #1
    5f28:	60fb      	str	r3, [r7, #12]
    dstSize--;
    5f2a:	68bb      	ldr	r3, [r7, #8]
    5f2c:	3b01      	subs	r3, #1
    5f2e:	60bb      	str	r3, [r7, #8]
  */
void UTIL1_strcat(uint8_t *dst, size_t dstSize, const unsigned char *src)
{
  dstSize--; /* for zero byte */
  /* point to the end of the source */
  while (dstSize > 0 && *dst != '\0') {
    5f30:	68bb      	ldr	r3, [r7, #8]
    5f32:	2b00      	cmp	r3, #0
    5f34:	d00f      	beq.n	5f56 <UTIL1_strcat+0x46>
    5f36:	68fb      	ldr	r3, [r7, #12]
    5f38:	781b      	ldrb	r3, [r3, #0]
    5f3a:	2b00      	cmp	r3, #0
    5f3c:	d1f2      	bne.n	5f24 <UTIL1_strcat+0x14>
    dst++;
    dstSize--;
  }
  /* copy the src in the destination */
  while (dstSize > 0 && *src != '\0') {
    5f3e:	e00a      	b.n	5f56 <UTIL1_strcat+0x46>
    *dst++ = *src++;
    5f40:	68fb      	ldr	r3, [r7, #12]
    5f42:	1c5a      	adds	r2, r3, #1
    5f44:	60fa      	str	r2, [r7, #12]
    5f46:	687a      	ldr	r2, [r7, #4]
    5f48:	1c51      	adds	r1, r2, #1
    5f4a:	6079      	str	r1, [r7, #4]
    5f4c:	7812      	ldrb	r2, [r2, #0]
    5f4e:	701a      	strb	r2, [r3, #0]
    dstSize--;
    5f50:	68bb      	ldr	r3, [r7, #8]
    5f52:	3b01      	subs	r3, #1
    5f54:	60bb      	str	r3, [r7, #8]
  while (dstSize > 0 && *dst != '\0') {
    dst++;
    dstSize--;
  }
  /* copy the src in the destination */
  while (dstSize > 0 && *src != '\0') {
    5f56:	68bb      	ldr	r3, [r7, #8]
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d003      	beq.n	5f64 <UTIL1_strcat+0x54>
    5f5c:	687b      	ldr	r3, [r7, #4]
    5f5e:	781b      	ldrb	r3, [r3, #0]
    5f60:	2b00      	cmp	r3, #0
    5f62:	d1ed      	bne.n	5f40 <UTIL1_strcat+0x30>
    *dst++ = *src++;
    dstSize--;
  }
  /* terminate the string */
  *dst = '\0';
    5f64:	68fb      	ldr	r3, [r7, #12]
    5f66:	2200      	movs	r2, #0
    5f68:	701a      	strb	r2, [r3, #0]
}
    5f6a:	bf00      	nop
    5f6c:	3714      	adds	r7, #20
    5f6e:	46bd      	mov	sp, r7
    5f70:	f85d 7b04 	ldr.w	r7, [sp], #4
    5f74:	4770      	bx	lr
    5f76:	bf00      	nop

00005f78 <UTIL1_chcat>:
**         ch              - character to append
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_chcat(uint8_t *dst, size_t dstSize, uint8_t ch)
{
    5f78:	b480      	push	{r7}
    5f7a:	b085      	sub	sp, #20
    5f7c:	af00      	add	r7, sp, #0
    5f7e:	60f8      	str	r0, [r7, #12]
    5f80:	60b9      	str	r1, [r7, #8]
    5f82:	4613      	mov	r3, r2
    5f84:	71fb      	strb	r3, [r7, #7]
  dstSize--; /* for zero byte */
    5f86:	68bb      	ldr	r3, [r7, #8]
    5f88:	3b01      	subs	r3, #1
    5f8a:	60bb      	str	r3, [r7, #8]
  /* point to the end of the source */
  while (dstSize > 0 && *dst != '\0') {
    5f8c:	e005      	b.n	5f9a <UTIL1_chcat+0x22>
    dst++;
    5f8e:	68fb      	ldr	r3, [r7, #12]
    5f90:	3301      	adds	r3, #1
    5f92:	60fb      	str	r3, [r7, #12]
    dstSize--;
    5f94:	68bb      	ldr	r3, [r7, #8]
    5f96:	3b01      	subs	r3, #1
    5f98:	60bb      	str	r3, [r7, #8]
*/
void UTIL1_chcat(uint8_t *dst, size_t dstSize, uint8_t ch)
{
  dstSize--; /* for zero byte */
  /* point to the end of the source */
  while (dstSize > 0 && *dst != '\0') {
    5f9a:	68bb      	ldr	r3, [r7, #8]
    5f9c:	2b00      	cmp	r3, #0
    5f9e:	d003      	beq.n	5fa8 <UTIL1_chcat+0x30>
    5fa0:	68fb      	ldr	r3, [r7, #12]
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	d1f2      	bne.n	5f8e <UTIL1_chcat+0x16>
    dst++;
    dstSize--;
  }
  /* copy the ch in the destination */
  if (dstSize > 0) {
    5fa8:	68bb      	ldr	r3, [r7, #8]
    5faa:	2b00      	cmp	r3, #0
    5fac:	d004      	beq.n	5fb8 <UTIL1_chcat+0x40>
    *dst++ = ch;
    5fae:	68fb      	ldr	r3, [r7, #12]
    5fb0:	1c5a      	adds	r2, r3, #1
    5fb2:	60fa      	str	r2, [r7, #12]
    5fb4:	79fa      	ldrb	r2, [r7, #7]
    5fb6:	701a      	strb	r2, [r3, #0]
  }
  /* terminate the string */
  *dst = '\0';
    5fb8:	68fb      	ldr	r3, [r7, #12]
    5fba:	2200      	movs	r2, #0
    5fbc:	701a      	strb	r2, [r3, #0]
}
    5fbe:	bf00      	nop
    5fc0:	3714      	adds	r7, #20
    5fc2:	46bd      	mov	sp, r7
    5fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5fc8:	4770      	bx	lr
    5fca:	bf00      	nop

00005fcc <UTIL1_Num8uToStr>:
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 8bit unsigned number to convert.
 */
void UTIL1_Num8uToStr(uint8_t *dst, size_t dstSize, uint8_t val)
{
    5fcc:	b580      	push	{r7, lr}
    5fce:	b084      	sub	sp, #16
    5fd0:	af00      	add	r7, sp, #0
    5fd2:	60f8      	str	r0, [r7, #12]
    5fd4:	60b9      	str	r1, [r7, #8]
    5fd6:	4613      	mov	r3, r2
    5fd8:	71fb      	strb	r3, [r7, #7]
  UTIL1_Num16uToStr(dst, dstSize, (uint16_t)val);
    5fda:	79fb      	ldrb	r3, [r7, #7]
    5fdc:	b29b      	uxth	r3, r3
    5fde:	461a      	mov	r2, r3
    5fe0:	68b9      	ldr	r1, [r7, #8]
    5fe2:	68f8      	ldr	r0, [r7, #12]
    5fe4:	f000 f818 	bl	6018 <UTIL1_Num16uToStr>
}
    5fe8:	bf00      	nop
    5fea:	3710      	adds	r7, #16
    5fec:	46bd      	mov	sp, r7
    5fee:	bd80      	pop	{r7, pc}

00005ff0 <UTIL1_Num8sToStr>:
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 8bit signed number to convert.
 */
void UTIL1_Num8sToStr(uint8_t *dst, size_t dstSize, signed char val)
{
    5ff0:	b580      	push	{r7, lr}
    5ff2:	b084      	sub	sp, #16
    5ff4:	af00      	add	r7, sp, #0
    5ff6:	60f8      	str	r0, [r7, #12]
    5ff8:	60b9      	str	r1, [r7, #8]
    5ffa:	4613      	mov	r3, r2
    5ffc:	71fb      	strb	r3, [r7, #7]
  UTIL1_Num16sToStr(dst, dstSize, (int16_t)val);
    5ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
    6002:	b21b      	sxth	r3, r3
    6004:	461a      	mov	r2, r3
    6006:	68b9      	ldr	r1, [r7, #8]
    6008:	68f8      	ldr	r0, [r7, #12]
    600a:	f000 f87b 	bl	6104 <UTIL1_Num16sToStr>
}
    600e:	bf00      	nop
    6010:	3710      	adds	r7, #16
    6012:	46bd      	mov	sp, r7
    6014:	bd80      	pop	{r7, pc}
    6016:	bf00      	nop

00006018 <UTIL1_Num16uToStr>:
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 16bit unsigned number to convert.
 */
void UTIL1_Num16uToStr(uint8_t *dst, size_t dstSize, uint16_t val)
{
    6018:	b480      	push	{r7}
    601a:	b089      	sub	sp, #36	; 0x24
    601c:	af00      	add	r7, sp, #0
    601e:	60f8      	str	r0, [r7, #12]
    6020:	60b9      	str	r1, [r7, #8]
    6022:	4613      	mov	r3, r2
    6024:	80fb      	strh	r3, [r7, #6]
  unsigned char *ptr = ((unsigned char *)dst);
    6026:	68fb      	ldr	r3, [r7, #12]
    6028:	61bb      	str	r3, [r7, #24]
  unsigned char i=0, j;
    602a:	2300      	movs	r3, #0
    602c:	77fb      	strb	r3, [r7, #31]
  unsigned char tmp;

  dstSize--; /* for zero byte */
    602e:	68bb      	ldr	r3, [r7, #8]
    6030:	3b01      	subs	r3, #1
    6032:	60bb      	str	r3, [r7, #8]
  if (val == 0 && dstSize > 0){
    6034:	88fb      	ldrh	r3, [r7, #6]
    6036:	2b00      	cmp	r3, #0
    6038:	d12c      	bne.n	6094 <UTIL1_Num16uToStr+0x7c>
    603a:	68bb      	ldr	r3, [r7, #8]
    603c:	2b00      	cmp	r3, #0
    603e:	d029      	beq.n	6094 <UTIL1_Num16uToStr+0x7c>
    ptr[i++] = '0';
    6040:	7ffb      	ldrb	r3, [r7, #31]
    6042:	1c5a      	adds	r2, r3, #1
    6044:	77fa      	strb	r2, [r7, #31]
    6046:	461a      	mov	r2, r3
    6048:	69bb      	ldr	r3, [r7, #24]
    604a:	4413      	add	r3, r2
    604c:	2230      	movs	r2, #48	; 0x30
    604e:	701a      	strb	r2, [r3, #0]
    dstSize--;
    6050:	68bb      	ldr	r3, [r7, #8]
    6052:	3b01      	subs	r3, #1
    6054:	60bb      	str	r3, [r7, #8]
  }
  while (val > 0 && dstSize > 0) {
    6056:	e01d      	b.n	6094 <UTIL1_Num16uToStr+0x7c>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    6058:	7ffb      	ldrb	r3, [r7, #31]
    605a:	1c5a      	adds	r2, r3, #1
    605c:	77fa      	strb	r2, [r7, #31]
    605e:	461a      	mov	r2, r3
    6060:	69bb      	ldr	r3, [r7, #24]
    6062:	1898      	adds	r0, r3, r2
    6064:	88fa      	ldrh	r2, [r7, #6]
    6066:	4b26      	ldr	r3, [pc, #152]	; (6100 <UTIL1_Num16uToStr+0xe8>)
    6068:	fba3 1302 	umull	r1, r3, r3, r2
    606c:	08d9      	lsrs	r1, r3, #3
    606e:	460b      	mov	r3, r1
    6070:	009b      	lsls	r3, r3, #2
    6072:	440b      	add	r3, r1
    6074:	005b      	lsls	r3, r3, #1
    6076:	1ad3      	subs	r3, r2, r3
    6078:	b29b      	uxth	r3, r3
    607a:	b2db      	uxtb	r3, r3
    607c:	3330      	adds	r3, #48	; 0x30
    607e:	b2db      	uxtb	r3, r3
    6080:	7003      	strb	r3, [r0, #0]
    dstSize--;
    6082:	68bb      	ldr	r3, [r7, #8]
    6084:	3b01      	subs	r3, #1
    6086:	60bb      	str	r3, [r7, #8]
    val /= 10;
    6088:	88fb      	ldrh	r3, [r7, #6]
    608a:	4a1d      	ldr	r2, [pc, #116]	; (6100 <UTIL1_Num16uToStr+0xe8>)
    608c:	fba2 2303 	umull	r2, r3, r2, r3
    6090:	08db      	lsrs	r3, r3, #3
    6092:	80fb      	strh	r3, [r7, #6]
  dstSize--; /* for zero byte */
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    6094:	88fb      	ldrh	r3, [r7, #6]
    6096:	2b00      	cmp	r3, #0
    6098:	d002      	beq.n	60a0 <UTIL1_Num16uToStr+0x88>
    609a:	68bb      	ldr	r3, [r7, #8]
    609c:	2b00      	cmp	r3, #0
    609e:	d1db      	bne.n	6058 <UTIL1_Num16uToStr+0x40>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    dstSize--;
    val /= 10;
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    60a0:	2300      	movs	r3, #0
    60a2:	77bb      	strb	r3, [r7, #30]
    60a4:	e01a      	b.n	60dc <UTIL1_Num16uToStr+0xc4>
    tmp = ptr[j];
    60a6:	7fbb      	ldrb	r3, [r7, #30]
    60a8:	69ba      	ldr	r2, [r7, #24]
    60aa:	4413      	add	r3, r2
    60ac:	781b      	ldrb	r3, [r3, #0]
    60ae:	75fb      	strb	r3, [r7, #23]
    ptr[j] = ptr[(i-j)-1];
    60b0:	7fbb      	ldrb	r3, [r7, #30]
    60b2:	69ba      	ldr	r2, [r7, #24]
    60b4:	4413      	add	r3, r2
    60b6:	7ff9      	ldrb	r1, [r7, #31]
    60b8:	7fba      	ldrb	r2, [r7, #30]
    60ba:	1a8a      	subs	r2, r1, r2
    60bc:	3a01      	subs	r2, #1
    60be:	69b9      	ldr	r1, [r7, #24]
    60c0:	440a      	add	r2, r1
    60c2:	7812      	ldrb	r2, [r2, #0]
    60c4:	701a      	strb	r2, [r3, #0]
    ptr[(i-j)-1] = tmp;
    60c6:	7ffa      	ldrb	r2, [r7, #31]
    60c8:	7fbb      	ldrb	r3, [r7, #30]
    60ca:	1ad3      	subs	r3, r2, r3
    60cc:	3b01      	subs	r3, #1
    60ce:	69ba      	ldr	r2, [r7, #24]
    60d0:	4413      	add	r3, r2
    60d2:	7dfa      	ldrb	r2, [r7, #23]
    60d4:	701a      	strb	r2, [r3, #0]
  while (val > 0 && dstSize > 0) {
    ptr[i++] = (unsigned char)((val % 10) + '0');
    dstSize--;
    val /= 10;
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    60d6:	7fbb      	ldrb	r3, [r7, #30]
    60d8:	3301      	adds	r3, #1
    60da:	77bb      	strb	r3, [r7, #30]
    60dc:	7ffb      	ldrb	r3, [r7, #31]
    60de:	085b      	lsrs	r3, r3, #1
    60e0:	b2db      	uxtb	r3, r3
    60e2:	7fba      	ldrb	r2, [r7, #30]
    60e4:	429a      	cmp	r2, r3
    60e6:	d3de      	bcc.n	60a6 <UTIL1_Num16uToStr+0x8e>
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
    60e8:	7ffb      	ldrb	r3, [r7, #31]
    60ea:	69ba      	ldr	r2, [r7, #24]
    60ec:	4413      	add	r3, r2
    60ee:	2200      	movs	r2, #0
    60f0:	701a      	strb	r2, [r3, #0]
}
    60f2:	bf00      	nop
    60f4:	3724      	adds	r7, #36	; 0x24
    60f6:	46bd      	mov	sp, r7
    60f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    60fc:	4770      	bx	lr
    60fe:	bf00      	nop
    6100:	cccccccd 	.word	0xcccccccd

00006104 <UTIL1_Num16sToStr>:
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 16bit signed number to convert.
 */
void UTIL1_Num16sToStr(uint8_t *dst, size_t dstSize, int16_t val)
{
    6104:	b580      	push	{r7, lr}
    6106:	b088      	sub	sp, #32
    6108:	af00      	add	r7, sp, #0
    610a:	60f8      	str	r0, [r7, #12]
    610c:	60b9      	str	r1, [r7, #8]
    610e:	4613      	mov	r3, r2
    6110:	80fb      	strh	r3, [r7, #6]
  unsigned char *ptr =  ((unsigned char *)dst);
    6112:	68fb      	ldr	r3, [r7, #12]
    6114:	61bb      	str	r3, [r7, #24]
  unsigned char i=0, j;
    6116:	2300      	movs	r3, #0
    6118:	77fb      	strb	r3, [r7, #31]
  unsigned char tmp;
  unsigned char sign = (unsigned char)(val < 0);
    611a:	88fb      	ldrh	r3, [r7, #6]
    611c:	0bdb      	lsrs	r3, r3, #15
    611e:	b2db      	uxtb	r3, r3
    6120:	75fb      	strb	r3, [r7, #23]

  if (val==(int16_t)(0x8000)) { /* special case 0x8000/-32768: prevent overflow below. */
    6122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6126:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
    612a:	d105      	bne.n	6138 <UTIL1_Num16sToStr+0x34>
    UTIL1_strcpy(dst, dstSize, (unsigned char*)"-32768");
    612c:	4a43      	ldr	r2, [pc, #268]	; (623c <UTIL1_Num16sToStr+0x138>)
    612e:	68b9      	ldr	r1, [r7, #8]
    6130:	68f8      	ldr	r0, [r7, #12]
    6132:	f7ff fec7 	bl	5ec4 <UTIL1_strcpy>
    return;
    6136:	e07e      	b.n	6236 <UTIL1_Num16sToStr+0x132>
  }
  dstSize--; /* for zero byte */
    6138:	68bb      	ldr	r3, [r7, #8]
    613a:	3b01      	subs	r3, #1
    613c:	60bb      	str	r3, [r7, #8]
  if (sign) {
    613e:	7dfb      	ldrb	r3, [r7, #23]
    6140:	2b00      	cmp	r3, #0
    6142:	d003      	beq.n	614c <UTIL1_Num16sToStr+0x48>
    val = (int16_t)(-val);
    6144:	88fb      	ldrh	r3, [r7, #6]
    6146:	425b      	negs	r3, r3
    6148:	b29b      	uxth	r3, r3
    614a:	80fb      	strh	r3, [r7, #6]
  }
  if (val == 0 && dstSize > 0){
    614c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    6150:	2b00      	cmp	r3, #0
    6152:	d132      	bne.n	61ba <UTIL1_Num16sToStr+0xb6>
    6154:	68bb      	ldr	r3, [r7, #8]
    6156:	2b00      	cmp	r3, #0
    6158:	d02f      	beq.n	61ba <UTIL1_Num16sToStr+0xb6>
    ptr[i++] = '0';
    615a:	7ffb      	ldrb	r3, [r7, #31]
    615c:	1c5a      	adds	r2, r3, #1
    615e:	77fa      	strb	r2, [r7, #31]
    6160:	461a      	mov	r2, r3
    6162:	69bb      	ldr	r3, [r7, #24]
    6164:	4413      	add	r3, r2
    6166:	2230      	movs	r2, #48	; 0x30
    6168:	701a      	strb	r2, [r3, #0]
    dstSize--;
    616a:	68bb      	ldr	r3, [r7, #8]
    616c:	3b01      	subs	r3, #1
    616e:	60bb      	str	r3, [r7, #8]
  }
  while (val > 0 && dstSize > 0) {
    6170:	e023      	b.n	61ba <UTIL1_Num16sToStr+0xb6>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    6172:	7ffb      	ldrb	r3, [r7, #31]
    6174:	1c5a      	adds	r2, r3, #1
    6176:	77fa      	strb	r2, [r7, #31]
    6178:	461a      	mov	r2, r3
    617a:	69bb      	ldr	r3, [r7, #24]
    617c:	1898      	adds	r0, r3, r2
    617e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    6182:	4b2f      	ldr	r3, [pc, #188]	; (6240 <UTIL1_Num16sToStr+0x13c>)
    6184:	fb83 1302 	smull	r1, r3, r3, r2
    6188:	1099      	asrs	r1, r3, #2
    618a:	17d3      	asrs	r3, r2, #31
    618c:	1ac9      	subs	r1, r1, r3
    618e:	460b      	mov	r3, r1
    6190:	009b      	lsls	r3, r3, #2
    6192:	440b      	add	r3, r1
    6194:	005b      	lsls	r3, r3, #1
    6196:	1ad3      	subs	r3, r2, r3
    6198:	b21b      	sxth	r3, r3
    619a:	b2db      	uxtb	r3, r3
    619c:	3330      	adds	r3, #48	; 0x30
    619e:	b2db      	uxtb	r3, r3
    61a0:	7003      	strb	r3, [r0, #0]
    dstSize--;
    61a2:	68bb      	ldr	r3, [r7, #8]
    61a4:	3b01      	subs	r3, #1
    61a6:	60bb      	str	r3, [r7, #8]
    val /= 10;
    61a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61ac:	4a24      	ldr	r2, [pc, #144]	; (6240 <UTIL1_Num16sToStr+0x13c>)
    61ae:	fb82 1203 	smull	r1, r2, r2, r3
    61b2:	1092      	asrs	r2, r2, #2
    61b4:	17db      	asrs	r3, r3, #31
    61b6:	1ad3      	subs	r3, r2, r3
    61b8:	80fb      	strh	r3, [r7, #6]
  }
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    61ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    61be:	2b00      	cmp	r3, #0
    61c0:	dd02      	ble.n	61c8 <UTIL1_Num16sToStr+0xc4>
    61c2:	68bb      	ldr	r3, [r7, #8]
    61c4:	2b00      	cmp	r3, #0
    61c6:	d1d4      	bne.n	6172 <UTIL1_Num16sToStr+0x6e>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    dstSize--;
    val /= 10;
  }
  if (sign && dstSize > 0){
    61c8:	7dfb      	ldrb	r3, [r7, #23]
    61ca:	2b00      	cmp	r3, #0
    61cc:	d00a      	beq.n	61e4 <UTIL1_Num16sToStr+0xe0>
    61ce:	68bb      	ldr	r3, [r7, #8]
    61d0:	2b00      	cmp	r3, #0
    61d2:	d007      	beq.n	61e4 <UTIL1_Num16sToStr+0xe0>
    ptr[i++] = '-';
    61d4:	7ffb      	ldrb	r3, [r7, #31]
    61d6:	1c5a      	adds	r2, r3, #1
    61d8:	77fa      	strb	r2, [r7, #31]
    61da:	461a      	mov	r2, r3
    61dc:	69bb      	ldr	r3, [r7, #24]
    61de:	4413      	add	r3, r2
    61e0:	222d      	movs	r2, #45	; 0x2d
    61e2:	701a      	strb	r2, [r3, #0]
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    61e4:	2300      	movs	r3, #0
    61e6:	77bb      	strb	r3, [r7, #30]
    61e8:	e01a      	b.n	6220 <UTIL1_Num16sToStr+0x11c>
    tmp = ptr[j];
    61ea:	7fbb      	ldrb	r3, [r7, #30]
    61ec:	69ba      	ldr	r2, [r7, #24]
    61ee:	4413      	add	r3, r2
    61f0:	781b      	ldrb	r3, [r3, #0]
    61f2:	75bb      	strb	r3, [r7, #22]
    ptr[j] = ptr[(i-j)-1];
    61f4:	7fbb      	ldrb	r3, [r7, #30]
    61f6:	69ba      	ldr	r2, [r7, #24]
    61f8:	4413      	add	r3, r2
    61fa:	7ff9      	ldrb	r1, [r7, #31]
    61fc:	7fba      	ldrb	r2, [r7, #30]
    61fe:	1a8a      	subs	r2, r1, r2
    6200:	3a01      	subs	r2, #1
    6202:	69b9      	ldr	r1, [r7, #24]
    6204:	440a      	add	r2, r1
    6206:	7812      	ldrb	r2, [r2, #0]
    6208:	701a      	strb	r2, [r3, #0]
    ptr[(i-j)-1] = tmp;
    620a:	7ffa      	ldrb	r2, [r7, #31]
    620c:	7fbb      	ldrb	r3, [r7, #30]
    620e:	1ad3      	subs	r3, r2, r3
    6210:	3b01      	subs	r3, #1
    6212:	69ba      	ldr	r2, [r7, #24]
    6214:	4413      	add	r3, r2
    6216:	7dba      	ldrb	r2, [r7, #22]
    6218:	701a      	strb	r2, [r3, #0]
    val /= 10;
  }
  if (sign && dstSize > 0){
    ptr[i++] = '-';
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    621a:	7fbb      	ldrb	r3, [r7, #30]
    621c:	3301      	adds	r3, #1
    621e:	77bb      	strb	r3, [r7, #30]
    6220:	7ffb      	ldrb	r3, [r7, #31]
    6222:	085b      	lsrs	r3, r3, #1
    6224:	b2db      	uxtb	r3, r3
    6226:	7fba      	ldrb	r2, [r7, #30]
    6228:	429a      	cmp	r2, r3
    622a:	d3de      	bcc.n	61ea <UTIL1_Num16sToStr+0xe6>
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
    622c:	7ffb      	ldrb	r3, [r7, #31]
    622e:	69ba      	ldr	r2, [r7, #24]
    6230:	4413      	add	r3, r2
    6232:	2200      	movs	r2, #0
    6234:	701a      	strb	r2, [r3, #0]
}
    6236:	3720      	adds	r7, #32
    6238:	46bd      	mov	sp, r7
    623a:	bd80      	pop	{r7, pc}
    623c:	0000fe8c 	.word	0x0000fe8c
    6240:	66666667 	.word	0x66666667

00006244 <ShiftRightAndFill>:
**         on the left side with a pattern
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
static void ShiftRightAndFill(uint8_t *dst, uint8_t fill, uint8_t nofFill)
{
    6244:	b480      	push	{r7}
    6246:	b085      	sub	sp, #20
    6248:	af00      	add	r7, sp, #0
    624a:	6078      	str	r0, [r7, #4]
    624c:	460b      	mov	r3, r1
    624e:	70fb      	strb	r3, [r7, #3]
    6250:	4613      	mov	r3, r2
    6252:	70bb      	strb	r3, [r7, #2]
  signed char i, j;

  j = 0;
    6254:	2300      	movs	r3, #0
    6256:	73bb      	strb	r3, [r7, #14]
  while(dst[j] != '\0') {
    6258:	e005      	b.n	6266 <ShiftRightAndFill+0x22>
    j++;
    625a:	f997 300e 	ldrsb.w	r3, [r7, #14]
    625e:	b2db      	uxtb	r3, r3
    6260:	3301      	adds	r3, #1
    6262:	b2db      	uxtb	r3, r3
    6264:	73bb      	strb	r3, [r7, #14]
static void ShiftRightAndFill(uint8_t *dst, uint8_t fill, uint8_t nofFill)
{
  signed char i, j;

  j = 0;
  while(dst[j] != '\0') {
    6266:	f997 300e 	ldrsb.w	r3, [r7, #14]
    626a:	687a      	ldr	r2, [r7, #4]
    626c:	4413      	add	r3, r2
    626e:	781b      	ldrb	r3, [r3, #0]
    6270:	2b00      	cmp	r3, #0
    6272:	d1f2      	bne.n	625a <ShiftRightAndFill+0x16>
    j++;
  }
  i = (signed char)nofFill;
    6274:	78bb      	ldrb	r3, [r7, #2]
    6276:	73fb      	strb	r3, [r7, #15]
  if (i==j) {
    6278:	f997 200f 	ldrsb.w	r2, [r7, #15]
    627c:	f997 300e 	ldrsb.w	r3, [r7, #14]
    6280:	429a      	cmp	r2, r3
    6282:	d031      	beq.n	62e8 <ShiftRightAndFill+0xa4>
    /* nothing to do, we are done */
  } else if (i>j) {
    6284:	f997 200f 	ldrsb.w	r2, [r7, #15]
    6288:	f997 300e 	ldrsb.w	r3, [r7, #14]
    628c:	429a      	cmp	r2, r3
    628e:	dd2b      	ble.n	62e8 <ShiftRightAndFill+0xa4>
    while (j>=0) {
    6290:	e015      	b.n	62be <ShiftRightAndFill+0x7a>
      dst[i] = dst[j];
    6292:	f997 300f 	ldrsb.w	r3, [r7, #15]
    6296:	687a      	ldr	r2, [r7, #4]
    6298:	4413      	add	r3, r2
    629a:	f997 200e 	ldrsb.w	r2, [r7, #14]
    629e:	6879      	ldr	r1, [r7, #4]
    62a0:	440a      	add	r2, r1
    62a2:	7812      	ldrb	r2, [r2, #0]
    62a4:	701a      	strb	r2, [r3, #0]
      i--; j--;
    62a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    62aa:	b2db      	uxtb	r3, r3
    62ac:	3b01      	subs	r3, #1
    62ae:	b2db      	uxtb	r3, r3
    62b0:	73fb      	strb	r3, [r7, #15]
    62b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
    62b6:	b2db      	uxtb	r3, r3
    62b8:	3b01      	subs	r3, #1
    62ba:	b2db      	uxtb	r3, r3
    62bc:	73bb      	strb	r3, [r7, #14]
  }
  i = (signed char)nofFill;
  if (i==j) {
    /* nothing to do, we are done */
  } else if (i>j) {
    while (j>=0) {
    62be:	f997 300e 	ldrsb.w	r3, [r7, #14]
    62c2:	2b00      	cmp	r3, #0
    62c4:	dae5      	bge.n	6292 <ShiftRightAndFill+0x4e>
      dst[i] = dst[j];
      i--; j--;
    }
    while(i>=0) {
    62c6:	e00b      	b.n	62e0 <ShiftRightAndFill+0x9c>
      dst[i] = fill;
    62c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    62cc:	687a      	ldr	r2, [r7, #4]
    62ce:	4413      	add	r3, r2
    62d0:	78fa      	ldrb	r2, [r7, #3]
    62d2:	701a      	strb	r2, [r3, #0]
      i--;
    62d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
    62d8:	b2db      	uxtb	r3, r3
    62da:	3b01      	subs	r3, #1
    62dc:	b2db      	uxtb	r3, r3
    62de:	73fb      	strb	r3, [r7, #15]
  } else if (i>j) {
    while (j>=0) {
      dst[i] = dst[j];
      i--; j--;
    }
    while(i>=0) {
    62e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
    62e4:	2b00      	cmp	r3, #0
    62e6:	daef      	bge.n	62c8 <ShiftRightAndFill+0x84>
      i--;
    }
  } else {
    /* hmmm, not enough space, return what we have, do nothing */
  }
}
    62e8:	bf00      	nop
    62ea:	3714      	adds	r7, #20
    62ec:	46bd      	mov	sp, r7
    62ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    62f2:	4770      	bx	lr

000062f4 <UTIL1_Num16sToStrFormatted>:
  \param[in] val The 16bit signed number to add
  \param[in] fill Fill character, typically ' ' (like for "%2d" or '0' (for "%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%2d"
*/
void UTIL1_Num16sToStrFormatted(uint8_t *dst, size_t dstSize, int16_t val, char fill, uint8_t nofFill)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	b084      	sub	sp, #16
    62f8:	af00      	add	r7, sp, #0
    62fa:	60f8      	str	r0, [r7, #12]
    62fc:	60b9      	str	r1, [r7, #8]
    62fe:	4611      	mov	r1, r2
    6300:	461a      	mov	r2, r3
    6302:	460b      	mov	r3, r1
    6304:	80fb      	strh	r3, [r7, #6]
    6306:	4613      	mov	r3, r2
    6308:	717b      	strb	r3, [r7, #5]
  UTIL1_Num16sToStr(dst, dstSize, val);
    630a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    630e:	461a      	mov	r2, r3
    6310:	68b9      	ldr	r1, [r7, #8]
    6312:	68f8      	ldr	r0, [r7, #12]
    6314:	f7ff fef6 	bl	6104 <UTIL1_Num16sToStr>
  ShiftRightAndFill(dst, fill, nofFill);
    6318:	7e3a      	ldrb	r2, [r7, #24]
    631a:	797b      	ldrb	r3, [r7, #5]
    631c:	4619      	mov	r1, r3
    631e:	68f8      	ldr	r0, [r7, #12]
    6320:	f7ff ff90 	bl	6244 <ShiftRightAndFill>
}
    6324:	bf00      	nop
    6326:	3710      	adds	r7, #16
    6328:	46bd      	mov	sp, r7
    632a:	bd80      	pop	{r7, pc}

0000632c <UTIL1_Num16uToStrFormatted>:
  \param[in] val The 16bit unsigned number to add
  \param[in] fill Fill character, typically ' ' (like for "%2d" or '0' (for "%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%2d"
*/
void UTIL1_Num16uToStrFormatted(uint8_t *dst, size_t dstSize, uint16_t val, char fill, uint8_t nofFill)
{
    632c:	b580      	push	{r7, lr}
    632e:	b084      	sub	sp, #16
    6330:	af00      	add	r7, sp, #0
    6332:	60f8      	str	r0, [r7, #12]
    6334:	60b9      	str	r1, [r7, #8]
    6336:	4611      	mov	r1, r2
    6338:	461a      	mov	r2, r3
    633a:	460b      	mov	r3, r1
    633c:	80fb      	strh	r3, [r7, #6]
    633e:	4613      	mov	r3, r2
    6340:	717b      	strb	r3, [r7, #5]
  UTIL1_Num16uToStr(dst, dstSize, val);
    6342:	88fb      	ldrh	r3, [r7, #6]
    6344:	461a      	mov	r2, r3
    6346:	68b9      	ldr	r1, [r7, #8]
    6348:	68f8      	ldr	r0, [r7, #12]
    634a:	f7ff fe65 	bl	6018 <UTIL1_Num16uToStr>
  ShiftRightAndFill(dst, fill, nofFill);
    634e:	7e3a      	ldrb	r2, [r7, #24]
    6350:	797b      	ldrb	r3, [r7, #5]
    6352:	4619      	mov	r1, r3
    6354:	68f8      	ldr	r0, [r7, #12]
    6356:	f7ff ff75 	bl	6244 <ShiftRightAndFill>
}
    635a:	bf00      	nop
    635c:	3710      	adds	r7, #16
    635e:	46bd      	mov	sp, r7
    6360:	bd80      	pop	{r7, pc}
    6362:	bf00      	nop

00006364 <UTIL1_Num32uToStrFormatted>:
  \param[in] val The 32bit unsigned number to add
  \param[in] fill Fill character, typically ' ' (like for "%2d" or '0' (for "%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%2d"
*/
void UTIL1_Num32uToStrFormatted(uint8_t *dst, size_t dstSize, uint32_t val, char fill, uint8_t nofFill)
{
    6364:	b580      	push	{r7, lr}
    6366:	b084      	sub	sp, #16
    6368:	af00      	add	r7, sp, #0
    636a:	60f8      	str	r0, [r7, #12]
    636c:	60b9      	str	r1, [r7, #8]
    636e:	607a      	str	r2, [r7, #4]
    6370:	70fb      	strb	r3, [r7, #3]
  UTIL1_Num32uToStr(dst, dstSize, val);
    6372:	687a      	ldr	r2, [r7, #4]
    6374:	68b9      	ldr	r1, [r7, #8]
    6376:	68f8      	ldr	r0, [r7, #12]
    6378:	f000 faa8 	bl	68cc <UTIL1_Num32uToStr>
  ShiftRightAndFill(dst, fill, nofFill);
    637c:	7e3a      	ldrb	r2, [r7, #24]
    637e:	78fb      	ldrb	r3, [r7, #3]
    6380:	4619      	mov	r1, r3
    6382:	68f8      	ldr	r0, [r7, #12]
    6384:	f7ff ff5e 	bl	6244 <ShiftRightAndFill>
}
    6388:	bf00      	nop
    638a:	3710      	adds	r7, #16
    638c:	46bd      	mov	sp, r7
    638e:	bd80      	pop	{r7, pc}

00006390 <UTIL1_Num32sToStrFormatted>:
  \param[in] val The 32bit signed number to add
  \param[in] fill Fill character, typically ' ' (like for "%2d" or '0' (for "%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%2d"
*/
void UTIL1_Num32sToStrFormatted(uint8_t *dst, size_t dstSize, int32_t val, char fill, uint8_t nofFill)
{
    6390:	b580      	push	{r7, lr}
    6392:	b084      	sub	sp, #16
    6394:	af00      	add	r7, sp, #0
    6396:	60f8      	str	r0, [r7, #12]
    6398:	60b9      	str	r1, [r7, #8]
    639a:	607a      	str	r2, [r7, #4]
    639c:	70fb      	strb	r3, [r7, #3]
  UTIL1_Num32sToStr(dst, dstSize, val);
    639e:	687a      	ldr	r2, [r7, #4]
    63a0:	68b9      	ldr	r1, [r7, #8]
    63a2:	68f8      	ldr	r0, [r7, #12]
    63a4:	f000 f9fa 	bl	679c <UTIL1_Num32sToStr>
  ShiftRightAndFill(dst, fill, nofFill);
    63a8:	7e3a      	ldrb	r2, [r7, #24]
    63aa:	78fb      	ldrb	r3, [r7, #3]
    63ac:	4619      	mov	r1, r3
    63ae:	68f8      	ldr	r0, [r7, #12]
    63b0:	f7ff ff48 	bl	6244 <ShiftRightAndFill>
}
    63b4:	bf00      	nop
    63b6:	3710      	adds	r7, #16
    63b8:	46bd      	mov	sp, r7
    63ba:	bd80      	pop	{r7, pc}

000063bc <UTIL1_strcatNum8u>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 8bit unsigned number to add
  */
void UTIL1_strcatNum8u(uint8_t *dst, size_t dstSize, uint8_t val)
{
    63bc:	b580      	push	{r7, lr}
    63be:	b086      	sub	sp, #24
    63c0:	af00      	add	r7, sp, #0
    63c2:	60f8      	str	r0, [r7, #12]
    63c4:	60b9      	str	r1, [r7, #8]
    63c6:	4613      	mov	r3, r2
    63c8:	71fb      	strb	r3, [r7, #7]
  unsigned char buf[sizeof("256")]; /* maximum buffer size we need */

  UTIL1_Num8uToStr(buf, sizeof(buf), val);
    63ca:	79fa      	ldrb	r2, [r7, #7]
    63cc:	f107 0314 	add.w	r3, r7, #20
    63d0:	2104      	movs	r1, #4
    63d2:	4618      	mov	r0, r3
    63d4:	f7ff fdfa 	bl	5fcc <UTIL1_Num8uToStr>
  UTIL1_strcat(dst, dstSize, buf);
    63d8:	f107 0314 	add.w	r3, r7, #20
    63dc:	461a      	mov	r2, r3
    63de:	68b9      	ldr	r1, [r7, #8]
    63e0:	68f8      	ldr	r0, [r7, #12]
    63e2:	f7ff fd95 	bl	5f10 <UTIL1_strcat>
}
    63e6:	bf00      	nop
    63e8:	3718      	adds	r7, #24
    63ea:	46bd      	mov	sp, r7
    63ec:	bd80      	pop	{r7, pc}
    63ee:	bf00      	nop

000063f0 <UTIL1_strcatNum8s>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 8bit signed number to add
  */
void UTIL1_strcatNum8s(uint8_t *dst, size_t dstSize, signed char val)
{
    63f0:	b580      	push	{r7, lr}
    63f2:	b086      	sub	sp, #24
    63f4:	af00      	add	r7, sp, #0
    63f6:	60f8      	str	r0, [r7, #12]
    63f8:	60b9      	str	r1, [r7, #8]
    63fa:	4613      	mov	r3, r2
    63fc:	71fb      	strb	r3, [r7, #7]
  unsigned char buf[sizeof("-128")]; /* maximum buffer size we need */

  UTIL1_Num8sToStr(buf, sizeof(buf), val);
    63fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
    6402:	f107 0310 	add.w	r3, r7, #16
    6406:	2105      	movs	r1, #5
    6408:	4618      	mov	r0, r3
    640a:	f7ff fdf1 	bl	5ff0 <UTIL1_Num8sToStr>
  UTIL1_strcat(dst, dstSize, buf);
    640e:	f107 0310 	add.w	r3, r7, #16
    6412:	461a      	mov	r2, r3
    6414:	68b9      	ldr	r1, [r7, #8]
    6416:	68f8      	ldr	r0, [r7, #12]
    6418:	f7ff fd7a 	bl	5f10 <UTIL1_strcat>
}
    641c:	bf00      	nop
    641e:	3718      	adds	r7, #24
    6420:	46bd      	mov	sp, r7
    6422:	bd80      	pop	{r7, pc}

00006424 <UTIL1_strcatNum16u>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 16bit unsigned number to add
  */
void UTIL1_strcatNum16u(uint8_t *dst, size_t dstSize, uint16_t val)
{
    6424:	b580      	push	{r7, lr}
    6426:	b086      	sub	sp, #24
    6428:	af00      	add	r7, sp, #0
    642a:	60f8      	str	r0, [r7, #12]
    642c:	60b9      	str	r1, [r7, #8]
    642e:	4613      	mov	r3, r2
    6430:	80fb      	strh	r3, [r7, #6]
  unsigned char buf[sizeof("32768")]; /* maximum buffer size we need */

  UTIL1_Num16uToStr(buf, sizeof(buf), val);
    6432:	88fa      	ldrh	r2, [r7, #6]
    6434:	f107 0310 	add.w	r3, r7, #16
    6438:	2106      	movs	r1, #6
    643a:	4618      	mov	r0, r3
    643c:	f7ff fdec 	bl	6018 <UTIL1_Num16uToStr>
  UTIL1_strcat(dst, dstSize, buf);
    6440:	f107 0310 	add.w	r3, r7, #16
    6444:	461a      	mov	r2, r3
    6446:	68b9      	ldr	r1, [r7, #8]
    6448:	68f8      	ldr	r0, [r7, #12]
    644a:	f7ff fd61 	bl	5f10 <UTIL1_strcat>
}
    644e:	bf00      	nop
    6450:	3718      	adds	r7, #24
    6452:	46bd      	mov	sp, r7
    6454:	bd80      	pop	{r7, pc}
    6456:	bf00      	nop

00006458 <UTIL1_strcatNum16s>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 16bit signed number to add
  */
void UTIL1_strcatNum16s(uint8_t *dst, size_t dstSize, int16_t val)
{
    6458:	b580      	push	{r7, lr}
    645a:	b086      	sub	sp, #24
    645c:	af00      	add	r7, sp, #0
    645e:	60f8      	str	r0, [r7, #12]
    6460:	60b9      	str	r1, [r7, #8]
    6462:	4613      	mov	r3, r2
    6464:	80fb      	strh	r3, [r7, #6]
  unsigned char buf[sizeof("-32768")]; /* maximum buffer size we need */

  UTIL1_Num16sToStr(buf, sizeof(buf), val);
    6466:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    646a:	f107 0310 	add.w	r3, r7, #16
    646e:	2107      	movs	r1, #7
    6470:	4618      	mov	r0, r3
    6472:	f7ff fe47 	bl	6104 <UTIL1_Num16sToStr>
  UTIL1_strcat(dst, dstSize, buf);
    6476:	f107 0310 	add.w	r3, r7, #16
    647a:	461a      	mov	r2, r3
    647c:	68b9      	ldr	r1, [r7, #8]
    647e:	68f8      	ldr	r0, [r7, #12]
    6480:	f7ff fd46 	bl	5f10 <UTIL1_strcat>
}
    6484:	bf00      	nop
    6486:	3718      	adds	r7, #24
    6488:	46bd      	mov	sp, r7
    648a:	bd80      	pop	{r7, pc}

0000648c <UTIL1_strcatNum16uFormatted>:
  \param[in] val The 16bit unsigned number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void UTIL1_strcatNum16uFormatted(uint8_t *dst, size_t dstSize, uint16_t val, char fill, uint8_t nofFill)
{
    648c:	b580      	push	{r7, lr}
    648e:	b088      	sub	sp, #32
    6490:	af02      	add	r7, sp, #8
    6492:	60f8      	str	r0, [r7, #12]
    6494:	60b9      	str	r1, [r7, #8]
    6496:	4611      	mov	r1, r2
    6498:	461a      	mov	r2, r3
    649a:	460b      	mov	r3, r1
    649c:	80fb      	strh	r3, [r7, #6]
    649e:	4613      	mov	r3, r2
    64a0:	717b      	strb	r3, [r7, #5]
  unsigned char buf[sizeof("32768")]; /* maximum buffer size we need */

  UTIL1_Num16uToStrFormatted(buf, dstSize, val, fill, nofFill);
    64a2:	7979      	ldrb	r1, [r7, #5]
    64a4:	88fa      	ldrh	r2, [r7, #6]
    64a6:	f107 0010 	add.w	r0, r7, #16
    64aa:	f897 3020 	ldrb.w	r3, [r7, #32]
    64ae:	9300      	str	r3, [sp, #0]
    64b0:	460b      	mov	r3, r1
    64b2:	68b9      	ldr	r1, [r7, #8]
    64b4:	f7ff ff3a 	bl	632c <UTIL1_Num16uToStrFormatted>
  UTIL1_strcat(dst, dstSize, buf);
    64b8:	f107 0310 	add.w	r3, r7, #16
    64bc:	461a      	mov	r2, r3
    64be:	68b9      	ldr	r1, [r7, #8]
    64c0:	68f8      	ldr	r0, [r7, #12]
    64c2:	f7ff fd25 	bl	5f10 <UTIL1_strcat>
}
    64c6:	bf00      	nop
    64c8:	3718      	adds	r7, #24
    64ca:	46bd      	mov	sp, r7
    64cc:	bd80      	pop	{r7, pc}
    64ce:	bf00      	nop

000064d0 <UTIL1_strcatNum16sFormatted>:
  \param[in] val The 16bit signed number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void UTIL1_strcatNum16sFormatted(uint8_t *dst, size_t dstSize, int16_t val, char fill, uint8_t nofFill)
{
    64d0:	b580      	push	{r7, lr}
    64d2:	b088      	sub	sp, #32
    64d4:	af02      	add	r7, sp, #8
    64d6:	60f8      	str	r0, [r7, #12]
    64d8:	60b9      	str	r1, [r7, #8]
    64da:	4611      	mov	r1, r2
    64dc:	461a      	mov	r2, r3
    64de:	460b      	mov	r3, r1
    64e0:	80fb      	strh	r3, [r7, #6]
    64e2:	4613      	mov	r3, r2
    64e4:	717b      	strb	r3, [r7, #5]
  unsigned char buf[sizeof("-32768")]; /* maximum buffer size we need */

  UTIL1_Num16sToStrFormatted(buf, dstSize, val, fill, nofFill);
    64e6:	7979      	ldrb	r1, [r7, #5]
    64e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    64ec:	f107 0010 	add.w	r0, r7, #16
    64f0:	f897 3020 	ldrb.w	r3, [r7, #32]
    64f4:	9300      	str	r3, [sp, #0]
    64f6:	460b      	mov	r3, r1
    64f8:	68b9      	ldr	r1, [r7, #8]
    64fa:	f7ff fefb 	bl	62f4 <UTIL1_Num16sToStrFormatted>
  UTIL1_strcat(dst, dstSize, buf);
    64fe:	f107 0310 	add.w	r3, r7, #16
    6502:	461a      	mov	r2, r3
    6504:	68b9      	ldr	r1, [r7, #8]
    6506:	68f8      	ldr	r0, [r7, #12]
    6508:	f7ff fd02 	bl	5f10 <UTIL1_strcat>
}
    650c:	bf00      	nop
    650e:	3718      	adds	r7, #24
    6510:	46bd      	mov	sp, r7
    6512:	bd80      	pop	{r7, pc}

00006514 <UTIL1_strcatNum32uFormatted>:
  \param[in] val The 32bit unsigned number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void UTIL1_strcatNum32uFormatted(uint8_t *dst, size_t dstSize, uint32_t val, char fill, uint8_t nofFill)
{
    6514:	b580      	push	{r7, lr}
    6516:	b08a      	sub	sp, #40	; 0x28
    6518:	af02      	add	r7, sp, #8
    651a:	60f8      	str	r0, [r7, #12]
    651c:	60b9      	str	r1, [r7, #8]
    651e:	607a      	str	r2, [r7, #4]
    6520:	70fb      	strb	r3, [r7, #3]
  unsigned char buf[sizeof("4294967295")]; /* maximum buffer size we need */

  UTIL1_Num32uToStrFormatted(buf, dstSize, val, fill, nofFill);
    6522:	78fa      	ldrb	r2, [r7, #3]
    6524:	f107 0014 	add.w	r0, r7, #20
    6528:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    652c:	9300      	str	r3, [sp, #0]
    652e:	4613      	mov	r3, r2
    6530:	687a      	ldr	r2, [r7, #4]
    6532:	68b9      	ldr	r1, [r7, #8]
    6534:	f7ff ff16 	bl	6364 <UTIL1_Num32uToStrFormatted>
  UTIL1_strcat(dst, dstSize, buf);
    6538:	f107 0314 	add.w	r3, r7, #20
    653c:	461a      	mov	r2, r3
    653e:	68b9      	ldr	r1, [r7, #8]
    6540:	68f8      	ldr	r0, [r7, #12]
    6542:	f7ff fce5 	bl	5f10 <UTIL1_strcat>
}
    6546:	bf00      	nop
    6548:	3720      	adds	r7, #32
    654a:	46bd      	mov	sp, r7
    654c:	bd80      	pop	{r7, pc}
    654e:	bf00      	nop

00006550 <UTIL1_strcatNum32sFormatted>:
  \param[in] val The 32bit signed number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void UTIL1_strcatNum32sFormatted(uint8_t *dst, size_t dstSize, int32_t val, char fill, uint8_t nofFill)
{
    6550:	b580      	push	{r7, lr}
    6552:	b08a      	sub	sp, #40	; 0x28
    6554:	af02      	add	r7, sp, #8
    6556:	60f8      	str	r0, [r7, #12]
    6558:	60b9      	str	r1, [r7, #8]
    655a:	607a      	str	r2, [r7, #4]
    655c:	70fb      	strb	r3, [r7, #3]
  unsigned char buf[sizeof("-4294967295")]; /* maximum buffer size we need */

  UTIL1_Num32sToStrFormatted(buf, dstSize, val, fill, nofFill);
    655e:	78fa      	ldrb	r2, [r7, #3]
    6560:	f107 0014 	add.w	r0, r7, #20
    6564:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    6568:	9300      	str	r3, [sp, #0]
    656a:	4613      	mov	r3, r2
    656c:	687a      	ldr	r2, [r7, #4]
    656e:	68b9      	ldr	r1, [r7, #8]
    6570:	f7ff ff0e 	bl	6390 <UTIL1_Num32sToStrFormatted>
  UTIL1_strcat(dst, dstSize, buf);
    6574:	f107 0314 	add.w	r3, r7, #20
    6578:	461a      	mov	r2, r3
    657a:	68b9      	ldr	r1, [r7, #8]
    657c:	68f8      	ldr	r0, [r7, #12]
    657e:	f7ff fcc7 	bl	5f10 <UTIL1_strcat>
}
    6582:	bf00      	nop
    6584:	3720      	adds	r7, #32
    6586:	46bd      	mov	sp, r7
    6588:	bd80      	pop	{r7, pc}
    658a:	bf00      	nop

0000658c <UTIL1_strcatNum8Hex>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 8bit number to add
  */
void UTIL1_strcatNum8Hex(uint8_t *dst, size_t dstSize, uint8_t num)
{
    658c:	b580      	push	{r7, lr}
    658e:	b086      	sub	sp, #24
    6590:	af00      	add	r7, sp, #0
    6592:	60f8      	str	r0, [r7, #12]
    6594:	60b9      	str	r1, [r7, #8]
    6596:	4613      	mov	r3, r2
    6598:	71fb      	strb	r3, [r7, #7]
  unsigned char buf[sizeof("FF")]; /* maximum buffer size we need */
  unsigned char hex;

  buf[2] = '\0';
    659a:	2300      	movs	r3, #0
    659c:	75bb      	strb	r3, [r7, #22]
  hex = (char)(num & 0x0F);
    659e:	79fb      	ldrb	r3, [r7, #7]
    65a0:	f003 030f 	and.w	r3, r3, #15
    65a4:	75fb      	strb	r3, [r7, #23]
  buf[1] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    65a6:	7dfb      	ldrb	r3, [r7, #23]
    65a8:	2b09      	cmp	r3, #9
    65aa:	d801      	bhi.n	65b0 <UTIL1_strcatNum8Hex+0x24>
    65ac:	2230      	movs	r2, #48	; 0x30
    65ae:	e000      	b.n	65b2 <UTIL1_strcatNum8Hex+0x26>
    65b0:	2237      	movs	r2, #55	; 0x37
    65b2:	7dfb      	ldrb	r3, [r7, #23]
    65b4:	4413      	add	r3, r2
    65b6:	b2db      	uxtb	r3, r3
    65b8:	757b      	strb	r3, [r7, #21]
  hex = (char)((num>>4) & 0x0F);
    65ba:	79fb      	ldrb	r3, [r7, #7]
    65bc:	091b      	lsrs	r3, r3, #4
    65be:	75fb      	strb	r3, [r7, #23]
  buf[0] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    65c0:	7dfb      	ldrb	r3, [r7, #23]
    65c2:	2b09      	cmp	r3, #9
    65c4:	d801      	bhi.n	65ca <UTIL1_strcatNum8Hex+0x3e>
    65c6:	2230      	movs	r2, #48	; 0x30
    65c8:	e000      	b.n	65cc <UTIL1_strcatNum8Hex+0x40>
    65ca:	2237      	movs	r2, #55	; 0x37
    65cc:	7dfb      	ldrb	r3, [r7, #23]
    65ce:	4413      	add	r3, r2
    65d0:	b2db      	uxtb	r3, r3
    65d2:	753b      	strb	r3, [r7, #20]
  UTIL1_strcat(dst, dstSize, buf);
    65d4:	f107 0314 	add.w	r3, r7, #20
    65d8:	461a      	mov	r2, r3
    65da:	68b9      	ldr	r1, [r7, #8]
    65dc:	68f8      	ldr	r0, [r7, #12]
    65de:	f7ff fc97 	bl	5f10 <UTIL1_strcat>
}
    65e2:	bf00      	nop
    65e4:	3718      	adds	r7, #24
    65e6:	46bd      	mov	sp, r7
    65e8:	bd80      	pop	{r7, pc}
    65ea:	bf00      	nop

000065ec <UTIL1_strcatNum16Hex>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 16bit number to add
  */
void UTIL1_strcatNum16Hex(uint8_t *dst, size_t dstSize, uint16_t num)
{
    65ec:	b580      	push	{r7, lr}
    65ee:	b086      	sub	sp, #24
    65f0:	af00      	add	r7, sp, #0
    65f2:	60f8      	str	r0, [r7, #12]
    65f4:	60b9      	str	r1, [r7, #8]
    65f6:	4613      	mov	r3, r2
    65f8:	80fb      	strh	r3, [r7, #6]
  unsigned char buf[sizeof("FFFF")]; /* maximum buffer size we need */
  unsigned char hex;
  int8_t i;

  buf[4] = '\0';
    65fa:	2300      	movs	r3, #0
    65fc:	753b      	strb	r3, [r7, #20]
  i = 3;
    65fe:	2303      	movs	r3, #3
    6600:	75fb      	strb	r3, [r7, #23]
  do {
    hex = (char)(num & 0x0F);
    6602:	88fb      	ldrh	r3, [r7, #6]
    6604:	b2db      	uxtb	r3, r3
    6606:	f003 030f 	and.w	r3, r3, #15
    660a:	75bb      	strb	r3, [r7, #22]
    buf[i] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    660c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6610:	7dba      	ldrb	r2, [r7, #22]
    6612:	2a09      	cmp	r2, #9
    6614:	d801      	bhi.n	661a <UTIL1_strcatNum16Hex+0x2e>
    6616:	2130      	movs	r1, #48	; 0x30
    6618:	e000      	b.n	661c <UTIL1_strcatNum16Hex+0x30>
    661a:	2137      	movs	r1, #55	; 0x37
    661c:	7dba      	ldrb	r2, [r7, #22]
    661e:	440a      	add	r2, r1
    6620:	b2d2      	uxtb	r2, r2
    6622:	f107 0118 	add.w	r1, r7, #24
    6626:	440b      	add	r3, r1
    6628:	f803 2c08 	strb.w	r2, [r3, #-8]
    num >>= 4;                          /* next nibble */
    662c:	88fb      	ldrh	r3, [r7, #6]
    662e:	091b      	lsrs	r3, r3, #4
    6630:	80fb      	strh	r3, [r7, #6]
    i--;
    6632:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6636:	b2db      	uxtb	r3, r3
    6638:	3b01      	subs	r3, #1
    663a:	b2db      	uxtb	r3, r3
    663c:	75fb      	strb	r3, [r7, #23]
  } while (i>=0);
    663e:	f997 3017 	ldrsb.w	r3, [r7, #23]
    6642:	2b00      	cmp	r3, #0
    6644:	dadd      	bge.n	6602 <UTIL1_strcatNum16Hex+0x16>
  UTIL1_strcat(dst, dstSize, buf);
    6646:	f107 0310 	add.w	r3, r7, #16
    664a:	461a      	mov	r2, r3
    664c:	68b9      	ldr	r1, [r7, #8]
    664e:	68f8      	ldr	r0, [r7, #12]
    6650:	f7ff fc5e 	bl	5f10 <UTIL1_strcat>
}
    6654:	bf00      	nop
    6656:	3718      	adds	r7, #24
    6658:	46bd      	mov	sp, r7
    665a:	bd80      	pop	{r7, pc}

0000665c <UTIL1_strcatNum24Hex>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 24bit number to add
  */
void UTIL1_strcatNum24Hex(uint8_t *dst, size_t dstSize, uint32_t num)
{
    665c:	b580      	push	{r7, lr}
    665e:	b088      	sub	sp, #32
    6660:	af00      	add	r7, sp, #0
    6662:	60f8      	str	r0, [r7, #12]
    6664:	60b9      	str	r1, [r7, #8]
    6666:	607a      	str	r2, [r7, #4]
  unsigned char buf[sizeof("FFFFFF")]; /* maximum buffer size we need */
  unsigned char hex;
  int8_t i;

  buf[6] = '\0';
    6668:	2300      	movs	r3, #0
    666a:	76bb      	strb	r3, [r7, #26]
  i = 5;
    666c:	2305      	movs	r3, #5
    666e:	77fb      	strb	r3, [r7, #31]
  do {
    hex = (char)(num & 0x0F);
    6670:	687b      	ldr	r3, [r7, #4]
    6672:	b2db      	uxtb	r3, r3
    6674:	f003 030f 	and.w	r3, r3, #15
    6678:	77bb      	strb	r3, [r7, #30]
    buf[i] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    667a:	f997 301f 	ldrsb.w	r3, [r7, #31]
    667e:	7fba      	ldrb	r2, [r7, #30]
    6680:	2a09      	cmp	r2, #9
    6682:	d801      	bhi.n	6688 <UTIL1_strcatNum24Hex+0x2c>
    6684:	2130      	movs	r1, #48	; 0x30
    6686:	e000      	b.n	668a <UTIL1_strcatNum24Hex+0x2e>
    6688:	2137      	movs	r1, #55	; 0x37
    668a:	7fba      	ldrb	r2, [r7, #30]
    668c:	440a      	add	r2, r1
    668e:	b2d2      	uxtb	r2, r2
    6690:	f107 0120 	add.w	r1, r7, #32
    6694:	440b      	add	r3, r1
    6696:	f803 2c0c 	strb.w	r2, [r3, #-12]
    num >>= 4;                          /* next nibble */
    669a:	687b      	ldr	r3, [r7, #4]
    669c:	091b      	lsrs	r3, r3, #4
    669e:	607b      	str	r3, [r7, #4]
    i--;
    66a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
    66a4:	b2db      	uxtb	r3, r3
    66a6:	3b01      	subs	r3, #1
    66a8:	b2db      	uxtb	r3, r3
    66aa:	77fb      	strb	r3, [r7, #31]
  } while (i>=0);
    66ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
    66b0:	2b00      	cmp	r3, #0
    66b2:	dadd      	bge.n	6670 <UTIL1_strcatNum24Hex+0x14>
  UTIL1_strcat(dst, dstSize, buf);
    66b4:	f107 0314 	add.w	r3, r7, #20
    66b8:	461a      	mov	r2, r3
    66ba:	68b9      	ldr	r1, [r7, #8]
    66bc:	68f8      	ldr	r0, [r7, #12]
    66be:	f7ff fc27 	bl	5f10 <UTIL1_strcat>
}
    66c2:	bf00      	nop
    66c4:	3720      	adds	r7, #32
    66c6:	46bd      	mov	sp, r7
    66c8:	bd80      	pop	{r7, pc}
    66ca:	bf00      	nop

000066cc <UTIL1_strcatNum32Hex>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 32bit number to add
  */
void UTIL1_strcatNum32Hex(uint8_t *dst, size_t dstSize, uint32_t num)
{
    66cc:	b580      	push	{r7, lr}
    66ce:	b088      	sub	sp, #32
    66d0:	af00      	add	r7, sp, #0
    66d2:	60f8      	str	r0, [r7, #12]
    66d4:	60b9      	str	r1, [r7, #8]
    66d6:	607a      	str	r2, [r7, #4]
  unsigned char buf[sizeof("FFFFFFFF")]; /* maximum buffer size we need */
  unsigned char hex;
  int8_t i;

  buf[8] = '\0';
    66d8:	2300      	movs	r3, #0
    66da:	773b      	strb	r3, [r7, #28]
  i = 7;
    66dc:	2307      	movs	r3, #7
    66de:	77fb      	strb	r3, [r7, #31]
  do {
    hex = (char)(num & 0x0F);
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	b2db      	uxtb	r3, r3
    66e4:	f003 030f 	and.w	r3, r3, #15
    66e8:	77bb      	strb	r3, [r7, #30]
    buf[i] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    66ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
    66ee:	7fba      	ldrb	r2, [r7, #30]
    66f0:	2a09      	cmp	r2, #9
    66f2:	d801      	bhi.n	66f8 <UTIL1_strcatNum32Hex+0x2c>
    66f4:	2130      	movs	r1, #48	; 0x30
    66f6:	e000      	b.n	66fa <UTIL1_strcatNum32Hex+0x2e>
    66f8:	2137      	movs	r1, #55	; 0x37
    66fa:	7fba      	ldrb	r2, [r7, #30]
    66fc:	440a      	add	r2, r1
    66fe:	b2d2      	uxtb	r2, r2
    6700:	f107 0120 	add.w	r1, r7, #32
    6704:	440b      	add	r3, r1
    6706:	f803 2c0c 	strb.w	r2, [r3, #-12]
    num >>= 4;                          /* next nibble */
    670a:	687b      	ldr	r3, [r7, #4]
    670c:	091b      	lsrs	r3, r3, #4
    670e:	607b      	str	r3, [r7, #4]
    i--;
    6710:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6714:	b2db      	uxtb	r3, r3
    6716:	3b01      	subs	r3, #1
    6718:	b2db      	uxtb	r3, r3
    671a:	77fb      	strb	r3, [r7, #31]
  } while (i>=0);
    671c:	f997 301f 	ldrsb.w	r3, [r7, #31]
    6720:	2b00      	cmp	r3, #0
    6722:	dadd      	bge.n	66e0 <UTIL1_strcatNum32Hex+0x14>
  UTIL1_strcat(dst, dstSize, buf);
    6724:	f107 0314 	add.w	r3, r7, #20
    6728:	461a      	mov	r2, r3
    672a:	68b9      	ldr	r1, [r7, #8]
    672c:	68f8      	ldr	r0, [r7, #12]
    672e:	f7ff fbef 	bl	5f10 <UTIL1_strcat>
}
    6732:	bf00      	nop
    6734:	3720      	adds	r7, #32
    6736:	46bd      	mov	sp, r7
    6738:	bd80      	pop	{r7, pc}
    673a:	bf00      	nop

0000673c <UTIL1_strcatNum32s>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 32bit number to add
  */
void UTIL1_strcatNum32s(uint8_t *dst, size_t dstSize, int32_t val)
{
    673c:	b580      	push	{r7, lr}
    673e:	b088      	sub	sp, #32
    6740:	af00      	add	r7, sp, #0
    6742:	60f8      	str	r0, [r7, #12]
    6744:	60b9      	str	r1, [r7, #8]
    6746:	607a      	str	r2, [r7, #4]
  unsigned char buf[sizeof("-4294967295")]; /* maximum buffer size we need */

  UTIL1_Num32sToStr(buf, sizeof(buf), val);
    6748:	f107 0314 	add.w	r3, r7, #20
    674c:	687a      	ldr	r2, [r7, #4]
    674e:	210c      	movs	r1, #12
    6750:	4618      	mov	r0, r3
    6752:	f000 f823 	bl	679c <UTIL1_Num32sToStr>
  UTIL1_strcat(dst, dstSize, buf);
    6756:	f107 0314 	add.w	r3, r7, #20
    675a:	461a      	mov	r2, r3
    675c:	68b9      	ldr	r1, [r7, #8]
    675e:	68f8      	ldr	r0, [r7, #12]
    6760:	f7ff fbd6 	bl	5f10 <UTIL1_strcat>
}
    6764:	bf00      	nop
    6766:	3720      	adds	r7, #32
    6768:	46bd      	mov	sp, r7
    676a:	bd80      	pop	{r7, pc}

0000676c <UTIL1_strcatNum32u>:
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 32bit unsigned number to add
  */
void UTIL1_strcatNum32u(uint8_t *dst, size_t dstSize, uint32_t val)
{
    676c:	b580      	push	{r7, lr}
    676e:	b088      	sub	sp, #32
    6770:	af00      	add	r7, sp, #0
    6772:	60f8      	str	r0, [r7, #12]
    6774:	60b9      	str	r1, [r7, #8]
    6776:	607a      	str	r2, [r7, #4]
  unsigned char buf[sizeof("4294967295")]; /* maximum buffer size we need */

  UTIL1_Num32uToStr(buf, sizeof(buf), val);
    6778:	f107 0314 	add.w	r3, r7, #20
    677c:	687a      	ldr	r2, [r7, #4]
    677e:	210b      	movs	r1, #11
    6780:	4618      	mov	r0, r3
    6782:	f000 f8a3 	bl	68cc <UTIL1_Num32uToStr>
  UTIL1_strcat(dst, dstSize, buf);
    6786:	f107 0314 	add.w	r3, r7, #20
    678a:	461a      	mov	r2, r3
    678c:	68b9      	ldr	r1, [r7, #8]
    678e:	68f8      	ldr	r0, [r7, #12]
    6790:	f7ff fbbe 	bl	5f10 <UTIL1_strcat>
}
    6794:	bf00      	nop
    6796:	3720      	adds	r7, #32
    6798:	46bd      	mov	sp, r7
    679a:	bd80      	pop	{r7, pc}

0000679c <UTIL1_Num32sToStr>:
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 32bit signed number to convert.
 */
void UTIL1_Num32sToStr(uint8_t *dst, size_t dstSize, int32_t val)
{
    679c:	b580      	push	{r7, lr}
    679e:	b088      	sub	sp, #32
    67a0:	af00      	add	r7, sp, #0
    67a2:	60f8      	str	r0, [r7, #12]
    67a4:	60b9      	str	r1, [r7, #8]
    67a6:	607a      	str	r2, [r7, #4]
  unsigned char *ptr = ((unsigned char *)dst);
    67a8:	68fb      	ldr	r3, [r7, #12]
    67aa:	61bb      	str	r3, [r7, #24]
  unsigned char i=0, j;
    67ac:	2300      	movs	r3, #0
    67ae:	77fb      	strb	r3, [r7, #31]
  unsigned char tmp;
  unsigned char sign = (unsigned char)(val < 0);
    67b0:	687b      	ldr	r3, [r7, #4]
    67b2:	0fdb      	lsrs	r3, r3, #31
    67b4:	b2db      	uxtb	r3, r3
    67b6:	75fb      	strb	r3, [r7, #23]

  if (val==(int32_t)(0x80000000)) { /* special case 0x80000000/-2147483648: prevent overflow below. */
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    67be:	d105      	bne.n	67cc <UTIL1_Num32sToStr+0x30>
    UTIL1_strcpy(dst, dstSize, (unsigned char*)"-2147483648");
    67c0:	4a40      	ldr	r2, [pc, #256]	; (68c4 <UTIL1_Num32sToStr+0x128>)
    67c2:	68b9      	ldr	r1, [r7, #8]
    67c4:	68f8      	ldr	r0, [r7, #12]
    67c6:	f7ff fb7d 	bl	5ec4 <UTIL1_strcpy>
    return;
    67ca:	e078      	b.n	68be <UTIL1_Num32sToStr+0x122>
  }
  dstSize--; /* for zero byte */
    67cc:	68bb      	ldr	r3, [r7, #8]
    67ce:	3b01      	subs	r3, #1
    67d0:	60bb      	str	r3, [r7, #8]
  if (sign) {
    67d2:	7dfb      	ldrb	r3, [r7, #23]
    67d4:	2b00      	cmp	r3, #0
    67d6:	d002      	beq.n	67de <UTIL1_Num32sToStr+0x42>
    val = -val;
    67d8:	687b      	ldr	r3, [r7, #4]
    67da:	425b      	negs	r3, r3
    67dc:	607b      	str	r3, [r7, #4]
  }
  if (val == 0 && dstSize > 0){
    67de:	687b      	ldr	r3, [r7, #4]
    67e0:	2b00      	cmp	r3, #0
    67e2:	d12f      	bne.n	6844 <UTIL1_Num32sToStr+0xa8>
    67e4:	68bb      	ldr	r3, [r7, #8]
    67e6:	2b00      	cmp	r3, #0
    67e8:	d02c      	beq.n	6844 <UTIL1_Num32sToStr+0xa8>
    ptr[i++] = '0';
    67ea:	7ffb      	ldrb	r3, [r7, #31]
    67ec:	1c5a      	adds	r2, r3, #1
    67ee:	77fa      	strb	r2, [r7, #31]
    67f0:	461a      	mov	r2, r3
    67f2:	69bb      	ldr	r3, [r7, #24]
    67f4:	4413      	add	r3, r2
    67f6:	2230      	movs	r2, #48	; 0x30
    67f8:	701a      	strb	r2, [r3, #0]
    dstSize--;
    67fa:	68bb      	ldr	r3, [r7, #8]
    67fc:	3b01      	subs	r3, #1
    67fe:	60bb      	str	r3, [r7, #8]
  }
  while (val > 0 && dstSize > 0) {
    6800:	e020      	b.n	6844 <UTIL1_Num32sToStr+0xa8>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    6802:	7ffb      	ldrb	r3, [r7, #31]
    6804:	1c5a      	adds	r2, r3, #1
    6806:	77fa      	strb	r2, [r7, #31]
    6808:	461a      	mov	r2, r3
    680a:	69bb      	ldr	r3, [r7, #24]
    680c:	1898      	adds	r0, r3, r2
    680e:	687a      	ldr	r2, [r7, #4]
    6810:	4b2d      	ldr	r3, [pc, #180]	; (68c8 <UTIL1_Num32sToStr+0x12c>)
    6812:	fb83 1302 	smull	r1, r3, r3, r2
    6816:	1099      	asrs	r1, r3, #2
    6818:	17d3      	asrs	r3, r2, #31
    681a:	1ac9      	subs	r1, r1, r3
    681c:	460b      	mov	r3, r1
    681e:	009b      	lsls	r3, r3, #2
    6820:	440b      	add	r3, r1
    6822:	005b      	lsls	r3, r3, #1
    6824:	1ad1      	subs	r1, r2, r3
    6826:	b2cb      	uxtb	r3, r1
    6828:	3330      	adds	r3, #48	; 0x30
    682a:	b2db      	uxtb	r3, r3
    682c:	7003      	strb	r3, [r0, #0]
    dstSize--;
    682e:	68bb      	ldr	r3, [r7, #8]
    6830:	3b01      	subs	r3, #1
    6832:	60bb      	str	r3, [r7, #8]
    val /= 10;
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	4a24      	ldr	r2, [pc, #144]	; (68c8 <UTIL1_Num32sToStr+0x12c>)
    6838:	fb82 1203 	smull	r1, r2, r2, r3
    683c:	1092      	asrs	r2, r2, #2
    683e:	17db      	asrs	r3, r3, #31
    6840:	1ad3      	subs	r3, r2, r3
    6842:	607b      	str	r3, [r7, #4]
  }
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    6844:	687b      	ldr	r3, [r7, #4]
    6846:	2b00      	cmp	r3, #0
    6848:	dd02      	ble.n	6850 <UTIL1_Num32sToStr+0xb4>
    684a:	68bb      	ldr	r3, [r7, #8]
    684c:	2b00      	cmp	r3, #0
    684e:	d1d8      	bne.n	6802 <UTIL1_Num32sToStr+0x66>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    dstSize--;
    val /= 10;
  }
  if (sign && dstSize > 0){
    6850:	7dfb      	ldrb	r3, [r7, #23]
    6852:	2b00      	cmp	r3, #0
    6854:	d00a      	beq.n	686c <UTIL1_Num32sToStr+0xd0>
    6856:	68bb      	ldr	r3, [r7, #8]
    6858:	2b00      	cmp	r3, #0
    685a:	d007      	beq.n	686c <UTIL1_Num32sToStr+0xd0>
    ptr[i++] = '-';
    685c:	7ffb      	ldrb	r3, [r7, #31]
    685e:	1c5a      	adds	r2, r3, #1
    6860:	77fa      	strb	r2, [r7, #31]
    6862:	461a      	mov	r2, r3
    6864:	69bb      	ldr	r3, [r7, #24]
    6866:	4413      	add	r3, r2
    6868:	222d      	movs	r2, #45	; 0x2d
    686a:	701a      	strb	r2, [r3, #0]
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    686c:	2300      	movs	r3, #0
    686e:	77bb      	strb	r3, [r7, #30]
    6870:	e01a      	b.n	68a8 <UTIL1_Num32sToStr+0x10c>
    tmp = ptr[j];
    6872:	7fbb      	ldrb	r3, [r7, #30]
    6874:	69ba      	ldr	r2, [r7, #24]
    6876:	4413      	add	r3, r2
    6878:	781b      	ldrb	r3, [r3, #0]
    687a:	75bb      	strb	r3, [r7, #22]
    ptr[j] = ptr[(i-j)-1];
    687c:	7fbb      	ldrb	r3, [r7, #30]
    687e:	69ba      	ldr	r2, [r7, #24]
    6880:	4413      	add	r3, r2
    6882:	7ff9      	ldrb	r1, [r7, #31]
    6884:	7fba      	ldrb	r2, [r7, #30]
    6886:	1a8a      	subs	r2, r1, r2
    6888:	3a01      	subs	r2, #1
    688a:	69b9      	ldr	r1, [r7, #24]
    688c:	440a      	add	r2, r1
    688e:	7812      	ldrb	r2, [r2, #0]
    6890:	701a      	strb	r2, [r3, #0]
    ptr[(i-j)-1] = tmp;
    6892:	7ffa      	ldrb	r2, [r7, #31]
    6894:	7fbb      	ldrb	r3, [r7, #30]
    6896:	1ad3      	subs	r3, r2, r3
    6898:	3b01      	subs	r3, #1
    689a:	69ba      	ldr	r2, [r7, #24]
    689c:	4413      	add	r3, r2
    689e:	7dba      	ldrb	r2, [r7, #22]
    68a0:	701a      	strb	r2, [r3, #0]
    val /= 10;
  }
  if (sign && dstSize > 0){
    ptr[i++] = '-';
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    68a2:	7fbb      	ldrb	r3, [r7, #30]
    68a4:	3301      	adds	r3, #1
    68a6:	77bb      	strb	r3, [r7, #30]
    68a8:	7ffb      	ldrb	r3, [r7, #31]
    68aa:	085b      	lsrs	r3, r3, #1
    68ac:	b2db      	uxtb	r3, r3
    68ae:	7fba      	ldrb	r2, [r7, #30]
    68b0:	429a      	cmp	r2, r3
    68b2:	d3de      	bcc.n	6872 <UTIL1_Num32sToStr+0xd6>
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
    68b4:	7ffb      	ldrb	r3, [r7, #31]
    68b6:	69ba      	ldr	r2, [r7, #24]
    68b8:	4413      	add	r3, r2
    68ba:	2200      	movs	r2, #0
    68bc:	701a      	strb	r2, [r3, #0]
}
    68be:	3720      	adds	r7, #32
    68c0:	46bd      	mov	sp, r7
    68c2:	bd80      	pop	{r7, pc}
    68c4:	0000fe94 	.word	0x0000fe94
    68c8:	66666667 	.word	0x66666667

000068cc <UTIL1_Num32uToStr>:
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 32bit unsigned number to convert.
 */
void UTIL1_Num32uToStr(uint8_t *dst, size_t dstSize, uint32_t val)
{
    68cc:	b480      	push	{r7}
    68ce:	b089      	sub	sp, #36	; 0x24
    68d0:	af00      	add	r7, sp, #0
    68d2:	60f8      	str	r0, [r7, #12]
    68d4:	60b9      	str	r1, [r7, #8]
    68d6:	607a      	str	r2, [r7, #4]
  unsigned char *ptr = ((unsigned char *)dst);
    68d8:	68fb      	ldr	r3, [r7, #12]
    68da:	61bb      	str	r3, [r7, #24]
  unsigned char i=0, j;
    68dc:	2300      	movs	r3, #0
    68de:	77fb      	strb	r3, [r7, #31]
  unsigned char tmp;

  dstSize--; /* for zero byte */
    68e0:	68bb      	ldr	r3, [r7, #8]
    68e2:	3b01      	subs	r3, #1
    68e4:	60bb      	str	r3, [r7, #8]
  if (val == 0 && dstSize > 0){
    68e6:	687b      	ldr	r3, [r7, #4]
    68e8:	2b00      	cmp	r3, #0
    68ea:	d12b      	bne.n	6944 <UTIL1_Num32uToStr+0x78>
    68ec:	68bb      	ldr	r3, [r7, #8]
    68ee:	2b00      	cmp	r3, #0
    68f0:	d028      	beq.n	6944 <UTIL1_Num32uToStr+0x78>
    ptr[i++] = '0';
    68f2:	7ffb      	ldrb	r3, [r7, #31]
    68f4:	1c5a      	adds	r2, r3, #1
    68f6:	77fa      	strb	r2, [r7, #31]
    68f8:	461a      	mov	r2, r3
    68fa:	69bb      	ldr	r3, [r7, #24]
    68fc:	4413      	add	r3, r2
    68fe:	2230      	movs	r2, #48	; 0x30
    6900:	701a      	strb	r2, [r3, #0]
    dstSize--;
    6902:	68bb      	ldr	r3, [r7, #8]
    6904:	3b01      	subs	r3, #1
    6906:	60bb      	str	r3, [r7, #8]
  }
  while (val > 0 && dstSize > 0) {
    6908:	e01c      	b.n	6944 <UTIL1_Num32uToStr+0x78>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    690a:	7ffb      	ldrb	r3, [r7, #31]
    690c:	1c5a      	adds	r2, r3, #1
    690e:	77fa      	strb	r2, [r7, #31]
    6910:	461a      	mov	r2, r3
    6912:	69bb      	ldr	r3, [r7, #24]
    6914:	1898      	adds	r0, r3, r2
    6916:	6879      	ldr	r1, [r7, #4]
    6918:	4b25      	ldr	r3, [pc, #148]	; (69b0 <UTIL1_Num32uToStr+0xe4>)
    691a:	fba3 2301 	umull	r2, r3, r3, r1
    691e:	08da      	lsrs	r2, r3, #3
    6920:	4613      	mov	r3, r2
    6922:	009b      	lsls	r3, r3, #2
    6924:	4413      	add	r3, r2
    6926:	005b      	lsls	r3, r3, #1
    6928:	1aca      	subs	r2, r1, r3
    692a:	b2d3      	uxtb	r3, r2
    692c:	3330      	adds	r3, #48	; 0x30
    692e:	b2db      	uxtb	r3, r3
    6930:	7003      	strb	r3, [r0, #0]
    dstSize--;
    6932:	68bb      	ldr	r3, [r7, #8]
    6934:	3b01      	subs	r3, #1
    6936:	60bb      	str	r3, [r7, #8]
    val /= 10;
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	4a1d      	ldr	r2, [pc, #116]	; (69b0 <UTIL1_Num32uToStr+0xe4>)
    693c:	fba2 2303 	umull	r2, r3, r2, r3
    6940:	08db      	lsrs	r3, r3, #3
    6942:	607b      	str	r3, [r7, #4]
  dstSize--; /* for zero byte */
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    6944:	687b      	ldr	r3, [r7, #4]
    6946:	2b00      	cmp	r3, #0
    6948:	d002      	beq.n	6950 <UTIL1_Num32uToStr+0x84>
    694a:	68bb      	ldr	r3, [r7, #8]
    694c:	2b00      	cmp	r3, #0
    694e:	d1dc      	bne.n	690a <UTIL1_Num32uToStr+0x3e>
    ptr[i++] = (unsigned char)((val % 10) + '0');
    dstSize--;
    val /= 10;
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    6950:	2300      	movs	r3, #0
    6952:	77bb      	strb	r3, [r7, #30]
    6954:	e01a      	b.n	698c <UTIL1_Num32uToStr+0xc0>
    tmp = ptr[j];
    6956:	7fbb      	ldrb	r3, [r7, #30]
    6958:	69ba      	ldr	r2, [r7, #24]
    695a:	4413      	add	r3, r2
    695c:	781b      	ldrb	r3, [r3, #0]
    695e:	75fb      	strb	r3, [r7, #23]
    ptr[j] = ptr[(i-j)-1];
    6960:	7fbb      	ldrb	r3, [r7, #30]
    6962:	69ba      	ldr	r2, [r7, #24]
    6964:	4413      	add	r3, r2
    6966:	7ff9      	ldrb	r1, [r7, #31]
    6968:	7fba      	ldrb	r2, [r7, #30]
    696a:	1a8a      	subs	r2, r1, r2
    696c:	3a01      	subs	r2, #1
    696e:	69b9      	ldr	r1, [r7, #24]
    6970:	440a      	add	r2, r1
    6972:	7812      	ldrb	r2, [r2, #0]
    6974:	701a      	strb	r2, [r3, #0]
    ptr[(i-j)-1] = tmp;
    6976:	7ffa      	ldrb	r2, [r7, #31]
    6978:	7fbb      	ldrb	r3, [r7, #30]
    697a:	1ad3      	subs	r3, r2, r3
    697c:	3b01      	subs	r3, #1
    697e:	69ba      	ldr	r2, [r7, #24]
    6980:	4413      	add	r3, r2
    6982:	7dfa      	ldrb	r2, [r7, #23]
    6984:	701a      	strb	r2, [r3, #0]
  while (val > 0 && dstSize > 0) {
    ptr[i++] = (unsigned char)((val % 10) + '0');
    dstSize--;
    val /= 10;
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    6986:	7fbb      	ldrb	r3, [r7, #30]
    6988:	3301      	adds	r3, #1
    698a:	77bb      	strb	r3, [r7, #30]
    698c:	7ffb      	ldrb	r3, [r7, #31]
    698e:	085b      	lsrs	r3, r3, #1
    6990:	b2db      	uxtb	r3, r3
    6992:	7fba      	ldrb	r2, [r7, #30]
    6994:	429a      	cmp	r2, r3
    6996:	d3de      	bcc.n	6956 <UTIL1_Num32uToStr+0x8a>
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
    6998:	7ffb      	ldrb	r3, [r7, #31]
    699a:	69ba      	ldr	r2, [r7, #24]
    699c:	4413      	add	r3, r2
    699e:	2200      	movs	r2, #0
    69a0:	701a      	strb	r2, [r3, #0]
}
    69a2:	bf00      	nop
    69a4:	3724      	adds	r7, #36	; 0x24
    69a6:	46bd      	mov	sp, r7
    69a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    69ac:	4770      	bx	lr
    69ae:	bf00      	nop
    69b0:	cccccccd 	.word	0xcccccccd

000069b4 <UTIL1_IsLeapYear>:
**     Returns     :
**         ---             - If the year is a leap year or not.
** ===================================================================
*/
bool UTIL1_IsLeapYear(uint16_t year)
{
    69b4:	b480      	push	{r7}
    69b6:	b083      	sub	sp, #12
    69b8:	af00      	add	r7, sp, #0
    69ba:	4603      	mov	r3, r0
    69bc:	80fb      	strh	r3, [r7, #6]
  return ((((year%4)==0) && (year%100)!=0) || (year%400)==0);
    69be:	88fb      	ldrh	r3, [r7, #6]
    69c0:	f003 0303 	and.w	r3, r3, #3
    69c4:	b29b      	uxth	r3, r3
    69c6:	2b00      	cmp	r3, #0
    69c8:	d10b      	bne.n	69e2 <UTIL1_IsLeapYear+0x2e>
    69ca:	88fb      	ldrh	r3, [r7, #6]
    69cc:	4a10      	ldr	r2, [pc, #64]	; (6a10 <UTIL1_IsLeapYear+0x5c>)
    69ce:	fba2 1203 	umull	r1, r2, r2, r3
    69d2:	0952      	lsrs	r2, r2, #5
    69d4:	2164      	movs	r1, #100	; 0x64
    69d6:	fb01 f202 	mul.w	r2, r1, r2
    69da:	1a9b      	subs	r3, r3, r2
    69dc:	b29b      	uxth	r3, r3
    69de:	2b00      	cmp	r3, #0
    69e0:	d10c      	bne.n	69fc <UTIL1_IsLeapYear+0x48>
    69e2:	88fb      	ldrh	r3, [r7, #6]
    69e4:	4a0a      	ldr	r2, [pc, #40]	; (6a10 <UTIL1_IsLeapYear+0x5c>)
    69e6:	fba2 1203 	umull	r1, r2, r2, r3
    69ea:	09d2      	lsrs	r2, r2, #7
    69ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
    69f0:	fb01 f202 	mul.w	r2, r1, r2
    69f4:	1a9b      	subs	r3, r3, r2
    69f6:	b29b      	uxth	r3, r3
    69f8:	2b00      	cmp	r3, #0
    69fa:	d101      	bne.n	6a00 <UTIL1_IsLeapYear+0x4c>
    69fc:	2301      	movs	r3, #1
    69fe:	e000      	b.n	6a02 <UTIL1_IsLeapYear+0x4e>
    6a00:	2300      	movs	r3, #0
    6a02:	b2db      	uxtb	r3, r3
}
    6a04:	4618      	mov	r0, r3
    6a06:	370c      	adds	r7, #12
    6a08:	46bd      	mov	sp, r7
    6a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    6a0e:	4770      	bx	lr
    6a10:	51eb851f 	.word	0x51eb851f

00006a14 <UTIL1_WeekDay>:
**         ---             - Returns the weekday, 0 for Sunday, 1 for
**                           Monday, 2 for Tuesday, etc.
** ===================================================================
*/
uint8_t UTIL1_WeekDay(uint16_t year, uint8_t month, uint8_t day)
{
    6a14:	b590      	push	{r4, r7, lr}
    6a16:	b085      	sub	sp, #20
    6a18:	af00      	add	r7, sp, #0
    6a1a:	4603      	mov	r3, r0
    6a1c:	80fb      	strh	r3, [r7, #6]
    6a1e:	460b      	mov	r3, r1
    6a20:	717b      	strb	r3, [r7, #5]
    6a22:	4613      	mov	r3, r2
    6a24:	713b      	strb	r3, [r7, #4]
  /* see http://klausler.com/new-dayofweek.html */
  static const uint8_t skew[12] = {0,3,3,6,1,4,6,2,5,0,3,5};
  uint16_t sum;

  sum = (uint16_t)(year-1900);
    6a26:	88fb      	ldrh	r3, [r7, #6]
    6a28:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
    6a2c:	81fb      	strh	r3, [r7, #14]
  sum += sum/4;
    6a2e:	89fb      	ldrh	r3, [r7, #14]
    6a30:	089b      	lsrs	r3, r3, #2
    6a32:	b29a      	uxth	r2, r3
    6a34:	89fb      	ldrh	r3, [r7, #14]
    6a36:	4413      	add	r3, r2
    6a38:	81fb      	strh	r3, [r7, #14]
  sum %= 7;
    6a3a:	89fa      	ldrh	r2, [r7, #14]
    6a3c:	4b24      	ldr	r3, [pc, #144]	; (6ad0 <UTIL1_WeekDay+0xbc>)
    6a3e:	fba2 3403 	umull	r3, r4, r2, r3
    6a42:	1b11      	subs	r1, r2, r4
    6a44:	0849      	lsrs	r1, r1, #1
    6a46:	190b      	adds	r3, r1, r4
    6a48:	0899      	lsrs	r1, r3, #2
    6a4a:	460b      	mov	r3, r1
    6a4c:	00db      	lsls	r3, r3, #3
    6a4e:	1a5b      	subs	r3, r3, r1
    6a50:	1ad3      	subs	r3, r2, r3
    6a52:	81fb      	strh	r3, [r7, #14]
  if (UTIL1_IsLeapYear(year) && (month==1 || month==2)) {
    6a54:	88fb      	ldrh	r3, [r7, #6]
    6a56:	4618      	mov	r0, r3
    6a58:	f7ff ffac 	bl	69b4 <UTIL1_IsLeapYear>
    6a5c:	4603      	mov	r3, r0
    6a5e:	2b00      	cmp	r3, #0
    6a60:	d008      	beq.n	6a74 <UTIL1_WeekDay+0x60>
    6a62:	797b      	ldrb	r3, [r7, #5]
    6a64:	2b01      	cmp	r3, #1
    6a66:	d002      	beq.n	6a6e <UTIL1_WeekDay+0x5a>
    6a68:	797b      	ldrb	r3, [r7, #5]
    6a6a:	2b02      	cmp	r3, #2
    6a6c:	d102      	bne.n	6a74 <UTIL1_WeekDay+0x60>
    sum--;
    6a6e:	89fb      	ldrh	r3, [r7, #14]
    6a70:	3b01      	subs	r3, #1
    6a72:	81fb      	strh	r3, [r7, #14]
  }
  sum += day;
    6a74:	793b      	ldrb	r3, [r7, #4]
    6a76:	b29a      	uxth	r2, r3
    6a78:	89fb      	ldrh	r3, [r7, #14]
    6a7a:	4413      	add	r3, r2
    6a7c:	81fb      	strh	r3, [r7, #14]
  sum %= 7;
    6a7e:	89fa      	ldrh	r2, [r7, #14]
    6a80:	4b13      	ldr	r3, [pc, #76]	; (6ad0 <UTIL1_WeekDay+0xbc>)
    6a82:	fba2 3403 	umull	r3, r4, r2, r3
    6a86:	1b11      	subs	r1, r2, r4
    6a88:	0849      	lsrs	r1, r1, #1
    6a8a:	190b      	adds	r3, r1, r4
    6a8c:	0899      	lsrs	r1, r3, #2
    6a8e:	460b      	mov	r3, r1
    6a90:	00db      	lsls	r3, r3, #3
    6a92:	1a5b      	subs	r3, r3, r1
    6a94:	1ad3      	subs	r3, r2, r3
    6a96:	81fb      	strh	r3, [r7, #14]
  sum += skew[month-1];
    6a98:	797b      	ldrb	r3, [r7, #5]
    6a9a:	3b01      	subs	r3, #1
    6a9c:	4a0d      	ldr	r2, [pc, #52]	; (6ad4 <UTIL1_WeekDay+0xc0>)
    6a9e:	5cd3      	ldrb	r3, [r2, r3]
    6aa0:	b29a      	uxth	r2, r3
    6aa2:	89fb      	ldrh	r3, [r7, #14]
    6aa4:	4413      	add	r3, r2
    6aa6:	81fb      	strh	r3, [r7, #14]
  sum %= 7;
    6aa8:	89fa      	ldrh	r2, [r7, #14]
    6aaa:	4b09      	ldr	r3, [pc, #36]	; (6ad0 <UTIL1_WeekDay+0xbc>)
    6aac:	fba2 3403 	umull	r3, r4, r2, r3
    6ab0:	1b11      	subs	r1, r2, r4
    6ab2:	0849      	lsrs	r1, r1, #1
    6ab4:	190b      	adds	r3, r1, r4
    6ab6:	0899      	lsrs	r1, r3, #2
    6ab8:	460b      	mov	r3, r1
    6aba:	00db      	lsls	r3, r3, #3
    6abc:	1a5b      	subs	r3, r3, r1
    6abe:	1ad3      	subs	r3, r2, r3
    6ac0:	81fb      	strh	r3, [r7, #14]
  return (uint8_t)sum; /* 0: Sunday, 1: Monday, 2: Tuesday, 3: Wednesday, ... */
    6ac2:	89fb      	ldrh	r3, [r7, #14]
    6ac4:	b2db      	uxtb	r3, r3
}
    6ac6:	4618      	mov	r0, r3
    6ac8:	3714      	adds	r7, #20
    6aca:	46bd      	mov	sp, r7
    6acc:	bd90      	pop	{r4, r7, pc}
    6ace:	bf00      	nop
    6ad0:	24924925 	.word	0x24924925
    6ad4:	0000fea8 	.word	0x0000fea8

00006ad8 <UTIL1_ReadEscapedName>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ReadEscapedName(const unsigned char *filename, uint8_t *destname, size_t maxlen, size_t *lenRead, size_t *lenWritten, const char *terminators)
{
    6ad8:	b580      	push	{r7, lr}
    6ada:	b088      	sub	sp, #32
    6adc:	af00      	add	r7, sp, #0
    6ade:	60f8      	str	r0, [r7, #12]
    6ae0:	60b9      	str	r1, [r7, #8]
    6ae2:	607a      	str	r2, [r7, #4]
    6ae4:	603b      	str	r3, [r7, #0]
  size_t lenCopied = 0, lenOverread = 0;
    6ae6:	2300      	movs	r3, #0
    6ae8:	61fb      	str	r3, [r7, #28]
    6aea:	2300      	movs	r3, #0
    6aec:	61bb      	str	r3, [r7, #24]
  bool quoteMode = FALSE;  /* quoteMode means the name is surrounded by ". In this mode, only a second single quote "
    6aee:	2300      	movs	r3, #0
    6af0:	75fb      	strb	r3, [r7, #23]
                              terminates the string. In !quoteMode a space or a '\0' may also terminate it correctly */
  bool res = ERR_OK;
    6af2:	2300      	movs	r3, #0
    6af4:	75bb      	strb	r3, [r7, #22]
  #define IS_SPACE(ch) ((ch)==' '||(ch)=='\t'||(ch)=='\n'||(ch)=='\v'||(ch)=='\f'||(ch)=='\r')

  if (filename==NULL || (destname!=NULL && maxlen==0)) {
    6af6:	68fb      	ldr	r3, [r7, #12]
    6af8:	2b00      	cmp	r3, #0
    6afa:	d005      	beq.n	6b08 <UTIL1_ReadEscapedName+0x30>
    6afc:	68bb      	ldr	r3, [r7, #8]
    6afe:	2b00      	cmp	r3, #0
    6b00:	d004      	beq.n	6b0c <UTIL1_ReadEscapedName+0x34>
    6b02:	687b      	ldr	r3, [r7, #4]
    6b04:	2b00      	cmp	r3, #0
    6b06:	d101      	bne.n	6b0c <UTIL1_ReadEscapedName+0x34>
    return ERR_FAILED;
    6b08:	231b      	movs	r3, #27
    6b0a:	e080      	b.n	6c0e <UTIL1_ReadEscapedName+0x136>
  }
  if (filename[0] == '"') { /* translated mode */
    6b0c:	68fb      	ldr	r3, [r7, #12]
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	2b22      	cmp	r3, #34	; 0x22
    6b12:	d107      	bne.n	6b24 <UTIL1_ReadEscapedName+0x4c>
    filename++; /* overread '"' */
    6b14:	68fb      	ldr	r3, [r7, #12]
    6b16:	3301      	adds	r3, #1
    6b18:	60fb      	str	r3, [r7, #12]
    lenOverread++;
    6b1a:	69bb      	ldr	r3, [r7, #24]
    6b1c:	3301      	adds	r3, #1
    6b1e:	61bb      	str	r3, [r7, #24]
    quoteMode=TRUE;
    6b20:	2301      	movs	r3, #1
    6b22:	75fb      	strb	r3, [r7, #23]
  }
  if (terminators == NULL) {
    6b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6b26:	2b00      	cmp	r3, #0
    6b28:	d101      	bne.n	6b2e <UTIL1_ReadEscapedName+0x56>
    terminators = "";
    6b2a:	4b3b      	ldr	r3, [pc, #236]	; (6c18 <UTIL1_ReadEscapedName+0x140>)
    6b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  for (;;) {
    if (quoteMode) {
    6b2e:	7dfb      	ldrb	r3, [r7, #23]
    6b30:	2b00      	cmp	r3, #0
    6b32:	d014      	beq.n	6b5e <UTIL1_ReadEscapedName+0x86>
      if (filename[0] == '"') {
    6b34:	68fb      	ldr	r3, [r7, #12]
    6b36:	781b      	ldrb	r3, [r3, #0]
    6b38:	2b22      	cmp	r3, #34	; 0x22
    6b3a:	d109      	bne.n	6b50 <UTIL1_ReadEscapedName+0x78>
        filename++; /* overread '"' */
    6b3c:	68fb      	ldr	r3, [r7, #12]
    6b3e:	3301      	adds	r3, #1
    6b40:	60fb      	str	r3, [r7, #12]
        lenOverread++;
    6b42:	69bb      	ldr	r3, [r7, #24]
    6b44:	3301      	adds	r3, #1
    6b46:	61bb      	str	r3, [r7, #24]
        if (filename[0] != '"') { /* quoteMode is terminated by a single quote. A double quote is treated like a single quote and does not terminate it ! */
    6b48:	68fb      	ldr	r3, [r7, #12]
    6b4a:	781b      	ldrb	r3, [r3, #0]
    6b4c:	2b22      	cmp	r3, #34	; 0x22
    6b4e:	d147      	bne.n	6be0 <UTIL1_ReadEscapedName+0x108>
          break; /* successfully finished with this name */
        } /* else we copy the second quote " */
      }
      if (filename[0] == '\0') { /* unexpected 0. stop */
    6b50:	68fb      	ldr	r3, [r7, #12]
    6b52:	781b      	ldrb	r3, [r3, #0]
    6b54:	2b00      	cmp	r3, #0
    6b56:	d127      	bne.n	6ba8 <UTIL1_ReadEscapedName+0xd0>
        res = ERR_FAILED;
    6b58:	231b      	movs	r3, #27
    6b5a:	75bb      	strb	r3, [r7, #22]
        break; /* error case: no terminating double quote (") was found */
    6b5c:	e041      	b.n	6be2 <UTIL1_ReadEscapedName+0x10a>
      }
    } else { /* copy mode */
      if (IS_SPACE(filename[0]) || filename[0] == '\0' || strchr(terminators, filename[0]) != NULL) { /* !quoteMode is terminated by space, '\0' or by any char in terminators */
    6b5e:	68fb      	ldr	r3, [r7, #12]
    6b60:	781b      	ldrb	r3, [r3, #0]
    6b62:	2b20      	cmp	r3, #32
    6b64:	d03d      	beq.n	6be2 <UTIL1_ReadEscapedName+0x10a>
    6b66:	68fb      	ldr	r3, [r7, #12]
    6b68:	781b      	ldrb	r3, [r3, #0]
    6b6a:	2b09      	cmp	r3, #9
    6b6c:	d039      	beq.n	6be2 <UTIL1_ReadEscapedName+0x10a>
    6b6e:	68fb      	ldr	r3, [r7, #12]
    6b70:	781b      	ldrb	r3, [r3, #0]
    6b72:	2b0a      	cmp	r3, #10
    6b74:	d035      	beq.n	6be2 <UTIL1_ReadEscapedName+0x10a>
    6b76:	68fb      	ldr	r3, [r7, #12]
    6b78:	781b      	ldrb	r3, [r3, #0]
    6b7a:	2b0b      	cmp	r3, #11
    6b7c:	d031      	beq.n	6be2 <UTIL1_ReadEscapedName+0x10a>
    6b7e:	68fb      	ldr	r3, [r7, #12]
    6b80:	781b      	ldrb	r3, [r3, #0]
    6b82:	2b0c      	cmp	r3, #12
    6b84:	d02d      	beq.n	6be2 <UTIL1_ReadEscapedName+0x10a>
    6b86:	68fb      	ldr	r3, [r7, #12]
    6b88:	781b      	ldrb	r3, [r3, #0]
    6b8a:	2b0d      	cmp	r3, #13
    6b8c:	d029      	beq.n	6be2 <UTIL1_ReadEscapedName+0x10a>
    6b8e:	68fb      	ldr	r3, [r7, #12]
    6b90:	781b      	ldrb	r3, [r3, #0]
    6b92:	2b00      	cmp	r3, #0
    6b94:	d025      	beq.n	6be2 <UTIL1_ReadEscapedName+0x10a>
    6b96:	68fb      	ldr	r3, [r7, #12]
    6b98:	781b      	ldrb	r3, [r3, #0]
    6b9a:	4619      	mov	r1, r3
    6b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6b9e:	f008 ffc1 	bl	fb24 <strchr>
    6ba2:	4603      	mov	r3, r0
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d11c      	bne.n	6be2 <UTIL1_ReadEscapedName+0x10a>
        break;
      }
    }
    if (destname != NULL) {
    6ba8:	68bb      	ldr	r3, [r7, #8]
    6baa:	2b00      	cmp	r3, #0
    6bac:	d011      	beq.n	6bd2 <UTIL1_ReadEscapedName+0xfa>
      if (lenCopied + 1 < maxlen) {
    6bae:	69fb      	ldr	r3, [r7, #28]
    6bb0:	1c5a      	adds	r2, r3, #1
    6bb2:	687b      	ldr	r3, [r7, #4]
    6bb4:	429a      	cmp	r2, r3
    6bb6:	d207      	bcs.n	6bc8 <UTIL1_ReadEscapedName+0xf0>
        destname[0] = filename[0];
    6bb8:	68fb      	ldr	r3, [r7, #12]
    6bba:	781a      	ldrb	r2, [r3, #0]
    6bbc:	68bb      	ldr	r3, [r7, #8]
    6bbe:	701a      	strb	r2, [r3, #0]
        destname++;
    6bc0:	68bb      	ldr	r3, [r7, #8]
    6bc2:	3301      	adds	r3, #1
    6bc4:	60bb      	str	r3, [r7, #8]
    6bc6:	e004      	b.n	6bd2 <UTIL1_ReadEscapedName+0xfa>
      } else {
        destname[0] = '\0'; /* terminate string */
    6bc8:	68bb      	ldr	r3, [r7, #8]
    6bca:	2200      	movs	r2, #0
    6bcc:	701a      	strb	r2, [r3, #0]
        destname = NULL; /* avoid it to overwrite not allocated space */
    6bce:	2300      	movs	r3, #0
    6bd0:	60bb      	str	r3, [r7, #8]
      }
    }
    lenCopied++;
    6bd2:	69fb      	ldr	r3, [r7, #28]
    6bd4:	3301      	adds	r3, #1
    6bd6:	61fb      	str	r3, [r7, #28]
    filename++;
    6bd8:	68fb      	ldr	r3, [r7, #12]
    6bda:	3301      	adds	r3, #1
    6bdc:	60fb      	str	r3, [r7, #12]
  }
    6bde:	e7a6      	b.n	6b2e <UTIL1_ReadEscapedName+0x56>
    if (quoteMode) {
      if (filename[0] == '"') {
        filename++; /* overread '"' */
        lenOverread++;
        if (filename[0] != '"') { /* quoteMode is terminated by a single quote. A double quote is treated like a single quote and does not terminate it ! */
          break; /* successfully finished with this name */
    6be0:	bf00      	nop
      }
    }
    lenCopied++;
    filename++;
  }
  if (destname != NULL) {
    6be2:	68bb      	ldr	r3, [r7, #8]
    6be4:	2b00      	cmp	r3, #0
    6be6:	d002      	beq.n	6bee <UTIL1_ReadEscapedName+0x116>
    destname[0] = '\0';
    6be8:	68bb      	ldr	r3, [r7, #8]
    6bea:	2200      	movs	r2, #0
    6bec:	701a      	strb	r2, [r3, #0]
  }
  if (lenRead != NULL) {
    6bee:	683b      	ldr	r3, [r7, #0]
    6bf0:	2b00      	cmp	r3, #0
    6bf2:	d004      	beq.n	6bfe <UTIL1_ReadEscapedName+0x126>
    *lenRead = lenCopied+lenOverread;
    6bf4:	69fa      	ldr	r2, [r7, #28]
    6bf6:	69bb      	ldr	r3, [r7, #24]
    6bf8:	441a      	add	r2, r3
    6bfa:	683b      	ldr	r3, [r7, #0]
    6bfc:	601a      	str	r2, [r3, #0]
  }
  if (lenWritten != NULL) {
    6bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c00:	2b00      	cmp	r3, #0
    6c02:	d003      	beq.n	6c0c <UTIL1_ReadEscapedName+0x134>
    *lenWritten = lenCopied + 1; /* additionally a zero byte written */
    6c04:	69fb      	ldr	r3, [r7, #28]
    6c06:	1c5a      	adds	r2, r3, #1
    6c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c0a:	601a      	str	r2, [r3, #0]
  }
  return res;
    6c0c:	7dbb      	ldrb	r3, [r7, #22]
}
    6c0e:	4618      	mov	r0, r3
    6c10:	3720      	adds	r7, #32
    6c12:	46bd      	mov	sp, r7
    6c14:	bd80      	pop	{r7, pc}
    6c16:	bf00      	nop
    6c18:	0000fea0 	.word	0x0000fea0

00006c1c <UTIL1_xatoi>:
/-------------------------------------------------------------------------*/
#ifdef __HC12__
  #pragma MESSAGE DISABLE C12056  /* message about SP debug info */
#endif
uint8_t UTIL1_xatoi(const unsigned char **str, int32_t *res)
{
    6c1c:	b480      	push	{r7}
    6c1e:	b085      	sub	sp, #20
    6c20:	af00      	add	r7, sp, #0
    6c22:	6078      	str	r0, [r7, #4]
    6c24:	6039      	str	r1, [r7, #0]
                               ^      6th call returns 3 and next ptr, caller needs to read '.'
                                 ^    7th call returns 25 and next ptr
                                    ^ 8th call fails and returns ERR_FAILED
*/
  uint32_t val;
  uint8_t c, r, s = 0;
    6c26:	2300      	movs	r3, #0
    6c28:	727b      	strb	r3, [r7, #9]

  *res = 0;
    6c2a:	683b      	ldr	r3, [r7, #0]
    6c2c:	2200      	movs	r2, #0
    6c2e:	601a      	str	r2, [r3, #0]
  while (**str==' ') {
    6c30:	e004      	b.n	6c3c <UTIL1_xatoi+0x20>
    (*str)++;                          /* Skip leading spaces */
    6c32:	687b      	ldr	r3, [r7, #4]
    6c34:	681b      	ldr	r3, [r3, #0]
    6c36:	1c5a      	adds	r2, r3, #1
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	601a      	str	r2, [r3, #0]
*/
  uint32_t val;
  uint8_t c, r, s = 0;

  *res = 0;
  while (**str==' ') {
    6c3c:	687b      	ldr	r3, [r7, #4]
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	781b      	ldrb	r3, [r3, #0]
    6c42:	2b20      	cmp	r3, #32
    6c44:	d0f5      	beq.n	6c32 <UTIL1_xatoi+0x16>
    (*str)++;                          /* Skip leading spaces */
  }
  c = **str;
    6c46:	687b      	ldr	r3, [r7, #4]
    6c48:	681b      	ldr	r3, [r3, #0]
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	72fb      	strb	r3, [r7, #11]
  if (c == '-') {                      /* negative? */
    6c4e:	7afb      	ldrb	r3, [r7, #11]
    6c50:	2b2d      	cmp	r3, #45	; 0x2d
    6c52:	d10a      	bne.n	6c6a <UTIL1_xatoi+0x4e>
    s = 1;
    6c54:	2301      	movs	r3, #1
    6c56:	727b      	strb	r3, [r7, #9]
    c = *(++(*str));
    6c58:	687b      	ldr	r3, [r7, #4]
    6c5a:	681b      	ldr	r3, [r3, #0]
    6c5c:	1c5a      	adds	r2, r3, #1
    6c5e:	687b      	ldr	r3, [r7, #4]
    6c60:	601a      	str	r2, [r3, #0]
    6c62:	687b      	ldr	r3, [r7, #4]
    6c64:	681b      	ldr	r3, [r3, #0]
    6c66:	781b      	ldrb	r3, [r3, #0]
    6c68:	72fb      	strb	r3, [r7, #11]
  }
  if (c == '0') {
    6c6a:	7afb      	ldrb	r3, [r7, #11]
    6c6c:	2b30      	cmp	r3, #48	; 0x30
    6c6e:	d139      	bne.n	6ce4 <UTIL1_xatoi+0xc8>
    c = *(++(*str));
    6c70:	687b      	ldr	r3, [r7, #4]
    6c72:	681b      	ldr	r3, [r3, #0]
    6c74:	1c5a      	adds	r2, r3, #1
    6c76:	687b      	ldr	r3, [r7, #4]
    6c78:	601a      	str	r2, [r3, #0]
    6c7a:	687b      	ldr	r3, [r7, #4]
    6c7c:	681b      	ldr	r3, [r3, #0]
    6c7e:	781b      	ldrb	r3, [r3, #0]
    6c80:	72fb      	strb	r3, [r7, #11]
    switch (c) {
    6c82:	7afb      	ldrb	r3, [r7, #11]
    6c84:	2b62      	cmp	r3, #98	; 0x62
    6c86:	d00d      	beq.n	6ca4 <UTIL1_xatoi+0x88>
    6c88:	2b78      	cmp	r3, #120	; 0x78
    6c8a:	d117      	bne.n	6cbc <UTIL1_xatoi+0xa0>
      case 'x':                        /* hexadecimal */
        r = 16; c = *(++(*str));
    6c8c:	2310      	movs	r3, #16
    6c8e:	72bb      	strb	r3, [r7, #10]
    6c90:	687b      	ldr	r3, [r7, #4]
    6c92:	681b      	ldr	r3, [r3, #0]
    6c94:	1c5a      	adds	r2, r3, #1
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	601a      	str	r2, [r3, #0]
    6c9a:	687b      	ldr	r3, [r7, #4]
    6c9c:	681b      	ldr	r3, [r3, #0]
    6c9e:	781b      	ldrb	r3, [r3, #0]
    6ca0:	72fb      	strb	r3, [r7, #11]
        break;
    6ca2:	e029      	b.n	6cf8 <UTIL1_xatoi+0xdc>
      case 'b':                        /* binary */
        r = 2; c = *(++(*str));
    6ca4:	2302      	movs	r3, #2
    6ca6:	72bb      	strb	r3, [r7, #10]
    6ca8:	687b      	ldr	r3, [r7, #4]
    6caa:	681b      	ldr	r3, [r3, #0]
    6cac:	1c5a      	adds	r2, r3, #1
    6cae:	687b      	ldr	r3, [r7, #4]
    6cb0:	601a      	str	r2, [r3, #0]
    6cb2:	687b      	ldr	r3, [r7, #4]
    6cb4:	681b      	ldr	r3, [r3, #0]
    6cb6:	781b      	ldrb	r3, [r3, #0]
    6cb8:	72fb      	strb	r3, [r7, #11]
        break;
    6cba:	e01d      	b.n	6cf8 <UTIL1_xatoi+0xdc>
      default:
        if (c <= ' ' || c == '.') {
    6cbc:	7afb      	ldrb	r3, [r7, #11]
    6cbe:	2b20      	cmp	r3, #32
    6cc0:	d902      	bls.n	6cc8 <UTIL1_xatoi+0xac>
    6cc2:	7afb      	ldrb	r3, [r7, #11]
    6cc4:	2b2e      	cmp	r3, #46	; 0x2e
    6cc6:	d101      	bne.n	6ccc <UTIL1_xatoi+0xb0>
          return ERR_OK;               /* single zero */
    6cc8:	2300      	movs	r3, #0
    6cca:	e052      	b.n	6d72 <UTIL1_xatoi+0x156>
        }
        if (c < '0' || c > '9') {
    6ccc:	7afb      	ldrb	r3, [r7, #11]
    6cce:	2b2f      	cmp	r3, #47	; 0x2f
    6cd0:	d902      	bls.n	6cd8 <UTIL1_xatoi+0xbc>
    6cd2:	7afb      	ldrb	r3, [r7, #11]
    6cd4:	2b39      	cmp	r3, #57	; 0x39
    6cd6:	d901      	bls.n	6cdc <UTIL1_xatoi+0xc0>
          return ERR_FAILED;           /* invalid char */
    6cd8:	231b      	movs	r3, #27
    6cda:	e04a      	b.n	6d72 <UTIL1_xatoi+0x156>
        }
        r = 8;                         /* octal */
    6cdc:	2308      	movs	r3, #8
    6cde:	72bb      	strb	r3, [r7, #10]
        break;
    6ce0:	bf00      	nop
    6ce2:	e009      	b.n	6cf8 <UTIL1_xatoi+0xdc>
    } /* switch */
  } else {
    if (c < '0' || c > '9') {
    6ce4:	7afb      	ldrb	r3, [r7, #11]
    6ce6:	2b2f      	cmp	r3, #47	; 0x2f
    6ce8:	d902      	bls.n	6cf0 <UTIL1_xatoi+0xd4>
    6cea:	7afb      	ldrb	r3, [r7, #11]
    6cec:	2b39      	cmp	r3, #57	; 0x39
    6cee:	d901      	bls.n	6cf4 <UTIL1_xatoi+0xd8>
      return ERR_FAILED;               /* EOL or invalid char */
    6cf0:	231b      	movs	r3, #27
    6cf2:	e03e      	b.n	6d72 <UTIL1_xatoi+0x156>
    }
    r = 10;                            /* decimal */
    6cf4:	230a      	movs	r3, #10
    6cf6:	72bb      	strb	r3, [r7, #10]
  }
  val = 0;
    6cf8:	2300      	movs	r3, #0
    6cfa:	60fb      	str	r3, [r7, #12]
  while (c > ' ' && c != '.') {
    6cfc:	e029      	b.n	6d52 <UTIL1_xatoi+0x136>
    if (c >= 'a') c -= 0x20;
    6cfe:	7afb      	ldrb	r3, [r7, #11]
    6d00:	2b60      	cmp	r3, #96	; 0x60
    6d02:	d902      	bls.n	6d0a <UTIL1_xatoi+0xee>
    6d04:	7afb      	ldrb	r3, [r7, #11]
    6d06:	3b20      	subs	r3, #32
    6d08:	72fb      	strb	r3, [r7, #11]
    c -= '0';
    6d0a:	7afb      	ldrb	r3, [r7, #11]
    6d0c:	3b30      	subs	r3, #48	; 0x30
    6d0e:	72fb      	strb	r3, [r7, #11]
    if (c >= 17) {
    6d10:	7afb      	ldrb	r3, [r7, #11]
    6d12:	2b10      	cmp	r3, #16
    6d14:	d907      	bls.n	6d26 <UTIL1_xatoi+0x10a>
      c -= 7;
    6d16:	7afb      	ldrb	r3, [r7, #11]
    6d18:	3b07      	subs	r3, #7
    6d1a:	72fb      	strb	r3, [r7, #11]
      if (c <= 9) return ERR_FAILED;   /* invalid char */
    6d1c:	7afb      	ldrb	r3, [r7, #11]
    6d1e:	2b09      	cmp	r3, #9
    6d20:	d801      	bhi.n	6d26 <UTIL1_xatoi+0x10a>
    6d22:	231b      	movs	r3, #27
    6d24:	e025      	b.n	6d72 <UTIL1_xatoi+0x156>
    }
    if (c >= r) return ERR_FAILED;     /* invalid char for current radix */
    6d26:	7afa      	ldrb	r2, [r7, #11]
    6d28:	7abb      	ldrb	r3, [r7, #10]
    6d2a:	429a      	cmp	r2, r3
    6d2c:	d301      	bcc.n	6d32 <UTIL1_xatoi+0x116>
    6d2e:	231b      	movs	r3, #27
    6d30:	e01f      	b.n	6d72 <UTIL1_xatoi+0x156>
    val = val * r + c;
    6d32:	7abb      	ldrb	r3, [r7, #10]
    6d34:	68fa      	ldr	r2, [r7, #12]
    6d36:	fb02 f203 	mul.w	r2, r2, r3
    6d3a:	7afb      	ldrb	r3, [r7, #11]
    6d3c:	4413      	add	r3, r2
    6d3e:	60fb      	str	r3, [r7, #12]
    c = *(++(*str));
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	681b      	ldr	r3, [r3, #0]
    6d44:	1c5a      	adds	r2, r3, #1
    6d46:	687b      	ldr	r3, [r7, #4]
    6d48:	601a      	str	r2, [r3, #0]
    6d4a:	687b      	ldr	r3, [r7, #4]
    6d4c:	681b      	ldr	r3, [r3, #0]
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	72fb      	strb	r3, [r7, #11]
      return ERR_FAILED;               /* EOL or invalid char */
    }
    r = 10;                            /* decimal */
  }
  val = 0;
  while (c > ' ' && c != '.') {
    6d52:	7afb      	ldrb	r3, [r7, #11]
    6d54:	2b20      	cmp	r3, #32
    6d56:	d902      	bls.n	6d5e <UTIL1_xatoi+0x142>
    6d58:	7afb      	ldrb	r3, [r7, #11]
    6d5a:	2b2e      	cmp	r3, #46	; 0x2e
    6d5c:	d1cf      	bne.n	6cfe <UTIL1_xatoi+0xe2>
    }
    if (c >= r) return ERR_FAILED;     /* invalid char for current radix */
    val = val * r + c;
    c = *(++(*str));
  } /* while */
  if (s) val = 0 - val;                /* apply sign if needed */
    6d5e:	7a7b      	ldrb	r3, [r7, #9]
    6d60:	2b00      	cmp	r3, #0
    6d62:	d002      	beq.n	6d6a <UTIL1_xatoi+0x14e>
    6d64:	68fb      	ldr	r3, [r7, #12]
    6d66:	425b      	negs	r3, r3
    6d68:	60fb      	str	r3, [r7, #12]
  *res = (long)val;
    6d6a:	68fa      	ldr	r2, [r7, #12]
    6d6c:	683b      	ldr	r3, [r7, #0]
    6d6e:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    6d70:	2300      	movs	r3, #0
}
    6d72:	4618      	mov	r0, r3
    6d74:	3714      	adds	r7, #20
    6d76:	46bd      	mov	sp, r7
    6d78:	f85d 7b04 	ldr.w	r7, [sp], #4
    6d7c:	4770      	bx	lr
    6d7e:	bf00      	nop

00006d80 <UTIL1_ScanDate>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDate(const unsigned char **str, uint8_t *day, uint8_t *month, uint16_t *year)
{
    6d80:	b580      	push	{r7, lr}
    6d82:	b086      	sub	sp, #24
    6d84:	af00      	add	r7, sp, #0
    6d86:	60f8      	str	r0, [r7, #12]
    6d88:	60b9      	str	r1, [r7, #8]
    6d8a:	607a      	str	r2, [r7, #4]
    6d8c:	603b      	str	r3, [r7, #0]
  /* precondition: string points to starting of date, e.g. "01.01.10" or "12.5.2010", and date is in format dd.mm.yy or dd.mm.yyyy */
  const unsigned char *p;

  p = *str;
    6d8e:	68fb      	ldr	r3, [r7, #12]
    6d90:	681b      	ldr	r3, [r3, #0]
    6d92:	617b      	str	r3, [r7, #20]
  while(*p==' ') {
    6d94:	e002      	b.n	6d9c <UTIL1_ScanDate+0x1c>
    p++; /* skip leading spaces */
    6d96:	697b      	ldr	r3, [r7, #20]
    6d98:	3301      	adds	r3, #1
    6d9a:	617b      	str	r3, [r7, #20]
{
  /* precondition: string points to starting of date, e.g. "01.01.10" or "12.5.2010", and date is in format dd.mm.yy or dd.mm.yyyy */
  const unsigned char *p;

  p = *str;
  while(*p==' ') {
    6d9c:	697b      	ldr	r3, [r7, #20]
    6d9e:	781b      	ldrb	r3, [r3, #0]
    6da0:	2b20      	cmp	r3, #32
    6da2:	d0f8      	beq.n	6d96 <UTIL1_ScanDate+0x16>
    p++; /* skip leading spaces */
  }
  if (   UTIL1_ScanDecimal8uNumber(&p, day)==ERR_OK
    6da4:	f107 0314 	add.w	r3, r7, #20
    6da8:	68b9      	ldr	r1, [r7, #8]
    6daa:	4618      	mov	r0, r3
    6dac:	f000 f910 	bl	6fd0 <UTIL1_ScanDecimal8uNumber>
    6db0:	4603      	mov	r3, r0
    6db2:	2b00      	cmp	r3, #0
    6db4:	d151      	bne.n	6e5a <UTIL1_ScanDate+0xda>
      && *day > 0 && *day <= 31
    6db6:	68bb      	ldr	r3, [r7, #8]
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	2b00      	cmp	r3, #0
    6dbc:	d04d      	beq.n	6e5a <UTIL1_ScanDate+0xda>
    6dbe:	68bb      	ldr	r3, [r7, #8]
    6dc0:	781b      	ldrb	r3, [r3, #0]
    6dc2:	2b1f      	cmp	r3, #31
    6dc4:	d849      	bhi.n	6e5a <UTIL1_ScanDate+0xda>
      && (*p=='.' || *p=='-')
    6dc6:	697b      	ldr	r3, [r7, #20]
    6dc8:	781b      	ldrb	r3, [r3, #0]
    6dca:	2b2e      	cmp	r3, #46	; 0x2e
    6dcc:	d003      	beq.n	6dd6 <UTIL1_ScanDate+0x56>
    6dce:	697b      	ldr	r3, [r7, #20]
    6dd0:	781b      	ldrb	r3, [r3, #0]
    6dd2:	2b2d      	cmp	r3, #45	; 0x2d
    6dd4:	d141      	bne.n	6e5a <UTIL1_ScanDate+0xda>
     )
  {
    p++;
    6dd6:	697b      	ldr	r3, [r7, #20]
    6dd8:	3301      	adds	r3, #1
    6dda:	617b      	str	r3, [r7, #20]
    if (   UTIL1_ScanDecimal8uNumber(&p, month)==ERR_OK
    6ddc:	f107 0314 	add.w	r3, r7, #20
    6de0:	6879      	ldr	r1, [r7, #4]
    6de2:	4618      	mov	r0, r3
    6de4:	f000 f8f4 	bl	6fd0 <UTIL1_ScanDecimal8uNumber>
    6de8:	4603      	mov	r3, r0
    6dea:	2b00      	cmp	r3, #0
    6dec:	d135      	bne.n	6e5a <UTIL1_ScanDate+0xda>
        && *month > 0 && *month <= 12
    6dee:	687b      	ldr	r3, [r7, #4]
    6df0:	781b      	ldrb	r3, [r3, #0]
    6df2:	2b00      	cmp	r3, #0
    6df4:	d031      	beq.n	6e5a <UTIL1_ScanDate+0xda>
    6df6:	687b      	ldr	r3, [r7, #4]
    6df8:	781b      	ldrb	r3, [r3, #0]
    6dfa:	2b0c      	cmp	r3, #12
    6dfc:	d82d      	bhi.n	6e5a <UTIL1_ScanDate+0xda>
        && (*p=='.' || *p=='-')
    6dfe:	697b      	ldr	r3, [r7, #20]
    6e00:	781b      	ldrb	r3, [r3, #0]
    6e02:	2b2e      	cmp	r3, #46	; 0x2e
    6e04:	d003      	beq.n	6e0e <UTIL1_ScanDate+0x8e>
    6e06:	697b      	ldr	r3, [r7, #20]
    6e08:	781b      	ldrb	r3, [r3, #0]
    6e0a:	2b2d      	cmp	r3, #45	; 0x2d
    6e0c:	d125      	bne.n	6e5a <UTIL1_ScanDate+0xda>
       )
    {
      p++;
    6e0e:	697b      	ldr	r3, [r7, #20]
    6e10:	3301      	adds	r3, #1
    6e12:	617b      	str	r3, [r7, #20]
      if (   UTIL1_ScanDecimal16uNumber(&p, year)==ERR_OK
    6e14:	f107 0314 	add.w	r3, r7, #20
    6e18:	6839      	ldr	r1, [r7, #0]
    6e1a:	4618      	mov	r0, r3
    6e1c:	f000 f966 	bl	70ec <UTIL1_ScanDecimal16uNumber>
    6e20:	4603      	mov	r3, r0
    6e22:	2b00      	cmp	r3, #0
    6e24:	d119      	bne.n	6e5a <UTIL1_ScanDate+0xda>
          && *year > 0 && *year <= 3000 /* hopefully this is enough :-) */
    6e26:	683b      	ldr	r3, [r7, #0]
    6e28:	881b      	ldrh	r3, [r3, #0]
    6e2a:	2b00      	cmp	r3, #0
    6e2c:	d015      	beq.n	6e5a <UTIL1_ScanDate+0xda>
    6e2e:	683b      	ldr	r3, [r7, #0]
    6e30:	881b      	ldrh	r3, [r3, #0]
    6e32:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6e36:	4293      	cmp	r3, r2
    6e38:	d80f      	bhi.n	6e5a <UTIL1_ScanDate+0xda>
         )
      {
        if (*year < 100) {
    6e3a:	683b      	ldr	r3, [r7, #0]
    6e3c:	881b      	ldrh	r3, [r3, #0]
    6e3e:	2b63      	cmp	r3, #99	; 0x63
    6e40:	d806      	bhi.n	6e50 <UTIL1_ScanDate+0xd0>
          *year += 2000; /* transform '10' into '2010' */
    6e42:	683b      	ldr	r3, [r7, #0]
    6e44:	881b      	ldrh	r3, [r3, #0]
    6e46:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    6e4a:	b29a      	uxth	r2, r3
    6e4c:	683b      	ldr	r3, [r7, #0]
    6e4e:	801a      	strh	r2, [r3, #0]
        }
        *str = p; /* advance pointer for caller */
    6e50:	697a      	ldr	r2, [r7, #20]
    6e52:	68fb      	ldr	r3, [r7, #12]
    6e54:	601a      	str	r2, [r3, #0]
        return ERR_OK;
    6e56:	2300      	movs	r3, #0
    6e58:	e009      	b.n	6e6e <UTIL1_ScanDate+0xee>
      }
    }
  }
  *day = 0;
    6e5a:	68bb      	ldr	r3, [r7, #8]
    6e5c:	2200      	movs	r2, #0
    6e5e:	701a      	strb	r2, [r3, #0]
  *month = 0;
    6e60:	687b      	ldr	r3, [r7, #4]
    6e62:	2200      	movs	r2, #0
    6e64:	701a      	strb	r2, [r3, #0]
  *year = 0;
    6e66:	683b      	ldr	r3, [r7, #0]
    6e68:	2200      	movs	r2, #0
    6e6a:	801a      	strh	r2, [r3, #0]
  return ERR_FAILED; /* wrong format */
    6e6c:	231b      	movs	r3, #27
}
    6e6e:	4618      	mov	r0, r3
    6e70:	3718      	adds	r7, #24
    6e72:	46bd      	mov	sp, r7
    6e74:	bd80      	pop	{r7, pc}
    6e76:	bf00      	nop

00006e78 <UTIL1_ScanTime>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanTime(const unsigned char **str, uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *hSecond)
{
    6e78:	b580      	push	{r7, lr}
    6e7a:	b086      	sub	sp, #24
    6e7c:	af00      	add	r7, sp, #0
    6e7e:	60f8      	str	r0, [r7, #12]
    6e80:	60b9      	str	r1, [r7, #8]
    6e82:	607a      	str	r2, [r7, #4]
    6e84:	603b      	str	r3, [r7, #0]
  /* precondition: string points to starting of time string, e.g. "03:15:05" or "03:15:05,3" or "03:15:05,17", and time is in format hh:mm:ss[,hh] */
  const unsigned char *p;
  #define SCAN_IS_DIGIT(ch) ((ch)>='0'&&(ch)<='9')

  *hour = 0;
    6e86:	68bb      	ldr	r3, [r7, #8]
    6e88:	2200      	movs	r2, #0
    6e8a:	701a      	strb	r2, [r3, #0]
  *minute = 0;
    6e8c:	687b      	ldr	r3, [r7, #4]
    6e8e:	2200      	movs	r2, #0
    6e90:	701a      	strb	r2, [r3, #0]
  *second = 0;
    6e92:	683b      	ldr	r3, [r7, #0]
    6e94:	2200      	movs	r2, #0
    6e96:	701a      	strb	r2, [r3, #0]
  *hSecond = 0;
    6e98:	6a3b      	ldr	r3, [r7, #32]
    6e9a:	2200      	movs	r2, #0
    6e9c:	701a      	strb	r2, [r3, #0]
  p = *str;
    6e9e:	68fb      	ldr	r3, [r7, #12]
    6ea0:	681b      	ldr	r3, [r3, #0]
    6ea2:	617b      	str	r3, [r7, #20]
  while(*p==' ') {
    6ea4:	e002      	b.n	6eac <UTIL1_ScanTime+0x34>
    p++; /* skip leading spaces */
    6ea6:	697b      	ldr	r3, [r7, #20]
    6ea8:	3301      	adds	r3, #1
    6eaa:	617b      	str	r3, [r7, #20]
  *hour = 0;
  *minute = 0;
  *second = 0;
  *hSecond = 0;
  p = *str;
  while(*p==' ') {
    6eac:	697b      	ldr	r3, [r7, #20]
    6eae:	781b      	ldrb	r3, [r3, #0]
    6eb0:	2b20      	cmp	r3, #32
    6eb2:	d0f8      	beq.n	6ea6 <UTIL1_ScanTime+0x2e>
    p++; /* skip leading spaces */
  }
  if (   UTIL1_ScanDecimal8uNumber(&p, hour)==ERR_OK
    6eb4:	f107 0314 	add.w	r3, r7, #20
    6eb8:	68b9      	ldr	r1, [r7, #8]
    6eba:	4618      	mov	r0, r3
    6ebc:	f000 f888 	bl	6fd0 <UTIL1_ScanDecimal8uNumber>
    6ec0:	4603      	mov	r3, r0
    6ec2:	2b00      	cmp	r3, #0
    6ec4:	d17f      	bne.n	6fc6 <UTIL1_ScanTime+0x14e>
      && *hour <= 24
    6ec6:	68bb      	ldr	r3, [r7, #8]
    6ec8:	781b      	ldrb	r3, [r3, #0]
    6eca:	2b18      	cmp	r3, #24
    6ecc:	d87b      	bhi.n	6fc6 <UTIL1_ScanTime+0x14e>
      && *p==':'
    6ece:	697b      	ldr	r3, [r7, #20]
    6ed0:	781b      	ldrb	r3, [r3, #0]
    6ed2:	2b3a      	cmp	r3, #58	; 0x3a
    6ed4:	d177      	bne.n	6fc6 <UTIL1_ScanTime+0x14e>
     )
  {
    p++; /* skip ':' */
    6ed6:	697b      	ldr	r3, [r7, #20]
    6ed8:	3301      	adds	r3, #1
    6eda:	617b      	str	r3, [r7, #20]
    if (   UTIL1_ScanDecimal8uNumber(&p, minute)==ERR_OK
    6edc:	f107 0314 	add.w	r3, r7, #20
    6ee0:	6879      	ldr	r1, [r7, #4]
    6ee2:	4618      	mov	r0, r3
    6ee4:	f000 f874 	bl	6fd0 <UTIL1_ScanDecimal8uNumber>
    6ee8:	4603      	mov	r3, r0
    6eea:	2b00      	cmp	r3, #0
    6eec:	d16b      	bne.n	6fc6 <UTIL1_ScanTime+0x14e>
        && *minute <= 60
    6eee:	687b      	ldr	r3, [r7, #4]
    6ef0:	781b      	ldrb	r3, [r3, #0]
    6ef2:	2b3c      	cmp	r3, #60	; 0x3c
    6ef4:	d867      	bhi.n	6fc6 <UTIL1_ScanTime+0x14e>
       )
    {
      if (*p==':') { /* there is more after the minute */
    6ef6:	697b      	ldr	r3, [r7, #20]
    6ef8:	781b      	ldrb	r3, [r3, #0]
    6efa:	2b3a      	cmp	r3, #58	; 0x3a
    6efc:	d156      	bne.n	6fac <UTIL1_ScanTime+0x134>
        p++; /* skip ':' */
    6efe:	697b      	ldr	r3, [r7, #20]
    6f00:	3301      	adds	r3, #1
    6f02:	617b      	str	r3, [r7, #20]
        if (   UTIL1_ScanDecimal8uNumber(&p, second)==ERR_OK
    6f04:	f107 0314 	add.w	r3, r7, #20
    6f08:	6839      	ldr	r1, [r7, #0]
    6f0a:	4618      	mov	r0, r3
    6f0c:	f000 f860 	bl	6fd0 <UTIL1_ScanDecimal8uNumber>
    6f10:	4603      	mov	r3, r0
    6f12:	2b00      	cmp	r3, #0
    6f14:	d157      	bne.n	6fc6 <UTIL1_ScanTime+0x14e>
            && *second <= 60
    6f16:	683b      	ldr	r3, [r7, #0]
    6f18:	781b      	ldrb	r3, [r3, #0]
    6f1a:	2b3c      	cmp	r3, #60	; 0x3c
    6f1c:	d853      	bhi.n	6fc6 <UTIL1_ScanTime+0x14e>
           )
        {
          if (*p==',') { /* we do have either ",z" or ",hh" */
    6f1e:	697b      	ldr	r3, [r7, #20]
    6f20:	781b      	ldrb	r3, [r3, #0]
    6f22:	2b2c      	cmp	r3, #44	; 0x2c
    6f24:	d13d      	bne.n	6fa2 <UTIL1_ScanTime+0x12a>
            p++; /* skip ',' */
    6f26:	697b      	ldr	r3, [r7, #20]
    6f28:	3301      	adds	r3, #1
    6f2a:	617b      	str	r3, [r7, #20]
            if (SCAN_IS_DIGIT(*p)) {
    6f2c:	697b      	ldr	r3, [r7, #20]
    6f2e:	781b      	ldrb	r3, [r3, #0]
    6f30:	2b2f      	cmp	r3, #47	; 0x2f
    6f32:	d934      	bls.n	6f9e <UTIL1_ScanTime+0x126>
    6f34:	697b      	ldr	r3, [r7, #20]
    6f36:	781b      	ldrb	r3, [r3, #0]
    6f38:	2b39      	cmp	r3, #57	; 0x39
    6f3a:	d830      	bhi.n	6f9e <UTIL1_ScanTime+0x126>
              if (SCAN_IS_DIGIT(*(p+1))) { /* ,hh format */
    6f3c:	697b      	ldr	r3, [r7, #20]
    6f3e:	3301      	adds	r3, #1
    6f40:	781b      	ldrb	r3, [r3, #0]
    6f42:	2b2f      	cmp	r3, #47	; 0x2f
    6f44:	d918      	bls.n	6f78 <UTIL1_ScanTime+0x100>
    6f46:	697b      	ldr	r3, [r7, #20]
    6f48:	3301      	adds	r3, #1
    6f4a:	781b      	ldrb	r3, [r3, #0]
    6f4c:	2b39      	cmp	r3, #57	; 0x39
    6f4e:	d813      	bhi.n	6f78 <UTIL1_ScanTime+0x100>
                *hSecond = (uint8_t)((*p-'0')*10 + *(p+1)-'0');
    6f50:	697b      	ldr	r3, [r7, #20]
    6f52:	781b      	ldrb	r3, [r3, #0]
    6f54:	3b30      	subs	r3, #48	; 0x30
    6f56:	b2db      	uxtb	r3, r3
    6f58:	461a      	mov	r2, r3
    6f5a:	0092      	lsls	r2, r2, #2
    6f5c:	4413      	add	r3, r2
    6f5e:	005b      	lsls	r3, r3, #1
    6f60:	b2da      	uxtb	r2, r3
    6f62:	697b      	ldr	r3, [r7, #20]
    6f64:	3301      	adds	r3, #1
    6f66:	781b      	ldrb	r3, [r3, #0]
    6f68:	4413      	add	r3, r2
    6f6a:	b2db      	uxtb	r3, r3
    6f6c:	3b30      	subs	r3, #48	; 0x30
    6f6e:	b2da      	uxtb	r2, r3
    6f70:	6a3b      	ldr	r3, [r7, #32]
    6f72:	701a      	strb	r2, [r3, #0]
                return ERR_OK;
    6f74:	2300      	movs	r3, #0
    6f76:	e027      	b.n	6fc8 <UTIL1_ScanTime+0x150>
              } else { /* ,z format */
                *hSecond = (uint8_t)((*p-'0')*10);
    6f78:	697b      	ldr	r3, [r7, #20]
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	3b30      	subs	r3, #48	; 0x30
    6f7e:	b2db      	uxtb	r3, r3
    6f80:	461a      	mov	r2, r3
    6f82:	0092      	lsls	r2, r2, #2
    6f84:	4413      	add	r3, r2
    6f86:	005b      	lsls	r3, r3, #1
    6f88:	b2da      	uxtb	r2, r3
    6f8a:	6a3b      	ldr	r3, [r7, #32]
    6f8c:	701a      	strb	r2, [r3, #0]
                p++;
    6f8e:	697b      	ldr	r3, [r7, #20]
    6f90:	3301      	adds	r3, #1
    6f92:	617b      	str	r3, [r7, #20]
                *str = p; /* advance pointer for caller */
    6f94:	697a      	ldr	r2, [r7, #20]
    6f96:	68fb      	ldr	r3, [r7, #12]
    6f98:	601a      	str	r2, [r3, #0]
                return ERR_OK;
    6f9a:	2300      	movs	r3, #0
    6f9c:	e014      	b.n	6fc8 <UTIL1_ScanTime+0x150>
              }
            } else {
              return ERR_FAILED; /* illegal format, not a number, e.g. ",x" */
    6f9e:	231b      	movs	r3, #27
    6fa0:	e012      	b.n	6fc8 <UTIL1_ScanTime+0x150>
            }
          }
          *str = p; /* advance pointer for caller */
    6fa2:	697a      	ldr	r2, [r7, #20]
    6fa4:	68fb      	ldr	r3, [r7, #12]
    6fa6:	601a      	str	r2, [r3, #0]
          return ERR_OK;
    6fa8:	2300      	movs	r3, #0
    6faa:	e00d      	b.n	6fc8 <UTIL1_ScanTime+0x150>
        }
      } else if (*p==' ' || *p=='\0') { /* nothing more after the minute? Assume zero seconds */
    6fac:	697b      	ldr	r3, [r7, #20]
    6fae:	781b      	ldrb	r3, [r3, #0]
    6fb0:	2b20      	cmp	r3, #32
    6fb2:	d003      	beq.n	6fbc <UTIL1_ScanTime+0x144>
    6fb4:	697b      	ldr	r3, [r7, #20]
    6fb6:	781b      	ldrb	r3, [r3, #0]
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d104      	bne.n	6fc6 <UTIL1_ScanTime+0x14e>
        *str = p; /* advance pointer for caller */
    6fbc:	697a      	ldr	r2, [r7, #20]
    6fbe:	68fb      	ldr	r3, [r7, #12]
    6fc0:	601a      	str	r2, [r3, #0]
        return ERR_OK;
    6fc2:	2300      	movs	r3, #0
    6fc4:	e000      	b.n	6fc8 <UTIL1_ScanTime+0x150>
      }
    }
  }
  return ERR_FAILED; /* wrong format */
    6fc6:	231b      	movs	r3, #27
}
    6fc8:	4618      	mov	r0, r3
    6fca:	3718      	adds	r7, #24
    6fcc:	46bd      	mov	sp, r7
    6fce:	bd80      	pop	{r7, pc}

00006fd0 <UTIL1_ScanDecimal8uNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDecimal8uNumber(const unsigned char **str, uint8_t *val)
{
    6fd0:	b480      	push	{r7}
    6fd2:	b085      	sub	sp, #20
    6fd4:	af00      	add	r7, sp, #0
    6fd6:	6078      	str	r0, [r7, #4]
    6fd8:	6039      	str	r1, [r7, #0]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _8_NOF_DIGITS  (3+1)
  uint8_t nofDigits = _8_NOF_DIGITS; /* maximum number of digits to avoid overflow */
    6fda:	2304      	movs	r3, #4
    6fdc:	73fb      	strb	r3, [r7, #15]
  const unsigned char *p = *str;
    6fde:	687b      	ldr	r3, [r7, #4]
    6fe0:	681b      	ldr	r3, [r3, #0]
    6fe2:	60bb      	str	r3, [r7, #8]

  while(*p==' ') { /* skip leading spaces */
    6fe4:	e002      	b.n	6fec <UTIL1_ScanDecimal8uNumber+0x1c>
    p++;
    6fe6:	68bb      	ldr	r3, [r7, #8]
    6fe8:	3301      	adds	r3, #1
    6fea:	60bb      	str	r3, [r7, #8]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _8_NOF_DIGITS  (3+1)
  uint8_t nofDigits = _8_NOF_DIGITS; /* maximum number of digits to avoid overflow */
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    6fec:	68bb      	ldr	r3, [r7, #8]
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	2b20      	cmp	r3, #32
    6ff2:	d0f8      	beq.n	6fe6 <UTIL1_ScanDecimal8uNumber+0x16>
    p++;
  }
  *val = 0;
    6ff4:	683b      	ldr	r3, [r7, #0]
    6ff6:	2200      	movs	r2, #0
    6ff8:	701a      	strb	r2, [r3, #0]
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    6ffa:	e014      	b.n	7026 <UTIL1_ScanDecimal8uNumber+0x56>
    *val = (uint8_t)((*val)*10 + *p-'0');
    6ffc:	683b      	ldr	r3, [r7, #0]
    6ffe:	781b      	ldrb	r3, [r3, #0]
    7000:	461a      	mov	r2, r3
    7002:	0092      	lsls	r2, r2, #2
    7004:	4413      	add	r3, r2
    7006:	005b      	lsls	r3, r3, #1
    7008:	b2da      	uxtb	r2, r3
    700a:	68bb      	ldr	r3, [r7, #8]
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	4413      	add	r3, r2
    7010:	b2db      	uxtb	r3, r3
    7012:	3b30      	subs	r3, #48	; 0x30
    7014:	b2da      	uxtb	r2, r3
    7016:	683b      	ldr	r3, [r7, #0]
    7018:	701a      	strb	r2, [r3, #0]
    nofDigits--;
    701a:	7bfb      	ldrb	r3, [r7, #15]
    701c:	3b01      	subs	r3, #1
    701e:	73fb      	strb	r3, [r7, #15]
    p++;
    7020:	68bb      	ldr	r3, [r7, #8]
    7022:	3301      	adds	r3, #1
    7024:	60bb      	str	r3, [r7, #8]

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    7026:	68bb      	ldr	r3, [r7, #8]
    7028:	781b      	ldrb	r3, [r3, #0]
    702a:	2b2f      	cmp	r3, #47	; 0x2f
    702c:	d906      	bls.n	703c <UTIL1_ScanDecimal8uNumber+0x6c>
    702e:	68bb      	ldr	r3, [r7, #8]
    7030:	781b      	ldrb	r3, [r3, #0]
    7032:	2b39      	cmp	r3, #57	; 0x39
    7034:	d802      	bhi.n	703c <UTIL1_ScanDecimal8uNumber+0x6c>
    7036:	7bfb      	ldrb	r3, [r7, #15]
    7038:	2b00      	cmp	r3, #0
    703a:	d1df      	bne.n	6ffc <UTIL1_ScanDecimal8uNumber+0x2c>
    *val = (uint8_t)((*val)*10 + *p-'0');
    nofDigits--;
    p++;
  } /* while */
  if (nofDigits==0) {
    703c:	7bfb      	ldrb	r3, [r7, #15]
    703e:	2b00      	cmp	r3, #0
    7040:	d101      	bne.n	7046 <UTIL1_ScanDecimal8uNumber+0x76>
    return ERR_OVERFLOW;
    7042:	2304      	movs	r3, #4
    7044:	e008      	b.n	7058 <UTIL1_ScanDecimal8uNumber+0x88>
  }
  if (nofDigits==_8_NOF_DIGITS) { /* no digits at all? */
    7046:	7bfb      	ldrb	r3, [r7, #15]
    7048:	2b04      	cmp	r3, #4
    704a:	d101      	bne.n	7050 <UTIL1_ScanDecimal8uNumber+0x80>
    return ERR_FAILED;
    704c:	231b      	movs	r3, #27
    704e:	e003      	b.n	7058 <UTIL1_ScanDecimal8uNumber+0x88>
  }
  *str = p;
    7050:	687b      	ldr	r3, [r7, #4]
    7052:	68ba      	ldr	r2, [r7, #8]
    7054:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7056:	2300      	movs	r3, #0
}
    7058:	4618      	mov	r0, r3
    705a:	3714      	adds	r7, #20
    705c:	46bd      	mov	sp, r7
    705e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7062:	4770      	bx	lr

00007064 <UTIL1_ScanDecimal8sNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDecimal8sNumber(const unsigned char **str, signed char *val)
{
    7064:	b580      	push	{r7, lr}
    7066:	b086      	sub	sp, #24
    7068:	af00      	add	r7, sp, #0
    706a:	6078      	str	r0, [r7, #4]
    706c:	6039      	str	r1, [r7, #0]
  /* Scans a decimal number, and stops at any non-number. Number can have any preceding spaces. */
  const unsigned char *p = *str;
    706e:	687b      	ldr	r3, [r7, #4]
    7070:	681b      	ldr	r3, [r3, #0]
    7072:	613b      	str	r3, [r7, #16]
  bool isNeg;
  uint8_t val8u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    7074:	e002      	b.n	707c <UTIL1_ScanDecimal8sNumber+0x18>
    p++;
    7076:	693b      	ldr	r3, [r7, #16]
    7078:	3301      	adds	r3, #1
    707a:	613b      	str	r3, [r7, #16]
  const unsigned char *p = *str;
  bool isNeg;
  uint8_t val8u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    707c:	693b      	ldr	r3, [r7, #16]
    707e:	781b      	ldrb	r3, [r3, #0]
    7080:	2b20      	cmp	r3, #32
    7082:	d0f8      	beq.n	7076 <UTIL1_ScanDecimal8sNumber+0x12>
    p++;
  }
  *val = 0;
    7084:	683b      	ldr	r3, [r7, #0]
    7086:	2200      	movs	r2, #0
    7088:	701a      	strb	r2, [r3, #0]
  if (*p=='-') {
    708a:	693b      	ldr	r3, [r7, #16]
    708c:	781b      	ldrb	r3, [r3, #0]
    708e:	2b2d      	cmp	r3, #45	; 0x2d
    7090:	d105      	bne.n	709e <UTIL1_ScanDecimal8sNumber+0x3a>
    isNeg = TRUE;
    7092:	2301      	movs	r3, #1
    7094:	75fb      	strb	r3, [r7, #23]
    p++; /* skip minus */
    7096:	693b      	ldr	r3, [r7, #16]
    7098:	3301      	adds	r3, #1
    709a:	613b      	str	r3, [r7, #16]
    709c:	e001      	b.n	70a2 <UTIL1_ScanDecimal8sNumber+0x3e>
  } else {
    isNeg = FALSE;
    709e:	2300      	movs	r3, #0
    70a0:	75fb      	strb	r3, [r7, #23]
  }
  res = UTIL1_ScanDecimal8uNumber(&p, &val8u);
    70a2:	f107 020f 	add.w	r2, r7, #15
    70a6:	f107 0310 	add.w	r3, r7, #16
    70aa:	4611      	mov	r1, r2
    70ac:	4618      	mov	r0, r3
    70ae:	f7ff ff8f 	bl	6fd0 <UTIL1_ScanDecimal8uNumber>
    70b2:	4603      	mov	r3, r0
    70b4:	75bb      	strb	r3, [r7, #22]
  if (res != ERR_OK) {
    70b6:	7dbb      	ldrb	r3, [r7, #22]
    70b8:	2b00      	cmp	r3, #0
    70ba:	d001      	beq.n	70c0 <UTIL1_ScanDecimal8sNumber+0x5c>
    return res;
    70bc:	7dbb      	ldrb	r3, [r7, #22]
    70be:	e011      	b.n	70e4 <UTIL1_ScanDecimal8sNumber+0x80>
  }
  if (isNeg) {
    70c0:	7dfb      	ldrb	r3, [r7, #23]
    70c2:	2b00      	cmp	r3, #0
    70c4:	d006      	beq.n	70d4 <UTIL1_ScanDecimal8sNumber+0x70>
    *val = (int8_t)(-(int8_t)val8u);
    70c6:	7bfb      	ldrb	r3, [r7, #15]
    70c8:	425b      	negs	r3, r3
    70ca:	b2db      	uxtb	r3, r3
    70cc:	b25a      	sxtb	r2, r3
    70ce:	683b      	ldr	r3, [r7, #0]
    70d0:	701a      	strb	r2, [r3, #0]
    70d2:	e003      	b.n	70dc <UTIL1_ScanDecimal8sNumber+0x78>
  } else {
    *val = (int8_t)val8u;
    70d4:	7bfb      	ldrb	r3, [r7, #15]
    70d6:	b25a      	sxtb	r2, r3
    70d8:	683b      	ldr	r3, [r7, #0]
    70da:	701a      	strb	r2, [r3, #0]
  }
  *str = p;
    70dc:	693a      	ldr	r2, [r7, #16]
    70de:	687b      	ldr	r3, [r7, #4]
    70e0:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    70e2:	2300      	movs	r3, #0
}
    70e4:	4618      	mov	r0, r3
    70e6:	3718      	adds	r7, #24
    70e8:	46bd      	mov	sp, r7
    70ea:	bd80      	pop	{r7, pc}

000070ec <UTIL1_ScanDecimal16uNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDecimal16uNumber(const unsigned char **str, uint16_t *val)
{
    70ec:	b480      	push	{r7}
    70ee:	b085      	sub	sp, #20
    70f0:	af00      	add	r7, sp, #0
    70f2:	6078      	str	r0, [r7, #4]
    70f4:	6039      	str	r1, [r7, #0]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _16_NOF_DIGITS  (5+1)
  uint8_t nofDigits = _16_NOF_DIGITS; /* maximum number of digits to avoid overflow */
    70f6:	2306      	movs	r3, #6
    70f8:	73fb      	strb	r3, [r7, #15]
  const unsigned char *p = *str;
    70fa:	687b      	ldr	r3, [r7, #4]
    70fc:	681b      	ldr	r3, [r3, #0]
    70fe:	60bb      	str	r3, [r7, #8]

  while(*p==' ') { /* skip leading spaces */
    7100:	e002      	b.n	7108 <UTIL1_ScanDecimal16uNumber+0x1c>
    p++;
    7102:	68bb      	ldr	r3, [r7, #8]
    7104:	3301      	adds	r3, #1
    7106:	60bb      	str	r3, [r7, #8]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _16_NOF_DIGITS  (5+1)
  uint8_t nofDigits = _16_NOF_DIGITS; /* maximum number of digits to avoid overflow */
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    7108:	68bb      	ldr	r3, [r7, #8]
    710a:	781b      	ldrb	r3, [r3, #0]
    710c:	2b20      	cmp	r3, #32
    710e:	d0f8      	beq.n	7102 <UTIL1_ScanDecimal16uNumber+0x16>
    p++;
  }
  *val = 0;
    7110:	683b      	ldr	r3, [r7, #0]
    7112:	2200      	movs	r2, #0
    7114:	801a      	strh	r2, [r3, #0]
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    7116:	e015      	b.n	7144 <UTIL1_ScanDecimal16uNumber+0x58>
    *val = (uint16_t)((*val)*10 + *p-'0');
    7118:	683b      	ldr	r3, [r7, #0]
    711a:	881b      	ldrh	r3, [r3, #0]
    711c:	461a      	mov	r2, r3
    711e:	0092      	lsls	r2, r2, #2
    7120:	4413      	add	r3, r2
    7122:	005b      	lsls	r3, r3, #1
    7124:	b29a      	uxth	r2, r3
    7126:	68bb      	ldr	r3, [r7, #8]
    7128:	781b      	ldrb	r3, [r3, #0]
    712a:	b29b      	uxth	r3, r3
    712c:	4413      	add	r3, r2
    712e:	b29b      	uxth	r3, r3
    7130:	3b30      	subs	r3, #48	; 0x30
    7132:	b29a      	uxth	r2, r3
    7134:	683b      	ldr	r3, [r7, #0]
    7136:	801a      	strh	r2, [r3, #0]
    nofDigits--;
    7138:	7bfb      	ldrb	r3, [r7, #15]
    713a:	3b01      	subs	r3, #1
    713c:	73fb      	strb	r3, [r7, #15]
    p++;
    713e:	68bb      	ldr	r3, [r7, #8]
    7140:	3301      	adds	r3, #1
    7142:	60bb      	str	r3, [r7, #8]

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    7144:	68bb      	ldr	r3, [r7, #8]
    7146:	781b      	ldrb	r3, [r3, #0]
    7148:	2b2f      	cmp	r3, #47	; 0x2f
    714a:	d906      	bls.n	715a <UTIL1_ScanDecimal16uNumber+0x6e>
    714c:	68bb      	ldr	r3, [r7, #8]
    714e:	781b      	ldrb	r3, [r3, #0]
    7150:	2b39      	cmp	r3, #57	; 0x39
    7152:	d802      	bhi.n	715a <UTIL1_ScanDecimal16uNumber+0x6e>
    7154:	7bfb      	ldrb	r3, [r7, #15]
    7156:	2b00      	cmp	r3, #0
    7158:	d1de      	bne.n	7118 <UTIL1_ScanDecimal16uNumber+0x2c>
    *val = (uint16_t)((*val)*10 + *p-'0');
    nofDigits--;
    p++;
  } /* while */
  if (nofDigits==0) {
    715a:	7bfb      	ldrb	r3, [r7, #15]
    715c:	2b00      	cmp	r3, #0
    715e:	d101      	bne.n	7164 <UTIL1_ScanDecimal16uNumber+0x78>
    return ERR_OVERFLOW;
    7160:	2304      	movs	r3, #4
    7162:	e008      	b.n	7176 <UTIL1_ScanDecimal16uNumber+0x8a>
  }
  if (nofDigits==_16_NOF_DIGITS) { /* no digits at all? */
    7164:	7bfb      	ldrb	r3, [r7, #15]
    7166:	2b06      	cmp	r3, #6
    7168:	d101      	bne.n	716e <UTIL1_ScanDecimal16uNumber+0x82>
    return ERR_FAILED;
    716a:	231b      	movs	r3, #27
    716c:	e003      	b.n	7176 <UTIL1_ScanDecimal16uNumber+0x8a>
  }
  *str = p;
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	68ba      	ldr	r2, [r7, #8]
    7172:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7174:	2300      	movs	r3, #0
}
    7176:	4618      	mov	r0, r3
    7178:	3714      	adds	r7, #20
    717a:	46bd      	mov	sp, r7
    717c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7180:	4770      	bx	lr
    7182:	bf00      	nop

00007184 <UTIL1_ScanDecimal16sNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDecimal16sNumber(const unsigned char **str, int16_t *val)
{
    7184:	b580      	push	{r7, lr}
    7186:	b086      	sub	sp, #24
    7188:	af00      	add	r7, sp, #0
    718a:	6078      	str	r0, [r7, #4]
    718c:	6039      	str	r1, [r7, #0]
  /* Scans a decimal number, and stops at any non-number. Number can have any preceding spaces. */
  const unsigned char *p = *str;
    718e:	687b      	ldr	r3, [r7, #4]
    7190:	681b      	ldr	r3, [r3, #0]
    7192:	613b      	str	r3, [r7, #16]
  bool isNeg;
  uint16_t val16u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    7194:	e002      	b.n	719c <UTIL1_ScanDecimal16sNumber+0x18>
    p++;
    7196:	693b      	ldr	r3, [r7, #16]
    7198:	3301      	adds	r3, #1
    719a:	613b      	str	r3, [r7, #16]
  const unsigned char *p = *str;
  bool isNeg;
  uint16_t val16u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    719c:	693b      	ldr	r3, [r7, #16]
    719e:	781b      	ldrb	r3, [r3, #0]
    71a0:	2b20      	cmp	r3, #32
    71a2:	d0f8      	beq.n	7196 <UTIL1_ScanDecimal16sNumber+0x12>
    p++;
  }
  *val = 0;
    71a4:	683b      	ldr	r3, [r7, #0]
    71a6:	2200      	movs	r2, #0
    71a8:	801a      	strh	r2, [r3, #0]
  if (*p=='-') {
    71aa:	693b      	ldr	r3, [r7, #16]
    71ac:	781b      	ldrb	r3, [r3, #0]
    71ae:	2b2d      	cmp	r3, #45	; 0x2d
    71b0:	d105      	bne.n	71be <UTIL1_ScanDecimal16sNumber+0x3a>
    isNeg = TRUE;
    71b2:	2301      	movs	r3, #1
    71b4:	75fb      	strb	r3, [r7, #23]
    p++; /* skip minus */
    71b6:	693b      	ldr	r3, [r7, #16]
    71b8:	3301      	adds	r3, #1
    71ba:	613b      	str	r3, [r7, #16]
    71bc:	e001      	b.n	71c2 <UTIL1_ScanDecimal16sNumber+0x3e>
  } else {
    isNeg = FALSE;
    71be:	2300      	movs	r3, #0
    71c0:	75fb      	strb	r3, [r7, #23]
  }
  res = UTIL1_ScanDecimal16uNumber(&p, (uint16_t*)&val16u);
    71c2:	f107 020e 	add.w	r2, r7, #14
    71c6:	f107 0310 	add.w	r3, r7, #16
    71ca:	4611      	mov	r1, r2
    71cc:	4618      	mov	r0, r3
    71ce:	f7ff ff8d 	bl	70ec <UTIL1_ScanDecimal16uNumber>
    71d2:	4603      	mov	r3, r0
    71d4:	75bb      	strb	r3, [r7, #22]
  if (res != ERR_OK) {
    71d6:	7dbb      	ldrb	r3, [r7, #22]
    71d8:	2b00      	cmp	r3, #0
    71da:	d001      	beq.n	71e0 <UTIL1_ScanDecimal16sNumber+0x5c>
    return res;
    71dc:	7dbb      	ldrb	r3, [r7, #22]
    71de:	e011      	b.n	7204 <UTIL1_ScanDecimal16sNumber+0x80>
  }
  if (isNeg) {
    71e0:	7dfb      	ldrb	r3, [r7, #23]
    71e2:	2b00      	cmp	r3, #0
    71e4:	d006      	beq.n	71f4 <UTIL1_ScanDecimal16sNumber+0x70>
    *val = (int16_t)(-(int16_t)val16u);
    71e6:	89fb      	ldrh	r3, [r7, #14]
    71e8:	425b      	negs	r3, r3
    71ea:	b29b      	uxth	r3, r3
    71ec:	b21a      	sxth	r2, r3
    71ee:	683b      	ldr	r3, [r7, #0]
    71f0:	801a      	strh	r2, [r3, #0]
    71f2:	e003      	b.n	71fc <UTIL1_ScanDecimal16sNumber+0x78>
  } else {
    *val = (int16_t)val16u;
    71f4:	89fb      	ldrh	r3, [r7, #14]
    71f6:	b21a      	sxth	r2, r3
    71f8:	683b      	ldr	r3, [r7, #0]
    71fa:	801a      	strh	r2, [r3, #0]
  }
  *str = p;
    71fc:	693a      	ldr	r2, [r7, #16]
    71fe:	687b      	ldr	r3, [r7, #4]
    7200:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7202:	2300      	movs	r3, #0
}
    7204:	4618      	mov	r0, r3
    7206:	3718      	adds	r7, #24
    7208:	46bd      	mov	sp, r7
    720a:	bd80      	pop	{r7, pc}

0000720c <UTIL1_ScanDecimal32uNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDecimal32uNumber(const unsigned char **str, uint32_t *val)
{
    720c:	b480      	push	{r7}
    720e:	b085      	sub	sp, #20
    7210:	af00      	add	r7, sp, #0
    7212:	6078      	str	r0, [r7, #4]
    7214:	6039      	str	r1, [r7, #0]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _32_NOF_DIGITS  (10+1)
  uint8_t nofDigits = _32_NOF_DIGITS; /* maximum number of digits to avoid overflow */
    7216:	230b      	movs	r3, #11
    7218:	73fb      	strb	r3, [r7, #15]
  const unsigned char *p = *str;
    721a:	687b      	ldr	r3, [r7, #4]
    721c:	681b      	ldr	r3, [r3, #0]
    721e:	60bb      	str	r3, [r7, #8]

  while(*p==' ') { /* skip leading spaces */
    7220:	e002      	b.n	7228 <UTIL1_ScanDecimal32uNumber+0x1c>
    p++;
    7222:	68bb      	ldr	r3, [r7, #8]
    7224:	3301      	adds	r3, #1
    7226:	60bb      	str	r3, [r7, #8]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _32_NOF_DIGITS  (10+1)
  uint8_t nofDigits = _32_NOF_DIGITS; /* maximum number of digits to avoid overflow */
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    7228:	68bb      	ldr	r3, [r7, #8]
    722a:	781b      	ldrb	r3, [r3, #0]
    722c:	2b20      	cmp	r3, #32
    722e:	d0f8      	beq.n	7222 <UTIL1_ScanDecimal32uNumber+0x16>
    p++;
  }
  *val = 0;
    7230:	683b      	ldr	r3, [r7, #0]
    7232:	2200      	movs	r2, #0
    7234:	601a      	str	r2, [r3, #0]
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    7236:	e013      	b.n	7260 <UTIL1_ScanDecimal32uNumber+0x54>
    *val = (uint32_t)((*val)*10 + *p-'0');
    7238:	683b      	ldr	r3, [r7, #0]
    723a:	681a      	ldr	r2, [r3, #0]
    723c:	4613      	mov	r3, r2
    723e:	009b      	lsls	r3, r3, #2
    7240:	4413      	add	r3, r2
    7242:	005b      	lsls	r3, r3, #1
    7244:	461a      	mov	r2, r3
    7246:	68bb      	ldr	r3, [r7, #8]
    7248:	781b      	ldrb	r3, [r3, #0]
    724a:	4413      	add	r3, r2
    724c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    7250:	683b      	ldr	r3, [r7, #0]
    7252:	601a      	str	r2, [r3, #0]
    nofDigits--;
    7254:	7bfb      	ldrb	r3, [r7, #15]
    7256:	3b01      	subs	r3, #1
    7258:	73fb      	strb	r3, [r7, #15]
    p++;
    725a:	68bb      	ldr	r3, [r7, #8]
    725c:	3301      	adds	r3, #1
    725e:	60bb      	str	r3, [r7, #8]

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    7260:	68bb      	ldr	r3, [r7, #8]
    7262:	781b      	ldrb	r3, [r3, #0]
    7264:	2b2f      	cmp	r3, #47	; 0x2f
    7266:	d906      	bls.n	7276 <UTIL1_ScanDecimal32uNumber+0x6a>
    7268:	68bb      	ldr	r3, [r7, #8]
    726a:	781b      	ldrb	r3, [r3, #0]
    726c:	2b39      	cmp	r3, #57	; 0x39
    726e:	d802      	bhi.n	7276 <UTIL1_ScanDecimal32uNumber+0x6a>
    7270:	7bfb      	ldrb	r3, [r7, #15]
    7272:	2b00      	cmp	r3, #0
    7274:	d1e0      	bne.n	7238 <UTIL1_ScanDecimal32uNumber+0x2c>
    *val = (uint32_t)((*val)*10 + *p-'0');
    nofDigits--;
    p++;
  } /* while */
  if (nofDigits==0) {
    7276:	7bfb      	ldrb	r3, [r7, #15]
    7278:	2b00      	cmp	r3, #0
    727a:	d101      	bne.n	7280 <UTIL1_ScanDecimal32uNumber+0x74>
    return ERR_OVERFLOW;
    727c:	2304      	movs	r3, #4
    727e:	e008      	b.n	7292 <UTIL1_ScanDecimal32uNumber+0x86>
  }
  if (nofDigits==_32_NOF_DIGITS) { /* no digits at all? */
    7280:	7bfb      	ldrb	r3, [r7, #15]
    7282:	2b0b      	cmp	r3, #11
    7284:	d101      	bne.n	728a <UTIL1_ScanDecimal32uNumber+0x7e>
    return ERR_FAILED;
    7286:	231b      	movs	r3, #27
    7288:	e003      	b.n	7292 <UTIL1_ScanDecimal32uNumber+0x86>
  }
  *str = p;
    728a:	687b      	ldr	r3, [r7, #4]
    728c:	68ba      	ldr	r2, [r7, #8]
    728e:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7290:	2300      	movs	r3, #0
}
    7292:	4618      	mov	r0, r3
    7294:	3714      	adds	r7, #20
    7296:	46bd      	mov	sp, r7
    7298:	f85d 7b04 	ldr.w	r7, [sp], #4
    729c:	4770      	bx	lr
    729e:	bf00      	nop

000072a0 <UTIL1_ScanDecimal32sNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDecimal32sNumber(const unsigned char **str, int32_t *val)
{
    72a0:	b580      	push	{r7, lr}
    72a2:	b086      	sub	sp, #24
    72a4:	af00      	add	r7, sp, #0
    72a6:	6078      	str	r0, [r7, #4]
    72a8:	6039      	str	r1, [r7, #0]
  /* Scans a decimal number, and stops at any non-number. Number can have any preceding spaces. */
  const unsigned char *p = *str;
    72aa:	687b      	ldr	r3, [r7, #4]
    72ac:	681b      	ldr	r3, [r3, #0]
    72ae:	613b      	str	r3, [r7, #16]
  bool isNeg;
  uint32_t val32u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    72b0:	e002      	b.n	72b8 <UTIL1_ScanDecimal32sNumber+0x18>
    p++;
    72b2:	693b      	ldr	r3, [r7, #16]
    72b4:	3301      	adds	r3, #1
    72b6:	613b      	str	r3, [r7, #16]
  const unsigned char *p = *str;
  bool isNeg;
  uint32_t val32u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    72b8:	693b      	ldr	r3, [r7, #16]
    72ba:	781b      	ldrb	r3, [r3, #0]
    72bc:	2b20      	cmp	r3, #32
    72be:	d0f8      	beq.n	72b2 <UTIL1_ScanDecimal32sNumber+0x12>
    p++;
  }
  *val = 0;
    72c0:	683b      	ldr	r3, [r7, #0]
    72c2:	2200      	movs	r2, #0
    72c4:	601a      	str	r2, [r3, #0]
  if (*p=='-') {
    72c6:	693b      	ldr	r3, [r7, #16]
    72c8:	781b      	ldrb	r3, [r3, #0]
    72ca:	2b2d      	cmp	r3, #45	; 0x2d
    72cc:	d105      	bne.n	72da <UTIL1_ScanDecimal32sNumber+0x3a>
    isNeg = TRUE;
    72ce:	2301      	movs	r3, #1
    72d0:	75fb      	strb	r3, [r7, #23]
    p++; /* skip minus */
    72d2:	693b      	ldr	r3, [r7, #16]
    72d4:	3301      	adds	r3, #1
    72d6:	613b      	str	r3, [r7, #16]
    72d8:	e001      	b.n	72de <UTIL1_ScanDecimal32sNumber+0x3e>
  } else {
    isNeg = FALSE;
    72da:	2300      	movs	r3, #0
    72dc:	75fb      	strb	r3, [r7, #23]
  }
  res = UTIL1_ScanDecimal32uNumber(&p, &val32u);
    72de:	f107 020c 	add.w	r2, r7, #12
    72e2:	f107 0310 	add.w	r3, r7, #16
    72e6:	4611      	mov	r1, r2
    72e8:	4618      	mov	r0, r3
    72ea:	f7ff ff8f 	bl	720c <UTIL1_ScanDecimal32uNumber>
    72ee:	4603      	mov	r3, r0
    72f0:	75bb      	strb	r3, [r7, #22]
  if (res != ERR_OK) {
    72f2:	7dbb      	ldrb	r3, [r7, #22]
    72f4:	2b00      	cmp	r3, #0
    72f6:	d001      	beq.n	72fc <UTIL1_ScanDecimal32sNumber+0x5c>
    return res;
    72f8:	7dbb      	ldrb	r3, [r7, #22]
    72fa:	e00f      	b.n	731c <UTIL1_ScanDecimal32sNumber+0x7c>
  }
  if (isNeg) {
    72fc:	7dfb      	ldrb	r3, [r7, #23]
    72fe:	2b00      	cmp	r3, #0
    7300:	d004      	beq.n	730c <UTIL1_ScanDecimal32sNumber+0x6c>
    *val = (int32_t)(-(int32_t)val32u);
    7302:	68fb      	ldr	r3, [r7, #12]
    7304:	425a      	negs	r2, r3
    7306:	683b      	ldr	r3, [r7, #0]
    7308:	601a      	str	r2, [r3, #0]
    730a:	e003      	b.n	7314 <UTIL1_ScanDecimal32sNumber+0x74>
  } else {
    *val = (int32_t)val32u;
    730c:	68fb      	ldr	r3, [r7, #12]
    730e:	461a      	mov	r2, r3
    7310:	683b      	ldr	r3, [r7, #0]
    7312:	601a      	str	r2, [r3, #0]
  }
  *str = p;
    7314:	693a      	ldr	r2, [r7, #16]
    7316:	687b      	ldr	r3, [r7, #4]
    7318:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    731a:	2300      	movs	r3, #0
}
    731c:	4618      	mov	r0, r3
    731e:	3718      	adds	r7, #24
    7320:	46bd      	mov	sp, r7
    7322:	bd80      	pop	{r7, pc}

00007324 <UTIL1_ScanDecimal32sDotNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDecimal32sDotNumber(const unsigned char **str, int32_t *integral, uint32_t *fractional, uint8_t *nofFractionalZeros)
{
    7324:	b580      	push	{r7, lr}
    7326:	b086      	sub	sp, #24
    7328:	af00      	add	r7, sp, #0
    732a:	60f8      	str	r0, [r7, #12]
    732c:	60b9      	str	r1, [r7, #8]
    732e:	607a      	str	r2, [r7, #4]
    7330:	603b      	str	r3, [r7, #0]
  /* scans e.g. "-3445.071" and returns -3445 in integral part, and 71 in fractional part */
  uint8_t res;
  const unsigned char *p = *str;
    7332:	68fb      	ldr	r3, [r7, #12]
    7334:	681b      	ldr	r3, [r3, #0]
    7336:	613b      	str	r3, [r7, #16]

  *integral = 0;
    7338:	68bb      	ldr	r3, [r7, #8]
    733a:	2200      	movs	r2, #0
    733c:	601a      	str	r2, [r3, #0]
  *fractional = 0;
    733e:	687b      	ldr	r3, [r7, #4]
    7340:	2200      	movs	r2, #0
    7342:	601a      	str	r2, [r3, #0]
  *nofFractionalZeros = 0;
    7344:	683b      	ldr	r3, [r7, #0]
    7346:	2200      	movs	r2, #0
    7348:	701a      	strb	r2, [r3, #0]
  res = UTIL1_ScanDecimal32sNumber(&p, integral);
    734a:	f107 0310 	add.w	r3, r7, #16
    734e:	68b9      	ldr	r1, [r7, #8]
    7350:	4618      	mov	r0, r3
    7352:	f7ff ffa5 	bl	72a0 <UTIL1_ScanDecimal32sNumber>
    7356:	4603      	mov	r3, r0
    7358:	75fb      	strb	r3, [r7, #23]
  if (res != ERR_OK) {
    735a:	7dfb      	ldrb	r3, [r7, #23]
    735c:	2b00      	cmp	r3, #0
    735e:	d001      	beq.n	7364 <UTIL1_ScanDecimal32sDotNumber+0x40>
    return res;
    7360:	7dfb      	ldrb	r3, [r7, #23]
    7362:	e02d      	b.n	73c0 <UTIL1_ScanDecimal32sDotNumber+0x9c>
  }
  if (*p=='.') {
    7364:	693b      	ldr	r3, [r7, #16]
    7366:	781b      	ldrb	r3, [r3, #0]
    7368:	2b2e      	cmp	r3, #46	; 0x2e
    736a:	d125      	bne.n	73b8 <UTIL1_ScanDecimal32sDotNumber+0x94>
    p++; /* skip '.' */
    736c:	693b      	ldr	r3, [r7, #16]
    736e:	3301      	adds	r3, #1
    7370:	613b      	str	r3, [r7, #16]
    while (*p=='0') { /* count leading zeros */
    7372:	e008      	b.n	7386 <UTIL1_ScanDecimal32sDotNumber+0x62>
      (*nofFractionalZeros)++;
    7374:	683b      	ldr	r3, [r7, #0]
    7376:	781b      	ldrb	r3, [r3, #0]
    7378:	3301      	adds	r3, #1
    737a:	b2da      	uxtb	r2, r3
    737c:	683b      	ldr	r3, [r7, #0]
    737e:	701a      	strb	r2, [r3, #0]
      p++; /* skip leading zero */
    7380:	693b      	ldr	r3, [r7, #16]
    7382:	3301      	adds	r3, #1
    7384:	613b      	str	r3, [r7, #16]
  if (res != ERR_OK) {
    return res;
  }
  if (*p=='.') {
    p++; /* skip '.' */
    while (*p=='0') { /* count leading zeros */
    7386:	693b      	ldr	r3, [r7, #16]
    7388:	781b      	ldrb	r3, [r3, #0]
    738a:	2b30      	cmp	r3, #48	; 0x30
    738c:	d0f2      	beq.n	7374 <UTIL1_ScanDecimal32sDotNumber+0x50>
      (*nofFractionalZeros)++;
      p++; /* skip leading zero */
    }
    if (*p>='0' && *p<='9') { /* number */
    738e:	693b      	ldr	r3, [r7, #16]
    7390:	781b      	ldrb	r3, [r3, #0]
    7392:	2b2f      	cmp	r3, #47	; 0x2f
    7394:	d910      	bls.n	73b8 <UTIL1_ScanDecimal32sDotNumber+0x94>
    7396:	693b      	ldr	r3, [r7, #16]
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	2b39      	cmp	r3, #57	; 0x39
    739c:	d80c      	bhi.n	73b8 <UTIL1_ScanDecimal32sDotNumber+0x94>
      res = UTIL1_ScanDecimal32uNumber(&p, fractional);
    739e:	f107 0310 	add.w	r3, r7, #16
    73a2:	6879      	ldr	r1, [r7, #4]
    73a4:	4618      	mov	r0, r3
    73a6:	f7ff ff31 	bl	720c <UTIL1_ScanDecimal32uNumber>
    73aa:	4603      	mov	r3, r0
    73ac:	75fb      	strb	r3, [r7, #23]
      if (res != ERR_OK) {
    73ae:	7dfb      	ldrb	r3, [r7, #23]
    73b0:	2b00      	cmp	r3, #0
    73b2:	d001      	beq.n	73b8 <UTIL1_ScanDecimal32sDotNumber+0x94>
        return res;
    73b4:	7dfb      	ldrb	r3, [r7, #23]
    73b6:	e003      	b.n	73c0 <UTIL1_ScanDecimal32sDotNumber+0x9c>
      }
    }
  }
  *str = p; /* store parsing pointer */
    73b8:	693a      	ldr	r2, [r7, #16]
    73ba:	68fb      	ldr	r3, [r7, #12]
    73bc:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    73be:	2300      	movs	r3, #0
}
    73c0:	4618      	mov	r0, r3
    73c2:	3718      	adds	r7, #24
    73c4:	46bd      	mov	sp, r7
    73c6:	bd80      	pop	{r7, pc}

000073c8 <isHexCharacter>:
{
  Method is implemented as macro in the header file as wrapper to the standard strlen() function
}
*/

static bool isHexCharacter(unsigned char ch) {
    73c8:	b480      	push	{r7}
    73ca:	b083      	sub	sp, #12
    73cc:	af00      	add	r7, sp, #0
    73ce:	4603      	mov	r3, r0
    73d0:	71fb      	strb	r3, [r7, #7]
  /* returns TRUE if character is a hexadecimal character */
  return (ch>='0' && ch<='9') || (ch>='a' && ch<='f') || (ch>='A' && ch<='F');
    73d2:	79fb      	ldrb	r3, [r7, #7]
    73d4:	2b2f      	cmp	r3, #47	; 0x2f
    73d6:	d902      	bls.n	73de <isHexCharacter+0x16>
    73d8:	79fb      	ldrb	r3, [r7, #7]
    73da:	2b39      	cmp	r3, #57	; 0x39
    73dc:	d90b      	bls.n	73f6 <isHexCharacter+0x2e>
    73de:	79fb      	ldrb	r3, [r7, #7]
    73e0:	2b60      	cmp	r3, #96	; 0x60
    73e2:	d902      	bls.n	73ea <isHexCharacter+0x22>
    73e4:	79fb      	ldrb	r3, [r7, #7]
    73e6:	2b66      	cmp	r3, #102	; 0x66
    73e8:	d905      	bls.n	73f6 <isHexCharacter+0x2e>
    73ea:	79fb      	ldrb	r3, [r7, #7]
    73ec:	2b40      	cmp	r3, #64	; 0x40
    73ee:	d904      	bls.n	73fa <isHexCharacter+0x32>
    73f0:	79fb      	ldrb	r3, [r7, #7]
    73f2:	2b46      	cmp	r3, #70	; 0x46
    73f4:	d801      	bhi.n	73fa <isHexCharacter+0x32>
    73f6:	2301      	movs	r3, #1
    73f8:	e000      	b.n	73fc <isHexCharacter+0x34>
    73fa:	2300      	movs	r3, #0
    73fc:	b2db      	uxtb	r3, r3
}
    73fe:	4618      	mov	r0, r3
    7400:	370c      	adds	r7, #12
    7402:	46bd      	mov	sp, r7
    7404:	f85d 7b04 	ldr.w	r7, [sp], #4
    7408:	4770      	bx	lr
    740a:	bf00      	nop

0000740c <PreScanHexNumber>:

static uint8_t PreScanHexNumber(const unsigned char **str) {
    740c:	b480      	push	{r7}
    740e:	b085      	sub	sp, #20
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
  const unsigned char *p = *str;
    7414:	687b      	ldr	r3, [r7, #4]
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	60fb      	str	r3, [r7, #12]

  while(*p==' ') { /* skip leading spaces */
    741a:	e002      	b.n	7422 <PreScanHexNumber+0x16>
    p++; /* skip space */
    741c:	68fb      	ldr	r3, [r7, #12]
    741e:	3301      	adds	r3, #1
    7420:	60fb      	str	r3, [r7, #12]
}

static uint8_t PreScanHexNumber(const unsigned char **str) {
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    7422:	68fb      	ldr	r3, [r7, #12]
    7424:	781b      	ldrb	r3, [r3, #0]
    7426:	2b20      	cmp	r3, #32
    7428:	d0f8      	beq.n	741c <PreScanHexNumber+0x10>
    p++; /* skip space */
  }
  if (*p!='0') { /* must start with 0x */
    742a:	68fb      	ldr	r3, [r7, #12]
    742c:	781b      	ldrb	r3, [r3, #0]
    742e:	2b30      	cmp	r3, #48	; 0x30
    7430:	d001      	beq.n	7436 <PreScanHexNumber+0x2a>
    return ERR_FAILED;
    7432:	231b      	movs	r3, #27
    7434:	e00f      	b.n	7456 <PreScanHexNumber+0x4a>
  }
  p++; /* skip '0' */
    7436:	68fb      	ldr	r3, [r7, #12]
    7438:	3301      	adds	r3, #1
    743a:	60fb      	str	r3, [r7, #12]
  if (*p!='x') { /* must start with 0x */
    743c:	68fb      	ldr	r3, [r7, #12]
    743e:	781b      	ldrb	r3, [r3, #0]
    7440:	2b78      	cmp	r3, #120	; 0x78
    7442:	d001      	beq.n	7448 <PreScanHexNumber+0x3c>
    return ERR_FAILED;
    7444:	231b      	movs	r3, #27
    7446:	e006      	b.n	7456 <PreScanHexNumber+0x4a>
  }
  p++; /* skip 'x' */
    7448:	68fb      	ldr	r3, [r7, #12]
    744a:	3301      	adds	r3, #1
    744c:	60fb      	str	r3, [r7, #12]
  *str = p;
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	68fa      	ldr	r2, [r7, #12]
    7452:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7454:	2300      	movs	r3, #0
}
    7456:	4618      	mov	r0, r3
    7458:	3714      	adds	r7, #20
    745a:	46bd      	mov	sp, r7
    745c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7460:	4770      	bx	lr
    7462:	bf00      	nop

00007464 <HexToDec>:

static uint8_t HexToDec(const unsigned char **p, unsigned char *val) {
    7464:	b480      	push	{r7}
    7466:	b085      	sub	sp, #20
    7468:	af00      	add	r7, sp, #0
    746a:	6078      	str	r0, [r7, #4]
    746c:	6039      	str	r1, [r7, #0]
  /* convert a hexadecimal character into a decimal value */
  unsigned char ch = **p;
    746e:	687b      	ldr	r3, [r7, #4]
    7470:	681b      	ldr	r3, [r3, #0]
    7472:	781b      	ldrb	r3, [r3, #0]
    7474:	73fb      	strb	r3, [r7, #15]

  if (ch>='0' && ch<='9') {
    7476:	7bfb      	ldrb	r3, [r7, #15]
    7478:	2b2f      	cmp	r3, #47	; 0x2f
    747a:	d90e      	bls.n	749a <HexToDec+0x36>
    747c:	7bfb      	ldrb	r3, [r7, #15]
    747e:	2b39      	cmp	r3, #57	; 0x39
    7480:	d80b      	bhi.n	749a <HexToDec+0x36>
    *val = (unsigned char)(ch-'0');
    7482:	7bfb      	ldrb	r3, [r7, #15]
    7484:	3b30      	subs	r3, #48	; 0x30
    7486:	b2da      	uxtb	r2, r3
    7488:	683b      	ldr	r3, [r7, #0]
    748a:	701a      	strb	r2, [r3, #0]
    (*p)++;
    748c:	687b      	ldr	r3, [r7, #4]
    748e:	681b      	ldr	r3, [r3, #0]
    7490:	1c5a      	adds	r2, r3, #1
    7492:	687b      	ldr	r3, [r7, #4]
    7494:	601a      	str	r2, [r3, #0]
    return ERR_OK;
    7496:	2300      	movs	r3, #0
    7498:	e024      	b.n	74e4 <HexToDec+0x80>
  } else if (ch>='a' && ch<='f') {
    749a:	7bfb      	ldrb	r3, [r7, #15]
    749c:	2b60      	cmp	r3, #96	; 0x60
    749e:	d90e      	bls.n	74be <HexToDec+0x5a>
    74a0:	7bfb      	ldrb	r3, [r7, #15]
    74a2:	2b66      	cmp	r3, #102	; 0x66
    74a4:	d80b      	bhi.n	74be <HexToDec+0x5a>
    *val = (unsigned char)(ch-'a'+10);
    74a6:	7bfb      	ldrb	r3, [r7, #15]
    74a8:	3b57      	subs	r3, #87	; 0x57
    74aa:	b2da      	uxtb	r2, r3
    74ac:	683b      	ldr	r3, [r7, #0]
    74ae:	701a      	strb	r2, [r3, #0]
    (*p)++;
    74b0:	687b      	ldr	r3, [r7, #4]
    74b2:	681b      	ldr	r3, [r3, #0]
    74b4:	1c5a      	adds	r2, r3, #1
    74b6:	687b      	ldr	r3, [r7, #4]
    74b8:	601a      	str	r2, [r3, #0]
    return ERR_OK;
    74ba:	2300      	movs	r3, #0
    74bc:	e012      	b.n	74e4 <HexToDec+0x80>
  } else if (ch>='A' && ch<='F') {
    74be:	7bfb      	ldrb	r3, [r7, #15]
    74c0:	2b40      	cmp	r3, #64	; 0x40
    74c2:	d90e      	bls.n	74e2 <HexToDec+0x7e>
    74c4:	7bfb      	ldrb	r3, [r7, #15]
    74c6:	2b46      	cmp	r3, #70	; 0x46
    74c8:	d80b      	bhi.n	74e2 <HexToDec+0x7e>
    *val = (unsigned char)(ch-'A'+10);
    74ca:	7bfb      	ldrb	r3, [r7, #15]
    74cc:	3b37      	subs	r3, #55	; 0x37
    74ce:	b2da      	uxtb	r2, r3
    74d0:	683b      	ldr	r3, [r7, #0]
    74d2:	701a      	strb	r2, [r3, #0]
    (*p)++;
    74d4:	687b      	ldr	r3, [r7, #4]
    74d6:	681b      	ldr	r3, [r3, #0]
    74d8:	1c5a      	adds	r2, r3, #1
    74da:	687b      	ldr	r3, [r7, #4]
    74dc:	601a      	str	r2, [r3, #0]
    return ERR_OK;
    74de:	2300      	movs	r3, #0
    74e0:	e000      	b.n	74e4 <HexToDec+0x80>
  }
  return ERR_FAILED;
    74e2:	231b      	movs	r3, #27
}
    74e4:	4618      	mov	r0, r3
    74e6:	3714      	adds	r7, #20
    74e8:	46bd      	mov	sp, r7
    74ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ee:	4770      	bx	lr

000074f0 <UTIL1_ScanHex32uNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanHex32uNumber(const unsigned char **str, uint32_t *val)
{
    74f0:	b580      	push	{r7, lr}
    74f2:	b086      	sub	sp, #24
    74f4:	af00      	add	r7, sp, #0
    74f6:	6078      	str	r0, [r7, #4]
    74f8:	6039      	str	r1, [r7, #0]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 8; /* maximum number of digits to avoid overflow */
    74fa:	2308      	movs	r3, #8
    74fc:	75fb      	strb	r3, [r7, #23]
  const unsigned char *p = *str;
    74fe:	687b      	ldr	r3, [r7, #4]
    7500:	681b      	ldr	r3, [r3, #0]
    7502:	613b      	str	r3, [r7, #16]
  uint8_t v;

  *val = 0;
    7504:	683b      	ldr	r3, [r7, #0]
    7506:	2200      	movs	r2, #0
    7508:	601a      	str	r2, [r3, #0]
  if (PreScanHexNumber(&p)!=ERR_OK) { /* skip leading spaces, and scan '0x' */
    750a:	f107 0310 	add.w	r3, r7, #16
    750e:	4618      	mov	r0, r3
    7510:	f7ff ff7c 	bl	740c <PreScanHexNumber>
    7514:	4603      	mov	r3, r0
    7516:	2b00      	cmp	r3, #0
    7518:	d001      	beq.n	751e <UTIL1_ScanHex32uNumber+0x2e>
    return ERR_FAILED;
    751a:	231b      	movs	r3, #27
    751c:	e025      	b.n	756a <UTIL1_ScanHex32uNumber+0x7a>
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    751e:	693b      	ldr	r3, [r7, #16]
    7520:	781b      	ldrb	r3, [r3, #0]
    7522:	4618      	mov	r0, r3
    7524:	f7ff ff50 	bl	73c8 <isHexCharacter>
    7528:	4603      	mov	r3, r0
    752a:	2b00      	cmp	r3, #0
    752c:	d10b      	bne.n	7546 <UTIL1_ScanHex32uNumber+0x56>
    return ERR_FAILED;
    752e:	231b      	movs	r3, #27
    7530:	e01b      	b.n	756a <UTIL1_ScanHex32uNumber+0x7a>
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint32_t)((*val)*16 + v);
    7532:	683b      	ldr	r3, [r7, #0]
    7534:	681b      	ldr	r3, [r3, #0]
    7536:	011b      	lsls	r3, r3, #4
    7538:	7bfa      	ldrb	r2, [r7, #15]
    753a:	441a      	add	r2, r3
    753c:	683b      	ldr	r3, [r7, #0]
    753e:	601a      	str	r2, [r3, #0]
    nofDigits--;
    7540:	7dfb      	ldrb	r3, [r7, #23]
    7542:	3b01      	subs	r3, #1
    7544:	75fb      	strb	r3, [r7, #23]
    return ERR_FAILED;
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    7546:	7dfb      	ldrb	r3, [r7, #23]
    7548:	2b00      	cmp	r3, #0
    754a:	d00a      	beq.n	7562 <UTIL1_ScanHex32uNumber+0x72>
    754c:	f107 020f 	add.w	r2, r7, #15
    7550:	f107 0310 	add.w	r3, r7, #16
    7554:	4611      	mov	r1, r2
    7556:	4618      	mov	r0, r3
    7558:	f7ff ff84 	bl	7464 <HexToDec>
    755c:	4603      	mov	r3, r0
    755e:	2b00      	cmp	r3, #0
    7560:	d0e7      	beq.n	7532 <UTIL1_ScanHex32uNumber+0x42>
    *val = (uint32_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
    7562:	693a      	ldr	r2, [r7, #16]
    7564:	687b      	ldr	r3, [r7, #4]
    7566:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7568:	2300      	movs	r3, #0
}
    756a:	4618      	mov	r0, r3
    756c:	3718      	adds	r7, #24
    756e:	46bd      	mov	sp, r7
    7570:	bd80      	pop	{r7, pc}
    7572:	bf00      	nop

00007574 <UTIL1_ScanHex16uNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanHex16uNumber(const unsigned char **str, uint16_t *val)
{
    7574:	b580      	push	{r7, lr}
    7576:	b086      	sub	sp, #24
    7578:	af00      	add	r7, sp, #0
    757a:	6078      	str	r0, [r7, #4]
    757c:	6039      	str	r1, [r7, #0]
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 4; /* maximum number of digits to read */
    757e:	2304      	movs	r3, #4
    7580:	75fb      	strb	r3, [r7, #23]
  const unsigned char *p = *str;
    7582:	687b      	ldr	r3, [r7, #4]
    7584:	681b      	ldr	r3, [r3, #0]
    7586:	613b      	str	r3, [r7, #16]
  uint8_t v;

  *val = 0;
    7588:	683b      	ldr	r3, [r7, #0]
    758a:	2200      	movs	r2, #0
    758c:	801a      	strh	r2, [r3, #0]
  if (PreScanHexNumber(&p)!=ERR_OK) { /* skip leading spaces, and scan '0x' */
    758e:	f107 0310 	add.w	r3, r7, #16
    7592:	4618      	mov	r0, r3
    7594:	f7ff ff3a 	bl	740c <PreScanHexNumber>
    7598:	4603      	mov	r3, r0
    759a:	2b00      	cmp	r3, #0
    759c:	d001      	beq.n	75a2 <UTIL1_ScanHex16uNumber+0x2e>
    return ERR_FAILED;
    759e:	231b      	movs	r3, #27
    75a0:	e028      	b.n	75f4 <UTIL1_ScanHex16uNumber+0x80>
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    75a2:	693b      	ldr	r3, [r7, #16]
    75a4:	781b      	ldrb	r3, [r3, #0]
    75a6:	4618      	mov	r0, r3
    75a8:	f7ff ff0e 	bl	73c8 <isHexCharacter>
    75ac:	4603      	mov	r3, r0
    75ae:	2b00      	cmp	r3, #0
    75b0:	d10e      	bne.n	75d0 <UTIL1_ScanHex16uNumber+0x5c>
    return ERR_FAILED;
    75b2:	231b      	movs	r3, #27
    75b4:	e01e      	b.n	75f4 <UTIL1_ScanHex16uNumber+0x80>
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint16_t)((*val)*16 + v);
    75b6:	683b      	ldr	r3, [r7, #0]
    75b8:	881b      	ldrh	r3, [r3, #0]
    75ba:	011b      	lsls	r3, r3, #4
    75bc:	b29a      	uxth	r2, r3
    75be:	7bfb      	ldrb	r3, [r7, #15]
    75c0:	b29b      	uxth	r3, r3
    75c2:	4413      	add	r3, r2
    75c4:	b29a      	uxth	r2, r3
    75c6:	683b      	ldr	r3, [r7, #0]
    75c8:	801a      	strh	r2, [r3, #0]
    nofDigits--;
    75ca:	7dfb      	ldrb	r3, [r7, #23]
    75cc:	3b01      	subs	r3, #1
    75ce:	75fb      	strb	r3, [r7, #23]
    return ERR_FAILED;
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    75d0:	7dfb      	ldrb	r3, [r7, #23]
    75d2:	2b00      	cmp	r3, #0
    75d4:	d00a      	beq.n	75ec <UTIL1_ScanHex16uNumber+0x78>
    75d6:	f107 020f 	add.w	r2, r7, #15
    75da:	f107 0310 	add.w	r3, r7, #16
    75de:	4611      	mov	r1, r2
    75e0:	4618      	mov	r0, r3
    75e2:	f7ff ff3f 	bl	7464 <HexToDec>
    75e6:	4603      	mov	r3, r0
    75e8:	2b00      	cmp	r3, #0
    75ea:	d0e4      	beq.n	75b6 <UTIL1_ScanHex16uNumber+0x42>
    *val = (uint16_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
    75ec:	693a      	ldr	r2, [r7, #16]
    75ee:	687b      	ldr	r3, [r7, #4]
    75f0:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    75f2:	2300      	movs	r3, #0
}
    75f4:	4618      	mov	r0, r3
    75f6:	3718      	adds	r7, #24
    75f8:	46bd      	mov	sp, r7
    75fa:	bd80      	pop	{r7, pc}

000075fc <UTIL1_ScanHex8uNumber>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanHex8uNumber(const unsigned char **str, uint8_t *val)
{
    75fc:	b580      	push	{r7, lr}
    75fe:	b086      	sub	sp, #24
    7600:	af00      	add	r7, sp, #0
    7602:	6078      	str	r0, [r7, #4]
    7604:	6039      	str	r1, [r7, #0]
  /* scans a hex number with 0x, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 2; /* maximum number of digits to read */
    7606:	2302      	movs	r3, #2
    7608:	75fb      	strb	r3, [r7, #23]
  const unsigned char *p = *str;
    760a:	687b      	ldr	r3, [r7, #4]
    760c:	681b      	ldr	r3, [r3, #0]
    760e:	613b      	str	r3, [r7, #16]
  uint8_t v;

  *val = 0;
    7610:	683b      	ldr	r3, [r7, #0]
    7612:	2200      	movs	r2, #0
    7614:	701a      	strb	r2, [r3, #0]
  if (PreScanHexNumber(&p)!=ERR_OK) { /* skip leading spaces, and scan '0x' */
    7616:	f107 0310 	add.w	r3, r7, #16
    761a:	4618      	mov	r0, r3
    761c:	f7ff fef6 	bl	740c <PreScanHexNumber>
    7620:	4603      	mov	r3, r0
    7622:	2b00      	cmp	r3, #0
    7624:	d001      	beq.n	762a <UTIL1_ScanHex8uNumber+0x2e>
    return ERR_FAILED;
    7626:	231b      	movs	r3, #27
    7628:	e027      	b.n	767a <UTIL1_ScanHex8uNumber+0x7e>
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    762a:	693b      	ldr	r3, [r7, #16]
    762c:	781b      	ldrb	r3, [r3, #0]
    762e:	4618      	mov	r0, r3
    7630:	f7ff feca 	bl	73c8 <isHexCharacter>
    7634:	4603      	mov	r3, r0
    7636:	2b00      	cmp	r3, #0
    7638:	d10d      	bne.n	7656 <UTIL1_ScanHex8uNumber+0x5a>
    return ERR_FAILED;
    763a:	231b      	movs	r3, #27
    763c:	e01d      	b.n	767a <UTIL1_ScanHex8uNumber+0x7e>
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint8_t)((*val)*16 + v);
    763e:	683b      	ldr	r3, [r7, #0]
    7640:	781b      	ldrb	r3, [r3, #0]
    7642:	011b      	lsls	r3, r3, #4
    7644:	b2da      	uxtb	r2, r3
    7646:	7bfb      	ldrb	r3, [r7, #15]
    7648:	4413      	add	r3, r2
    764a:	b2da      	uxtb	r2, r3
    764c:	683b      	ldr	r3, [r7, #0]
    764e:	701a      	strb	r2, [r3, #0]
    nofDigits--;
    7650:	7dfb      	ldrb	r3, [r7, #23]
    7652:	3b01      	subs	r3, #1
    7654:	75fb      	strb	r3, [r7, #23]
    return ERR_FAILED;
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    7656:	7dfb      	ldrb	r3, [r7, #23]
    7658:	2b00      	cmp	r3, #0
    765a:	d00a      	beq.n	7672 <UTIL1_ScanHex8uNumber+0x76>
    765c:	f107 020f 	add.w	r2, r7, #15
    7660:	f107 0310 	add.w	r3, r7, #16
    7664:	4611      	mov	r1, r2
    7666:	4618      	mov	r0, r3
    7668:	f7ff fefc 	bl	7464 <HexToDec>
    766c:	4603      	mov	r3, r0
    766e:	2b00      	cmp	r3, #0
    7670:	d0e5      	beq.n	763e <UTIL1_ScanHex8uNumber+0x42>
    *val = (uint8_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
    7672:	693a      	ldr	r2, [r7, #16]
    7674:	687b      	ldr	r3, [r7, #4]
    7676:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7678:	2300      	movs	r3, #0
}
    767a:	4618      	mov	r0, r3
    767c:	3718      	adds	r7, #24
    767e:	46bd      	mov	sp, r7
    7680:	bd80      	pop	{r7, pc}
    7682:	bf00      	nop

00007684 <UTIL1_ScanHex8uNumberNoPrefix>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanHex8uNumberNoPrefix(const unsigned char **str, uint8_t *val)
{
    7684:	b580      	push	{r7, lr}
    7686:	b086      	sub	sp, #24
    7688:	af00      	add	r7, sp, #0
    768a:	6078      	str	r0, [r7, #4]
    768c:	6039      	str	r1, [r7, #0]
  /* scans a hex number without 0x, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 2; /* maximum number of digits to read */
    768e:	2302      	movs	r3, #2
    7690:	75fb      	strb	r3, [r7, #23]
  const unsigned char *p = *str;
    7692:	687b      	ldr	r3, [r7, #4]
    7694:	681b      	ldr	r3, [r3, #0]
    7696:	613b      	str	r3, [r7, #16]
  uint8_t v;

  *val = 0;
    7698:	683b      	ldr	r3, [r7, #0]
    769a:	2200      	movs	r2, #0
    769c:	701a      	strb	r2, [r3, #0]
  while(*p==' ') { /* skip leading spaces */
    769e:	e002      	b.n	76a6 <UTIL1_ScanHex8uNumberNoPrefix+0x22>
    p++; /* skip space */
    76a0:	693b      	ldr	r3, [r7, #16]
    76a2:	3301      	adds	r3, #1
    76a4:	613b      	str	r3, [r7, #16]
  uint8_t nofDigits = 2; /* maximum number of digits to read */
  const unsigned char *p = *str;
  uint8_t v;

  *val = 0;
  while(*p==' ') { /* skip leading spaces */
    76a6:	693b      	ldr	r3, [r7, #16]
    76a8:	781b      	ldrb	r3, [r3, #0]
    76aa:	2b20      	cmp	r3, #32
    76ac:	d0f8      	beq.n	76a0 <UTIL1_ScanHex8uNumberNoPrefix+0x1c>
    p++; /* skip space */
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    76ae:	693b      	ldr	r3, [r7, #16]
    76b0:	781b      	ldrb	r3, [r3, #0]
    76b2:	4618      	mov	r0, r3
    76b4:	f7ff fe88 	bl	73c8 <isHexCharacter>
    76b8:	4603      	mov	r3, r0
    76ba:	2b00      	cmp	r3, #0
    76bc:	d10d      	bne.n	76da <UTIL1_ScanHex8uNumberNoPrefix+0x56>
    return ERR_FAILED;
    76be:	231b      	movs	r3, #27
    76c0:	e01d      	b.n	76fe <UTIL1_ScanHex8uNumberNoPrefix+0x7a>
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint8_t)((*val)*16 + v);
    76c2:	683b      	ldr	r3, [r7, #0]
    76c4:	781b      	ldrb	r3, [r3, #0]
    76c6:	011b      	lsls	r3, r3, #4
    76c8:	b2da      	uxtb	r2, r3
    76ca:	7bfb      	ldrb	r3, [r7, #15]
    76cc:	4413      	add	r3, r2
    76ce:	b2da      	uxtb	r2, r3
    76d0:	683b      	ldr	r3, [r7, #0]
    76d2:	701a      	strb	r2, [r3, #0]
    nofDigits--;
    76d4:	7dfb      	ldrb	r3, [r7, #23]
    76d6:	3b01      	subs	r3, #1
    76d8:	75fb      	strb	r3, [r7, #23]
    p++; /* skip space */
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    76da:	7dfb      	ldrb	r3, [r7, #23]
    76dc:	2b00      	cmp	r3, #0
    76de:	d00a      	beq.n	76f6 <UTIL1_ScanHex8uNumberNoPrefix+0x72>
    76e0:	f107 020f 	add.w	r2, r7, #15
    76e4:	f107 0310 	add.w	r3, r7, #16
    76e8:	4611      	mov	r1, r2
    76ea:	4618      	mov	r0, r3
    76ec:	f7ff feba 	bl	7464 <HexToDec>
    76f0:	4603      	mov	r3, r0
    76f2:	2b00      	cmp	r3, #0
    76f4:	d0e5      	beq.n	76c2 <UTIL1_ScanHex8uNumberNoPrefix+0x3e>
    *val = (uint8_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
    76f6:	693a      	ldr	r2, [r7, #16]
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    76fc:	2300      	movs	r3, #0
}
    76fe:	4618      	mov	r0, r3
    7700:	3718      	adds	r7, #24
    7702:	46bd      	mov	sp, r7
    7704:	bd80      	pop	{r7, pc}
    7706:	bf00      	nop

00007708 <UTIL1_strtailcmp>:
**     Returns     :
**         ---             - returns 0 if tail matches, -1 otherwise
** ===================================================================
*/
uint8_t UTIL1_strtailcmp(const uint8_t *str, const uint8_t *tail)
{
    7708:	b580      	push	{r7, lr}
    770a:	b084      	sub	sp, #16
    770c:	af00      	add	r7, sp, #0
    770e:	6078      	str	r0, [r7, #4]
    7710:	6039      	str	r1, [r7, #0]
  int i, j;

  i = (int)UTIL1_strlen((char*)str);
    7712:	6878      	ldr	r0, [r7, #4]
    7714:	f008 f9b6 	bl	fa84 <strlen>
    7718:	4603      	mov	r3, r0
    771a:	60fb      	str	r3, [r7, #12]
  j = (int)UTIL1_strlen((char*)tail);
    771c:	6838      	ldr	r0, [r7, #0]
    771e:	f008 f9b1 	bl	fa84 <strlen>
    7722:	4603      	mov	r3, r0
    7724:	60bb      	str	r3, [r7, #8]
  if (j>i) { /* str is smaller than tail */
    7726:	68ba      	ldr	r2, [r7, #8]
    7728:	68fb      	ldr	r3, [r7, #12]
    772a:	429a      	cmp	r2, r3
    772c:	dd0c      	ble.n	7748 <UTIL1_strtailcmp+0x40>
    return 1; /* cannot match */
    772e:	2301      	movs	r3, #1
    7730:	e015      	b.n	775e <UTIL1_strtailcmp+0x56>
  }
  /* compare strings */
  while(str[i]==tail[j]) {
    i--;
    7732:	68fb      	ldr	r3, [r7, #12]
    7734:	3b01      	subs	r3, #1
    7736:	60fb      	str	r3, [r7, #12]
    j--;
    7738:	68bb      	ldr	r3, [r7, #8]
    773a:	3b01      	subs	r3, #1
    773c:	60bb      	str	r3, [r7, #8]
    if (j<0) {
    773e:	68bb      	ldr	r3, [r7, #8]
    7740:	2b00      	cmp	r3, #0
    7742:	da01      	bge.n	7748 <UTIL1_strtailcmp+0x40>
      return 0; /* match */
    7744:	2300      	movs	r3, #0
    7746:	e00a      	b.n	775e <UTIL1_strtailcmp+0x56>
  j = (int)UTIL1_strlen((char*)tail);
  if (j>i) { /* str is smaller than tail */
    return 1; /* cannot match */
  }
  /* compare strings */
  while(str[i]==tail[j]) {
    7748:	68fb      	ldr	r3, [r7, #12]
    774a:	687a      	ldr	r2, [r7, #4]
    774c:	4413      	add	r3, r2
    774e:	781a      	ldrb	r2, [r3, #0]
    7750:	68bb      	ldr	r3, [r7, #8]
    7752:	6839      	ldr	r1, [r7, #0]
    7754:	440b      	add	r3, r1
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	429a      	cmp	r2, r3
    775a:	d0ea      	beq.n	7732 <UTIL1_strtailcmp+0x2a>
    j--;
    if (j<0) {
      return 0; /* match */
    }
  }
  return 1; /* !=0 means no match */
    775c:	2301      	movs	r3, #1
}
    775e:	4618      	mov	r0, r3
    7760:	3710      	adds	r7, #16
    7762:	46bd      	mov	sp, r7
    7764:	bd80      	pop	{r7, pc}
    7766:	bf00      	nop

00007768 <UTIL1_strCutTail>:
**         ---             - Error code, ERR_OK if no error, otherwise
**                           ERR_FAIL if tail is not found
** ===================================================================
*/
uint8_t UTIL1_strCutTail(uint8_t *str, uint8_t *tail)
{
    7768:	b580      	push	{r7, lr}
    776a:	b084      	sub	sp, #16
    776c:	af00      	add	r7, sp, #0
    776e:	6078      	str	r0, [r7, #4]
    7770:	6039      	str	r1, [r7, #0]
  /* cut the tail from the string */
  size_t strLen, tailLen;

  if (UTIL1_strtailcmp(str, tail)!=0) { /* check if tail is present */
    7772:	6839      	ldr	r1, [r7, #0]
    7774:	6878      	ldr	r0, [r7, #4]
    7776:	f7ff ffc7 	bl	7708 <UTIL1_strtailcmp>
    777a:	4603      	mov	r3, r0
    777c:	2b00      	cmp	r3, #0
    777e:	d001      	beq.n	7784 <UTIL1_strCutTail+0x1c>
    return ERR_FAILED; /* tail not found */
    7780:	231b      	movs	r3, #27
    7782:	e00f      	b.n	77a4 <UTIL1_strCutTail+0x3c>
  }
  tailLen = UTIL1_strlen((char*)tail);
    7784:	6838      	ldr	r0, [r7, #0]
    7786:	f008 f97d 	bl	fa84 <strlen>
    778a:	60f8      	str	r0, [r7, #12]
  strLen = UTIL1_strlen((char*)str);
    778c:	6878      	ldr	r0, [r7, #4]
    778e:	f008 f979 	bl	fa84 <strlen>
    7792:	60b8      	str	r0, [r7, #8]
  /* write \0 to cut the tail */
  str[strLen-tailLen] = '\0';
    7794:	68ba      	ldr	r2, [r7, #8]
    7796:	68fb      	ldr	r3, [r7, #12]
    7798:	1ad3      	subs	r3, r2, r3
    779a:	687a      	ldr	r2, [r7, #4]
    779c:	4413      	add	r3, r2
    779e:	2200      	movs	r2, #0
    77a0:	701a      	strb	r2, [r3, #0]
  return ERR_OK;
    77a2:	2300      	movs	r3, #0
}
    77a4:	4618      	mov	r0, r3
    77a6:	3710      	adds	r7, #16
    77a8:	46bd      	mov	sp, r7
    77aa:	bd80      	pop	{r7, pc}

000077ac <UTIL1_strcatNum32sDotValue100>:
**         num             - Value to convert.
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_strcatNum32sDotValue100(uint8_t *dst, size_t dstSize, int32_t num)
{
    77ac:	b580      	push	{r7, lr}
    77ae:	b086      	sub	sp, #24
    77b0:	af02      	add	r7, sp, #8
    77b2:	60f8      	str	r0, [r7, #12]
    77b4:	60b9      	str	r1, [r7, #8]
    77b6:	607a      	str	r2, [r7, #4]
  if (num<0 && (num/100)==0) { /* e.g. -53 ==> write sign, as strcatNum32() below will not know that it is negative */
    77b8:	687b      	ldr	r3, [r7, #4]
    77ba:	2b00      	cmp	r3, #0
    77bc:	da08      	bge.n	77d0 <UTIL1_strcatNum32sDotValue100+0x24>
    77be:	687b      	ldr	r3, [r7, #4]
    77c0:	3363      	adds	r3, #99	; 0x63
    77c2:	2bc6      	cmp	r3, #198	; 0xc6
    77c4:	d804      	bhi.n	77d0 <UTIL1_strcatNum32sDotValue100+0x24>
    UTIL1_chcat(dst, dstSize, '-');
    77c6:	222d      	movs	r2, #45	; 0x2d
    77c8:	68b9      	ldr	r1, [r7, #8]
    77ca:	68f8      	ldr	r0, [r7, #12]
    77cc:	f7fe fbd4 	bl	5f78 <UTIL1_chcat>
  }
  UTIL1_strcatNum32s(dst, dstSize, num/100);
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	4a15      	ldr	r2, [pc, #84]	; (7828 <UTIL1_strcatNum32sDotValue100+0x7c>)
    77d4:	fb82 1203 	smull	r1, r2, r2, r3
    77d8:	1152      	asrs	r2, r2, #5
    77da:	17db      	asrs	r3, r3, #31
    77dc:	1ad3      	subs	r3, r2, r3
    77de:	461a      	mov	r2, r3
    77e0:	68b9      	ldr	r1, [r7, #8]
    77e2:	68f8      	ldr	r0, [r7, #12]
    77e4:	f7fe ffaa 	bl	673c <UTIL1_strcatNum32s>
  UTIL1_chcat(dst, dstSize, '.');
    77e8:	222e      	movs	r2, #46	; 0x2e
    77ea:	68b9      	ldr	r1, [r7, #8]
    77ec:	68f8      	ldr	r0, [r7, #12]
    77ee:	f7fe fbc3 	bl	5f78 <UTIL1_chcat>
  if (num<0) {
    77f2:	687b      	ldr	r3, [r7, #4]
    77f4:	2b00      	cmp	r3, #0
    77f6:	da02      	bge.n	77fe <UTIL1_strcatNum32sDotValue100+0x52>
    num = -num;
    77f8:	687b      	ldr	r3, [r7, #4]
    77fa:	425b      	negs	r3, r3
    77fc:	607b      	str	r3, [r7, #4]
  }
  UTIL1_strcatNum16uFormatted(dst, dstSize, (uint16_t)((unsigned)num%100U), '0', 2);
    77fe:	687a      	ldr	r2, [r7, #4]
    7800:	4b09      	ldr	r3, [pc, #36]	; (7828 <UTIL1_strcatNum32sDotValue100+0x7c>)
    7802:	fba3 1302 	umull	r1, r3, r3, r2
    7806:	095b      	lsrs	r3, r3, #5
    7808:	2164      	movs	r1, #100	; 0x64
    780a:	fb01 f303 	mul.w	r3, r1, r3
    780e:	1ad3      	subs	r3, r2, r3
    7810:	b29a      	uxth	r2, r3
    7812:	2302      	movs	r3, #2
    7814:	9300      	str	r3, [sp, #0]
    7816:	2330      	movs	r3, #48	; 0x30
    7818:	68b9      	ldr	r1, [r7, #8]
    781a:	68f8      	ldr	r0, [r7, #12]
    781c:	f7fe fe36 	bl	648c <UTIL1_strcatNum16uFormatted>
}
    7820:	bf00      	nop
    7822:	3710      	adds	r7, #16
    7824:	46bd      	mov	sp, r7
    7826:	bd80      	pop	{r7, pc}
    7828:	51eb851f 	.word	0x51eb851f

0000782c <UTIL1_strFind>:
**         ---             - -1 if not found, otherwise the character
**                           index.
** ===================================================================
*/
int16_t UTIL1_strFind(uint8_t *str, uint8_t *subStr)
{
    782c:	b580      	push	{r7, lr}
    782e:	b084      	sub	sp, #16
    7830:	af00      	add	r7, sp, #0
    7832:	6078      	str	r0, [r7, #4]
    7834:	6039      	str	r1, [r7, #0]
  int16_t i, len;

  len = (int16_t)UTIL1_strlen((char*)subStr);
    7836:	6838      	ldr	r0, [r7, #0]
    7838:	f008 f924 	bl	fa84 <strlen>
    783c:	4603      	mov	r3, r0
    783e:	81bb      	strh	r3, [r7, #12]
  for (i=0; *str!='\0'; i++, str++) {
    7840:	2300      	movs	r3, #0
    7842:	81fb      	strh	r3, [r7, #14]
    7844:	e015      	b.n	7872 <UTIL1_strFind+0x46>
    if (UTIL1_strncmp((char*)str, (char*)subStr, len)==0) {
    7846:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
    784a:	461a      	mov	r2, r3
    784c:	6839      	ldr	r1, [r7, #0]
    784e:	6878      	ldr	r0, [r7, #4]
    7850:	f008 f976 	bl	fb40 <strncmp>
    7854:	4603      	mov	r3, r0
    7856:	2b00      	cmp	r3, #0
    7858:	d102      	bne.n	7860 <UTIL1_strFind+0x34>
      return i; /* found */
    785a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    785e:	e00e      	b.n	787e <UTIL1_strFind+0x52>
int16_t UTIL1_strFind(uint8_t *str, uint8_t *subStr)
{
  int16_t i, len;

  len = (int16_t)UTIL1_strlen((char*)subStr);
  for (i=0; *str!='\0'; i++, str++) {
    7860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    7864:	b29b      	uxth	r3, r3
    7866:	3301      	adds	r3, #1
    7868:	b29b      	uxth	r3, r3
    786a:	81fb      	strh	r3, [r7, #14]
    786c:	687b      	ldr	r3, [r7, #4]
    786e:	3301      	adds	r3, #1
    7870:	607b      	str	r3, [r7, #4]
    7872:	687b      	ldr	r3, [r7, #4]
    7874:	781b      	ldrb	r3, [r3, #0]
    7876:	2b00      	cmp	r3, #0
    7878:	d1e5      	bne.n	7846 <UTIL1_strFind+0x1a>
    if (UTIL1_strncmp((char*)str, (char*)subStr, len)==0) {
      return i; /* found */
    }
  }
  return -1; /* not found */
    787a:	f04f 33ff 	mov.w	r3, #4294967295
}
    787e:	4618      	mov	r0, r3
    7880:	3710      	adds	r7, #16
    7882:	46bd      	mov	sp, r7
    7884:	bd80      	pop	{r7, pc}
    7886:	bf00      	nop

00007888 <UTIL1_ScanSeparatedNumbers>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanSeparatedNumbers(const unsigned char **str, uint8_t *values, uint8_t nofValues, char separator, UTIL1_SeparatedNumberType numberType)
{
    7888:	b580      	push	{r7, lr}
    788a:	b088      	sub	sp, #32
    788c:	af00      	add	r7, sp, #0
    788e:	60f8      	str	r0, [r7, #12]
    7890:	60b9      	str	r1, [r7, #8]
    7892:	4611      	mov	r1, r2
    7894:	461a      	mov	r2, r3
    7896:	460b      	mov	r3, r1
    7898:	71fb      	strb	r3, [r7, #7]
    789a:	4613      	mov	r3, r2
    789c:	71bb      	strb	r3, [r7, #6]
  int i;
  uint8_t res;
  const unsigned char *p;

  if (nofValues<=1) {
    789e:	79fb      	ldrb	r3, [r7, #7]
    78a0:	2b01      	cmp	r3, #1
    78a2:	d801      	bhi.n	78a8 <UTIL1_ScanSeparatedNumbers+0x20>
    return ERR_FAILED; /* need at least two values */
    78a4:	231b      	movs	r3, #27
    78a6:	e047      	b.n	7938 <UTIL1_ScanSeparatedNumbers+0xb0>
  }
  p = *str;
    78a8:	68fb      	ldr	r3, [r7, #12]
    78aa:	681b      	ldr	r3, [r3, #0]
    78ac:	617b      	str	r3, [r7, #20]
  for(i=0;i<nofValues;i++) {
    78ae:	2300      	movs	r3, #0
    78b0:	61fb      	str	r3, [r7, #28]
    78b2:	e039      	b.n	7928 <UTIL1_ScanSeparatedNumbers+0xa0>
    if (numberType==UTIL1_SEP_NUM_TYPE_UINT8) {
    78b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    78b8:	2b00      	cmp	r3, #0
    78ba:	d10b      	bne.n	78d4 <UTIL1_ScanSeparatedNumbers+0x4c>
      res = UTIL1_ScanDecimal8uNumber(&p, &values[i]);
    78bc:	69fb      	ldr	r3, [r7, #28]
    78be:	68ba      	ldr	r2, [r7, #8]
    78c0:	441a      	add	r2, r3
    78c2:	f107 0314 	add.w	r3, r7, #20
    78c6:	4611      	mov	r1, r2
    78c8:	4618      	mov	r0, r3
    78ca:	f7ff fb81 	bl	6fd0 <UTIL1_ScanDecimal8uNumber>
    78ce:	4603      	mov	r3, r0
    78d0:	76fb      	strb	r3, [r7, #27]
    78d2:	e011      	b.n	78f8 <UTIL1_ScanSeparatedNumbers+0x70>
    } else if (numberType==UTIL1_SEP_NUM_TYPE_UINT8_HEX_NO_PREFIX) {
    78d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    78d8:	2b01      	cmp	r3, #1
    78da:	d10b      	bne.n	78f4 <UTIL1_ScanSeparatedNumbers+0x6c>
      res = UTIL1_ScanHex8uNumberNoPrefix(&p, &values[i]);
    78dc:	69fb      	ldr	r3, [r7, #28]
    78de:	68ba      	ldr	r2, [r7, #8]
    78e0:	441a      	add	r2, r3
    78e2:	f107 0314 	add.w	r3, r7, #20
    78e6:	4611      	mov	r1, r2
    78e8:	4618      	mov	r0, r3
    78ea:	f7ff fecb 	bl	7684 <UTIL1_ScanHex8uNumberNoPrefix>
    78ee:	4603      	mov	r3, r0
    78f0:	76fb      	strb	r3, [r7, #27]
    78f2:	e001      	b.n	78f8 <UTIL1_ScanSeparatedNumbers+0x70>
    } else {
      res = ERR_FAILED;
    78f4:	231b      	movs	r3, #27
    78f6:	76fb      	strb	r3, [r7, #27]
    }
    if (res==ERR_OK) { /* parsing ok */
    78f8:	7efb      	ldrb	r3, [r7, #27]
    78fa:	2b00      	cmp	r3, #0
    78fc:	d10f      	bne.n	791e <UTIL1_ScanSeparatedNumbers+0x96>
      if (i!=nofValues-1) {
    78fe:	79fb      	ldrb	r3, [r7, #7]
    7900:	1e5a      	subs	r2, r3, #1
    7902:	69fb      	ldr	r3, [r7, #28]
    7904:	429a      	cmp	r2, r3
    7906:	d00c      	beq.n	7922 <UTIL1_ScanSeparatedNumbers+0x9a>
        if ((*p)!=separator) { /* not last one */
    7908:	697b      	ldr	r3, [r7, #20]
    790a:	781b      	ldrb	r3, [r3, #0]
    790c:	79ba      	ldrb	r2, [r7, #6]
    790e:	429a      	cmp	r2, r3
    7910:	d001      	beq.n	7916 <UTIL1_ScanSeparatedNumbers+0x8e>
          return ERR_FAILED; /* wrong separator */
    7912:	231b      	movs	r3, #27
    7914:	e010      	b.n	7938 <UTIL1_ScanSeparatedNumbers+0xb0>
        } /* if */
        p++; /* skip separator and continue scanning */
    7916:	697b      	ldr	r3, [r7, #20]
    7918:	3301      	adds	r3, #1
    791a:	617b      	str	r3, [r7, #20]
    791c:	e001      	b.n	7922 <UTIL1_ScanSeparatedNumbers+0x9a>
      } /* if */
    } else {
      return ERR_FAILED; /* failed parsing number */
    791e:	231b      	movs	r3, #27
    7920:	e00a      	b.n	7938 <UTIL1_ScanSeparatedNumbers+0xb0>

  if (nofValues<=1) {
    return ERR_FAILED; /* need at least two values */
  }
  p = *str;
  for(i=0;i<nofValues;i++) {
    7922:	69fb      	ldr	r3, [r7, #28]
    7924:	3301      	adds	r3, #1
    7926:	61fb      	str	r3, [r7, #28]
    7928:	79fa      	ldrb	r2, [r7, #7]
    792a:	69fb      	ldr	r3, [r7, #28]
    792c:	429a      	cmp	r2, r3
    792e:	dcc1      	bgt.n	78b4 <UTIL1_ScanSeparatedNumbers+0x2c>
      } /* if */
    } else {
      return ERR_FAILED; /* failed parsing number */
    } /* if */
  } /* for */
  *str = p;
    7930:	697a      	ldr	r2, [r7, #20]
    7932:	68fb      	ldr	r3, [r7, #12]
    7934:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    7936:	2300      	movs	r3, #0
}
    7938:	4618      	mov	r0, r3
    793a:	3720      	adds	r7, #32
    793c:	46bd      	mov	sp, r7
    793e:	bd80      	pop	{r7, pc}

00007940 <UTIL1_ScanDoubleQuotedString>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint8_t UTIL1_ScanDoubleQuotedString(const uint8_t **cmd, uint8_t *buf, size_t bufSize)
{
    7940:	b480      	push	{r7}
    7942:	b087      	sub	sp, #28
    7944:	af00      	add	r7, sp, #0
    7946:	60f8      	str	r0, [r7, #12]
    7948:	60b9      	str	r1, [r7, #8]
    794a:	607a      	str	r2, [r7, #4]
  const uint8_t *p = *cmd;
    794c:	68fb      	ldr	r3, [r7, #12]
    794e:	681b      	ldr	r3, [r3, #0]
    7950:	617b      	str	r3, [r7, #20]

  if (bufSize==1) {
    7952:	687b      	ldr	r3, [r7, #4]
    7954:	2b01      	cmp	r3, #1
    7956:	d101      	bne.n	795c <UTIL1_ScanDoubleQuotedString+0x1c>
    return ERR_FAILED; /* buffer too small */
    7958:	231b      	movs	r3, #27
    795a:	e038      	b.n	79ce <UTIL1_ScanDoubleQuotedString+0x8e>
  }
  buf[bufSize-1] = '\0'; /* terminate buffer */
    795c:	687b      	ldr	r3, [r7, #4]
    795e:	3b01      	subs	r3, #1
    7960:	68ba      	ldr	r2, [r7, #8]
    7962:	4413      	add	r3, r2
    7964:	2200      	movs	r2, #0
    7966:	701a      	strb	r2, [r3, #0]
  bufSize--;
    7968:	687b      	ldr	r3, [r7, #4]
    796a:	3b01      	subs	r3, #1
    796c:	607b      	str	r3, [r7, #4]
  if (*p!='\"') {
    796e:	697b      	ldr	r3, [r7, #20]
    7970:	781b      	ldrb	r3, [r3, #0]
    7972:	2b22      	cmp	r3, #34	; 0x22
    7974:	d001      	beq.n	797a <UTIL1_ScanDoubleQuotedString+0x3a>
    return ERR_FAILED; /* does not start with double quote */
    7976:	231b      	movs	r3, #27
    7978:	e029      	b.n	79ce <UTIL1_ScanDoubleQuotedString+0x8e>
  }
  p++; /* skip double quote */
    797a:	697b      	ldr	r3, [r7, #20]
    797c:	3301      	adds	r3, #1
    797e:	617b      	str	r3, [r7, #20]
  while(*p!='\"' && *p!='\0' && bufSize>0) {
    7980:	e00a      	b.n	7998 <UTIL1_ScanDoubleQuotedString+0x58>
    *buf++ = *p++;
    7982:	68bb      	ldr	r3, [r7, #8]
    7984:	1c5a      	adds	r2, r3, #1
    7986:	60ba      	str	r2, [r7, #8]
    7988:	697a      	ldr	r2, [r7, #20]
    798a:	1c51      	adds	r1, r2, #1
    798c:	6179      	str	r1, [r7, #20]
    798e:	7812      	ldrb	r2, [r2, #0]
    7990:	701a      	strb	r2, [r3, #0]
    bufSize--;
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	3b01      	subs	r3, #1
    7996:	607b      	str	r3, [r7, #4]
  bufSize--;
  if (*p!='\"') {
    return ERR_FAILED; /* does not start with double quote */
  }
  p++; /* skip double quote */
  while(*p!='\"' && *p!='\0' && bufSize>0) {
    7998:	697b      	ldr	r3, [r7, #20]
    799a:	781b      	ldrb	r3, [r3, #0]
    799c:	2b22      	cmp	r3, #34	; 0x22
    799e:	d006      	beq.n	79ae <UTIL1_ScanDoubleQuotedString+0x6e>
    79a0:	697b      	ldr	r3, [r7, #20]
    79a2:	781b      	ldrb	r3, [r3, #0]
    79a4:	2b00      	cmp	r3, #0
    79a6:	d002      	beq.n	79ae <UTIL1_ScanDoubleQuotedString+0x6e>
    79a8:	687b      	ldr	r3, [r7, #4]
    79aa:	2b00      	cmp	r3, #0
    79ac:	d1e9      	bne.n	7982 <UTIL1_ScanDoubleQuotedString+0x42>
    *buf++ = *p++;
    bufSize--;
  }
  if (*p!='\"') {
    79ae:	697b      	ldr	r3, [r7, #20]
    79b0:	781b      	ldrb	r3, [r3, #0]
    79b2:	2b22      	cmp	r3, #34	; 0x22
    79b4:	d001      	beq.n	79ba <UTIL1_ScanDoubleQuotedString+0x7a>
    return ERR_FAILED; /* no terminating double quote */
    79b6:	231b      	movs	r3, #27
    79b8:	e009      	b.n	79ce <UTIL1_ScanDoubleQuotedString+0x8e>
  } else {
    p++; /* skip double quote */
    79ba:	697b      	ldr	r3, [r7, #20]
    79bc:	3301      	adds	r3, #1
    79be:	617b      	str	r3, [r7, #20]
    *buf = '\0'; /* terminate buffer */
    79c0:	68bb      	ldr	r3, [r7, #8]
    79c2:	2200      	movs	r2, #0
    79c4:	701a      	strb	r2, [r3, #0]
  }
  *cmd = p; /* advance pointer */
    79c6:	68fb      	ldr	r3, [r7, #12]
    79c8:	697a      	ldr	r2, [r7, #20]
    79ca:	601a      	str	r2, [r3, #0]
  return ERR_OK;
    79cc:	2300      	movs	r3, #0
}
    79ce:	4618      	mov	r0, r3
    79d0:	371c      	adds	r7, #28
    79d2:	46bd      	mov	sp, r7
    79d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    79d8:	4770      	bx	lr
    79da:	bf00      	nop

000079dc <UTIL1_strcatPad>:
**                           has to be padded.
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_strcatPad(uint8_t *dst, size_t dstSize, const unsigned char *src, char padChar, uint8_t srcPadSize)
{
    79dc:	b580      	push	{r7, lr}
    79de:	b086      	sub	sp, #24
    79e0:	af00      	add	r7, sp, #0
    79e2:	60f8      	str	r0, [r7, #12]
    79e4:	60b9      	str	r1, [r7, #8]
    79e6:	607a      	str	r2, [r7, #4]
    79e8:	70fb      	strb	r3, [r7, #3]
  uint8_t *p;
  size_t nof = 0;
    79ea:	2300      	movs	r3, #0
    79ec:	613b      	str	r3, [r7, #16]

  if (dstSize<2) {
    79ee:	68bb      	ldr	r3, [r7, #8]
    79f0:	2b01      	cmp	r3, #1
    79f2:	d94a      	bls.n	7a8a <UTIL1_strcatPad+0xae>
    return; /* hmm, really to small for anything than the zero byte? */
  }
  p = dst;
    79f4:	68fb      	ldr	r3, [r7, #12]
    79f6:	617b      	str	r3, [r7, #20]
  while(*p != '\0') { /* find end of string */
    79f8:	e005      	b.n	7a06 <UTIL1_strcatPad+0x2a>
    p++;
    79fa:	697b      	ldr	r3, [r7, #20]
    79fc:	3301      	adds	r3, #1
    79fe:	617b      	str	r3, [r7, #20]
    nof++;
    7a00:	693b      	ldr	r3, [r7, #16]
    7a02:	3301      	adds	r3, #1
    7a04:	613b      	str	r3, [r7, #16]

  if (dstSize<2) {
    return; /* hmm, really to small for anything than the zero byte? */
  }
  p = dst;
  while(*p != '\0') { /* find end of string */
    7a06:	697b      	ldr	r3, [r7, #20]
    7a08:	781b      	ldrb	r3, [r3, #0]
    7a0a:	2b00      	cmp	r3, #0
    7a0c:	d1f5      	bne.n	79fa <UTIL1_strcatPad+0x1e>
    p++;
    nof++;
  }
  UTIL1_strcat(dst+nof, dstSize-nof, src); /* add string */
    7a0e:	68fa      	ldr	r2, [r7, #12]
    7a10:	693b      	ldr	r3, [r7, #16]
    7a12:	18d0      	adds	r0, r2, r3
    7a14:	68ba      	ldr	r2, [r7, #8]
    7a16:	693b      	ldr	r3, [r7, #16]
    7a18:	1ad3      	subs	r3, r2, r3
    7a1a:	687a      	ldr	r2, [r7, #4]
    7a1c:	4619      	mov	r1, r3
    7a1e:	f7fe fa77 	bl	5f10 <UTIL1_strcat>
  dstSize -= nof;
    7a22:	68ba      	ldr	r2, [r7, #8]
    7a24:	693b      	ldr	r3, [r7, #16]
    7a26:	1ad3      	subs	r3, r2, r3
    7a28:	60bb      	str	r3, [r7, #8]
  while(*p != '\0' && srcPadSize>0 && dstSize>1) {
    7a2a:	e00a      	b.n	7a42 <UTIL1_strcatPad+0x66>
    p++;
    7a2c:	697b      	ldr	r3, [r7, #20]
    7a2e:	3301      	adds	r3, #1
    7a30:	617b      	str	r3, [r7, #20]
    srcPadSize--;
    7a32:	f897 3020 	ldrb.w	r3, [r7, #32]
    7a36:	3b01      	subs	r3, #1
    7a38:	f887 3020 	strb.w	r3, [r7, #32]
    dstSize--;
    7a3c:	68bb      	ldr	r3, [r7, #8]
    7a3e:	3b01      	subs	r3, #1
    7a40:	60bb      	str	r3, [r7, #8]
    p++;
    nof++;
  }
  UTIL1_strcat(dst+nof, dstSize-nof, src); /* add string */
  dstSize -= nof;
  while(*p != '\0' && srcPadSize>0 && dstSize>1) {
    7a42:	697b      	ldr	r3, [r7, #20]
    7a44:	781b      	ldrb	r3, [r3, #0]
    7a46:	2b00      	cmp	r3, #0
    7a48:	d014      	beq.n	7a74 <UTIL1_strcatPad+0x98>
    7a4a:	f897 3020 	ldrb.w	r3, [r7, #32]
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d010      	beq.n	7a74 <UTIL1_strcatPad+0x98>
    7a52:	68bb      	ldr	r3, [r7, #8]
    7a54:	2b01      	cmp	r3, #1
    7a56:	d8e9      	bhi.n	7a2c <UTIL1_strcatPad+0x50>
    p++;
    srcPadSize--;
    dstSize--;
  }
  while(srcPadSize>0 && dstSize>1) {
    7a58:	e00c      	b.n	7a74 <UTIL1_strcatPad+0x98>
    *p++ = padChar; /* add padding char */
    7a5a:	697b      	ldr	r3, [r7, #20]
    7a5c:	1c5a      	adds	r2, r3, #1
    7a5e:	617a      	str	r2, [r7, #20]
    7a60:	78fa      	ldrb	r2, [r7, #3]
    7a62:	701a      	strb	r2, [r3, #0]
    srcPadSize--;
    7a64:	f897 3020 	ldrb.w	r3, [r7, #32]
    7a68:	3b01      	subs	r3, #1
    7a6a:	f887 3020 	strb.w	r3, [r7, #32]
    dstSize--;
    7a6e:	68bb      	ldr	r3, [r7, #8]
    7a70:	3b01      	subs	r3, #1
    7a72:	60bb      	str	r3, [r7, #8]
  while(*p != '\0' && srcPadSize>0 && dstSize>1) {
    p++;
    srcPadSize--;
    dstSize--;
  }
  while(srcPadSize>0 && dstSize>1) {
    7a74:	f897 3020 	ldrb.w	r3, [r7, #32]
    7a78:	2b00      	cmp	r3, #0
    7a7a:	d002      	beq.n	7a82 <UTIL1_strcatPad+0xa6>
    7a7c:	68bb      	ldr	r3, [r7, #8]
    7a7e:	2b01      	cmp	r3, #1
    7a80:	d8eb      	bhi.n	7a5a <UTIL1_strcatPad+0x7e>
    *p++ = padChar; /* add padding char */
    srcPadSize--;
    dstSize--;
  }
  *p = '\0'; /* terminate string */
    7a82:	697b      	ldr	r3, [r7, #20]
    7a84:	2200      	movs	r2, #0
    7a86:	701a      	strb	r2, [r3, #0]
    7a88:	e000      	b.n	7a8c <UTIL1_strcatPad+0xb0>
{
  uint8_t *p;
  size_t nof = 0;

  if (dstSize<2) {
    return; /* hmm, really to small for anything than the zero byte? */
    7a8a:	bf00      	nop
    *p++ = padChar; /* add padding char */
    srcPadSize--;
    dstSize--;
  }
  *p = '\0'; /* terminate string */
}
    7a8c:	3718      	adds	r7, #24
    7a8e:	46bd      	mov	sp, r7
    7a90:	bd80      	pop	{r7, pc}
    7a92:	bf00      	nop

00007a94 <UTIL1_NumFloatToStr>:
**                           digits to print
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_NumFloatToStr(uint8_t *dst, size_t dstSize, float val, uint8_t nofFracDigits)
{
    7a94:	b580      	push	{r7, lr}
    7a96:	b08c      	sub	sp, #48	; 0x30
    7a98:	af02      	add	r7, sp, #8
    7a9a:	60f8      	str	r0, [r7, #12]
    7a9c:	60b9      	str	r1, [r7, #8]
    7a9e:	ed87 0a01 	vstr	s0, [r7, #4]
    7aa2:	4613      	mov	r3, r2
    7aa4:	70fb      	strb	r3, [r7, #3]
  uint32_t integral;
  uint32_t fractional, shift;
  int i;
  bool isNeg;

  isNeg = (bool)(val<0);
    7aa6:	edd7 7a01 	vldr	s15, [r7, #4]
    7aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    7aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7ab2:	bf4c      	ite	mi
    7ab4:	2301      	movmi	r3, #1
    7ab6:	2300      	movpl	r3, #0
    7ab8:	b2db      	uxtb	r3, r3
    7aba:	77fb      	strb	r3, [r7, #31]
  if (isNeg) {
    7abc:	7ffb      	ldrb	r3, [r7, #31]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	d005      	beq.n	7ace <UTIL1_NumFloatToStr+0x3a>
    val = -val; /* make it positive */
    7ac2:	edd7 7a01 	vldr	s15, [r7, #4]
    7ac6:	eef1 7a67 	vneg.f32	s15, s15
    7aca:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  integral = (uint32_t)(int32_t)val;
    7ace:	edd7 7a01 	vldr	s15, [r7, #4]
    7ad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7ad6:	ee17 3a90 	vmov	r3, s15
    7ada:	61bb      	str	r3, [r7, #24]
  val = val-(float)integral; /* get rid of integral part */
    7adc:	69bb      	ldr	r3, [r7, #24]
    7ade:	ee07 3a90 	vmov	s15, r3
    7ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    7ae6:	ed97 7a01 	vldr	s14, [r7, #4]
    7aea:	ee77 7a67 	vsub.f32	s15, s14, s15
    7aee:	edc7 7a01 	vstr	s15, [r7, #4]
  shift = 1;
    7af2:	2301      	movs	r3, #1
    7af4:	627b      	str	r3, [r7, #36]	; 0x24
  for(i=0;i<nofFracDigits;i++) {
    7af6:	2300      	movs	r3, #0
    7af8:	623b      	str	r3, [r7, #32]
    7afa:	e008      	b.n	7b0e <UTIL1_NumFloatToStr+0x7a>
    shift *= 10;
    7afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7afe:	4613      	mov	r3, r2
    7b00:	009b      	lsls	r3, r3, #2
    7b02:	4413      	add	r3, r2
    7b04:	005b      	lsls	r3, r3, #1
    7b06:	627b      	str	r3, [r7, #36]	; 0x24
    val = -val; /* make it positive */
  }
  integral = (uint32_t)(int32_t)val;
  val = val-(float)integral; /* get rid of integral part */
  shift = 1;
  for(i=0;i<nofFracDigits;i++) {
    7b08:	6a3b      	ldr	r3, [r7, #32]
    7b0a:	3301      	adds	r3, #1
    7b0c:	623b      	str	r3, [r7, #32]
    7b0e:	78fa      	ldrb	r2, [r7, #3]
    7b10:	6a3b      	ldr	r3, [r7, #32]
    7b12:	429a      	cmp	r2, r3
    7b14:	dcf2      	bgt.n	7afc <UTIL1_NumFloatToStr+0x68>
    shift *= 10;
  }
  /* get fractional part */
  fractional = (int32_t)(val*shift);
    7b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7b18:	ee07 3a90 	vmov	s15, r3
    7b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    7b20:	edd7 7a01 	vldr	s15, [r7, #4]
    7b24:	ee67 7a27 	vmul.f32	s15, s14, s15
    7b28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    7b2c:	ee17 3a90 	vmov	r3, s15
    7b30:	617b      	str	r3, [r7, #20]
  if (isNeg && fractional>0 && nofFracDigits>0) {
    7b32:	7ffb      	ldrb	r3, [r7, #31]
    7b34:	2b00      	cmp	r3, #0
    7b36:	d011      	beq.n	7b5c <UTIL1_NumFloatToStr+0xc8>
    7b38:	697b      	ldr	r3, [r7, #20]
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	d00e      	beq.n	7b5c <UTIL1_NumFloatToStr+0xc8>
    7b3e:	78fb      	ldrb	r3, [r7, #3]
    7b40:	2b00      	cmp	r3, #0
    7b42:	d00b      	beq.n	7b5c <UTIL1_NumFloatToStr+0xc8>
    UTIL1_strcpy(dst, dstSize, (unsigned char*)"-");
    7b44:	4a12      	ldr	r2, [pc, #72]	; (7b90 <UTIL1_NumFloatToStr+0xfc>)
    7b46:	68b9      	ldr	r1, [r7, #8]
    7b48:	68f8      	ldr	r0, [r7, #12]
    7b4a:	f7fe f9bb 	bl	5ec4 <UTIL1_strcpy>
    UTIL1_strcatNum32s(dst, dstSize, (int32_t)integral);
    7b4e:	69bb      	ldr	r3, [r7, #24]
    7b50:	461a      	mov	r2, r3
    7b52:	68b9      	ldr	r1, [r7, #8]
    7b54:	68f8      	ldr	r0, [r7, #12]
    7b56:	f7fe fdf1 	bl	673c <UTIL1_strcatNum32s>
    7b5a:	e005      	b.n	7b68 <UTIL1_NumFloatToStr+0xd4>
  } else {
    UTIL1_Num32sToStr(dst, dstSize, (int32_t)integral);
    7b5c:	69bb      	ldr	r3, [r7, #24]
    7b5e:	461a      	mov	r2, r3
    7b60:	68b9      	ldr	r1, [r7, #8]
    7b62:	68f8      	ldr	r0, [r7, #12]
    7b64:	f7fe fe1a 	bl	679c <UTIL1_Num32sToStr>
  }
  if (nofFracDigits>0) {
    7b68:	78fb      	ldrb	r3, [r7, #3]
    7b6a:	2b00      	cmp	r3, #0
    7b6c:	d00c      	beq.n	7b88 <UTIL1_NumFloatToStr+0xf4>
    UTIL1_chcat(dst, dstSize, '.');
    7b6e:	222e      	movs	r2, #46	; 0x2e
    7b70:	68b9      	ldr	r1, [r7, #8]
    7b72:	68f8      	ldr	r0, [r7, #12]
    7b74:	f7fe fa00 	bl	5f78 <UTIL1_chcat>
    UTIL1_strcatNum32uFormatted(dst, dstSize, fractional, '0', nofFracDigits);
    7b78:	78fb      	ldrb	r3, [r7, #3]
    7b7a:	9300      	str	r3, [sp, #0]
    7b7c:	2330      	movs	r3, #48	; 0x30
    7b7e:	697a      	ldr	r2, [r7, #20]
    7b80:	68b9      	ldr	r1, [r7, #8]
    7b82:	68f8      	ldr	r0, [r7, #12]
    7b84:	f7fe fcc6 	bl	6514 <UTIL1_strcatNum32uFormatted>
  }
}
    7b88:	bf00      	nop
    7b8a:	3728      	adds	r7, #40	; 0x28
    7b8c:	46bd      	mov	sp, r7
    7b8e:	bd80      	pop	{r7, pc}
    7b90:	0000fea4 	.word	0x0000fea4

00007b94 <UTIL1_strcatNumFloat>:
**                           digits to print
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_strcatNumFloat(uint8_t *dst, size_t dstSize, float val, uint8_t nofFracDigits)
{
    7b94:	b580      	push	{r7, lr}
    7b96:	b08c      	sub	sp, #48	; 0x30
    7b98:	af00      	add	r7, sp, #0
    7b9a:	60f8      	str	r0, [r7, #12]
    7b9c:	60b9      	str	r1, [r7, #8]
    7b9e:	ed87 0a01 	vstr	s0, [r7, #4]
    7ba2:	4613      	mov	r3, r2
    7ba4:	70fb      	strb	r3, [r7, #3]
  uint8_t buf[32];

  UTIL1_NumFloatToStr(buf, sizeof(buf), val, nofFracDigits);
    7ba6:	78fa      	ldrb	r2, [r7, #3]
    7ba8:	f107 0310 	add.w	r3, r7, #16
    7bac:	ed97 0a01 	vldr	s0, [r7, #4]
    7bb0:	2120      	movs	r1, #32
    7bb2:	4618      	mov	r0, r3
    7bb4:	f7ff ff6e 	bl	7a94 <UTIL1_NumFloatToStr>
  UTIL1_strcat(dst, dstSize, buf);
    7bb8:	f107 0310 	add.w	r3, r7, #16
    7bbc:	461a      	mov	r2, r3
    7bbe:	68b9      	ldr	r1, [r7, #8]
    7bc0:	68f8      	ldr	r0, [r7, #12]
    7bc2:	f7fe f9a5 	bl	5f10 <UTIL1_strcat>
}
    7bc6:	bf00      	nop
    7bc8:	3730      	adds	r7, #48	; 0x30
    7bca:	46bd      	mov	sp, r7
    7bcc:	bd80      	pop	{r7, pc}
    7bce:	bf00      	nop

00007bd0 <UTIL1_GetValue16LE>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint16_t UTIL1_GetValue16LE(uint8_t *dataP)
{
    7bd0:	b480      	push	{r7}
    7bd2:	b083      	sub	sp, #12
    7bd4:	af00      	add	r7, sp, #0
    7bd6:	6078      	str	r0, [r7, #4]
  return (uint16_t)((dataP[1]<<8)+(dataP[0]));
    7bd8:	687b      	ldr	r3, [r7, #4]
    7bda:	3301      	adds	r3, #1
    7bdc:	781b      	ldrb	r3, [r3, #0]
    7bde:	b29b      	uxth	r3, r3
    7be0:	021b      	lsls	r3, r3, #8
    7be2:	b29a      	uxth	r2, r3
    7be4:	687b      	ldr	r3, [r7, #4]
    7be6:	781b      	ldrb	r3, [r3, #0]
    7be8:	b29b      	uxth	r3, r3
    7bea:	4413      	add	r3, r2
    7bec:	b29b      	uxth	r3, r3
}
    7bee:	4618      	mov	r0, r3
    7bf0:	370c      	adds	r7, #12
    7bf2:	46bd      	mov	sp, r7
    7bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
    7bf8:	4770      	bx	lr
    7bfa:	bf00      	nop

00007bfc <UTIL1_GetValue24LE>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint32_t UTIL1_GetValue24LE(uint8_t *dataP)
{
    7bfc:	b480      	push	{r7}
    7bfe:	b083      	sub	sp, #12
    7c00:	af00      	add	r7, sp, #0
    7c02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(((uint32_t)dataP[2])<<16)+(dataP[1]<<8)+(dataP[0]);
    7c04:	687b      	ldr	r3, [r7, #4]
    7c06:	3302      	adds	r3, #2
    7c08:	781b      	ldrb	r3, [r3, #0]
    7c0a:	041b      	lsls	r3, r3, #16
    7c0c:	687a      	ldr	r2, [r7, #4]
    7c0e:	3201      	adds	r2, #1
    7c10:	7812      	ldrb	r2, [r2, #0]
    7c12:	0212      	lsls	r2, r2, #8
    7c14:	4413      	add	r3, r2
    7c16:	687a      	ldr	r2, [r7, #4]
    7c18:	7812      	ldrb	r2, [r2, #0]
    7c1a:	4413      	add	r3, r2
}
    7c1c:	4618      	mov	r0, r3
    7c1e:	370c      	adds	r7, #12
    7c20:	46bd      	mov	sp, r7
    7c22:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c26:	4770      	bx	lr

00007c28 <UTIL1_GetValue32LE>:
**     Returns     :
**         ---             - Error code
** ===================================================================
*/
uint32_t UTIL1_GetValue32LE(uint8_t *dataP)
{
    7c28:	b480      	push	{r7}
    7c2a:	b083      	sub	sp, #12
    7c2c:	af00      	add	r7, sp, #0
    7c2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(((uint32_t)dataP[3])<<24)+(((uint32_t)dataP[2])<<16)+(dataP[1]<<8)+(dataP[0]);
    7c30:	687b      	ldr	r3, [r7, #4]
    7c32:	3303      	adds	r3, #3
    7c34:	781b      	ldrb	r3, [r3, #0]
    7c36:	061a      	lsls	r2, r3, #24
    7c38:	687b      	ldr	r3, [r7, #4]
    7c3a:	3302      	adds	r3, #2
    7c3c:	781b      	ldrb	r3, [r3, #0]
    7c3e:	041b      	lsls	r3, r3, #16
    7c40:	4413      	add	r3, r2
    7c42:	687a      	ldr	r2, [r7, #4]
    7c44:	3201      	adds	r2, #1
    7c46:	7812      	ldrb	r2, [r2, #0]
    7c48:	0212      	lsls	r2, r2, #8
    7c4a:	4413      	add	r3, r2
    7c4c:	687a      	ldr	r2, [r7, #4]
    7c4e:	7812      	ldrb	r2, [r2, #0]
    7c50:	4413      	add	r3, r2
}
    7c52:	4618      	mov	r0, r3
    7c54:	370c      	adds	r7, #12
    7c56:	46bd      	mov	sp, r7
    7c58:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c5c:	4770      	bx	lr
    7c5e:	bf00      	nop

00007c60 <UTIL1_SetValue16LE>:
**       * dataP           - Pointer to memory
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_SetValue16LE(uint16_t data, uint8_t *dataP)
{
    7c60:	b480      	push	{r7}
    7c62:	b083      	sub	sp, #12
    7c64:	af00      	add	r7, sp, #0
    7c66:	4603      	mov	r3, r0
    7c68:	6039      	str	r1, [r7, #0]
    7c6a:	80fb      	strh	r3, [r7, #6]
  dataP[0] = (uint8_t)(data&0xff); /* LSB */
    7c6c:	88fb      	ldrh	r3, [r7, #6]
    7c6e:	b2da      	uxtb	r2, r3
    7c70:	683b      	ldr	r3, [r7, #0]
    7c72:	701a      	strb	r2, [r3, #0]
  dataP[1] = (uint8_t)((data>>8)&0xff); /* MSB */
    7c74:	683b      	ldr	r3, [r7, #0]
    7c76:	3301      	adds	r3, #1
    7c78:	88fa      	ldrh	r2, [r7, #6]
    7c7a:	0a12      	lsrs	r2, r2, #8
    7c7c:	b292      	uxth	r2, r2
    7c7e:	b2d2      	uxtb	r2, r2
    7c80:	701a      	strb	r2, [r3, #0]
}
    7c82:	bf00      	nop
    7c84:	370c      	adds	r7, #12
    7c86:	46bd      	mov	sp, r7
    7c88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7c8c:	4770      	bx	lr
    7c8e:	bf00      	nop

00007c90 <UTIL1_SetValue24LE>:
**       * dataP           - Pointer to memory
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_SetValue24LE(uint32_t data, uint8_t *dataP)
{
    7c90:	b480      	push	{r7}
    7c92:	b083      	sub	sp, #12
    7c94:	af00      	add	r7, sp, #0
    7c96:	6078      	str	r0, [r7, #4]
    7c98:	6039      	str	r1, [r7, #0]
  dataP[0] = (uint8_t)(data&0xff); /* LSB */
    7c9a:	687b      	ldr	r3, [r7, #4]
    7c9c:	b2da      	uxtb	r2, r3
    7c9e:	683b      	ldr	r3, [r7, #0]
    7ca0:	701a      	strb	r2, [r3, #0]
  dataP[1] = (uint8_t)((data>>8)&0xff);
    7ca2:	683b      	ldr	r3, [r7, #0]
    7ca4:	3301      	adds	r3, #1
    7ca6:	687a      	ldr	r2, [r7, #4]
    7ca8:	0a12      	lsrs	r2, r2, #8
    7caa:	b2d2      	uxtb	r2, r2
    7cac:	701a      	strb	r2, [r3, #0]
  dataP[2] = (uint8_t)((data>>16)&0xff);
    7cae:	683b      	ldr	r3, [r7, #0]
    7cb0:	3302      	adds	r3, #2
    7cb2:	687a      	ldr	r2, [r7, #4]
    7cb4:	0c12      	lsrs	r2, r2, #16
    7cb6:	b2d2      	uxtb	r2, r2
    7cb8:	701a      	strb	r2, [r3, #0]
}
    7cba:	bf00      	nop
    7cbc:	370c      	adds	r7, #12
    7cbe:	46bd      	mov	sp, r7
    7cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    7cc4:	4770      	bx	lr
    7cc6:	bf00      	nop

00007cc8 <UTIL1_SetValue32LE>:
**       * dataP           - Pointer to memory
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_SetValue32LE(uint32_t data, uint8_t *dataP)
{
    7cc8:	b480      	push	{r7}
    7cca:	b083      	sub	sp, #12
    7ccc:	af00      	add	r7, sp, #0
    7cce:	6078      	str	r0, [r7, #4]
    7cd0:	6039      	str	r1, [r7, #0]
  dataP[0] = (uint8_t)(data&0xff); /* LSB */
    7cd2:	687b      	ldr	r3, [r7, #4]
    7cd4:	b2da      	uxtb	r2, r3
    7cd6:	683b      	ldr	r3, [r7, #0]
    7cd8:	701a      	strb	r2, [r3, #0]
  dataP[1] = (uint8_t)((data>>8)&0xff);
    7cda:	683b      	ldr	r3, [r7, #0]
    7cdc:	3301      	adds	r3, #1
    7cde:	687a      	ldr	r2, [r7, #4]
    7ce0:	0a12      	lsrs	r2, r2, #8
    7ce2:	b2d2      	uxtb	r2, r2
    7ce4:	701a      	strb	r2, [r3, #0]
  dataP[2] = (uint8_t)((data>>16)&0xff);
    7ce6:	683b      	ldr	r3, [r7, #0]
    7ce8:	3302      	adds	r3, #2
    7cea:	687a      	ldr	r2, [r7, #4]
    7cec:	0c12      	lsrs	r2, r2, #16
    7cee:	b2d2      	uxtb	r2, r2
    7cf0:	701a      	strb	r2, [r3, #0]
  dataP[3] = (uint8_t)((data>>24)&0xff);
    7cf2:	683b      	ldr	r3, [r7, #0]
    7cf4:	3303      	adds	r3, #3
    7cf6:	687a      	ldr	r2, [r7, #4]
    7cf8:	0e12      	lsrs	r2, r2, #24
    7cfa:	b2d2      	uxtb	r2, r2
    7cfc:	701a      	strb	r2, [r3, #0]
}
    7cfe:	bf00      	nop
    7d00:	370c      	adds	r7, #12
    7d02:	46bd      	mov	sp, r7
    7d04:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d08:	4770      	bx	lr
    7d0a:	bf00      	nop

00007d0c <UTIL1_Deinit>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_Deinit(void)
{
    7d0c:	b480      	push	{r7}
    7d0e:	af00      	add	r7, sp, #0
  /* nothing needed */
}
    7d10:	bf00      	nop
    7d12:	46bd      	mov	sp, r7
    7d14:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d18:	4770      	bx	lr
    7d1a:	bf00      	nop

00007d1c <UTIL1_Init>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void UTIL1_Init(void)
{
    7d1c:	b480      	push	{r7}
    7d1e:	af00      	add	r7, sp, #0
  /* nothing needed */
}
    7d20:	bf00      	nop
    7d22:	46bd      	mov	sp, r7
    7d24:	f85d 7b04 	ldr.w	r7, [sp], #4
    7d28:	4770      	bx	lr
    7d2a:	bf00      	nop

00007d2c <WAIT1_Wait10Cycles>:
{
  /* This function will wait 10 CPU cycles (including call overhead). */
  /*lint -save -e522 function lacks side effect. */
  /* NOTE: Cortex-M0 and M4 have 1 cycle for a NOP */
  /* Compiler is GNUC */
  __asm (
    7d2c:	bf00      	nop
    7d2e:	bf00      	nop
    7d30:	bf00      	nop
    7d32:	4770      	bx	lr
   "nop   \n\t" /* [1] */
   "nop   \n\t" /* [1] */
   "bx lr \n\t" /* [3] */
  );
  /*lint -restore */
}
    7d34:	bf00      	nop
    7d36:	bf00      	nop

00007d38 <WAIT1_Wait100Cycles>:
*/
__attribute__((naked, no_instrument_function)) void WAIT1_Wait100Cycles(void)
{
  /* This function will spend 100 CPU cycles (including call overhead). */
  /*lint -save -e522 function lacks side effect. */
  __asm (
    7d38:	b401      	push	{r0}
    7d3a:	2000      	movs	r0, #0

00007d3c <loop>:
    7d3c:	bf00      	nop
    7d3e:	bf00      	nop
    7d40:	bf00      	nop
    7d42:	bf00      	nop
    7d44:	f100 0001 	add.w	r0, r0, #1
    7d48:	2809      	cmp	r0, #9
    7d4a:	d9f7      	bls.n	7d3c <loop>
    7d4c:	bf00      	nop
    7d4e:	bf00      	nop
    7d50:	bf00      	nop
    7d52:	bf00      	nop
    7d54:	bf00      	nop
    7d56:	bf00      	nop
    7d58:	bf00      	nop
    7d5a:	bc01      	pop	{r0}
    7d5c:	4770      	bx	lr
   "nop         \n\t"        /* [1] */
   "pop {r0}    \n\t"        /* [2] */
   "bx lr       \n\t"        /* [3] */
  );
  /*lint -restore */
}
    7d5e:	bf00      	nop

00007d60 <WAIT1_WaitCycles>:
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_WaitCycles(uint16_t cycles)
{
    7d60:	b580      	push	{r7, lr}
    7d62:	b082      	sub	sp, #8
    7d64:	af00      	add	r7, sp, #0
    7d66:	4603      	mov	r3, r0
    7d68:	80fb      	strh	r3, [r7, #6]
  /*lint -save -e522 function lacks side effect. */
  while(cycles > 100) {
    7d6a:	e004      	b.n	7d76 <WAIT1_WaitCycles+0x16>
    WAIT1_Wait100Cycles();
    7d6c:	f7ff ffe4 	bl	7d38 <WAIT1_Wait100Cycles>
    cycles -= 100;
    7d70:	88fb      	ldrh	r3, [r7, #6]
    7d72:	3b64      	subs	r3, #100	; 0x64
    7d74:	80fb      	strh	r3, [r7, #6]
** ===================================================================
*/
void WAIT1_WaitCycles(uint16_t cycles)
{
  /*lint -save -e522 function lacks side effect. */
  while(cycles > 100) {
    7d76:	88fb      	ldrh	r3, [r7, #6]
    7d78:	2b64      	cmp	r3, #100	; 0x64
    7d7a:	d8f7      	bhi.n	7d6c <WAIT1_WaitCycles+0xc>
    WAIT1_Wait100Cycles();
    cycles -= 100;
  }
  while(cycles > 10) {
    7d7c:	e004      	b.n	7d88 <WAIT1_WaitCycles+0x28>
    WAIT1_Wait10Cycles();
    7d7e:	f7ff ffd5 	bl	7d2c <WAIT1_Wait10Cycles>
    cycles -= 10;
    7d82:	88fb      	ldrh	r3, [r7, #6]
    7d84:	3b0a      	subs	r3, #10
    7d86:	80fb      	strh	r3, [r7, #6]
  /*lint -save -e522 function lacks side effect. */
  while(cycles > 100) {
    WAIT1_Wait100Cycles();
    cycles -= 100;
  }
  while(cycles > 10) {
    7d88:	88fb      	ldrh	r3, [r7, #6]
    7d8a:	2b0a      	cmp	r3, #10
    7d8c:	d8f7      	bhi.n	7d7e <WAIT1_WaitCycles+0x1e>
    WAIT1_Wait10Cycles();
    cycles -= 10;
  }
  /*lint -restore */
}
    7d8e:	bf00      	nop
    7d90:	3708      	adds	r7, #8
    7d92:	46bd      	mov	sp, r7
    7d94:	bd80      	pop	{r7, pc}
    7d96:	bf00      	nop

00007d98 <WAIT1_WaitLongCycles>:
**         cycles          - The number of cycles to wait.
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_WaitLongCycles(uint32_t cycles)
{
    7d98:	b580      	push	{r7, lr}
    7d9a:	b082      	sub	sp, #8
    7d9c:	af00      	add	r7, sp, #0
    7d9e:	6078      	str	r0, [r7, #4]
  /*lint -save -e522 function lacks side effect. */
  while(cycles>60000) {
    7da0:	e008      	b.n	7db4 <WAIT1_WaitLongCycles+0x1c>
    WAIT1_WaitCycles(60000);
    7da2:	f64e 2060 	movw	r0, #60000	; 0xea60
    7da6:	f7ff ffdb 	bl	7d60 <WAIT1_WaitCycles>
    cycles -= 60000;
    7daa:	687b      	ldr	r3, [r7, #4]
    7dac:	f5a3 436a 	sub.w	r3, r3, #59904	; 0xea00
    7db0:	3b60      	subs	r3, #96	; 0x60
    7db2:	607b      	str	r3, [r7, #4]
** ===================================================================
*/
void WAIT1_WaitLongCycles(uint32_t cycles)
{
  /*lint -save -e522 function lacks side effect. */
  while(cycles>60000) {
    7db4:	687b      	ldr	r3, [r7, #4]
    7db6:	f64e 2260 	movw	r2, #60000	; 0xea60
    7dba:	4293      	cmp	r3, r2
    7dbc:	d8f1      	bhi.n	7da2 <WAIT1_WaitLongCycles+0xa>
    WAIT1_WaitCycles(60000);
    cycles -= 60000;
  }
  WAIT1_WaitCycles((uint16_t)cycles);
    7dbe:	687b      	ldr	r3, [r7, #4]
    7dc0:	b29b      	uxth	r3, r3
    7dc2:	4618      	mov	r0, r3
    7dc4:	f7ff ffcc 	bl	7d60 <WAIT1_WaitCycles>
  /*lint -restore */
}
    7dc8:	bf00      	nop
    7dca:	3708      	adds	r7, #8
    7dcc:	46bd      	mov	sp, r7
    7dce:	bd80      	pop	{r7, pc}

00007dd0 <WAIT1_Waitms>:
**                           wait
**     Returns     : Nothing
** ===================================================================
*/
void WAIT1_Waitms(uint16_t ms)
{
    7dd0:	b580      	push	{r7, lr}
    7dd2:	b084      	sub	sp, #16
    7dd4:	af00      	add	r7, sp, #0
    7dd6:	4603      	mov	r3, r0
    7dd8:	80fb      	strh	r3, [r7, #6]
  /*lint -save -e522 function lacks side effect. */
  uint32_t msCycles; /* cycles for 1 ms */

  /* static clock/speed configuration */
  msCycles = WAIT1_NofCyclesMs(1, WAIT1_INSTR_CLOCK_HZ);
    7dda:	f245 13eb 	movw	r3, #20971	; 0x51eb
    7dde:	60fb      	str	r3, [r7, #12]
  while(ms>0) {
    7de0:	e005      	b.n	7dee <WAIT1_Waitms+0x1e>
    WAIT1_WaitLongCycles(msCycles);
    7de2:	68f8      	ldr	r0, [r7, #12]
    7de4:	f7ff ffd8 	bl	7d98 <WAIT1_WaitLongCycles>
    ms--;
    7de8:	88fb      	ldrh	r3, [r7, #6]
    7dea:	3b01      	subs	r3, #1
    7dec:	80fb      	strh	r3, [r7, #6]
  /*lint -save -e522 function lacks side effect. */
  uint32_t msCycles; /* cycles for 1 ms */

  /* static clock/speed configuration */
  msCycles = WAIT1_NofCyclesMs(1, WAIT1_INSTR_CLOCK_HZ);
  while(ms>0) {
    7dee:	88fb      	ldrh	r3, [r7, #6]
    7df0:	2b00      	cmp	r3, #0
    7df2:	d1f6      	bne.n	7de2 <WAIT1_Waitms+0x12>
    WAIT1_WaitLongCycles(msCycles);
    ms--;
  }
  /*lint -restore */
}
    7df4:	bf00      	nop
    7df6:	3710      	adds	r7, #16
    7df8:	46bd      	mov	sp, r7
    7dfa:	bd80      	pop	{r7, pc}

00007dfc <XF1_xformat>:
 * @return The number of char emitted.
 *
 * @see xvformat
 */
unsigned XF1_xformat(void (*outchar)(void *,char), void *arg, const char * fmt, ...)
{
    7dfc:	b40c      	push	{r2, r3}
    7dfe:	b580      	push	{r7, lr}
    7e00:	b084      	sub	sp, #16
    7e02:	af00      	add	r7, sp, #0
    7e04:	6078      	str	r0, [r7, #4]
    7e06:	6039      	str	r1, [r7, #0]
  va_list list;
  unsigned count;

  va_start(list,fmt);
    7e08:	f107 031c 	add.w	r3, r7, #28
    7e0c:	60bb      	str	r3, [r7, #8]
  count = XF1_xvformat(outchar,arg,fmt,list);
    7e0e:	68bb      	ldr	r3, [r7, #8]
    7e10:	69ba      	ldr	r2, [r7, #24]
    7e12:	6839      	ldr	r1, [r7, #0]
    7e14:	6878      	ldr	r0, [r7, #4]
    7e16:	f000 f8bf 	bl	7f98 <XF1_xvformat>
    7e1a:	60f8      	str	r0, [r7, #12]
  va_end(list);
  return count;
    7e1c:	68fb      	ldr	r3, [r7, #12]
}
    7e1e:	4618      	mov	r0, r3
    7e20:	3710      	adds	r7, #16
    7e22:	46bd      	mov	sp, r7
    7e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    7e28:	b002      	add	sp, #8
    7e2a:	4770      	bx	lr

00007e2c <toUpperCase>:
 *
 * @param c - A char
 * @return The upper case if was in lower case.
 */
static char toUpperCase(char c)
{
    7e2c:	b480      	push	{r7}
    7e2e:	b083      	sub	sp, #12
    7e30:	af00      	add	r7, sp, #0
    7e32:	4603      	mov	r3, r0
    7e34:	71fb      	strb	r3, [r7, #7]
  return (char)(c >= 'a' && c <= 'z' ? c - ('a' - 'A') : c);
    7e36:	79fb      	ldrb	r3, [r7, #7]
    7e38:	2b60      	cmp	r3, #96	; 0x60
    7e3a:	d906      	bls.n	7e4a <toUpperCase+0x1e>
    7e3c:	79fb      	ldrb	r3, [r7, #7]
    7e3e:	2b7a      	cmp	r3, #122	; 0x7a
    7e40:	d803      	bhi.n	7e4a <toUpperCase+0x1e>
    7e42:	79fb      	ldrb	r3, [r7, #7]
    7e44:	3b20      	subs	r3, #32
    7e46:	b2db      	uxtb	r3, r3
    7e48:	e000      	b.n	7e4c <toUpperCase+0x20>
    7e4a:	79fb      	ldrb	r3, [r7, #7]
}
    7e4c:	4618      	mov	r0, r3
    7e4e:	370c      	adds	r7, #12
    7e50:	46bd      	mov	sp, r7
    7e52:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e56:	4770      	bx	lr

00007e58 <xstrlen>:
 *
 * @param s - C  string
 * @return The length of the string
*/
static unsigned xstrlen(const char *s)
{
    7e58:	b480      	push	{r7}
    7e5a:	b085      	sub	sp, #20
    7e5c:	af00      	add	r7, sp, #0
    7e5e:	6078      	str	r0, [r7, #4]
  unsigned count = 0;
    7e60:	2300      	movs	r3, #0
    7e62:	60fb      	str	r3, [r7, #12]

  if (s != 0)
    7e64:	687b      	ldr	r3, [r7, #4]
    7e66:	2b00      	cmp	r3, #0
    7e68:	d00a      	beq.n	7e80 <xstrlen+0x28>
  {
    while (*s)
    7e6a:	e005      	b.n	7e78 <xstrlen+0x20>
    {
      s++;
    7e6c:	687b      	ldr	r3, [r7, #4]
    7e6e:	3301      	adds	r3, #1
    7e70:	607b      	str	r3, [r7, #4]
      count++;
    7e72:	68fb      	ldr	r3, [r7, #12]
    7e74:	3301      	adds	r3, #1
    7e76:	60fb      	str	r3, [r7, #12]
{
  unsigned count = 0;

  if (s != 0)
  {
    while (*s)
    7e78:	687b      	ldr	r3, [r7, #4]
    7e7a:	781b      	ldrb	r3, [r3, #0]
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	d1f5      	bne.n	7e6c <xstrlen+0x14>
    {
      s++;
      count++;
    }
  }
  return count;
    7e80:	68fb      	ldr	r3, [r7, #12]
}
    7e82:	4618      	mov	r0, r3
    7e84:	3714      	adds	r7, #20
    7e86:	46bd      	mov	sp, r7
    7e88:	f85d 7b04 	ldr.w	r7, [sp], #4
    7e8c:	4770      	bx	lr
    7e8e:	bf00      	nop

00007e90 <outBuffer>:

static unsigned outBuffer(void (*myoutchar)(void *arg,char), void *arg, const char *buffer, int len, unsigned flags)
{
    7e90:	b580      	push	{r7, lr}
    7e92:	b086      	sub	sp, #24
    7e94:	af00      	add	r7, sp, #0
    7e96:	60f8      	str	r0, [r7, #12]
    7e98:	60b9      	str	r1, [r7, #8]
    7e9a:	607a      	str	r2, [r7, #4]
    7e9c:	603b      	str	r3, [r7, #0]
  unsigned count = 0;
    7e9e:	2300      	movs	r3, #0
    7ea0:	617b      	str	r3, [r7, #20]
  int i;

  for (i = 0; i < len ; i++)
    7ea2:	2300      	movs	r3, #0
    7ea4:	613b      	str	r3, [r7, #16]
    7ea6:	e020      	b.n	7eea <outBuffer+0x5a>
  {
    if (flags  & FLAG_UPPER)
    7ea8:	6a3b      	ldr	r3, [r7, #32]
    7eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    7eae:	2b00      	cmp	r3, #0
    7eb0:	d00d      	beq.n	7ece <outBuffer+0x3e>
    {
      (*myoutchar)(arg,toUpperCase(buffer[i]));
    7eb2:	693b      	ldr	r3, [r7, #16]
    7eb4:	687a      	ldr	r2, [r7, #4]
    7eb6:	4413      	add	r3, r2
    7eb8:	781b      	ldrb	r3, [r3, #0]
    7eba:	4618      	mov	r0, r3
    7ebc:	f7ff ffb6 	bl	7e2c <toUpperCase>
    7ec0:	4603      	mov	r3, r0
    7ec2:	461a      	mov	r2, r3
    7ec4:	68fb      	ldr	r3, [r7, #12]
    7ec6:	4611      	mov	r1, r2
    7ec8:	68b8      	ldr	r0, [r7, #8]
    7eca:	4798      	blx	r3
    7ecc:	e007      	b.n	7ede <outBuffer+0x4e>
    } else {
      (*myoutchar)(arg,buffer[i]);
    7ece:	693b      	ldr	r3, [r7, #16]
    7ed0:	687a      	ldr	r2, [r7, #4]
    7ed2:	4413      	add	r3, r2
    7ed4:	781a      	ldrb	r2, [r3, #0]
    7ed6:	68fb      	ldr	r3, [r7, #12]
    7ed8:	4611      	mov	r1, r2
    7eda:	68b8      	ldr	r0, [r7, #8]
    7edc:	4798      	blx	r3
    }
    count++;
    7ede:	697b      	ldr	r3, [r7, #20]
    7ee0:	3301      	adds	r3, #1
    7ee2:	617b      	str	r3, [r7, #20]
static unsigned outBuffer(void (*myoutchar)(void *arg,char), void *arg, const char *buffer, int len, unsigned flags)
{
  unsigned count = 0;
  int i;

  for (i = 0; i < len ; i++)
    7ee4:	693b      	ldr	r3, [r7, #16]
    7ee6:	3301      	adds	r3, #1
    7ee8:	613b      	str	r3, [r7, #16]
    7eea:	693a      	ldr	r2, [r7, #16]
    7eec:	683b      	ldr	r3, [r7, #0]
    7eee:	429a      	cmp	r2, r3
    7ef0:	dbda      	blt.n	7ea8 <outBuffer+0x18>
    } else {
      (*myoutchar)(arg,buffer[i]);
    }
    count++;
  }
  return count;
    7ef2:	697b      	ldr	r3, [r7, #20]
}
    7ef4:	4618      	mov	r0, r3
    7ef6:	3718      	adds	r7, #24
    7ef8:	46bd      	mov	sp, r7
    7efa:	bd80      	pop	{r7, pc}

00007efc <outChars>:

static unsigned outChars(void (*myoutchar)(void *arg,char), void *arg, char ch, int len)
{
    7efc:	b580      	push	{r7, lr}
    7efe:	b086      	sub	sp, #24
    7f00:	af00      	add	r7, sp, #0
    7f02:	60f8      	str	r0, [r7, #12]
    7f04:	60b9      	str	r1, [r7, #8]
    7f06:	603b      	str	r3, [r7, #0]
    7f08:	4613      	mov	r3, r2
    7f0a:	71fb      	strb	r3, [r7, #7]
  unsigned count = 0;
    7f0c:	2300      	movs	r3, #0
    7f0e:	617b      	str	r3, [r7, #20]

  while (len-- > 0)
    7f10:	e007      	b.n	7f22 <outChars+0x26>
  {
    (*myoutchar)(arg,ch);
    7f12:	79fa      	ldrb	r2, [r7, #7]
    7f14:	68fb      	ldr	r3, [r7, #12]
    7f16:	4611      	mov	r1, r2
    7f18:	68b8      	ldr	r0, [r7, #8]
    7f1a:	4798      	blx	r3
    count++;
    7f1c:	697b      	ldr	r3, [r7, #20]
    7f1e:	3301      	adds	r3, #1
    7f20:	617b      	str	r3, [r7, #20]

static unsigned outChars(void (*myoutchar)(void *arg,char), void *arg, char ch, int len)
{
  unsigned count = 0;

  while (len-- > 0)
    7f22:	683b      	ldr	r3, [r7, #0]
    7f24:	1e5a      	subs	r2, r3, #1
    7f26:	603a      	str	r2, [r7, #0]
    7f28:	2b00      	cmp	r3, #0
    7f2a:	dcf2      	bgt.n	7f12 <outChars+0x16>
  {
    (*myoutchar)(arg,ch);
    count++;
  }
  return count;
    7f2c:	697b      	ldr	r3, [r7, #20]
}
    7f2e:	4618      	mov	r0, r3
    7f30:	3718      	adds	r7, #24
    7f32:	46bd      	mov	sp, r7
    7f34:	bd80      	pop	{r7, pc}
    7f36:	bf00      	nop

00007f38 <putCharIntoBuf>:

static void putCharIntoBuf(void *arg, char c) {
    7f38:	b480      	push	{r7}
    7f3a:	b085      	sub	sp, #20
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	6078      	str	r0, [r7, #4]
    7f40:	460b      	mov	r3, r1
    7f42:	70fb      	strb	r3, [r7, #3]
  char **s = (char **)arg;
    7f44:	687b      	ldr	r3, [r7, #4]
    7f46:	60fb      	str	r3, [r7, #12]
  *(*s)++ = c;
    7f48:	68fb      	ldr	r3, [r7, #12]
    7f4a:	681b      	ldr	r3, [r3, #0]
    7f4c:	1c59      	adds	r1, r3, #1
    7f4e:	68fa      	ldr	r2, [r7, #12]
    7f50:	6011      	str	r1, [r2, #0]
    7f52:	78fa      	ldrb	r2, [r7, #3]
    7f54:	701a      	strb	r2, [r3, #0]
}
    7f56:	bf00      	nop
    7f58:	3714      	adds	r7, #20
    7f5a:	46bd      	mov	sp, r7
    7f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    7f60:	4770      	bx	lr
    7f62:	bf00      	nop

00007f64 <xsprintf>:

static int xsprintf(char *buf, const char *fmt, va_list args) {
    7f64:	b580      	push	{r7, lr}
    7f66:	b086      	sub	sp, #24
    7f68:	af00      	add	r7, sp, #0
    7f6a:	60f8      	str	r0, [r7, #12]
    7f6c:	60b9      	str	r1, [r7, #8]
    7f6e:	607a      	str	r2, [r7, #4]
  int res;

  res = XF1_xvformat(putCharIntoBuf, (void *)&buf, fmt, args);
    7f70:	f107 010c 	add.w	r1, r7, #12
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	68ba      	ldr	r2, [r7, #8]
    7f78:	4806      	ldr	r0, [pc, #24]	; (7f94 <xsprintf+0x30>)
    7f7a:	f000 f80d 	bl	7f98 <XF1_xvformat>
    7f7e:	4603      	mov	r3, r0
    7f80:	617b      	str	r3, [r7, #20]
  *buf = 0;
    7f82:	68fb      	ldr	r3, [r7, #12]
    7f84:	2200      	movs	r2, #0
    7f86:	701a      	strb	r2, [r3, #0]
  return res;
    7f88:	697b      	ldr	r3, [r7, #20]
}
    7f8a:	4618      	mov	r0, r3
    7f8c:	3718      	adds	r7, #24
    7f8e:	46bd      	mov	sp, r7
    7f90:	bd80      	pop	{r7, pc}
    7f92:	bf00      	nop
    7f94:	00007f39 	.word	0x00007f39

00007f98 <XF1_xvformat>:
 * @param args  -List parameters.
 *
 * @return The number of char emitted.
 */
unsigned XF1_xvformat(void (*outchar)(void *,char), void *arg, const char * fmt, va_list _args)
{
    7f98:	b580      	push	{r7, lr}
    7f9a:	b0a6      	sub	sp, #152	; 0x98
    7f9c:	af02      	add	r7, sp, #8
    7f9e:	60f8      	str	r0, [r7, #12]
    7fa0:	60b9      	str	r1, [r7, #8]
    7fa2:	607a      	str	r2, [r7, #4]
    7fa4:	603b      	str	r3, [r7, #0]
    unsigned count = 0;
    7fa6:	2300      	movs	r3, #0
    7fa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    int state = 0;
    7fac:	2300      	movs	r3, #0
    7fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char c;
    /*
     * Maximum size of one int in binary format .. + 1 (in 64 bit machine)
     */
    char buffer[65];
    char prefix[2] = {0,0};
    7fb2:	2300      	movs	r3, #0
    7fb4:	753b      	strb	r3, [r7, #20]
    7fb6:	2300      	movs	r3, #0
    7fb8:	757b      	strb	r3, [r7, #21]
    int prefixlen = 0;
    7fba:	2300      	movs	r3, #0
    7fbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    int width = 0 ,prec = 0;
    7fc0:	2300      	movs	r3, #0
    7fc2:	67fb      	str	r3, [r7, #124]	; 0x7c
    7fc4:	2300      	movs	r3, #0
    7fc6:	67bb      	str	r3, [r7, #120]	; 0x78
    unsigned  flags = 0;
    7fc8:	2300      	movs	r3, #0
    7fca:	677b      	str	r3, [r7, #116]	; 0x74
    unsigned radix = 2;
    7fcc:	2302      	movs	r3, #2
    7fce:	673b      	str	r3, [r7, #112]	; 0x70
    int length=0;
    7fd0:	2300      	movs	r3, #0
    7fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    char * out = buffer;
    7fd4:	f107 0318 	add.w	r3, r7, #24
    7fd8:	66bb      	str	r3, [r7, #104]	; 0x68
    unsigned long value = 0;
    7fda:	2300      	movs	r3, #0
    7fdc:	667b      	str	r3, [r7, #100]	; 0x64
#endif

#if VA_COPY
   va_list args;

   va_copy(args,_args);
    7fde:	683b      	ldr	r3, [r7, #0]
    7fe0:	613b      	str	r3, [r7, #16]
#else
   #define        args        _args
#endif
    while (*fmt)
    7fe2:	e26e      	b.n	84c2 <XF1_xvformat+0x52a>
    {
        c = *fmt++;
    7fe4:	687b      	ldr	r3, [r7, #4]
    7fe6:	1c5a      	adds	r2, r3, #1
    7fe8:	607a      	str	r2, [r7, #4]
    7fea:	781b      	ldrb	r3, [r3, #0]
    7fec:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

        if (c < ' ' || c > 'z')
    7ff0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    7ff4:	2b1f      	cmp	r3, #31
    7ff6:	d903      	bls.n	8000 <XF1_xvformat+0x68>
    7ff8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    7ffc:	2b7a      	cmp	r3, #122	; 0x7a
    7ffe:	d903      	bls.n	8008 <XF1_xvformat+0x70>
            cc = (int)CH_OTHER;
    8000:	2300      	movs	r3, #0
    8002:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    8006:	e008      	b.n	801a <XF1_xvformat+0x82>
        else
            cc = formatStates[c - ' '] & 0x0F;
    8008:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    800c:	3b20      	subs	r3, #32
    800e:	4ab8      	ldr	r2, [pc, #736]	; (82f0 <XF1_xvformat+0x358>)
    8010:	5cd3      	ldrb	r3, [r2, r3]
    8012:	f003 030f 	and.w	r3, r3, #15
    8016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

        state = formatStates[cc * 8 + state] >> 4;
    801a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    801e:	00da      	lsls	r2, r3, #3
    8020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    8024:	4413      	add	r3, r2
    8026:	4ab2      	ldr	r2, [pc, #712]	; (82f0 <XF1_xvformat+0x358>)
    8028:	5cd3      	ldrb	r3, [r2, r3]
    802a:	091b      	lsrs	r3, r3, #4
    802c:	b2db      	uxtb	r3, r3
    802e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

        switch (state)
    8032:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    8036:	3b01      	subs	r3, #1
    8038:	2b06      	cmp	r3, #6
    803a:	d811      	bhi.n	8060 <XF1_xvformat+0xc8>
    803c:	a201      	add	r2, pc, #4	; (adr r2, 8044 <XF1_xvformat+0xac>)
    803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8042:	bf00      	nop
    8044:	00008079 	.word	0x00008079
    8048:	00008107 	.word	0x00008107
    804c:	00008091 	.word	0x00008091
    8050:	000084c3 	.word	0x000084c3
    8054:	000080bd 	.word	0x000080bd
    8058:	000080f1 	.word	0x000080f1
    805c:	0000812b 	.word	0x0000812b
        {
            default:
            case    ST_NORMAL:
                (*outchar)(arg,c);
    8060:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
    8064:	68fb      	ldr	r3, [r7, #12]
    8066:	4611      	mov	r1, r2
    8068:	68b8      	ldr	r0, [r7, #8]
    806a:	4798      	blx	r3
                count++;
    806c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    8070:	3301      	adds	r3, #1
    8072:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                break;
    8076:	e224      	b.n	84c2 <XF1_xvformat+0x52a>

            case    ST_PERCENT:
                prefixlen = width = prec = 0;
    8078:	2300      	movs	r3, #0
    807a:	67bb      	str	r3, [r7, #120]	; 0x78
    807c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    807e:	67fb      	str	r3, [r7, #124]	; 0x7c
    8080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8082:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                flags = 0;
    8086:	2300      	movs	r3, #0
    8088:	677b      	str	r3, [r7, #116]	; 0x74
                length = 0;
    808a:	2300      	movs	r3, #0
    808c:	66fb      	str	r3, [r7, #108]	; 0x6c
                break;
    808e:	e218      	b.n	84c2 <XF1_xvformat+0x52a>

            case    ST_WIDTH:
                if (c == '*')
    8090:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    8094:	2b2a      	cmp	r3, #42	; 0x2a
    8096:	d105      	bne.n	80a4 <XF1_xvformat+0x10c>
                    width = (int)va_arg(args,int);
    8098:	693b      	ldr	r3, [r7, #16]
    809a:	1d1a      	adds	r2, r3, #4
    809c:	613a      	str	r2, [r7, #16]
    809e:	681b      	ldr	r3, [r3, #0]
    80a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    80a2:	e20e      	b.n	84c2 <XF1_xvformat+0x52a>
                else
                    width = width * 10 + (c - '0');
    80a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    80a6:	4613      	mov	r3, r2
    80a8:	009b      	lsls	r3, r3, #2
    80aa:	4413      	add	r3, r2
    80ac:	005b      	lsls	r3, r3, #1
    80ae:	461a      	mov	r2, r3
    80b0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    80b4:	3b30      	subs	r3, #48	; 0x30
    80b6:	4413      	add	r3, r2
    80b8:	67fb      	str	r3, [r7, #124]	; 0x7c
                break;
    80ba:	e202      	b.n	84c2 <XF1_xvformat+0x52a>

            case    ST_DOT:
                break;

            case    ST_PRECIS:
                flags |= FLAG_PREC;
    80bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    80be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    80c2:	677b      	str	r3, [r7, #116]	; 0x74
                if (c == '*')
    80c4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    80c8:	2b2a      	cmp	r3, #42	; 0x2a
    80ca:	d105      	bne.n	80d8 <XF1_xvformat+0x140>
                    prec = (int)va_arg(args,int);
    80cc:	693b      	ldr	r3, [r7, #16]
    80ce:	1d1a      	adds	r2, r3, #4
    80d0:	613a      	str	r2, [r7, #16]
    80d2:	681b      	ldr	r3, [r3, #0]
    80d4:	67bb      	str	r3, [r7, #120]	; 0x78
    80d6:	e1f4      	b.n	84c2 <XF1_xvformat+0x52a>
                else
                    prec = prec * 10 + (c - '0');
    80d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
    80da:	4613      	mov	r3, r2
    80dc:	009b      	lsls	r3, r3, #2
    80de:	4413      	add	r3, r2
    80e0:	005b      	lsls	r3, r3, #1
    80e2:	461a      	mov	r2, r3
    80e4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    80e8:	3b30      	subs	r3, #48	; 0x30
    80ea:	4413      	add	r3, r2
    80ec:	67bb      	str	r3, [r7, #120]	; 0x78
                break;
    80ee:	e1e8      	b.n	84c2 <XF1_xvformat+0x52a>

            case    ST_SIZE:
                switch (c)
    80f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    80f4:	2b6c      	cmp	r3, #108	; 0x6c
    80f6:	d000      	beq.n	80fa <XF1_xvformat+0x162>
                {
                    default:
                        break;
    80f8:	e004      	b.n	8104 <XF1_xvformat+0x16c>
                    case    'l':
                        flags |= FLAG_LONG;
    80fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    80fc:	f043 0301 	orr.w	r3, r3, #1
    8100:	677b      	str	r3, [r7, #116]	; 0x74
                        break;
    8102:	bf00      	nop
                }
                break;
    8104:	e1dd      	b.n	84c2 <XF1_xvformat+0x52a>

            case    ST_FLAG:
                switch (c)
    8106:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    810a:	2b2d      	cmp	r3, #45	; 0x2d
    810c:	d002      	beq.n	8114 <XF1_xvformat+0x17c>
    810e:	2b30      	cmp	r3, #48	; 0x30
    8110:	d005      	beq.n	811e <XF1_xvformat+0x186>
                {
                    default:
                        break;
    8112:	e009      	b.n	8128 <XF1_xvformat+0x190>
                    case    '-':
                        flags |= FLAG_LEFT;
    8114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8116:	f043 0310 	orr.w	r3, r3, #16
    811a:	677b      	str	r3, [r7, #116]	; 0x74
                        break;
    811c:	e004      	b.n	8128 <XF1_xvformat+0x190>
                    case    '0':
                        flags |= FLAG_ZERO;
    811e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8120:	f043 0304 	orr.w	r3, r3, #4
    8124:	677b      	str	r3, [r7, #116]	; 0x74
                        break;
    8126:	bf00      	nop
                }
                break;
    8128:	e1cb      	b.n	84c2 <XF1_xvformat+0x52a>

            case    ST_TYPE:

                switch (c)
    812a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    812e:	3b42      	subs	r3, #66	; 0x42
    8130:	2b36      	cmp	r3, #54	; 0x36
    8132:	d871      	bhi.n	8218 <XF1_xvformat+0x280>
    8134:	a201      	add	r2, pc, #4	; (adr r2, 813c <XF1_xvformat+0x1a4>)
    8136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    813a:	bf00      	nop
    813c:	000082dd 	.word	0x000082dd
    8140:	000082bd 	.word	0x000082bd
    8144:	00008219 	.word	0x00008219
    8148:	00008219 	.word	0x00008219
    814c:	00008219 	.word	0x00008219
    8150:	00008219 	.word	0x00008219
    8154:	00008219 	.word	0x00008219
    8158:	00008219 	.word	0x00008219
    815c:	00008219 	.word	0x00008219
    8160:	00008219 	.word	0x00008219
    8164:	00008219 	.word	0x00008219
    8168:	00008219 	.word	0x00008219
    816c:	00008219 	.word	0x00008219
    8170:	00008219 	.word	0x00008219
    8174:	0000821f 	.word	0x0000821f
    8178:	00008219 	.word	0x00008219
    817c:	00008219 	.word	0x00008219
    8180:	00008295 	.word	0x00008295
    8184:	00008219 	.word	0x00008219
    8188:	00008219 	.word	0x00008219
    818c:	00008219 	.word	0x00008219
    8190:	00008219 	.word	0x00008219
    8194:	00008263 	.word	0x00008263
    8198:	00008219 	.word	0x00008219
    819c:	00008219 	.word	0x00008219
    81a0:	00008219 	.word	0x00008219
    81a4:	00008219 	.word	0x00008219
    81a8:	00008219 	.word	0x00008219
    81ac:	00008219 	.word	0x00008219
    81b0:	00008219 	.word	0x00008219
    81b4:	00008219 	.word	0x00008219
    81b8:	00008219 	.word	0x00008219
    81bc:	00008247 	.word	0x00008247
    81c0:	000082c5 	.word	0x000082c5
    81c4:	00008279 	.word	0x00008279
    81c8:	00008219 	.word	0x00008219
    81cc:	00008219 	.word	0x00008219
    81d0:	00008219 	.word	0x00008219
    81d4:	00008219 	.word	0x00008219
    81d8:	00008279 	.word	0x00008279
    81dc:	00008219 	.word	0x00008219
    81e0:	00008219 	.word	0x00008219
    81e4:	00008219 	.word	0x00008219
    81e8:	00008219 	.word	0x00008219
    81ec:	00008219 	.word	0x00008219
    81f0:	00008255 	.word	0x00008255
    81f4:	00008227 	.word	0x00008227
    81f8:	00008219 	.word	0x00008219
    81fc:	00008219 	.word	0x00008219
    8200:	0000829d 	.word	0x0000829d
    8204:	00008219 	.word	0x00008219
    8208:	00008287 	.word	0x00008287
    820c:	00008219 	.word	0x00008219
    8210:	00008219 	.word	0x00008219
    8214:	0000826b 	.word	0x0000826b
                {
                    default:
                        length = 0;
    8218:	2300      	movs	r3, #0
    821a:	66fb      	str	r3, [r7, #108]	; 0x6c
                        break;
    821c:	e076      	b.n	830c <XF1_xvformat+0x374>

                        /*
                         * Pointer upper case
                         */
                    case    'P':
                        flags |= FLAG_UPPER;
    821e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8224:	677b      	str	r3, [r7, #116]	; 0x74

                        /*
                         * Pointer we assume sizeof(int) == sizeof(void *)
                         */
                    case    'p':
                        flags |= FLAG_INTEGER;
    8226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    822c:	677b      	str	r3, [r7, #116]	; 0x74
                        radix = 16;
    822e:	2310      	movs	r3, #16
    8230:	673b      	str	r3, [r7, #112]	; 0x70
                        prec = sizeof(void *) * 2;
    8232:	2308      	movs	r3, #8
    8234:	67bb      	str	r3, [r7, #120]	; 0x78
                        prefix[0] = '-';
    8236:	232d      	movs	r3, #45	; 0x2d
    8238:	753b      	strb	r3, [r7, #20]
                        prefix[1] = '>';
    823a:	233e      	movs	r3, #62	; 0x3e
    823c:	757b      	strb	r3, [r7, #21]
                        prefixlen = 2;
    823e:	2302      	movs	r3, #2
    8240:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                        break;
    8244:	e062      	b.n	830c <XF1_xvformat+0x374>

                        /*
                         * Binary number
                         */
                    case    'b':
                        flags |= FLAG_INTEGER;
    8246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    824c:	677b      	str	r3, [r7, #116]	; 0x74
                        radix = 2;
    824e:	2302      	movs	r3, #2
    8250:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
    8252:	e05b      	b.n	830c <XF1_xvformat+0x374>

                        /*
                         * Octal number
                         */
                    case    'o':
                        flags |= FLAG_INTEGER;
    8254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    825a:	677b      	str	r3, [r7, #116]	; 0x74
                        radix = 8;
    825c:	2308      	movs	r3, #8
    825e:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
    8260:	e054      	b.n	830c <XF1_xvformat+0x374>
                        /*
                         * Hex number upper case letter.
                         */
                    case    'X':
                            /* no break */
                        flags |= FLAG_UPPER;
    8262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8268:	677b      	str	r3, [r7, #116]	; 0x74

                        /*
                         * Hex number lower case
                         */
                    case    'x':
                        flags |= FLAG_INTEGER;
    826a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    826c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8270:	677b      	str	r3, [r7, #116]	; 0x74
                        radix = 16;
    8272:	2310      	movs	r3, #16
    8274:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
    8276:	e049      	b.n	830c <XF1_xvformat+0x374>
                        /*
                         * Integer number radix 10
                         */
                    case    'd':
                    case    'i':
                        flags |= FLAG_DECIMAL | FLAG_INTEGER;
    8278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    827a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
    827e:	677b      	str	r3, [r7, #116]	; 0x74
                        radix = 10;
    8280:	230a      	movs	r3, #10
    8282:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
    8284:	e042      	b.n	830c <XF1_xvformat+0x374>

                        /*
                         * Unsigned number
                         */
                    case    'u':
                        flags |= FLAG_INTEGER;
    8286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    828c:	677b      	str	r3, [r7, #116]	; 0x74
                        radix = 10;
    828e:	230a      	movs	r3, #10
    8290:	673b      	str	r3, [r7, #112]	; 0x70
                        break;
    8292:	e03b      	b.n	830c <XF1_xvformat+0x374>

                        /*
                         * Upper case string
                         */
                    case    'S':
                        flags |= FLAG_UPPER;
    8294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    829a:	677b      	str	r3, [r7, #116]	; 0x74

                        /*
                         * Normal string
                         */
                    case    's':
                        out = va_arg(args,char *);
    829c:	693b      	ldr	r3, [r7, #16]
    829e:	1d1a      	adds	r2, r3, #4
    82a0:	613a      	str	r2, [r7, #16]
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	66bb      	str	r3, [r7, #104]	; 0x68
                        if (out == 0)
    82a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    82a8:	2b00      	cmp	r3, #0
    82aa:	d101      	bne.n	82b0 <XF1_xvformat+0x318>
                            out = (char *)ms_null;
    82ac:	4b11      	ldr	r3, [pc, #68]	; (82f4 <XF1_xvformat+0x35c>)
    82ae:	66bb      	str	r3, [r7, #104]	; 0x68
                        length = (int)xstrlen(out);
    82b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    82b2:	f7ff fdd1 	bl	7e58 <xstrlen>
    82b6:	4603      	mov	r3, r0
    82b8:	66fb      	str	r3, [r7, #108]	; 0x6c
                        break;
    82ba:	e027      	b.n	830c <XF1_xvformat+0x374>

                        /*
                         * Upper case char
                         */
                    case    'C':
                        flags |= FLAG_UPPER;
    82bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    82be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    82c2:	677b      	str	r3, [r7, #116]	; 0x74

                        /*
                         * Char
                         */
                    case    'c':
                        out = buffer;
    82c4:	f107 0318 	add.w	r3, r7, #24
    82c8:	66bb      	str	r3, [r7, #104]	; 0x68
                        buffer[0] = (char)va_arg(args,int);
    82ca:	693b      	ldr	r3, [r7, #16]
    82cc:	1d1a      	adds	r2, r3, #4
    82ce:	613a      	str	r2, [r7, #16]
    82d0:	681b      	ldr	r3, [r3, #0]
    82d2:	b2db      	uxtb	r3, r3
    82d4:	763b      	strb	r3, [r7, #24]
                        length = 1;
    82d6:	2301      	movs	r3, #1
    82d8:	66fb      	str	r3, [r7, #108]	; 0x6c
                        break;
    82da:	e017      	b.n	830c <XF1_xvformat+0x374>

                        /**
                         * Boolean value
                         */
                    case 'B':
                            if (va_arg(args,int) != 0)
    82dc:	693b      	ldr	r3, [r7, #16]
    82de:	1d1a      	adds	r2, r3, #4
    82e0:	613a      	str	r2, [r7, #16]
    82e2:	681b      	ldr	r3, [r3, #0]
    82e4:	2b00      	cmp	r3, #0
    82e6:	d009      	beq.n	82fc <XF1_xvformat+0x364>
                                    out = (char*)ms_true;
    82e8:	4b03      	ldr	r3, [pc, #12]	; (82f8 <XF1_xvformat+0x360>)
    82ea:	66bb      	str	r3, [r7, #104]	; 0x68
    82ec:	e008      	b.n	8300 <XF1_xvformat+0x368>
    82ee:	bf00      	nop
    82f0:	0000fee0 	.word	0x0000fee0
    82f4:	0000fec8 	.word	0x0000fec8
    82f8:	0000fed0 	.word	0x0000fed0
                            else
                                    out = (char*)ms_false;
    82fc:	4b76      	ldr	r3, [pc, #472]	; (84d8 <XF1_xvformat+0x540>)
    82fe:	66bb      	str	r3, [r7, #104]	; 0x68

                        length = (int)xstrlen(out);
    8300:	6eb8      	ldr	r0, [r7, #104]	; 0x68
    8302:	f7ff fda9 	bl	7e58 <xstrlen>
    8306:	4603      	mov	r3, r0
    8308:	66fb      	str	r3, [r7, #108]	; 0x6c
                        break;
    830a:	bf00      	nop
                }

                /*
                 * Process integer number
                 */
                if (flags & FLAG_INTEGER)
    830c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8312:	2b00      	cmp	r3, #0
    8314:	d077      	beq.n	8406 <XF1_xvformat+0x46e>
                {
                    if (prec == 0)
    8316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8318:	2b00      	cmp	r3, #0
    831a:	d101      	bne.n	8320 <XF1_xvformat+0x388>
                        prec = 1;
    831c:	2301      	movs	r3, #1
    831e:	67bb      	str	r3, [r7, #120]	; 0x78

                    if ((flags & FLAG_VALUE) == 0)
    8320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    8326:	2b00      	cmp	r3, #0
    8328:	d11a      	bne.n	8360 <XF1_xvformat+0x3c8>
                    {
                        if (flags & FLAG_LONG)
    832a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    832c:	f003 0301 	and.w	r3, r3, #1
    8330:	2b00      	cmp	r3, #0
    8332:	d005      	beq.n	8340 <XF1_xvformat+0x3a8>
                        {
                            value = (long)va_arg(args,long);
    8334:	693b      	ldr	r3, [r7, #16]
    8336:	1d1a      	adds	r2, r3, #4
    8338:	613a      	str	r2, [r7, #16]
    833a:	681b      	ldr	r3, [r3, #0]
    833c:	667b      	str	r3, [r7, #100]	; 0x64
    833e:	e00f      	b.n	8360 <XF1_xvformat+0x3c8>
                        }
                                                else
                                                {
                                                        if (flags & FLAG_DECIMAL)
    8340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8342:	f003 0320 	and.w	r3, r3, #32
    8346:	2b00      	cmp	r3, #0
    8348:	d005      	beq.n	8356 <XF1_xvformat+0x3be>
                                                                value = (long)va_arg(args,int);
    834a:	693b      	ldr	r3, [r7, #16]
    834c:	1d1a      	adds	r2, r3, #4
    834e:	613a      	str	r2, [r7, #16]
    8350:	681b      	ldr	r3, [r3, #0]
    8352:	667b      	str	r3, [r7, #100]	; 0x64
    8354:	e004      	b.n	8360 <XF1_xvformat+0x3c8>
                                                        else
                                                                value = (long)va_arg(args,unsigned int);
    8356:	693b      	ldr	r3, [r7, #16]
    8358:	1d1a      	adds	r2, r3, #4
    835a:	613a      	str	r2, [r7, #16]
    835c:	681b      	ldr	r3, [r3, #0]
    835e:	667b      	str	r3, [r7, #100]	; 0x64
                                                }
                    }


                    if (flags & FLAG_DECIMAL)
    8360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8362:	f003 0320 	and.w	r3, r3, #32
    8366:	2b00      	cmp	r3, #0
    8368:	d009      	beq.n	837e <XF1_xvformat+0x3e6>
                    {
                        if (((long)value) < 0)
    836a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    836c:	2b00      	cmp	r3, #0
    836e:	da06      	bge.n	837e <XF1_xvformat+0x3e6>
                        {
                            value = ~value + 1;
    8370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    8372:	425b      	negs	r3, r3
    8374:	667b      	str	r3, [r7, #100]	; 0x64
                            flags |= FLAG_MINUS;
    8376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    837c:	677b      	str	r3, [r7, #116]	; 0x74
                        }
                    }

                    if ((flags & FLAG_BUFFER) == 0)
    837e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    8384:	2b00      	cmp	r3, #0
    8386:	d11a      	bne.n	83be <XF1_xvformat+0x426>
                        out = buffer + sizeof(buffer) - 1;
    8388:	f107 0318 	add.w	r3, r7, #24
    838c:	3340      	adds	r3, #64	; 0x40
    838e:	66bb      	str	r3, [r7, #104]	; 0x68

                    while (prec -- > 0 || value)
    8390:	e015      	b.n	83be <XF1_xvformat+0x426>
                    {
                        *out -- = ms_digits[(unsigned long)value % radix];
    8392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    8394:	1e5a      	subs	r2, r3, #1
    8396:	66ba      	str	r2, [r7, #104]	; 0x68
    8398:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    839a:	6f39      	ldr	r1, [r7, #112]	; 0x70
    839c:	fbb2 f1f1 	udiv	r1, r2, r1
    83a0:	6f38      	ldr	r0, [r7, #112]	; 0x70
    83a2:	fb00 f101 	mul.w	r1, r0, r1
    83a6:	1a52      	subs	r2, r2, r1
    83a8:	494c      	ldr	r1, [pc, #304]	; (84dc <XF1_xvformat+0x544>)
    83aa:	5c8a      	ldrb	r2, [r1, r2]
    83ac:	701a      	strb	r2, [r3, #0]
                        value /= radix;
    83ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    83b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    83b2:	fbb2 f3f3 	udiv	r3, r2, r3
    83b6:	667b      	str	r3, [r7, #100]	; 0x64
                        length ++;
    83b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    83ba:	3301      	adds	r3, #1
    83bc:	66fb      	str	r3, [r7, #108]	; 0x6c
                    }

                    if ((flags & FLAG_BUFFER) == 0)
                        out = buffer + sizeof(buffer) - 1;

                    while (prec -- > 0 || value)
    83be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    83c0:	1e5a      	subs	r2, r3, #1
    83c2:	67ba      	str	r2, [r7, #120]	; 0x78
    83c4:	2b00      	cmp	r3, #0
    83c6:	dce4      	bgt.n	8392 <XF1_xvformat+0x3fa>
    83c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    83ca:	2b00      	cmp	r3, #0
    83cc:	d1e1      	bne.n	8392 <XF1_xvformat+0x3fa>
                        *out -- = ms_digits[(unsigned long)value % radix];
                        value /= radix;
                        length ++;
                    };

                    out++;
    83ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    83d0:	3301      	adds	r3, #1
    83d2:	66bb      	str	r3, [r7, #104]	; 0x68

                    if (flags & FLAG_MINUS)
    83d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    83d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    83da:	2b00      	cmp	r3, #0
    83dc:	d013      	beq.n	8406 <XF1_xvformat+0x46e>
                    {
                        if (flags & FLAG_ZERO)
    83de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    83e0:	f003 0304 	and.w	r3, r3, #4
    83e4:	2b00      	cmp	r3, #0
    83e6:	d005      	beq.n	83f4 <XF1_xvformat+0x45c>
                        {
                            prefixlen = 1;
    83e8:	2301      	movs	r3, #1
    83ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            prefix[0] = '-';
    83ee:	232d      	movs	r3, #45	; 0x2d
    83f0:	753b      	strb	r3, [r7, #20]
    83f2:	e008      	b.n	8406 <XF1_xvformat+0x46e>
                        }
                        else
                        {
                            *--out = '-';
    83f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    83f6:	3b01      	subs	r3, #1
    83f8:	66bb      	str	r3, [r7, #104]	; 0x68
    83fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    83fc:	222d      	movs	r2, #45	; 0x2d
    83fe:	701a      	strb	r2, [r3, #0]
                            length++;
    8400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    8402:	3301      	adds	r3, #1
    8404:	66fb      	str	r3, [r7, #108]	; 0x6c
                        }
                    }

                }
                if (width && length > width)
    8406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8408:	2b00      	cmp	r3, #0
    840a:	d005      	beq.n	8418 <XF1_xvformat+0x480>
    840c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    840e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8410:	429a      	cmp	r2, r3
    8412:	dd01      	ble.n	8418 <XF1_xvformat+0x480>
                {
                    length = width;
    8414:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8416:	66fb      	str	r3, [r7, #108]	; 0x6c
                }

                padding = width - (length + prefixlen);
    8418:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    841a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    841e:	4413      	add	r3, r2
    8420:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8422:	1ad3      	subs	r3, r2, r3
    8424:	65fb      	str	r3, [r7, #92]	; 0x5c

                count += outBuffer(outchar,arg,prefix,prefixlen,0);
    8426:	f107 0214 	add.w	r2, r7, #20
    842a:	2300      	movs	r3, #0
    842c:	9300      	str	r3, [sp, #0]
    842e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    8432:	68b9      	ldr	r1, [r7, #8]
    8434:	68f8      	ldr	r0, [r7, #12]
    8436:	f7ff fd2b 	bl	7e90 <outBuffer>
    843a:	4602      	mov	r2, r0
    843c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    8440:	4413      	add	r3, r2
    8442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                if (!(flags & FLAG_LEFT))
    8446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8448:	f003 0310 	and.w	r3, r3, #16
    844c:	2b00      	cmp	r3, #0
    844e:	d112      	bne.n	8476 <XF1_xvformat+0x4de>
                    count += outChars(outchar,arg,(flags & FLAG_ZERO) ? '0' : ' ' , padding);
    8450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8452:	f003 0304 	and.w	r3, r3, #4
    8456:	2b00      	cmp	r3, #0
    8458:	d001      	beq.n	845e <XF1_xvformat+0x4c6>
    845a:	2230      	movs	r2, #48	; 0x30
    845c:	e000      	b.n	8460 <XF1_xvformat+0x4c8>
    845e:	2220      	movs	r2, #32
    8460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8462:	68b9      	ldr	r1, [r7, #8]
    8464:	68f8      	ldr	r0, [r7, #12]
    8466:	f7ff fd49 	bl	7efc <outChars>
    846a:	4602      	mov	r2, r0
    846c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    8470:	4413      	add	r3, r2
    8472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                count += outBuffer(outchar,arg,out,length,flags);
    8476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8478:	9300      	str	r3, [sp, #0]
    847a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    847c:	6eba      	ldr	r2, [r7, #104]	; 0x68
    847e:	68b9      	ldr	r1, [r7, #8]
    8480:	68f8      	ldr	r0, [r7, #12]
    8482:	f7ff fd05 	bl	7e90 <outBuffer>
    8486:	4602      	mov	r2, r0
    8488:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    848c:	4413      	add	r3, r2
    848e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                if (flags & FLAG_LEFT)
    8492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8494:	f003 0310 	and.w	r3, r3, #16
    8498:	2b00      	cmp	r3, #0
    849a:	d012      	beq.n	84c2 <XF1_xvformat+0x52a>
                    count += outChars(outchar,arg,(flags & FLAG_ZERO) ? '0' : ' ' , padding);
    849c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    849e:	f003 0304 	and.w	r3, r3, #4
    84a2:	2b00      	cmp	r3, #0
    84a4:	d001      	beq.n	84aa <XF1_xvformat+0x512>
    84a6:	2230      	movs	r2, #48	; 0x30
    84a8:	e000      	b.n	84ac <XF1_xvformat+0x514>
    84aa:	2220      	movs	r2, #32
    84ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    84ae:	68b9      	ldr	r1, [r7, #8]
    84b0:	68f8      	ldr	r0, [r7, #12]
    84b2:	f7ff fd23 	bl	7efc <outChars>
    84b6:	4602      	mov	r2, r0
    84b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    84bc:	4413      	add	r3, r2
    84be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

   va_copy(args,_args);
#else
   #define        args        _args
#endif
    while (*fmt)
    84c2:	687b      	ldr	r3, [r7, #4]
    84c4:	781b      	ldrb	r3, [r3, #0]
    84c6:	2b00      	cmp	r3, #0
    84c8:	f47f ad8c 	bne.w	7fe4 <XF1_xvformat+0x4c>
        }
    }

    va_end(args);

    return count;
    84cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
}
    84d0:	4618      	mov	r0, r3
    84d2:	3790      	adds	r7, #144	; 0x90
    84d4:	46bd      	mov	sp, r7
    84d6:	bd80      	pop	{r7, pc}
    84d8:	0000fed8 	.word	0x0000fed8
    84dc:	0000feb4 	.word	0x0000feb4

000084e0 <XF1_xsprintf>:
**         ---             - number of characters written, negative for
**                           error case
** ===================================================================
*/
int XF1_xsprintf(char *buf, const char *fmt, ...)
{
    84e0:	b40e      	push	{r1, r2, r3}
    84e2:	b580      	push	{r7, lr}
    84e4:	b085      	sub	sp, #20
    84e6:	af00      	add	r7, sp, #0
    84e8:	6078      	str	r0, [r7, #4]
  va_list args;
  int res;

  va_start(args,fmt);
    84ea:	f107 0320 	add.w	r3, r7, #32
    84ee:	60bb      	str	r3, [r7, #8]
  res = xsprintf(buf, fmt, args);
    84f0:	68ba      	ldr	r2, [r7, #8]
    84f2:	69f9      	ldr	r1, [r7, #28]
    84f4:	6878      	ldr	r0, [r7, #4]
    84f6:	f7ff fd35 	bl	7f64 <xsprintf>
    84fa:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return res;
    84fc:	68fb      	ldr	r3, [r7, #12]
}
    84fe:	4618      	mov	r0, r3
    8500:	3714      	adds	r7, #20
    8502:	46bd      	mov	sp, r7
    8504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    8508:	b003      	add	sp, #12
    850a:	4770      	bx	lr

0000850c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
    850c:	b580      	push	{r7, lr}
    850e:	b082      	sub	sp, #8
    8510:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
    8512:	201c      	movs	r0, #28
    8514:	f000 fad6 	bl	8ac4 <pvPortMalloc>
    8518:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
    851a:	687b      	ldr	r3, [r7, #4]
    851c:	2b00      	cmp	r3, #0
    851e:	d00d      	beq.n	853c <xEventGroupCreate+0x30>
		{
			pxEventBits->uxEventBits = 0;
    8520:	687b      	ldr	r3, [r7, #4]
    8522:	2200      	movs	r2, #0
    8524:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
    8526:	687b      	ldr	r3, [r7, #4]
    8528:	3304      	adds	r3, #4
    852a:	4618      	mov	r0, r3
    852c:	f000 fcc6 	bl	8ebc <vListInitialise>
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			traceEVENT_GROUP_CREATE( pxEventBits );
    8530:	687b      	ldr	r3, [r7, #4]
    8532:	4619      	mov	r1, r3
    8534:	2015      	movs	r0, #21
    8536:	f004 ffcf 	bl	d4d8 <prvTraceStoreEvent1>
    853a:	e002      	b.n	8542 <xEventGroupCreate+0x36>
		}
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
    853c:	2045      	movs	r0, #69	; 0x45
    853e:	f004 ff85 	bl	d44c <prvTraceStoreEvent0>
		}

		return ( EventGroupHandle_t ) pxEventBits;
    8542:	687b      	ldr	r3, [r7, #4]
	}
    8544:	4618      	mov	r0, r3
    8546:	3708      	adds	r7, #8
    8548:	46bd      	mov	sp, r7
    854a:	bd80      	pop	{r7, pc}

0000854c <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
    854c:	b580      	push	{r7, lr}
    854e:	b08a      	sub	sp, #40	; 0x28
    8550:	af00      	add	r7, sp, #0
    8552:	60f8      	str	r0, [r7, #12]
    8554:	60b9      	str	r1, [r7, #8]
    8556:	607a      	str	r2, [r7, #4]
    8558:	603b      	str	r3, [r7, #0]
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    855a:	68fb      	ldr	r3, [r7, #12]
    855c:	61fb      	str	r3, [r7, #28]
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    855e:	2300      	movs	r3, #0
    8560:	623b      	str	r3, [r7, #32]

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    8568:	2b00      	cmp	r3, #0
    856a:	d004      	beq.n	8576 <xEventGroupSync+0x2a>
    856c:	f04f 0050 	mov.w	r0, #80	; 0x50
    8570:	f380 8811 	msr	BASEPRI, r0
    8574:	e7fe      	b.n	8574 <xEventGroupSync+0x28>
	configASSERT( uxBitsToWaitFor != 0 );
    8576:	687b      	ldr	r3, [r7, #4]
    8578:	2b00      	cmp	r3, #0
    857a:	d104      	bne.n	8586 <xEventGroupSync+0x3a>
    857c:	f04f 0050 	mov.w	r0, #80	; 0x50
    8580:	f380 8811 	msr	BASEPRI, r0
    8584:	e7fe      	b.n	8584 <xEventGroupSync+0x38>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    8586:	f003 fc8b 	bl	bea0 <xTaskGetSchedulerState>
    858a:	4603      	mov	r3, r0
    858c:	2b00      	cmp	r3, #0
    858e:	d102      	bne.n	8596 <xEventGroupSync+0x4a>
    8590:	683b      	ldr	r3, [r7, #0]
    8592:	2b00      	cmp	r3, #0
    8594:	d101      	bne.n	859a <xEventGroupSync+0x4e>
    8596:	2301      	movs	r3, #1
    8598:	e000      	b.n	859c <xEventGroupSync+0x50>
    859a:	2300      	movs	r3, #0
    859c:	2b00      	cmp	r3, #0
    859e:	d104      	bne.n	85aa <xEventGroupSync+0x5e>
    85a0:	f04f 0050 	mov.w	r0, #80	; 0x50
    85a4:	f380 8811 	msr	BASEPRI, r0
    85a8:	e7fe      	b.n	85a8 <xEventGroupSync+0x5c>
	}
	#endif

	vTaskSuspendAll();
    85aa:	f002 fdb9 	bl	b120 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
    85ae:	69fb      	ldr	r3, [r7, #28]
    85b0:	681b      	ldr	r3, [r3, #0]
    85b2:	61bb      	str	r3, [r7, #24]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
    85b4:	68b9      	ldr	r1, [r7, #8]
    85b6:	68f8      	ldr	r0, [r7, #12]
    85b8:	f000 f976 	bl	88a8 <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
    85bc:	69ba      	ldr	r2, [r7, #24]
    85be:	68bb      	ldr	r3, [r7, #8]
    85c0:	431a      	orrs	r2, r3
    85c2:	687b      	ldr	r3, [r7, #4]
    85c4:	401a      	ands	r2, r3
    85c6:	687b      	ldr	r3, [r7, #4]
    85c8:	429a      	cmp	r2, r3
    85ca:	d10d      	bne.n	85e8 <xEventGroupSync+0x9c>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
    85cc:	69ba      	ldr	r2, [r7, #24]
    85ce:	68bb      	ldr	r3, [r7, #8]
    85d0:	4313      	orrs	r3, r2
    85d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    85d4:	69fb      	ldr	r3, [r7, #28]
    85d6:	681a      	ldr	r2, [r3, #0]
    85d8:	687b      	ldr	r3, [r7, #4]
    85da:	43db      	mvns	r3, r3
    85dc:	401a      	ands	r2, r3
    85de:	69fb      	ldr	r3, [r7, #28]
    85e0:	601a      	str	r2, [r3, #0]

			xTicksToWait = 0;
    85e2:	2300      	movs	r3, #0
    85e4:	603b      	str	r3, [r7, #0]
    85e6:	e017      	b.n	8618 <xEventGroupSync+0xcc>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
    85e8:	683b      	ldr	r3, [r7, #0]
    85ea:	2b00      	cmp	r3, #0
    85ec:	d011      	beq.n	8612 <xEventGroupSync+0xc6>
			{
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
    85ee:	68fb      	ldr	r3, [r7, #12]
    85f0:	687a      	ldr	r2, [r7, #4]
    85f2:	4619      	mov	r1, r3
    85f4:	20b6      	movs	r0, #182	; 0xb6
    85f6:	f004 ffbb 	bl	d570 <prvTraceStoreEvent2>

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
    85fa:	69fb      	ldr	r3, [r7, #28]
    85fc:	1d18      	adds	r0, r3, #4
    85fe:	687b      	ldr	r3, [r7, #4]
    8600:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
    8604:	683a      	ldr	r2, [r7, #0]
    8606:	4619      	mov	r1, r3
    8608:	f003 f942 	bl	b890 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
    860c:	2300      	movs	r3, #0
    860e:	627b      	str	r3, [r7, #36]	; 0x24
    8610:	e002      	b.n	8618 <xEventGroupSync+0xcc>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    8612:	69fb      	ldr	r3, [r7, #28]
    8614:	681b      	ldr	r3, [r3, #0]
    8616:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    8618:	f002 fd90 	bl	b13c <xTaskResumeAll>
    861c:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
    861e:	683b      	ldr	r3, [r7, #0]
    8620:	2b00      	cmp	r3, #0
    8622:	d026      	beq.n	8672 <xEventGroupSync+0x126>
	{
		if( xAlreadyYielded == pdFALSE )
    8624:	697b      	ldr	r3, [r7, #20]
    8626:	2b00      	cmp	r3, #0
    8628:	d101      	bne.n	862e <xEventGroupSync+0xe2>
		{
			portYIELD_WITHIN_API();
    862a:	f000 fe2f 	bl	928c <vPortYieldFromISR>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    862e:	f003 fde9 	bl	c204 <uxTaskResetEventItemValue>
    8632:	6278      	str	r0, [r7, #36]	; 0x24

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    8634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    863a:	2b00      	cmp	r3, #0
    863c:	d115      	bne.n	866a <xEventGroupSync+0x11e>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
    863e:	f000 fde9 	bl	9214 <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
    8642:	69fb      	ldr	r3, [r7, #28]
    8644:	681b      	ldr	r3, [r3, #0]
    8646:	627b      	str	r3, [r7, #36]	; 0x24

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
    8648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    864a:	687b      	ldr	r3, [r7, #4]
    864c:	401a      	ands	r2, r3
    864e:	687b      	ldr	r3, [r7, #4]
    8650:	429a      	cmp	r2, r3
    8652:	d106      	bne.n	8662 <xEventGroupSync+0x116>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    8654:	69fb      	ldr	r3, [r7, #28]
    8656:	681a      	ldr	r2, [r3, #0]
    8658:	687b      	ldr	r3, [r7, #4]
    865a:	43db      	mvns	r3, r3
    865c:	401a      	ands	r2, r3
    865e:	69fb      	ldr	r3, [r7, #28]
    8660:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    8662:	f000 fdfd 	bl	9260 <vPortExitCritical>

			xTimeoutOccurred = pdTRUE;
    8666:	2301      	movs	r3, #1
    8668:	623b      	str	r3, [r7, #32]
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    866c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8670:	627b      	str	r3, [r7, #36]	; 0x24
	}

	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
    8672:	6a3b      	ldr	r3, [r7, #32]
    8674:	2b01      	cmp	r3, #1
    8676:	d001      	beq.n	867c <xEventGroupSync+0x130>
    8678:	23b0      	movs	r3, #176	; 0xb0
    867a:	e000      	b.n	867e <xEventGroupSync+0x132>
    867c:	23b8      	movs	r3, #184	; 0xb8
    867e:	68f9      	ldr	r1, [r7, #12]
    8680:	687a      	ldr	r2, [r7, #4]
    8682:	4618      	mov	r0, r3
    8684:	f004 ff74 	bl	d570 <prvTraceStoreEvent2>

	return uxReturn;
    8688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    868a:	4618      	mov	r0, r3
    868c:	3728      	adds	r7, #40	; 0x28
    868e:	46bd      	mov	sp, r7
    8690:	bd80      	pop	{r7, pc}
    8692:	bf00      	nop

00008694 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
    8694:	b580      	push	{r7, lr}
    8696:	b08c      	sub	sp, #48	; 0x30
    8698:	af00      	add	r7, sp, #0
    869a:	60f8      	str	r0, [r7, #12]
    869c:	60b9      	str	r1, [r7, #8]
    869e:	607a      	str	r2, [r7, #4]
    86a0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    86a2:	68fb      	ldr	r3, [r7, #12]
    86a4:	623b      	str	r3, [r7, #32]
EventBits_t uxReturn, uxControlBits = 0;
    86a6:	2300      	movs	r3, #0
    86a8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
    86aa:	2300      	movs	r3, #0
    86ac:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
    86ae:	68fb      	ldr	r3, [r7, #12]
    86b0:	2b00      	cmp	r3, #0
    86b2:	d104      	bne.n	86be <xEventGroupWaitBits+0x2a>
    86b4:	f04f 0050 	mov.w	r0, #80	; 0x50
    86b8:	f380 8811 	msr	BASEPRI, r0
    86bc:	e7fe      	b.n	86bc <xEventGroupWaitBits+0x28>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    86be:	68bb      	ldr	r3, [r7, #8]
    86c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    86c4:	2b00      	cmp	r3, #0
    86c6:	d004      	beq.n	86d2 <xEventGroupWaitBits+0x3e>
    86c8:	f04f 0050 	mov.w	r0, #80	; 0x50
    86cc:	f380 8811 	msr	BASEPRI, r0
    86d0:	e7fe      	b.n	86d0 <xEventGroupWaitBits+0x3c>
	configASSERT( uxBitsToWaitFor != 0 );
    86d2:	68bb      	ldr	r3, [r7, #8]
    86d4:	2b00      	cmp	r3, #0
    86d6:	d104      	bne.n	86e2 <xEventGroupWaitBits+0x4e>
    86d8:	f04f 0050 	mov.w	r0, #80	; 0x50
    86dc:	f380 8811 	msr	BASEPRI, r0
    86e0:	e7fe      	b.n	86e0 <xEventGroupWaitBits+0x4c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    86e2:	f003 fbdd 	bl	bea0 <xTaskGetSchedulerState>
    86e6:	4603      	mov	r3, r0
    86e8:	2b00      	cmp	r3, #0
    86ea:	d102      	bne.n	86f2 <xEventGroupWaitBits+0x5e>
    86ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    86ee:	2b00      	cmp	r3, #0
    86f0:	d101      	bne.n	86f6 <xEventGroupWaitBits+0x62>
    86f2:	2301      	movs	r3, #1
    86f4:	e000      	b.n	86f8 <xEventGroupWaitBits+0x64>
    86f6:	2300      	movs	r3, #0
    86f8:	2b00      	cmp	r3, #0
    86fa:	d104      	bne.n	8706 <xEventGroupWaitBits+0x72>
    86fc:	f04f 0050 	mov.w	r0, #80	; 0x50
    8700:	f380 8811 	msr	BASEPRI, r0
    8704:	e7fe      	b.n	8704 <xEventGroupWaitBits+0x70>
	}
	#endif

	vTaskSuspendAll();
    8706:	f002 fd0b 	bl	b120 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
    870a:	6a3b      	ldr	r3, [r7, #32]
    870c:	681b      	ldr	r3, [r3, #0]
    870e:	61fb      	str	r3, [r7, #28]

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
    8710:	683a      	ldr	r2, [r7, #0]
    8712:	68b9      	ldr	r1, [r7, #8]
    8714:	69f8      	ldr	r0, [r7, #28]
    8716:	f000 f99d 	bl	8a54 <prvTestWaitCondition>
    871a:	61b8      	str	r0, [r7, #24]

		if( xWaitConditionMet != pdFALSE )
    871c:	69bb      	ldr	r3, [r7, #24]
    871e:	2b00      	cmp	r3, #0
    8720:	d00e      	beq.n	8740 <xEventGroupWaitBits+0xac>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
    8722:	69fb      	ldr	r3, [r7, #28]
    8724:	62fb      	str	r3, [r7, #44]	; 0x2c
			xTicksToWait = ( TickType_t ) 0;
    8726:	2300      	movs	r3, #0
    8728:	63bb      	str	r3, [r7, #56]	; 0x38

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
    872a:	687b      	ldr	r3, [r7, #4]
    872c:	2b00      	cmp	r3, #0
    872e:	d02c      	beq.n	878a <xEventGroupWaitBits+0xf6>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    8730:	6a3b      	ldr	r3, [r7, #32]
    8732:	681a      	ldr	r2, [r3, #0]
    8734:	68bb      	ldr	r3, [r7, #8]
    8736:	43db      	mvns	r3, r3
    8738:	401a      	ands	r2, r3
    873a:	6a3b      	ldr	r3, [r7, #32]
    873c:	601a      	str	r2, [r3, #0]
    873e:	e024      	b.n	878a <xEventGroupWaitBits+0xf6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
    8740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8742:	2b00      	cmp	r3, #0
    8744:	d102      	bne.n	874c <xEventGroupWaitBits+0xb8>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
    8746:	69fb      	ldr	r3, [r7, #28]
    8748:	62fb      	str	r3, [r7, #44]	; 0x2c
    874a:	e01e      	b.n	878a <xEventGroupWaitBits+0xf6>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	2b00      	cmp	r3, #0
    8750:	d003      	beq.n	875a <xEventGroupWaitBits+0xc6>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
    8752:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8754:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    8758:	62bb      	str	r3, [r7, #40]	; 0x28
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
    875a:	683b      	ldr	r3, [r7, #0]
    875c:	2b00      	cmp	r3, #0
    875e:	d003      	beq.n	8768 <xEventGroupWaitBits+0xd4>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
    8760:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8762:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    8766:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
    8768:	6a3b      	ldr	r3, [r7, #32]
    876a:	1d18      	adds	r0, r3, #4
    876c:	68ba      	ldr	r2, [r7, #8]
    876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8770:	4313      	orrs	r3, r2
    8772:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8774:	4619      	mov	r1, r3
    8776:	f003 f88b 	bl	b890 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
    877a:	2300      	movs	r3, #0
    877c:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
    877e:	68fb      	ldr	r3, [r7, #12]
    8780:	68ba      	ldr	r2, [r7, #8]
    8782:	4619      	mov	r1, r3
    8784:	20b7      	movs	r0, #183	; 0xb7
    8786:	f004 fef3 	bl	d570 <prvTraceStoreEvent2>
		}
	}
	xAlreadyYielded = xTaskResumeAll();
    878a:	f002 fcd7 	bl	b13c <xTaskResumeAll>
    878e:	6178      	str	r0, [r7, #20]

	if( xTicksToWait != ( TickType_t ) 0 )
    8790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8792:	2b00      	cmp	r3, #0
    8794:	d02b      	beq.n	87ee <xEventGroupWaitBits+0x15a>
	{
		if( xAlreadyYielded == pdFALSE )
    8796:	697b      	ldr	r3, [r7, #20]
    8798:	2b00      	cmp	r3, #0
    879a:	d101      	bne.n	87a0 <xEventGroupWaitBits+0x10c>
		{
			portYIELD_WITHIN_API();
    879c:	f000 fd76 	bl	928c <vPortYieldFromISR>

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
    87a0:	f003 fd30 	bl	c204 <uxTaskResetEventItemValue>
    87a4:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
    87a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    87ac:	2b00      	cmp	r3, #0
    87ae:	d11a      	bne.n	87e6 <xEventGroupWaitBits+0x152>
		{
			taskENTER_CRITICAL();
    87b0:	f000 fd30 	bl	9214 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
    87b4:	6a3b      	ldr	r3, [r7, #32]
    87b6:	681b      	ldr	r3, [r3, #0]
    87b8:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
    87ba:	683a      	ldr	r2, [r7, #0]
    87bc:	68b9      	ldr	r1, [r7, #8]
    87be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    87c0:	f000 f948 	bl	8a54 <prvTestWaitCondition>
    87c4:	4603      	mov	r3, r0
    87c6:	2b00      	cmp	r3, #0
    87c8:	d009      	beq.n	87de <xEventGroupWaitBits+0x14a>
				{
					if( xClearOnExit != pdFALSE )
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	2b00      	cmp	r3, #0
    87ce:	d006      	beq.n	87de <xEventGroupWaitBits+0x14a>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
    87d0:	6a3b      	ldr	r3, [r7, #32]
    87d2:	681a      	ldr	r2, [r3, #0]
    87d4:	68bb      	ldr	r3, [r7, #8]
    87d6:	43db      	mvns	r3, r3
    87d8:	401a      	ands	r2, r3
    87da:	6a3b      	ldr	r3, [r7, #32]
    87dc:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    87de:	f000 fd3f 	bl	9260 <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
    87e2:	2300      	movs	r3, #0
    87e4:	627b      	str	r3, [r7, #36]	; 0x24
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
    87e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    87e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    87ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
    87ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    87f0:	2b01      	cmp	r3, #1
    87f2:	d001      	beq.n	87f8 <xEventGroupWaitBits+0x164>
    87f4:	23b1      	movs	r3, #177	; 0xb1
    87f6:	e000      	b.n	87fa <xEventGroupWaitBits+0x166>
    87f8:	23b9      	movs	r3, #185	; 0xb9
    87fa:	68f9      	ldr	r1, [r7, #12]
    87fc:	68ba      	ldr	r2, [r7, #8]
    87fe:	4618      	mov	r0, r3
    8800:	f004 feb6 	bl	d570 <prvTraceStoreEvent2>

	return uxReturn;
    8804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    8806:	4618      	mov	r0, r3
    8808:	3730      	adds	r7, #48	; 0x30
    880a:	46bd      	mov	sp, r7
    880c:	bd80      	pop	{r7, pc}
    880e:	bf00      	nop

00008810 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
    8810:	b580      	push	{r7, lr}
    8812:	b084      	sub	sp, #16
    8814:	af00      	add	r7, sp, #0
    8816:	6078      	str	r0, [r7, #4]
    8818:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    881a:	687b      	ldr	r3, [r7, #4]
    881c:	60fb      	str	r3, [r7, #12]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
    881e:	687b      	ldr	r3, [r7, #4]
    8820:	2b00      	cmp	r3, #0
    8822:	d104      	bne.n	882e <xEventGroupClearBits+0x1e>
    8824:	f04f 0050 	mov.w	r0, #80	; 0x50
    8828:	f380 8811 	msr	BASEPRI, r0
    882c:	e7fe      	b.n	882c <xEventGroupClearBits+0x1c>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    882e:	683b      	ldr	r3, [r7, #0]
    8830:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    8834:	2b00      	cmp	r3, #0
    8836:	d004      	beq.n	8842 <xEventGroupClearBits+0x32>
    8838:	f04f 0050 	mov.w	r0, #80	; 0x50
    883c:	f380 8811 	msr	BASEPRI, r0
    8840:	e7fe      	b.n	8840 <xEventGroupClearBits+0x30>

	taskENTER_CRITICAL();
    8842:	f000 fce7 	bl	9214 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
    8846:	687b      	ldr	r3, [r7, #4]
    8848:	683a      	ldr	r2, [r7, #0]
    884a:	4619      	mov	r1, r3
    884c:	20b2      	movs	r0, #178	; 0xb2
    884e:	f004 fe8f 	bl	d570 <prvTraceStoreEvent2>

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
    8852:	68fb      	ldr	r3, [r7, #12]
    8854:	681b      	ldr	r3, [r3, #0]
    8856:	60bb      	str	r3, [r7, #8]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    8858:	68fb      	ldr	r3, [r7, #12]
    885a:	681a      	ldr	r2, [r3, #0]
    885c:	683b      	ldr	r3, [r7, #0]
    885e:	43db      	mvns	r3, r3
    8860:	401a      	ands	r2, r3
    8862:	68fb      	ldr	r3, [r7, #12]
    8864:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
    8866:	f000 fcfb 	bl	9260 <vPortExitCritical>

	return uxReturn;
    886a:	68bb      	ldr	r3, [r7, #8]
}
    886c:	4618      	mov	r0, r3
    886e:	3710      	adds	r7, #16
    8870:	46bd      	mov	sp, r7
    8872:	bd80      	pop	{r7, pc}

00008874 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
    8874:	b480      	push	{r7}
    8876:	b087      	sub	sp, #28
    8878:	af00      	add	r7, sp, #0
    887a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    8880:	2300      	movs	r3, #0
    8882:	613b      	str	r3, [r7, #16]
    8884:	f04f 0050 	mov.w	r0, #80	; 0x50
    8888:	f380 8811 	msr	BASEPRI, r0
	{
		uxReturn = pxEventBits->uxEventBits;
    888c:	697b      	ldr	r3, [r7, #20]
    888e:	681b      	ldr	r3, [r3, #0]
    8890:	60fb      	str	r3, [r7, #12]
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    8892:	f04f 0000 	mov.w	r0, #0
    8896:	f380 8811 	msr	BASEPRI, r0

	return uxReturn;
    889a:	68fb      	ldr	r3, [r7, #12]
}
    889c:	4618      	mov	r0, r3
    889e:	371c      	adds	r7, #28
    88a0:	46bd      	mov	sp, r7
    88a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    88a6:	4770      	bx	lr

000088a8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
    88a8:	b580      	push	{r7, lr}
    88aa:	b08c      	sub	sp, #48	; 0x30
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
    88b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
    88b2:	2300      	movs	r3, #0
    88b4:	62bb      	str	r3, [r7, #40]	; 0x28
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    88b6:	687b      	ldr	r3, [r7, #4]
    88b8:	623b      	str	r3, [r7, #32]
BaseType_t xMatchFound = pdFALSE;
    88ba:	2300      	movs	r3, #0
    88bc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	2b00      	cmp	r3, #0
    88c2:	d104      	bne.n	88ce <xEventGroupSetBits+0x26>
    88c4:	f04f 0050 	mov.w	r0, #80	; 0x50
    88c8:	f380 8811 	msr	BASEPRI, r0
    88cc:	e7fe      	b.n	88cc <xEventGroupSetBits+0x24>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
    88ce:	683b      	ldr	r3, [r7, #0]
    88d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    88d4:	2b00      	cmp	r3, #0
    88d6:	d004      	beq.n	88e2 <xEventGroupSetBits+0x3a>
    88d8:	f04f 0050 	mov.w	r0, #80	; 0x50
    88dc:	f380 8811 	msr	BASEPRI, r0
    88e0:	e7fe      	b.n	88e0 <xEventGroupSetBits+0x38>

	pxList = &( pxEventBits->xTasksWaitingForBits );
    88e2:	6a3b      	ldr	r3, [r7, #32]
    88e4:	3304      	adds	r3, #4
    88e6:	61fb      	str	r3, [r7, #28]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    88e8:	69fb      	ldr	r3, [r7, #28]
    88ea:	3308      	adds	r3, #8
    88ec:	61bb      	str	r3, [r7, #24]
	vTaskSuspendAll();
    88ee:	f002 fc17 	bl	b120 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	683a      	ldr	r2, [r7, #0]
    88f6:	4619      	mov	r1, r3
    88f8:	20b4      	movs	r0, #180	; 0xb4
    88fa:	f004 fe39 	bl	d570 <prvTraceStoreEvent2>

		pxListItem = listGET_HEAD_ENTRY( pxList );
    88fe:	69fb      	ldr	r3, [r7, #28]
    8900:	68db      	ldr	r3, [r3, #12]
    8902:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
    8904:	6a3b      	ldr	r3, [r7, #32]
    8906:	681a      	ldr	r2, [r3, #0]
    8908:	683b      	ldr	r3, [r7, #0]
    890a:	431a      	orrs	r2, r3
    890c:	6a3b      	ldr	r3, [r7, #32]
    890e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    8910:	e03c      	b.n	898c <xEventGroupSetBits+0xe4>
		{
			pxNext = listGET_NEXT( pxListItem );
    8912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8914:	685b      	ldr	r3, [r3, #4]
    8916:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
    8918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    891a:	681b      	ldr	r3, [r3, #0]
    891c:	613b      	str	r3, [r7, #16]
			xMatchFound = pdFALSE;
    891e:	2300      	movs	r3, #0
    8920:	627b      	str	r3, [r7, #36]	; 0x24

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
    8922:	693b      	ldr	r3, [r7, #16]
    8924:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    8928:	60fb      	str	r3, [r7, #12]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
    892a:	693b      	ldr	r3, [r7, #16]
    892c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8930:	613b      	str	r3, [r7, #16]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
    8932:	68fb      	ldr	r3, [r7, #12]
    8934:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    8938:	2b00      	cmp	r3, #0
    893a:	d108      	bne.n	894e <xEventGroupSetBits+0xa6>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
    893c:	6a3b      	ldr	r3, [r7, #32]
    893e:	681a      	ldr	r2, [r3, #0]
    8940:	693b      	ldr	r3, [r7, #16]
    8942:	4013      	ands	r3, r2
    8944:	2b00      	cmp	r3, #0
    8946:	d00b      	beq.n	8960 <xEventGroupSetBits+0xb8>
				{
					xMatchFound = pdTRUE;
    8948:	2301      	movs	r3, #1
    894a:	627b      	str	r3, [r7, #36]	; 0x24
    894c:	e008      	b.n	8960 <xEventGroupSetBits+0xb8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
    894e:	6a3b      	ldr	r3, [r7, #32]
    8950:	681a      	ldr	r2, [r3, #0]
    8952:	693b      	ldr	r3, [r7, #16]
    8954:	401a      	ands	r2, r3
    8956:	693b      	ldr	r3, [r7, #16]
    8958:	429a      	cmp	r2, r3
    895a:	d101      	bne.n	8960 <xEventGroupSetBits+0xb8>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
    895c:	2301      	movs	r3, #1
    895e:	627b      	str	r3, [r7, #36]	; 0x24
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
    8960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8962:	2b00      	cmp	r3, #0
    8964:	d010      	beq.n	8988 <xEventGroupSetBits+0xe0>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
    8966:	68fb      	ldr	r3, [r7, #12]
    8968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    896c:	2b00      	cmp	r3, #0
    896e:	d003      	beq.n	8978 <xEventGroupSetBits+0xd0>
				{
					uxBitsToClear |= uxBitsWaitedFor;
    8970:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8972:	693b      	ldr	r3, [r7, #16]
    8974:	4313      	orrs	r3, r2
    8976:	62bb      	str	r3, [r7, #40]	; 0x28
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
    8978:	6a3b      	ldr	r3, [r7, #32]
    897a:	681b      	ldr	r3, [r3, #0]
    897c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    8980:	4619      	mov	r1, r3
    8982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8984:	f003 f816 	bl	b9b4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
    8988:	697b      	ldr	r3, [r7, #20]
    898a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
    898c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    898e:	69bb      	ldr	r3, [r7, #24]
    8990:	429a      	cmp	r2, r3
    8992:	d1be      	bne.n	8912 <xEventGroupSetBits+0x6a>
			pxListItem = pxNext;
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
    8994:	6a3b      	ldr	r3, [r7, #32]
    8996:	681a      	ldr	r2, [r3, #0]
    8998:	6abb      	ldr	r3, [r7, #40]	; 0x28
    899a:	43db      	mvns	r3, r3
    899c:	401a      	ands	r2, r3
    899e:	6a3b      	ldr	r3, [r7, #32]
    89a0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
    89a2:	f002 fbcb 	bl	b13c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
    89a6:	6a3b      	ldr	r3, [r7, #32]
    89a8:	681b      	ldr	r3, [r3, #0]
}
    89aa:	4618      	mov	r0, r3
    89ac:	3730      	adds	r7, #48	; 0x30
    89ae:	46bd      	mov	sp, r7
    89b0:	bd80      	pop	{r7, pc}
    89b2:	bf00      	nop

000089b4 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
    89b4:	b580      	push	{r7, lr}
    89b6:	b084      	sub	sp, #16
    89b8:	af00      	add	r7, sp, #0
    89ba:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    89bc:	687b      	ldr	r3, [r7, #4]
    89be:	60fb      	str	r3, [r7, #12]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
    89c0:	68fb      	ldr	r3, [r7, #12]
    89c2:	3304      	adds	r3, #4
    89c4:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
    89c6:	f002 fbab 	bl	b120 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );
    89ca:	687b      	ldr	r3, [r7, #4]
    89cc:	4619      	mov	r1, r3
    89ce:	2025      	movs	r0, #37	; 0x25
    89d0:	f004 fd82 	bl	d4d8 <prvTraceStoreEvent1>
    89d4:	6878      	ldr	r0, [r7, #4]
    89d6:	f005 f861 	bl	da9c <prvTraceDeleteSymbol>

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    89da:	e011      	b.n	8a00 <vEventGroupDelete+0x4c>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and	cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
    89dc:	68bb      	ldr	r3, [r7, #8]
    89de:	68da      	ldr	r2, [r3, #12]
    89e0:	68bb      	ldr	r3, [r7, #8]
    89e2:	3308      	adds	r3, #8
    89e4:	429a      	cmp	r2, r3
    89e6:	d104      	bne.n	89f2 <vEventGroupDelete+0x3e>
    89e8:	f04f 0050 	mov.w	r0, #80	; 0x50
    89ec:	f380 8811 	msr	BASEPRI, r0
    89f0:	e7fe      	b.n	89f0 <vEventGroupDelete+0x3c>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
    89f2:	68bb      	ldr	r3, [r7, #8]
    89f4:	68db      	ldr	r3, [r3, #12]
    89f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
    89fa:	4618      	mov	r0, r3
    89fc:	f002 ffda 	bl	b9b4 <vTaskRemoveFromUnorderedEventList>

	vTaskSuspendAll();
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
    8a00:	68bb      	ldr	r3, [r7, #8]
    8a02:	681b      	ldr	r3, [r3, #0]
    8a04:	2b00      	cmp	r3, #0
    8a06:	d1e9      	bne.n	89dc <vEventGroupDelete+0x28>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
    8a08:	68f8      	ldr	r0, [r7, #12]
    8a0a:	f000 f91d 	bl	8c48 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
    8a0e:	f002 fb95 	bl	b13c <xTaskResumeAll>
}
    8a12:	bf00      	nop
    8a14:	3710      	adds	r7, #16
    8a16:	46bd      	mov	sp, r7
    8a18:	bd80      	pop	{r7, pc}
    8a1a:	bf00      	nop

00008a1c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
    8a1c:	b580      	push	{r7, lr}
    8a1e:	b082      	sub	sp, #8
    8a20:	af00      	add	r7, sp, #0
    8a22:	6078      	str	r0, [r7, #4]
    8a24:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
    8a26:	6839      	ldr	r1, [r7, #0]
    8a28:	6878      	ldr	r0, [r7, #4]
    8a2a:	f7ff ff3d 	bl	88a8 <xEventGroupSetBits>
}
    8a2e:	bf00      	nop
    8a30:	3708      	adds	r7, #8
    8a32:	46bd      	mov	sp, r7
    8a34:	bd80      	pop	{r7, pc}
    8a36:	bf00      	nop

00008a38 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    8a38:	b580      	push	{r7, lr}
    8a3a:	b082      	sub	sp, #8
    8a3c:	af00      	add	r7, sp, #0
    8a3e:	6078      	str	r0, [r7, #4]
    8a40:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
    8a42:	6839      	ldr	r1, [r7, #0]
    8a44:	6878      	ldr	r0, [r7, #4]
    8a46:	f7ff fee3 	bl	8810 <xEventGroupClearBits>
}
    8a4a:	bf00      	nop
    8a4c:	3708      	adds	r7, #8
    8a4e:	46bd      	mov	sp, r7
    8a50:	bd80      	pop	{r7, pc}
    8a52:	bf00      	nop

00008a54 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    8a54:	b480      	push	{r7}
    8a56:	b087      	sub	sp, #28
    8a58:	af00      	add	r7, sp, #0
    8a5a:	60f8      	str	r0, [r7, #12]
    8a5c:	60b9      	str	r1, [r7, #8]
    8a5e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
    8a60:	2300      	movs	r3, #0
    8a62:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
    8a64:	687b      	ldr	r3, [r7, #4]
    8a66:	2b00      	cmp	r3, #0
    8a68:	d107      	bne.n	8a7a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    8a6a:	68fa      	ldr	r2, [r7, #12]
    8a6c:	68bb      	ldr	r3, [r7, #8]
    8a6e:	4013      	ands	r3, r2
    8a70:	2b00      	cmp	r3, #0
    8a72:	d00a      	beq.n	8a8a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
    8a74:	2301      	movs	r3, #1
    8a76:	617b      	str	r3, [r7, #20]
    8a78:	e007      	b.n	8a8a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    8a7a:	68fa      	ldr	r2, [r7, #12]
    8a7c:	68bb      	ldr	r3, [r7, #8]
    8a7e:	401a      	ands	r2, r3
    8a80:	68bb      	ldr	r3, [r7, #8]
    8a82:	429a      	cmp	r2, r3
    8a84:	d101      	bne.n	8a8a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
    8a86:	2301      	movs	r3, #1
    8a88:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
    8a8a:	697b      	ldr	r3, [r7, #20]
}
    8a8c:	4618      	mov	r0, r3
    8a8e:	371c      	adds	r7, #28
    8a90:	46bd      	mov	sp, r7
    8a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a96:	4770      	bx	lr

00008a98 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
    8a98:	b480      	push	{r7}
    8a9a:	b085      	sub	sp, #20
    8a9c:	af00      	add	r7, sp, #0
    8a9e:	6078      	str	r0, [r7, #4]
	UBaseType_t xReturn;
	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	60bb      	str	r3, [r7, #8]

		if( xEventGroup == NULL )
    8aa4:	687b      	ldr	r3, [r7, #4]
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d102      	bne.n	8ab0 <uxEventGroupGetNumber+0x18>
		{
			xReturn = 0;
    8aaa:	2300      	movs	r3, #0
    8aac:	60fb      	str	r3, [r7, #12]
    8aae:	e002      	b.n	8ab6 <uxEventGroupGetNumber+0x1e>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
    8ab0:	68bb      	ldr	r3, [r7, #8]
    8ab2:	699b      	ldr	r3, [r3, #24]
    8ab4:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
    8ab6:	68fb      	ldr	r3, [r7, #12]
	}
    8ab8:	4618      	mov	r0, r3
    8aba:	3714      	adds	r7, #20
    8abc:	46bd      	mov	sp, r7
    8abe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac2:	4770      	bx	lr

00008ac4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    8ac4:	b580      	push	{r7, lr}
    8ac6:	b086      	sub	sp, #24
    8ac8:	af00      	add	r7, sp, #0
    8aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
    8acc:	2300      	movs	r3, #0
    8ace:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
    8ad0:	f002 fb26 	bl	b120 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
    8ad4:	4b56      	ldr	r3, [pc, #344]	; (8c30 <pvPortMalloc+0x16c>)
    8ad6:	681b      	ldr	r3, [r3, #0]
    8ad8:	2b00      	cmp	r3, #0
    8ada:	d101      	bne.n	8ae0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
    8adc:	f000 f92e 	bl	8d3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
    8ae0:	4b54      	ldr	r3, [pc, #336]	; (8c34 <pvPortMalloc+0x170>)
    8ae2:	681a      	ldr	r2, [r3, #0]
    8ae4:	687b      	ldr	r3, [r7, #4]
    8ae6:	4013      	ands	r3, r2
    8ae8:	2b00      	cmp	r3, #0
    8aea:	f040 8085 	bne.w	8bf8 <pvPortMalloc+0x134>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
    8aee:	687b      	ldr	r3, [r7, #4]
    8af0:	2b00      	cmp	r3, #0
    8af2:	d018      	beq.n	8b26 <pvPortMalloc+0x62>
			{
				xWantedSize += xHeapStructSize;
    8af4:	4b50      	ldr	r3, [pc, #320]	; (8c38 <pvPortMalloc+0x174>)
    8af6:	681b      	ldr	r3, [r3, #0]
    8af8:	687a      	ldr	r2, [r7, #4]
    8afa:	4413      	add	r3, r2
    8afc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
    8afe:	687b      	ldr	r3, [r7, #4]
    8b00:	f003 0307 	and.w	r3, r3, #7
    8b04:	2b00      	cmp	r3, #0
    8b06:	d00e      	beq.n	8b26 <pvPortMalloc+0x62>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    8b08:	687b      	ldr	r3, [r7, #4]
    8b0a:	f023 0307 	bic.w	r3, r3, #7
    8b0e:	3308      	adds	r3, #8
    8b10:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	f003 0307 	and.w	r3, r3, #7
    8b18:	2b00      	cmp	r3, #0
    8b1a:	d004      	beq.n	8b26 <pvPortMalloc+0x62>
    8b1c:	f04f 0050 	mov.w	r0, #80	; 0x50
    8b20:	f380 8811 	msr	BASEPRI, r0
    8b24:	e7fe      	b.n	8b24 <pvPortMalloc+0x60>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
    8b26:	687b      	ldr	r3, [r7, #4]
    8b28:	2b00      	cmp	r3, #0
    8b2a:	d065      	beq.n	8bf8 <pvPortMalloc+0x134>
    8b2c:	4b43      	ldr	r3, [pc, #268]	; (8c3c <pvPortMalloc+0x178>)
    8b2e:	681b      	ldr	r3, [r3, #0]
    8b30:	687a      	ldr	r2, [r7, #4]
    8b32:	429a      	cmp	r2, r3
    8b34:	d860      	bhi.n	8bf8 <pvPortMalloc+0x134>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
    8b36:	4b42      	ldr	r3, [pc, #264]	; (8c40 <pvPortMalloc+0x17c>)
    8b38:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
    8b3a:	4b41      	ldr	r3, [pc, #260]	; (8c40 <pvPortMalloc+0x17c>)
    8b3c:	681b      	ldr	r3, [r3, #0]
    8b3e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    8b40:	e004      	b.n	8b4c <pvPortMalloc+0x88>
				{
					pxPreviousBlock = pxBlock;
    8b42:	697b      	ldr	r3, [r7, #20]
    8b44:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
    8b46:	697b      	ldr	r3, [r7, #20]
    8b48:	681b      	ldr	r3, [r3, #0]
    8b4a:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    8b4c:	697b      	ldr	r3, [r7, #20]
    8b4e:	685a      	ldr	r2, [r3, #4]
    8b50:	687b      	ldr	r3, [r7, #4]
    8b52:	429a      	cmp	r2, r3
    8b54:	d203      	bcs.n	8b5e <pvPortMalloc+0x9a>
    8b56:	697b      	ldr	r3, [r7, #20]
    8b58:	681b      	ldr	r3, [r3, #0]
    8b5a:	2b00      	cmp	r3, #0
    8b5c:	d1f1      	bne.n	8b42 <pvPortMalloc+0x7e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
    8b5e:	4b34      	ldr	r3, [pc, #208]	; (8c30 <pvPortMalloc+0x16c>)
    8b60:	681b      	ldr	r3, [r3, #0]
    8b62:	697a      	ldr	r2, [r7, #20]
    8b64:	429a      	cmp	r2, r3
    8b66:	d047      	beq.n	8bf8 <pvPortMalloc+0x134>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
    8b68:	693b      	ldr	r3, [r7, #16]
    8b6a:	681a      	ldr	r2, [r3, #0]
    8b6c:	4b32      	ldr	r3, [pc, #200]	; (8c38 <pvPortMalloc+0x174>)
    8b6e:	681b      	ldr	r3, [r3, #0]
    8b70:	4413      	add	r3, r2
    8b72:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    8b74:	697b      	ldr	r3, [r7, #20]
    8b76:	681a      	ldr	r2, [r3, #0]
    8b78:	693b      	ldr	r3, [r7, #16]
    8b7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    8b7c:	697b      	ldr	r3, [r7, #20]
    8b7e:	685a      	ldr	r2, [r3, #4]
    8b80:	687b      	ldr	r3, [r7, #4]
    8b82:	1ad2      	subs	r2, r2, r3
    8b84:	4b2c      	ldr	r3, [pc, #176]	; (8c38 <pvPortMalloc+0x174>)
    8b86:	681b      	ldr	r3, [r3, #0]
    8b88:	005b      	lsls	r3, r3, #1
    8b8a:	429a      	cmp	r2, r3
    8b8c:	d919      	bls.n	8bc2 <pvPortMalloc+0xfe>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    8b8e:	697a      	ldr	r2, [r7, #20]
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	4413      	add	r3, r2
    8b94:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
    8b96:	68bb      	ldr	r3, [r7, #8]
    8b98:	f003 0307 	and.w	r3, r3, #7
    8b9c:	2b00      	cmp	r3, #0
    8b9e:	d004      	beq.n	8baa <pvPortMalloc+0xe6>
    8ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
    8ba4:	f380 8811 	msr	BASEPRI, r0
    8ba8:	e7fe      	b.n	8ba8 <pvPortMalloc+0xe4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    8baa:	697b      	ldr	r3, [r7, #20]
    8bac:	685a      	ldr	r2, [r3, #4]
    8bae:	687b      	ldr	r3, [r7, #4]
    8bb0:	1ad2      	subs	r2, r2, r3
    8bb2:	68bb      	ldr	r3, [r7, #8]
    8bb4:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
    8bb6:	697b      	ldr	r3, [r7, #20]
    8bb8:	687a      	ldr	r2, [r7, #4]
    8bba:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
    8bbc:	68b8      	ldr	r0, [r7, #8]
    8bbe:	f000 f923 	bl	8e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
    8bc2:	4b1e      	ldr	r3, [pc, #120]	; (8c3c <pvPortMalloc+0x178>)
    8bc4:	681a      	ldr	r2, [r3, #0]
    8bc6:	697b      	ldr	r3, [r7, #20]
    8bc8:	685b      	ldr	r3, [r3, #4]
    8bca:	1ad3      	subs	r3, r2, r3
    8bcc:	4a1b      	ldr	r2, [pc, #108]	; (8c3c <pvPortMalloc+0x178>)
    8bce:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
    8bd0:	4b1a      	ldr	r3, [pc, #104]	; (8c3c <pvPortMalloc+0x178>)
    8bd2:	681a      	ldr	r2, [r3, #0]
    8bd4:	4b1b      	ldr	r3, [pc, #108]	; (8c44 <pvPortMalloc+0x180>)
    8bd6:	681b      	ldr	r3, [r3, #0]
    8bd8:	429a      	cmp	r2, r3
    8bda:	d203      	bcs.n	8be4 <pvPortMalloc+0x120>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
    8bdc:	4b17      	ldr	r3, [pc, #92]	; (8c3c <pvPortMalloc+0x178>)
    8bde:	681b      	ldr	r3, [r3, #0]
    8be0:	4a18      	ldr	r2, [pc, #96]	; (8c44 <pvPortMalloc+0x180>)
    8be2:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
    8be4:	697b      	ldr	r3, [r7, #20]
    8be6:	685a      	ldr	r2, [r3, #4]
    8be8:	4b12      	ldr	r3, [pc, #72]	; (8c34 <pvPortMalloc+0x170>)
    8bea:	681b      	ldr	r3, [r3, #0]
    8bec:	431a      	orrs	r2, r3
    8bee:	697b      	ldr	r3, [r7, #20]
    8bf0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
    8bf2:	697b      	ldr	r3, [r7, #20]
    8bf4:	2200      	movs	r2, #0
    8bf6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
    8bf8:	68fb      	ldr	r3, [r7, #12]
    8bfa:	687a      	ldr	r2, [r7, #4]
    8bfc:	4619      	mov	r1, r3
    8bfe:	2038      	movs	r0, #56	; 0x38
    8c00:	f004 fcb6 	bl	d570 <prvTraceStoreEvent2>
	}
	( void ) xTaskResumeAll();
    8c04:	f002 fa9a 	bl	b13c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    8c08:	68fb      	ldr	r3, [r7, #12]
    8c0a:	2b00      	cmp	r3, #0
    8c0c:	d101      	bne.n	8c12 <pvPortMalloc+0x14e>
		{
      /* EST: Using configuration macro name for hook */
			extern void configUSE_MALLOC_FAILED_HOOK_NAME( void );
      configUSE_MALLOC_FAILED_HOOK_NAME();
    8c0e:	f005 fcaf 	bl	e570 <FRTOS1_vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    8c12:	68fb      	ldr	r3, [r7, #12]
    8c14:	f003 0307 	and.w	r3, r3, #7
    8c18:	2b00      	cmp	r3, #0
    8c1a:	d004      	beq.n	8c26 <pvPortMalloc+0x162>
    8c1c:	f04f 0050 	mov.w	r0, #80	; 0x50
    8c20:	f380 8811 	msr	BASEPRI, r0
    8c24:	e7fe      	b.n	8c24 <pvPortMalloc+0x160>
	return pvReturn;
    8c26:	68fb      	ldr	r3, [r7, #12]
}
    8c28:	4618      	mov	r0, r3
    8c2a:	3718      	adds	r7, #24
    8c2c:	46bd      	mov	sp, r7
    8c2e:	bd80      	pop	{r7, pc}
    8c30:	20002ac0 	.word	0x20002ac0
    8c34:	20002acc 	.word	0x20002acc
    8c38:	20000018 	.word	0x20000018
    8c3c:	20002ac4 	.word	0x20002ac4
    8c40:	20002ab8 	.word	0x20002ab8
    8c44:	20002ac8 	.word	0x20002ac8

00008c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    8c48:	b580      	push	{r7, lr}
    8c4a:	b084      	sub	sp, #16
    8c4c:	af00      	add	r7, sp, #0
    8c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
    8c50:	687b      	ldr	r3, [r7, #4]
    8c52:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
    8c54:	687b      	ldr	r3, [r7, #4]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d045      	beq.n	8ce6 <vPortFree+0x9e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
    8c5a:	4b25      	ldr	r3, [pc, #148]	; (8cf0 <vPortFree+0xa8>)
    8c5c:	681b      	ldr	r3, [r3, #0]
    8c5e:	425b      	negs	r3, r3
    8c60:	68fa      	ldr	r2, [r7, #12]
    8c62:	4413      	add	r3, r2
    8c64:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
    8c66:	68fb      	ldr	r3, [r7, #12]
    8c68:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
    8c6a:	68bb      	ldr	r3, [r7, #8]
    8c6c:	685a      	ldr	r2, [r3, #4]
    8c6e:	4b21      	ldr	r3, [pc, #132]	; (8cf4 <vPortFree+0xac>)
    8c70:	681b      	ldr	r3, [r3, #0]
    8c72:	4013      	ands	r3, r2
    8c74:	2b00      	cmp	r3, #0
    8c76:	d104      	bne.n	8c82 <vPortFree+0x3a>
    8c78:	f04f 0050 	mov.w	r0, #80	; 0x50
    8c7c:	f380 8811 	msr	BASEPRI, r0
    8c80:	e7fe      	b.n	8c80 <vPortFree+0x38>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
    8c82:	68bb      	ldr	r3, [r7, #8]
    8c84:	681b      	ldr	r3, [r3, #0]
    8c86:	2b00      	cmp	r3, #0
    8c88:	d004      	beq.n	8c94 <vPortFree+0x4c>
    8c8a:	f04f 0050 	mov.w	r0, #80	; 0x50
    8c8e:	f380 8811 	msr	BASEPRI, r0
    8c92:	e7fe      	b.n	8c92 <vPortFree+0x4a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
    8c94:	68bb      	ldr	r3, [r7, #8]
    8c96:	685a      	ldr	r2, [r3, #4]
    8c98:	4b16      	ldr	r3, [pc, #88]	; (8cf4 <vPortFree+0xac>)
    8c9a:	681b      	ldr	r3, [r3, #0]
    8c9c:	4013      	ands	r3, r2
    8c9e:	2b00      	cmp	r3, #0
    8ca0:	d021      	beq.n	8ce6 <vPortFree+0x9e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
    8ca2:	68bb      	ldr	r3, [r7, #8]
    8ca4:	681b      	ldr	r3, [r3, #0]
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d11d      	bne.n	8ce6 <vPortFree+0x9e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
    8caa:	68bb      	ldr	r3, [r7, #8]
    8cac:	685a      	ldr	r2, [r3, #4]
    8cae:	4b11      	ldr	r3, [pc, #68]	; (8cf4 <vPortFree+0xac>)
    8cb0:	681b      	ldr	r3, [r3, #0]
    8cb2:	43db      	mvns	r3, r3
    8cb4:	401a      	ands	r2, r3
    8cb6:	68bb      	ldr	r3, [r7, #8]
    8cb8:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
    8cba:	f002 fa31 	bl	b120 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
    8cbe:	68bb      	ldr	r3, [r7, #8]
    8cc0:	685a      	ldr	r2, [r3, #4]
    8cc2:	4b0d      	ldr	r3, [pc, #52]	; (8cf8 <vPortFree+0xb0>)
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	4413      	add	r3, r2
    8cc8:	4a0b      	ldr	r2, [pc, #44]	; (8cf8 <vPortFree+0xb0>)
    8cca:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
    8ccc:	6879      	ldr	r1, [r7, #4]
    8cce:	68bb      	ldr	r3, [r7, #8]
    8cd0:	685b      	ldr	r3, [r3, #4]
    8cd2:	425b      	negs	r3, r3
    8cd4:	461a      	mov	r2, r3
    8cd6:	2039      	movs	r0, #57	; 0x39
    8cd8:	f004 fc4a 	bl	d570 <prvTraceStoreEvent2>
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    8cdc:	68b8      	ldr	r0, [r7, #8]
    8cde:	f000 f893 	bl	8e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
    8ce2:	f002 fa2b 	bl	b13c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
    8ce6:	bf00      	nop
    8ce8:	3710      	adds	r7, #16
    8cea:	46bd      	mov	sp, r7
    8cec:	bd80      	pop	{r7, pc}
    8cee:	bf00      	nop
    8cf0:	20000018 	.word	0x20000018
    8cf4:	20002acc 	.word	0x20002acc
    8cf8:	20002ac4 	.word	0x20002ac4

00008cfc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    8cfc:	b480      	push	{r7}
    8cfe:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
    8d00:	4b03      	ldr	r3, [pc, #12]	; (8d10 <xPortGetFreeHeapSize+0x14>)
    8d02:	681b      	ldr	r3, [r3, #0]
}
    8d04:	4618      	mov	r0, r3
    8d06:	46bd      	mov	sp, r7
    8d08:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d0c:	4770      	bx	lr
    8d0e:	bf00      	nop
    8d10:	20002ac4 	.word	0x20002ac4

00008d14 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
    8d14:	b480      	push	{r7}
    8d16:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
    8d18:	4b03      	ldr	r3, [pc, #12]	; (8d28 <xPortGetMinimumEverFreeHeapSize+0x14>)
    8d1a:	681b      	ldr	r3, [r3, #0]
}
    8d1c:	4618      	mov	r0, r3
    8d1e:	46bd      	mov	sp, r7
    8d20:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d24:	4770      	bx	lr
    8d26:	bf00      	nop
    8d28:	20002ac8 	.word	0x20002ac8

00008d2c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    8d2c:	b480      	push	{r7}
    8d2e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
    8d30:	bf00      	nop
    8d32:	46bd      	mov	sp, r7
    8d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d38:	4770      	bx	lr
    8d3a:	bf00      	nop

00008d3c <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    8d3c:	b480      	push	{r7}
    8d3e:	b085      	sub	sp, #20
    8d40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    8d42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8d46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    8d48:	4b28      	ldr	r3, [pc, #160]	; (8dec <prvHeapInit+0xb0>)
    8d4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
    8d4c:	68fb      	ldr	r3, [r7, #12]
    8d4e:	f003 0307 	and.w	r3, r3, #7
    8d52:	2b00      	cmp	r3, #0
    8d54:	d00c      	beq.n	8d70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
    8d56:	68fb      	ldr	r3, [r7, #12]
    8d58:	3307      	adds	r3, #7
    8d5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    8d5c:	68fb      	ldr	r3, [r7, #12]
    8d5e:	f023 0307 	bic.w	r3, r3, #7
    8d62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
    8d64:	68ba      	ldr	r2, [r7, #8]
    8d66:	68fb      	ldr	r3, [r7, #12]
    8d68:	1ad3      	subs	r3, r2, r3
    8d6a:	4a20      	ldr	r2, [pc, #128]	; (8dec <prvHeapInit+0xb0>)
    8d6c:	4413      	add	r3, r2
    8d6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    8d70:	68fb      	ldr	r3, [r7, #12]
    8d72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    8d74:	4a1e      	ldr	r2, [pc, #120]	; (8df0 <prvHeapInit+0xb4>)
    8d76:	687b      	ldr	r3, [r7, #4]
    8d78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
    8d7a:	4b1d      	ldr	r3, [pc, #116]	; (8df0 <prvHeapInit+0xb4>)
    8d7c:	2200      	movs	r2, #0
    8d7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    8d80:	687a      	ldr	r2, [r7, #4]
    8d82:	68bb      	ldr	r3, [r7, #8]
    8d84:	4413      	add	r3, r2
    8d86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
    8d88:	4b1a      	ldr	r3, [pc, #104]	; (8df4 <prvHeapInit+0xb8>)
    8d8a:	681b      	ldr	r3, [r3, #0]
    8d8c:	68fa      	ldr	r2, [r7, #12]
    8d8e:	1ad3      	subs	r3, r2, r3
    8d90:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	f023 0307 	bic.w	r3, r3, #7
    8d98:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
    8d9a:	68fb      	ldr	r3, [r7, #12]
    8d9c:	4a16      	ldr	r2, [pc, #88]	; (8df8 <prvHeapInit+0xbc>)
    8d9e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
    8da0:	4b15      	ldr	r3, [pc, #84]	; (8df8 <prvHeapInit+0xbc>)
    8da2:	681b      	ldr	r3, [r3, #0]
    8da4:	2200      	movs	r2, #0
    8da6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
    8da8:	4b13      	ldr	r3, [pc, #76]	; (8df8 <prvHeapInit+0xbc>)
    8daa:	681b      	ldr	r3, [r3, #0]
    8dac:	2200      	movs	r2, #0
    8dae:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    8db0:	687b      	ldr	r3, [r7, #4]
    8db2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    8db4:	683b      	ldr	r3, [r7, #0]
    8db6:	68fa      	ldr	r2, [r7, #12]
    8db8:	1ad2      	subs	r2, r2, r3
    8dba:	683b      	ldr	r3, [r7, #0]
    8dbc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    8dbe:	4b0e      	ldr	r3, [pc, #56]	; (8df8 <prvHeapInit+0xbc>)
    8dc0:	681a      	ldr	r2, [r3, #0]
    8dc2:	683b      	ldr	r3, [r7, #0]
    8dc4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    8dc6:	683b      	ldr	r3, [r7, #0]
    8dc8:	685b      	ldr	r3, [r3, #4]
    8dca:	4a0c      	ldr	r2, [pc, #48]	; (8dfc <prvHeapInit+0xc0>)
    8dcc:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    8dce:	683b      	ldr	r3, [r7, #0]
    8dd0:	685b      	ldr	r3, [r3, #4]
    8dd2:	4a0b      	ldr	r2, [pc, #44]	; (8e00 <prvHeapInit+0xc4>)
    8dd4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    8dd6:	4b0b      	ldr	r3, [pc, #44]	; (8e04 <prvHeapInit+0xc8>)
    8dd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8ddc:	601a      	str	r2, [r3, #0]
}
    8dde:	bf00      	nop
    8de0:	3714      	adds	r7, #20
    8de2:	46bd      	mov	sp, r7
    8de4:	f85d 7b04 	ldr.w	r7, [sp], #4
    8de8:	4770      	bx	lr
    8dea:	bf00      	nop
    8dec:	20000ab8 	.word	0x20000ab8
    8df0:	20002ab8 	.word	0x20002ab8
    8df4:	20000018 	.word	0x20000018
    8df8:	20002ac0 	.word	0x20002ac0
    8dfc:	20002ac8 	.word	0x20002ac8
    8e00:	20002ac4 	.word	0x20002ac4
    8e04:	20002acc 	.word	0x20002acc

00008e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    8e08:	b480      	push	{r7}
    8e0a:	b085      	sub	sp, #20
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    8e10:	4b28      	ldr	r3, [pc, #160]	; (8eb4 <prvInsertBlockIntoFreeList+0xac>)
    8e12:	60fb      	str	r3, [r7, #12]
    8e14:	e002      	b.n	8e1c <prvInsertBlockIntoFreeList+0x14>
    8e16:	68fb      	ldr	r3, [r7, #12]
    8e18:	681b      	ldr	r3, [r3, #0]
    8e1a:	60fb      	str	r3, [r7, #12]
    8e1c:	68fb      	ldr	r3, [r7, #12]
    8e1e:	681a      	ldr	r2, [r3, #0]
    8e20:	687b      	ldr	r3, [r7, #4]
    8e22:	429a      	cmp	r2, r3
    8e24:	d3f7      	bcc.n	8e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    8e26:	68fb      	ldr	r3, [r7, #12]
    8e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    8e2a:	68fb      	ldr	r3, [r7, #12]
    8e2c:	685b      	ldr	r3, [r3, #4]
    8e2e:	68ba      	ldr	r2, [r7, #8]
    8e30:	441a      	add	r2, r3
    8e32:	687b      	ldr	r3, [r7, #4]
    8e34:	429a      	cmp	r2, r3
    8e36:	d108      	bne.n	8e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    8e38:	68fb      	ldr	r3, [r7, #12]
    8e3a:	685a      	ldr	r2, [r3, #4]
    8e3c:	687b      	ldr	r3, [r7, #4]
    8e3e:	685b      	ldr	r3, [r3, #4]
    8e40:	441a      	add	r2, r3
    8e42:	68fb      	ldr	r3, [r7, #12]
    8e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
    8e46:	68fb      	ldr	r3, [r7, #12]
    8e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    8e4a:	687b      	ldr	r3, [r7, #4]
    8e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    8e4e:	687b      	ldr	r3, [r7, #4]
    8e50:	685b      	ldr	r3, [r3, #4]
    8e52:	68ba      	ldr	r2, [r7, #8]
    8e54:	441a      	add	r2, r3
    8e56:	68fb      	ldr	r3, [r7, #12]
    8e58:	681b      	ldr	r3, [r3, #0]
    8e5a:	429a      	cmp	r2, r3
    8e5c:	d118      	bne.n	8e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    8e5e:	68fb      	ldr	r3, [r7, #12]
    8e60:	681a      	ldr	r2, [r3, #0]
    8e62:	4b15      	ldr	r3, [pc, #84]	; (8eb8 <prvInsertBlockIntoFreeList+0xb0>)
    8e64:	681b      	ldr	r3, [r3, #0]
    8e66:	429a      	cmp	r2, r3
    8e68:	d00d      	beq.n	8e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    8e6a:	687b      	ldr	r3, [r7, #4]
    8e6c:	685a      	ldr	r2, [r3, #4]
    8e6e:	68fb      	ldr	r3, [r7, #12]
    8e70:	681b      	ldr	r3, [r3, #0]
    8e72:	685b      	ldr	r3, [r3, #4]
    8e74:	441a      	add	r2, r3
    8e76:	687b      	ldr	r3, [r7, #4]
    8e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    8e7a:	68fb      	ldr	r3, [r7, #12]
    8e7c:	681b      	ldr	r3, [r3, #0]
    8e7e:	681a      	ldr	r2, [r3, #0]
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	601a      	str	r2, [r3, #0]
    8e84:	e008      	b.n	8e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    8e86:	4b0c      	ldr	r3, [pc, #48]	; (8eb8 <prvInsertBlockIntoFreeList+0xb0>)
    8e88:	681a      	ldr	r2, [r3, #0]
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	601a      	str	r2, [r3, #0]
    8e8e:	e003      	b.n	8e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    8e90:	68fb      	ldr	r3, [r7, #12]
    8e92:	681a      	ldr	r2, [r3, #0]
    8e94:	687b      	ldr	r3, [r7, #4]
    8e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    8e98:	68fa      	ldr	r2, [r7, #12]
    8e9a:	687b      	ldr	r3, [r7, #4]
    8e9c:	429a      	cmp	r2, r3
    8e9e:	d002      	beq.n	8ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    8ea0:	68fb      	ldr	r3, [r7, #12]
    8ea2:	687a      	ldr	r2, [r7, #4]
    8ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    8ea6:	bf00      	nop
    8ea8:	3714      	adds	r7, #20
    8eaa:	46bd      	mov	sp, r7
    8eac:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eb0:	4770      	bx	lr
    8eb2:	bf00      	nop
    8eb4:	20002ab8 	.word	0x20002ab8
    8eb8:	20002ac0 	.word	0x20002ac0

00008ebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    8ebc:	b480      	push	{r7}
    8ebe:	b083      	sub	sp, #12
    8ec0:	af00      	add	r7, sp, #0
    8ec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    8ec4:	687b      	ldr	r3, [r7, #4]
    8ec6:	f103 0208 	add.w	r2, r3, #8
    8eca:	687b      	ldr	r3, [r7, #4]
    8ecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    8ece:	687b      	ldr	r3, [r7, #4]
    8ed0:	f04f 32ff 	mov.w	r2, #4294967295
    8ed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    8ed6:	687b      	ldr	r3, [r7, #4]
    8ed8:	f103 0208 	add.w	r2, r3, #8
    8edc:	687b      	ldr	r3, [r7, #4]
    8ede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	f103 0208 	add.w	r2, r3, #8
    8ee6:	687b      	ldr	r3, [r7, #4]
    8ee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    8eea:	687b      	ldr	r3, [r7, #4]
    8eec:	2200      	movs	r2, #0
    8eee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    8ef0:	bf00      	nop
    8ef2:	370c      	adds	r7, #12
    8ef4:	46bd      	mov	sp, r7
    8ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8efa:	4770      	bx	lr

00008efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    8efc:	b480      	push	{r7}
    8efe:	b083      	sub	sp, #12
    8f00:	af00      	add	r7, sp, #0
    8f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	2200      	movs	r2, #0
    8f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    8f0a:	bf00      	nop
    8f0c:	370c      	adds	r7, #12
    8f0e:	46bd      	mov	sp, r7
    8f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f14:	4770      	bx	lr
    8f16:	bf00      	nop

00008f18 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    8f18:	b480      	push	{r7}
    8f1a:	b085      	sub	sp, #20
    8f1c:	af00      	add	r7, sp, #0
    8f1e:	6078      	str	r0, [r7, #4]
    8f20:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	685b      	ldr	r3, [r3, #4]
    8f26:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    8f28:	683b      	ldr	r3, [r7, #0]
    8f2a:	68fa      	ldr	r2, [r7, #12]
    8f2c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    8f2e:	68fb      	ldr	r3, [r7, #12]
    8f30:	689a      	ldr	r2, [r3, #8]
    8f32:	683b      	ldr	r3, [r7, #0]
    8f34:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    8f36:	68fb      	ldr	r3, [r7, #12]
    8f38:	689b      	ldr	r3, [r3, #8]
    8f3a:	683a      	ldr	r2, [r7, #0]
    8f3c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    8f3e:	68fb      	ldr	r3, [r7, #12]
    8f40:	683a      	ldr	r2, [r7, #0]
    8f42:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    8f44:	683b      	ldr	r3, [r7, #0]
    8f46:	687a      	ldr	r2, [r7, #4]
    8f48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    8f4a:	687b      	ldr	r3, [r7, #4]
    8f4c:	681b      	ldr	r3, [r3, #0]
    8f4e:	1c5a      	adds	r2, r3, #1
    8f50:	687b      	ldr	r3, [r7, #4]
    8f52:	601a      	str	r2, [r3, #0]
}
    8f54:	bf00      	nop
    8f56:	3714      	adds	r7, #20
    8f58:	46bd      	mov	sp, r7
    8f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f5e:	4770      	bx	lr

00008f60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    8f60:	b480      	push	{r7}
    8f62:	b085      	sub	sp, #20
    8f64:	af00      	add	r7, sp, #0
    8f66:	6078      	str	r0, [r7, #4]
    8f68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    8f6a:	683b      	ldr	r3, [r7, #0]
    8f6c:	681b      	ldr	r3, [r3, #0]
    8f6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    8f70:	68bb      	ldr	r3, [r7, #8]
    8f72:	f1b3 3fff 	cmp.w	r3, #4294967295
    8f76:	d103      	bne.n	8f80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    8f78:	687b      	ldr	r3, [r7, #4]
    8f7a:	691b      	ldr	r3, [r3, #16]
    8f7c:	60fb      	str	r3, [r7, #12]
    8f7e:	e00c      	b.n	8f9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    8f80:	687b      	ldr	r3, [r7, #4]
    8f82:	3308      	adds	r3, #8
    8f84:	60fb      	str	r3, [r7, #12]
    8f86:	e002      	b.n	8f8e <vListInsert+0x2e>
    8f88:	68fb      	ldr	r3, [r7, #12]
    8f8a:	685b      	ldr	r3, [r3, #4]
    8f8c:	60fb      	str	r3, [r7, #12]
    8f8e:	68fb      	ldr	r3, [r7, #12]
    8f90:	685b      	ldr	r3, [r3, #4]
    8f92:	681a      	ldr	r2, [r3, #0]
    8f94:	68bb      	ldr	r3, [r7, #8]
    8f96:	429a      	cmp	r2, r3
    8f98:	d9f6      	bls.n	8f88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    8f9a:	68fb      	ldr	r3, [r7, #12]
    8f9c:	685a      	ldr	r2, [r3, #4]
    8f9e:	683b      	ldr	r3, [r7, #0]
    8fa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    8fa2:	683b      	ldr	r3, [r7, #0]
    8fa4:	685b      	ldr	r3, [r3, #4]
    8fa6:	683a      	ldr	r2, [r7, #0]
    8fa8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    8faa:	683b      	ldr	r3, [r7, #0]
    8fac:	68fa      	ldr	r2, [r7, #12]
    8fae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    8fb0:	68fb      	ldr	r3, [r7, #12]
    8fb2:	683a      	ldr	r2, [r7, #0]
    8fb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    8fb6:	683b      	ldr	r3, [r7, #0]
    8fb8:	687a      	ldr	r2, [r7, #4]
    8fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    8fbc:	687b      	ldr	r3, [r7, #4]
    8fbe:	681b      	ldr	r3, [r3, #0]
    8fc0:	1c5a      	adds	r2, r3, #1
    8fc2:	687b      	ldr	r3, [r7, #4]
    8fc4:	601a      	str	r2, [r3, #0]
}
    8fc6:	bf00      	nop
    8fc8:	3714      	adds	r7, #20
    8fca:	46bd      	mov	sp, r7
    8fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    8fd0:	4770      	bx	lr
    8fd2:	bf00      	nop

00008fd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    8fd4:	b480      	push	{r7}
    8fd6:	b085      	sub	sp, #20
    8fd8:	af00      	add	r7, sp, #0
    8fda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	691b      	ldr	r3, [r3, #16]
    8fe0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    8fe2:	687b      	ldr	r3, [r7, #4]
    8fe4:	685b      	ldr	r3, [r3, #4]
    8fe6:	687a      	ldr	r2, [r7, #4]
    8fe8:	6892      	ldr	r2, [r2, #8]
    8fea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    8fec:	687b      	ldr	r3, [r7, #4]
    8fee:	689b      	ldr	r3, [r3, #8]
    8ff0:	687a      	ldr	r2, [r7, #4]
    8ff2:	6852      	ldr	r2, [r2, #4]
    8ff4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    8ff6:	68fb      	ldr	r3, [r7, #12]
    8ff8:	685a      	ldr	r2, [r3, #4]
    8ffa:	687b      	ldr	r3, [r7, #4]
    8ffc:	429a      	cmp	r2, r3
    8ffe:	d103      	bne.n	9008 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    9000:	687b      	ldr	r3, [r7, #4]
    9002:	689a      	ldr	r2, [r3, #8]
    9004:	68fb      	ldr	r3, [r7, #12]
    9006:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    9008:	687b      	ldr	r3, [r7, #4]
    900a:	2200      	movs	r2, #0
    900c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    900e:	68fb      	ldr	r3, [r7, #12]
    9010:	681b      	ldr	r3, [r3, #0]
    9012:	1e5a      	subs	r2, r3, #1
    9014:	68fb      	ldr	r3, [r7, #12]
    9016:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    9018:	68fb      	ldr	r3, [r7, #12]
    901a:	681b      	ldr	r3, [r3, #0]
}
    901c:	4618      	mov	r0, r3
    901e:	3714      	adds	r7, #20
    9020:	46bd      	mov	sp, r7
    9022:	f85d 7b04 	ldr.w	r7, [sp], #4
    9026:	4770      	bx	lr

00009028 <prvTaskExitError>:
#if INCLUDE_vTaskEndScheduler
#include <setjmp.h>
static jmp_buf xJumpBuf; /* Used to restore the original context when the scheduler is ended. */
#endif
/*-----------------------------------------------------------*/
void prvTaskExitError(void) {
    9028:	b480      	push	{r7}
    902a:	af00      	add	r7, sp, #0
  its caller as there is nothing to return to.  If a task wants to exit it
  should instead call vTaskDelete( NULL ).

  Artificially force an assert() to be triggered if configASSERT() is
  defined, then stop here so application writers can catch the error. */
  configASSERT(uxCriticalNesting == ~0UL);
    902c:	4b07      	ldr	r3, [pc, #28]	; (904c <prvTaskExitError+0x24>)
    902e:	681b      	ldr	r3, [r3, #0]
    9030:	f1b3 3fff 	cmp.w	r3, #4294967295
    9034:	d004      	beq.n	9040 <prvTaskExitError+0x18>
    9036:	f04f 0050 	mov.w	r0, #80	; 0x50
    903a:	f380 8811 	msr	BASEPRI, r0
    903e:	e7fe      	b.n	903e <prvTaskExitError+0x16>
  portDISABLE_INTERRUPTS();
    9040:	f04f 0050 	mov.w	r0, #80	; 0x50
    9044:	f380 8811 	msr	BASEPRI, r0
  for(;;) {
    /* wait here */
  }
    9048:	e7fe      	b.n	9048 <prvTaskExitError+0x20>
    904a:	bf00      	nop
    904c:	2000001c 	.word	0x2000001c

00009050 <pxPortInitialiseStack>:
  msr basepri, r0
  bx r14
}
#endif /* (configCOMPILER==configCOMPILER_ARM_KEIL) */
/*-----------------------------------------------------------*/
portSTACK_TYPE *pxPortInitialiseStack(portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters) {
    9050:	b480      	push	{r7}
    9052:	b085      	sub	sp, #20
    9054:	af00      	add	r7, sp, #0
    9056:	60f8      	str	r0, [r7, #12]
    9058:	60b9      	str	r1, [r7, #8]
    905a:	607a      	str	r2, [r7, #4]
  /* Simulate the stack frame as it would be created by a context switch interrupt. */
  pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts,
    905c:	68fb      	ldr	r3, [r7, #12]
    905e:	3b04      	subs	r3, #4
    9060:	60fb      	str	r3, [r7, #12]
                        and to ensure alignment. */
  *pxTopOfStack = portINITIAL_XPSR;   /* xPSR */
    9062:	68fb      	ldr	r3, [r7, #12]
    9064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9068:	601a      	str	r2, [r3, #0]
  pxTopOfStack--;
    906a:	68fb      	ldr	r3, [r7, #12]
    906c:	3b04      	subs	r3, #4
    906e:	60fb      	str	r3, [r7, #12]
  *pxTopOfStack = (portSTACK_TYPE)pxCode;  /* PC */
    9070:	68ba      	ldr	r2, [r7, #8]
    9072:	68fb      	ldr	r3, [r7, #12]
    9074:	601a      	str	r2, [r3, #0]
  pxTopOfStack--;
    9076:	68fb      	ldr	r3, [r7, #12]
    9078:	3b04      	subs	r3, #4
    907a:	60fb      	str	r3, [r7, #12]
  *pxTopOfStack = (portSTACK_TYPE)portTASK_RETURN_ADDRESS;  /* LR */
    907c:	68fb      	ldr	r3, [r7, #12]
    907e:	2200      	movs	r2, #0
    9080:	601a      	str	r2, [r3, #0]

  /* Save code space by skipping register initialization. */
#if 1
  pxTopOfStack -= 5;  /* R12, R3, R2 and R1. */
    9082:	68fb      	ldr	r3, [r7, #12]
    9084:	3b14      	subs	r3, #20
    9086:	60fb      	str	r3, [r7, #12]
  *pxTopOfStack = 0x02020202; /* R2 */
  pxTopOfStack--;
  *pxTopOfStack = 0x01010101; /* R1 */
  pxTopOfStack--;
#endif
  *pxTopOfStack = (portSTACK_TYPE)pvParameters; /* R0 */
    9088:	687a      	ldr	r2, [r7, #4]
    908a:	68fb      	ldr	r3, [r7, #12]
    908c:	601a      	str	r2, [r3, #0]

#if configCPU_FAMILY_IS_ARM_FPU(configCPU_FAMILY) /* has floating point unit */
  /* A save method is being used that requires each task to maintain its
     own exec return value. */
  pxTopOfStack--;
    908e:	68fb      	ldr	r3, [r7, #12]
    9090:	3b04      	subs	r3, #4
    9092:	60fb      	str	r3, [r7, #12]
  *pxTopOfStack = portINITIAL_EXEC_RETURN;
    9094:	68fb      	ldr	r3, [r7, #12]
    9096:	f06f 0202 	mvn.w	r2, #2
    909a:	601a      	str	r2, [r3, #0]
#endif
#if 1
  pxTopOfStack -= 8;  /* R11, R10, R9, R8, R7, R6, R5 and R4. */
    909c:	68fb      	ldr	r3, [r7, #12]
    909e:	3b20      	subs	r3, #32
    90a0:	60fb      	str	r3, [r7, #12]
  pxTopOfStack--;
  *pxTopOfStack = 0x55555555; /* R5 */
  pxTopOfStack--;
  *pxTopOfStack = 0x44444444; /* R4 */
#endif
  return pxTopOfStack;
    90a2:	68fb      	ldr	r3, [r7, #12]
}
    90a4:	4618      	mov	r0, r3
    90a6:	3714      	adds	r7, #20
    90a8:	46bd      	mov	sp, r7
    90aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ae:	4770      	bx	lr

000090b0 <vPortInitTickTimer>:
    portEXIT_CRITICAL();
  }
}
#endif /* #if configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/
void vPortInitTickTimer(void) {
    90b0:	b480      	push	{r7}
    90b2:	af00      	add	r7, sp, #0
#endif
  /* set timer interrupt priority in IP[] and enable it in ISER[] */
  NVIC_SetPriority(configLOW_POWER_TIMER_VECTOR_NUMBER, configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
  NVIC_EnableIRQ(configLOW_POWER_TIMER_VECTOR_NUMBER); /* enable IRQ in NVIC_ISER[] */
#else /* use normal SysTick Counter */
  *(portNVIC_SYSPRI3) |= portNVIC_SYSTICK_PRI; /* set priority of SysTick interrupt */
    90b4:	4a0b      	ldr	r2, [pc, #44]	; (90e4 <vPortInitTickTimer+0x34>)
    90b6:	4b0b      	ldr	r3, [pc, #44]	; (90e4 <vPortInitTickTimer+0x34>)
    90b8:	681b      	ldr	r3, [r3, #0]
    90ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
    90be:	6013      	str	r3, [r2, #0]
#endif
  /* Configure timer to interrupt at the requested rate. */
  DISABLE_TICK_COUNTER(); /* disable the timer, just in case it is already running */
    90c0:	4b09      	ldr	r3, [pc, #36]	; (90e8 <vPortInitTickTimer+0x38>)
    90c2:	2206      	movs	r2, #6
    90c4:	601a      	str	r2, [r3, #0]
  SET_TICK_DURATION(TIMER_COUNTS_FOR_ONE_TICK-1UL); /* set tick period */
    90c6:	4b09      	ldr	r3, [pc, #36]	; (90ec <vPortInitTickTimer+0x3c>)
    90c8:	4a09      	ldr	r2, [pc, #36]	; (90f0 <vPortInitTickTimer+0x40>)
    90ca:	601a      	str	r2, [r3, #0]
  RESET_TICK_COUNTER_VAL(); /* reset counter so it starts properly */
    90cc:	4b09      	ldr	r3, [pc, #36]	; (90f4 <vPortInitTickTimer+0x44>)
    90ce:	2200      	movs	r2, #0
    90d0:	601a      	str	r2, [r3, #0]
  ENABLE_TICK_COUNTER(); /* let it run */
    90d2:	4b05      	ldr	r3, [pc, #20]	; (90e8 <vPortInitTickTimer+0x38>)
    90d4:	2207      	movs	r2, #7
    90d6:	601a      	str	r2, [r3, #0]
}
    90d8:	bf00      	nop
    90da:	46bd      	mov	sp, r7
    90dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    90e0:	4770      	bx	lr
    90e2:	bf00      	nop
    90e4:	e000ed20 	.word	0xe000ed20
    90e8:	e000e010 	.word	0xe000e010
    90ec:	e000e014 	.word	0xe000e014
    90f0:	00033332 	.word	0x00033332
    90f4:	e000e018 	.word	0xe000e018

000090f8 <vPortStartTickTimer>:
/*-----------------------------------------------------------*/
void vPortStartTickTimer(void) {
    90f8:	b480      	push	{r7}
    90fa:	af00      	add	r7, sp, #0
  ENABLE_TICK_COUNTER();
    90fc:	4b03      	ldr	r3, [pc, #12]	; (910c <vPortStartTickTimer+0x14>)
    90fe:	2207      	movs	r2, #7
    9100:	601a      	str	r2, [r3, #0]
}
    9102:	bf00      	nop
    9104:	46bd      	mov	sp, r7
    9106:	f85d 7b04 	ldr.w	r7, [sp], #4
    910a:	4770      	bx	lr
    910c:	e000e010 	.word	0xe000e010

00009110 <vPortStopTickTimer>:
/*-----------------------------------------------------------*/
void vPortStopTickTimer(void) {
    9110:	b480      	push	{r7}
    9112:	af00      	add	r7, sp, #0
  DISABLE_TICK_COUNTER();
    9114:	4b03      	ldr	r3, [pc, #12]	; (9124 <vPortStopTickTimer+0x14>)
    9116:	2206      	movs	r2, #6
    9118:	601a      	str	r2, [r3, #0]
}
    911a:	bf00      	nop
    911c:	46bd      	mov	sp, r7
    911e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9122:	4770      	bx	lr
    9124:	e000e010 	.word	0xe000e010

00009128 <vPortEnableVFP>:
/*-----------------------------------------------------------*/
#if configCPU_FAMILY_IS_ARM_FPU(configCPU_FAMILY) /* has floating point unit */
#if (configCOMPILER==configCOMPILER_ARM_GCC)
/* added noinline attribute to prevent the GNU linker to optimize the following function. That symbol is required for the FreeRTOS GDB thread awareness by Segger */
void __attribute__ ((noinline)) vPortEnableVFP(void) {
    9128:	b480      	push	{r7}
    912a:	af00      	add	r7, sp, #0
  /* The FPU enable bits are in the CPACR. */
  __asm volatile (
    912c:	f8df 02d4 	ldr.w	r0, [pc, #724]	; 9404 <vPortValidateInterruptPriority+0x68>
    9130:	6801      	ldr	r1, [r0, #0]
    9132:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    9136:	6001      	str	r1, [r0, #0]
    "  str r1, [r0]           \n" /* store to new value back */
    : /* no output */
    : /* no input */
    : "r0","r1" /* clobber */
  );
}
    9138:	bf00      	nop
    913a:	46bd      	mov	sp, r7
    913c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9140:	4770      	bx	lr
    9142:	bf00      	nop

00009144 <xPortStartScheduler>:
  static uint8_t ucMaxSysCallPriority = 0;
  static uint32_t ulMaxPRIGROUPValue = 0;
  static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * const ) portNVIC_IP_REGISTERS_OFFSET_16;
#endif /* configASSERT_DEFINED */

BaseType_t xPortStartScheduler(void) {
    9144:	b580      	push	{r7, lr}
    9146:	b084      	sub	sp, #16
    9148:	af00      	add	r7, sp, #0

#if configCPU_FAMILY_IS_ARM_M4_M7(configCPU_FAMILY) /* ARM M4(F)/M7 core */
  #if( configASSERT_DEFINED == 1 )
  {
    volatile uint32_t ulOriginalPriority;
    volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
    914a:	4b29      	ldr	r3, [pc, #164]	; (91f0 <xPortStartScheduler+0xac>)
    914c:	60fb      	str	r3, [r7, #12]
    functions can be called.  ISR safe functions are those that end in
    "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
    ensure interrupt entry is as fast and simple as possible.

    Save the interrupt priority value that is about to be clobbered. */
    ulOriginalPriority = *pucFirstUserPriorityRegister;
    914e:	68fb      	ldr	r3, [r7, #12]
    9150:	781b      	ldrb	r3, [r3, #0]
    9152:	b2db      	uxtb	r3, r3
    9154:	60bb      	str	r3, [r7, #8]

    /* Determine the number of priority bits available.  First write to all
    possible bits. */
    *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    9156:	68fb      	ldr	r3, [r7, #12]
    9158:	22ff      	movs	r2, #255	; 0xff
    915a:	701a      	strb	r2, [r3, #0]

    /* Read the value back to see how many bits stuck. */
    ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    915c:	68fb      	ldr	r3, [r7, #12]
    915e:	781b      	ldrb	r3, [r3, #0]
    9160:	b2db      	uxtb	r3, r3
    9162:	71fb      	strb	r3, [r7, #7]

    /* Use the same mask on the maximum system call priority. */
    ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    9164:	79fb      	ldrb	r3, [r7, #7]
    9166:	b2db      	uxtb	r3, r3
    9168:	f003 0350 	and.w	r3, r3, #80	; 0x50
    916c:	b2da      	uxtb	r2, r3
    916e:	4b21      	ldr	r3, [pc, #132]	; (91f4 <xPortStartScheduler+0xb0>)
    9170:	701a      	strb	r2, [r3, #0]

    /* Calculate the maximum acceptable priority group value for the number
    of bits read back. */
    ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    9172:	4b21      	ldr	r3, [pc, #132]	; (91f8 <xPortStartScheduler+0xb4>)
    9174:	2207      	movs	r2, #7
    9176:	601a      	str	r2, [r3, #0]
    while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    9178:	e009      	b.n	918e <xPortStartScheduler+0x4a>
    {
      ulMaxPRIGROUPValue--;
    917a:	4b1f      	ldr	r3, [pc, #124]	; (91f8 <xPortStartScheduler+0xb4>)
    917c:	681b      	ldr	r3, [r3, #0]
    917e:	3b01      	subs	r3, #1
    9180:	4a1d      	ldr	r2, [pc, #116]	; (91f8 <xPortStartScheduler+0xb4>)
    9182:	6013      	str	r3, [r2, #0]
      ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    9184:	79fb      	ldrb	r3, [r7, #7]
    9186:	b2db      	uxtb	r3, r3
    9188:	005b      	lsls	r3, r3, #1
    918a:	b2db      	uxtb	r3, r3
    918c:	71fb      	strb	r3, [r7, #7]
    ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

    /* Calculate the maximum acceptable priority group value for the number
    of bits read back. */
    ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
    918e:	79fb      	ldrb	r3, [r7, #7]
    9190:	b2db      	uxtb	r3, r3
    9192:	b25b      	sxtb	r3, r3
    9194:	2b00      	cmp	r3, #0
    9196:	dbf0      	blt.n	917a <xPortStartScheduler+0x36>
      ucMaxPriorityValue <<= ( uint8_t ) 0x01;
    }

    /* Shift the priority group value back to its position within the AIRCR
    register. */
    ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    9198:	4b17      	ldr	r3, [pc, #92]	; (91f8 <xPortStartScheduler+0xb4>)
    919a:	681b      	ldr	r3, [r3, #0]
    919c:	021b      	lsls	r3, r3, #8
    919e:	4a16      	ldr	r2, [pc, #88]	; (91f8 <xPortStartScheduler+0xb4>)
    91a0:	6013      	str	r3, [r2, #0]
    ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    91a2:	4b15      	ldr	r3, [pc, #84]	; (91f8 <xPortStartScheduler+0xb4>)
    91a4:	681b      	ldr	r3, [r3, #0]
    91a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    91aa:	4a13      	ldr	r2, [pc, #76]	; (91f8 <xPortStartScheduler+0xb4>)
    91ac:	6013      	str	r3, [r2, #0]

    /* Restore the clobbered interrupt priority register to its original
    value. */
    *pucFirstUserPriorityRegister = ulOriginalPriority;
    91ae:	68bb      	ldr	r3, [r7, #8]
    91b0:	b2da      	uxtb	r2, r3
    91b2:	68fb      	ldr	r3, [r7, #12]
    91b4:	701a      	strb	r2, [r3, #0]
#if 0 /* do NOT set the SVCall priority */
  /* why: execution of an SVC instruction at a priority equal or higher than SVCall can cause a hard fault (at least on Cortex-M4),
  see https://community.freescale.com/thread/302511 */
  *(portNVIC_SYSPRI2) |= portNVIC_SVCALL_PRI; /* set priority of SVCall interrupt */
#endif
  *(portNVIC_SYSPRI3) |= portNVIC_PENDSV_PRI; /* set priority of PendSV interrupt */
    91b6:	4a11      	ldr	r2, [pc, #68]	; (91fc <xPortStartScheduler+0xb8>)
    91b8:	4b10      	ldr	r3, [pc, #64]	; (91fc <xPortStartScheduler+0xb8>)
    91ba:	681b      	ldr	r3, [r3, #0]
    91bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    91c0:	6013      	str	r3, [r2, #0]
  uxCriticalNesting = 0; /* Initialize the critical nesting count ready for the first task. */
    91c2:	4b0f      	ldr	r3, [pc, #60]	; (9200 <xPortStartScheduler+0xbc>)
    91c4:	2200      	movs	r2, #0
    91c6:	601a      	str	r2, [r3, #0]
  vPortInitTickTimer(); /* initialize tick timer */
    91c8:	f7ff ff72 	bl	90b0 <vPortInitTickTimer>
  vPortStartTickTimer(); /* start tick timer */
    91cc:	f7ff ff94 	bl	90f8 <vPortStartTickTimer>
#if configCPU_FAMILY_IS_ARM_FPU(configCPU_FAMILY) /* has floating point unit */
  vPortEnableVFP(); /* Ensure the VFP is enabled - it should be anyway */
    91d0:	f7ff ffaa 	bl	9128 <vPortEnableVFP>
  *(portFPCCR) |= portASPEN_AND_LSPEN_BITS; /* Lazy register save always */
    91d4:	4a0b      	ldr	r2, [pc, #44]	; (9204 <xPortStartScheduler+0xc0>)
    91d6:	4b0b      	ldr	r3, [pc, #44]	; (9204 <xPortStartScheduler+0xc0>)
    91d8:	681b      	ldr	r3, [r3, #0]
    91da:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    91de:	6013      	str	r3, [r2, #0]
    if(setjmp(xJumpBuf) != 0 ) {
      /* here we will get in case of call to vTaskEndScheduler() */
      return pdFALSE;
    }
#endif
  vPortStartFirstTask(); /* Start the first task. */
    91e0:	f000 f88a 	bl	92f8 <vPortStartFirstTask>
  /* Should not get here, unless you call vTaskEndScheduler()! */
  return pdFALSE;
    91e4:	2300      	movs	r3, #0
}
    91e6:	4618      	mov	r0, r3
    91e8:	3710      	adds	r7, #16
    91ea:	46bd      	mov	sp, r7
    91ec:	bd80      	pop	{r7, pc}
    91ee:	bf00      	nop
    91f0:	e000e400 	.word	0xe000e400
    91f4:	20002ad0 	.word	0x20002ad0
    91f8:	20002ad4 	.word	0x20002ad4
    91fc:	e000ed20 	.word	0xe000ed20
    9200:	2000001c 	.word	0x2000001c
    9204:	e000ef34 	.word	0xe000ef34

00009208 <vPortEndScheduler>:
/*-----------------------------------------------------------*/
void vPortEndScheduler(void) {
    9208:	b580      	push	{r7, lr}
    920a:	af00      	add	r7, sp, #0
  vPortStopTickTimer();
    920c:	f7ff ff80 	bl	9110 <vPortStopTickTimer>
     scheduler.  This means we are not going to be using a
     task stack frame so the task can be deleted. */
#if INCLUDE_vTaskEndScheduler
  longjmp(xJumpBuf, 1);
#else
  for(;;){} /* wait here */
    9210:	e7fe      	b.n	9210 <vPortEndScheduler+0x8>
    9212:	bf00      	nop

00009214 <vPortEnterCritical>:
#endif
}
/*-----------------------------------------------------------*/
void vPortEnterCritical(void) {
    9214:	b480      	push	{r7}
    9216:	af00      	add	r7, sp, #0
 * Disable interrupts before incrementing the count of critical section nesting.
 * The nesting count is maintained so we know when interrupts should be
 * re-enabled.  Once interrupts are disabled the nesting count can be accessed
 * directly.  Each task maintains its own nesting count.
 */
  portDISABLE_INTERRUPTS();
    9218:	f04f 0050 	mov.w	r0, #80	; 0x50
    921c:	f380 8811 	msr	BASEPRI, r0
  portPOST_ENABLE_DISABLE_INTERRUPTS();
  uxCriticalNesting++;
    9220:	4b0d      	ldr	r3, [pc, #52]	; (9258 <vPortEnterCritical+0x44>)
    9222:	681b      	ldr	r3, [r3, #0]
    9224:	3301      	adds	r3, #1
    9226:	4a0c      	ldr	r2, [pc, #48]	; (9258 <vPortEnterCritical+0x44>)
    9228:	6013      	str	r3, [r2, #0]
  /* This is not the interrupt safe version of the enter critical function so
  assert() if it is being called from an interrupt context.  Only API
  functions that end in "FromISR" can be used in an interrupt.  Only assert if
  the critical nesting count is 1 to protect against recursive calls if the
  assert function also uses a critical section. */
  if( uxCriticalNesting == 1 )
    922a:	4b0b      	ldr	r3, [pc, #44]	; (9258 <vPortEnterCritical+0x44>)
    922c:	681b      	ldr	r3, [r3, #0]
    922e:	2b01      	cmp	r3, #1
    9230:	d109      	bne.n	9246 <vPortEnterCritical+0x32>
  {
    /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
    #define portVECTACTIVE_MASK         (0xFFUL)

    configASSERT(((*portNVIC_INT_CTRL) & portVECTACTIVE_MASK)==0);
    9232:	4b0a      	ldr	r3, [pc, #40]	; (925c <vPortEnterCritical+0x48>)
    9234:	681b      	ldr	r3, [r3, #0]
    9236:	b2db      	uxtb	r3, r3
    9238:	2b00      	cmp	r3, #0
    923a:	d004      	beq.n	9246 <vPortEnterCritical+0x32>
    923c:	f04f 0050 	mov.w	r0, #80	; 0x50
    9240:	f380 8811 	msr	BASEPRI, r0
    9244:	e7fe      	b.n	9244 <vPortEnterCritical+0x30>
  }
#endif
  __asm volatile("dsb");
    9246:	f3bf 8f4f 	dsb	sy
  __asm volatile("isb");
    924a:	f3bf 8f6f 	isb	sy
}
    924e:	bf00      	nop
    9250:	46bd      	mov	sp, r7
    9252:	f85d 7b04 	ldr.w	r7, [sp], #4
    9256:	4770      	bx	lr
    9258:	2000001c 	.word	0x2000001c
    925c:	e000ed04 	.word	0xe000ed04

00009260 <vPortExitCritical>:
/*-----------------------------------------------------------*/
void vPortExitCritical(void) {
    9260:	b480      	push	{r7}
    9262:	af00      	add	r7, sp, #0
 /* Interrupts are disabled so we can access the nesting count directly.  If the
  * nesting is found to be 0 (no nesting) then we are leaving the critical
  * section and interrupts can be re-enabled.
  */
  uxCriticalNesting--;
    9264:	4b08      	ldr	r3, [pc, #32]	; (9288 <vPortExitCritical+0x28>)
    9266:	681b      	ldr	r3, [r3, #0]
    9268:	3b01      	subs	r3, #1
    926a:	4a07      	ldr	r2, [pc, #28]	; (9288 <vPortExitCritical+0x28>)
    926c:	6013      	str	r3, [r2, #0]
  if (uxCriticalNesting == 0)  {
    926e:	4b06      	ldr	r3, [pc, #24]	; (9288 <vPortExitCritical+0x28>)
    9270:	681b      	ldr	r3, [r3, #0]
    9272:	2b00      	cmp	r3, #0
    9274:	d103      	bne.n	927e <vPortExitCritical+0x1e>
    portENABLE_INTERRUPTS();
    9276:	f04f 0000 	mov.w	r0, #0
    927a:	f380 8811 	msr	BASEPRI, r0
    portPOST_ENABLE_DISABLE_INTERRUPTS();
  }
}
    927e:	bf00      	nop
    9280:	46bd      	mov	sp, r7
    9282:	f85d 7b04 	ldr.w	r7, [sp], #4
    9286:	4770      	bx	lr
    9288:	2000001c 	.word	0x2000001c

0000928c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/
void vPortYieldFromISR(void) {
    928c:	b480      	push	{r7}
    928e:	af00      	add	r7, sp, #0
  /* Set a PendSV to request a context switch. */
  *(portNVIC_INT_CTRL) = portNVIC_PENDSVSET_BIT;
    9290:	4b06      	ldr	r3, [pc, #24]	; (92ac <vPortYieldFromISR+0x20>)
    9292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9296:	601a      	str	r2, [r3, #0]
  /* Barriers are normally not required but do ensure the code is completely
  within the specified behavior for the architecture. */
  __asm volatile("dsb");
    9298:	f3bf 8f4f 	dsb	sy
  __asm volatile("isb");
    929c:	f3bf 8f6f 	isb	sy
}
    92a0:	bf00      	nop
    92a2:	46bd      	mov	sp, r7
    92a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a8:	4770      	bx	lr
    92aa:	bf00      	nop
    92ac:	e000ed04 	.word	0xe000ed04

000092b0 <uxGetTickCounterValue>:
/*-----------------------------------------------------------*/
/* return the tick raw counter value. It is assumed that the counter register has been reset at the last tick time */
portLONG uxGetTickCounterValue(void) {
    92b0:	b480      	push	{r7}
    92b2:	b083      	sub	sp, #12
    92b4:	af00      	add	r7, sp, #0
  portLONG val;
  
  GET_TICK_CURRENT_VAL(&val);
    92b6:	4b05      	ldr	r3, [pc, #20]	; (92cc <uxGetTickCounterValue+0x1c>)
    92b8:	681b      	ldr	r3, [r3, #0]
    92ba:	607b      	str	r3, [r7, #4]
  return val;
    92bc:	687b      	ldr	r3, [r7, #4]
}
    92be:	4618      	mov	r0, r3
    92c0:	370c      	adds	r7, #12
    92c2:	46bd      	mov	sp, r7
    92c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92c8:	4770      	bx	lr
    92ca:	bf00      	nop
    92cc:	e000e018 	.word	0xe000e018

000092d0 <vPortTickHandler>:
void LPTMR0_IRQHandler(void) { /* low power timer */
#else
void SysTick_Handler(void) { /* normal SysTick */
#endif
#else
void vPortTickHandler(void) {
    92d0:	b580      	push	{r7, lr}
    92d2:	af00      	add	r7, sp, #0
#endif
  /* The SysTick runs at the lowest interrupt priority, so when this interrupt
    executes all interrupts must be unmasked.  There is therefore no need to
    save and then restore the interrupt mask value as its value is already
    known. */
  portDISABLE_INTERRUPTS();   /* disable interrupts */
    92d4:	f04f 0050 	mov.w	r0, #80	; 0x50
    92d8:	f380 8811 	msr	BASEPRI, r0
      ENABLE_TICK_COUNTER();
    }
    restoreTickInterval -= 1;
  }
#endif
  if (xTaskIncrementTick()!=pdFALSE) { /* increment tick count */
    92dc:	f002 f962 	bl	b5a4 <xTaskIncrementTick>
    92e0:	4603      	mov	r3, r0
    92e2:	2b00      	cmp	r3, #0
    92e4:	d001      	beq.n	92ea <vPortTickHandler+0x1a>
    traceISR_EXIT_TO_SCHEDULER();
    taskYIELD();
    92e6:	f7ff ffd1 	bl	928c <vPortYieldFromISR>
  } else {
    traceISR_EXIT();
  }
  portENABLE_INTERRUPTS(); /* re-enable interrupts */
    92ea:	f04f 0000 	mov.w	r0, #0
    92ee:	f380 8811 	msr	BASEPRI, r0
}
    92f2:	bf00      	nop
    92f4:	bd80      	pop	{r7, pc}
    92f6:	bf00      	nop

000092f8 <vPortStartFirstTask>:
#endif
}
#endif
/*-----------------------------------------------------------*/
#if (configCOMPILER==configCOMPILER_ARM_GCC)
void vPortStartFirstTask(void) {
    92f8:	b480      	push	{r7}
    92fa:	b083      	sub	sp, #12
    92fc:	af00      	add	r7, sp, #0
#if 1 /* only needed for openOCD thread awareness. It needs the symbol uxTopUsedPriority present after linking */
  {
    extern volatile const int uxTopUsedPriority;
    __attribute__((__unused__)) volatile uint8_t dummy_value_for_openocd;
    dummy_value_for_openocd = uxTopUsedPriority;
    92fe:	4b09      	ldr	r3, [pc, #36]	; (9324 <vPortStartFirstTask+0x2c>)
    9300:	681b      	ldr	r3, [r3, #0]
    9302:	b2db      	uxtb	r3, r3
    9304:	71fb      	strb	r3, [r7, #7]
  }
#endif
#if configCPU_FAMILY_IS_ARM_M4_M7(configCPU_FAMILY) /* Cortex M4/M7 */
  __asm volatile (
    9306:	4840      	ldr	r0, [pc, #256]	; (9408 <vPortValidateInterruptPriority+0x6c>)
    9308:	6800      	ldr	r0, [r0, #0]
    930a:	6800      	ldr	r0, [r0, #0]
    930c:	f380 8808 	msr	MSP, r0
    9310:	b662      	cpsie	i
    9312:	df00      	svc	0
    9314:	bf00      	nop
    "                     \n"
    " .align 4            \n"
    "pxCurrentTCBConst2: .word pxCurrentTCB"
          );
#endif
}
    9316:	bf00      	nop
    9318:	370c      	adds	r7, #12
    931a:	46bd      	mov	sp, r7
    931c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9320:	4770      	bx	lr
    9322:	bf00      	nop
    9324:	20000020 	.word	0x20000020

00009328 <vPortSVCHandler>:
__attribute__ ((naked)) void SVC_Handler(void) {
#else
__attribute__ ((naked)) void vPortSVCHandler(void) {
#endif
#if configCPU_FAMILY_IS_ARM_M4_M7(configCPU_FAMILY)  /* Cortex M4 or M7 */
__asm volatile (
    9328:	4b05      	ldr	r3, [pc, #20]	; (9340 <pxCurrentTCBConst2>)
    932a:	6819      	ldr	r1, [r3, #0]
    932c:	6808      	ldr	r0, [r1, #0]
    932e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9332:	f380 8809 	msr	PSP, r0
    9336:	f04f 0000 	mov.w	r0, #0
    933a:	f380 8811 	msr	BASEPRI, r0
    933e:	4770      	bx	lr

00009340 <pxCurrentTCBConst2>:
    9340:	20002ad8 	.word	0x20002ad8
  );
#elif configCPU_FAMILY_IS_ARM_M0(configCPU_FAMILY) /* Cortex M0+ */
  /* This function is no longer used, but retained for backward
   compatibility. */
#endif
}
    9344:	bf00      	nop
    9346:	bf00      	nop

00009348 <vPortPendSVHandler>:
__attribute__ ((naked)) void PendSV_Handler(void) {
#else
__attribute__ ((naked)) void vPortPendSVHandler(void) {
#endif
#if configCPU_FAMILY_IS_ARM_M4_M7(configCPU_FAMILY) /* Cortex M4 or M7*/
  __asm volatile (
    9348:	f3ef 8009 	mrs	r0, PSP
    934c:	4b11      	ldr	r3, [pc, #68]	; (9394 <pxCurrentTCBConst>)
    934e:	681a      	ldr	r2, [r3, #0]
    9350:	f01e 0f10 	tst.w	lr, #16
    9354:	bf08      	it	eq
    9356:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    935a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    935e:	6010      	str	r0, [r2, #0]
    9360:	e92d 4008 	stmdb	sp!, {r3, lr}
    9364:	f04f 0050 	mov.w	r0, #80	; 0x50
    9368:	f380 8811 	msr	BASEPRI, r0
    936c:	f002 f9fa 	bl	b764 <vTaskSwitchContext>
    9370:	f04f 0000 	mov.w	r0, #0
    9374:	f380 8811 	msr	BASEPRI, r0
    9378:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    937c:	6819      	ldr	r1, [r3, #0]
    937e:	6808      	ldr	r0, [r1, #0]
    9380:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9384:	f01e 0f10 	tst.w	lr, #16
    9388:	bf08      	it	eq
    938a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    938e:	f380 8809 	msr	PSP, r0
    9392:	4770      	bx	lr

00009394 <pxCurrentTCBConst>:
    9394:	20002ad8 	.word	0x20002ad8
    "                            \n"
    ".align 2                    \n"
    "pxCurrentTCBConst: .word pxCurrentTCB"
  );
#endif
}
    9398:	bf00      	nop
    939a:	bf00      	nop

0000939c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/
#if configCPU_FAMILY_IS_ARM_M4_M7(configCPU_FAMILY) /* ARM M4(F) or M7 core */
#if( configASSERT_DEFINED == 1 )

  void vPortValidateInterruptPriority( void )
  {
    939c:	b480      	push	{r7}
    939e:	b083      	sub	sp, #12
    93a0:	af00      	add	r7, sp, #0
  uint32_t ulCurrentInterrupt;
  uint8_t ucCurrentPriority;

    /* Obtain the number of the currently executing interrupt. */
    __asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
    93a2:	f3ef 8305 	mrs	r3, IPSR
    93a6:	607b      	str	r3, [r7, #4]

    /* Is the interrupt number a user defined interrupt? */
    if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
    93a8:	687b      	ldr	r3, [r7, #4]
    93aa:	2b0f      	cmp	r3, #15
    93ac:	d90e      	bls.n	93cc <vPortValidateInterruptPriority+0x30>
    {
      /* Look up the interrupt's priority. */
      ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
    93ae:	4a11      	ldr	r2, [pc, #68]	; (93f4 <vPortValidateInterruptPriority+0x58>)
    93b0:	687b      	ldr	r3, [r7, #4]
    93b2:	4413      	add	r3, r2
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	70fb      	strb	r3, [r7, #3]
      interrupt entry is as fast and simple as possible.

      The following links provide detailed information:
      http://www.freertos.org/RTOS-Cortex-M3-M4.html
      http://www.freertos.org/FAQHelp.html */
      configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
    93b8:	4b0f      	ldr	r3, [pc, #60]	; (93f8 <vPortValidateInterruptPriority+0x5c>)
    93ba:	781b      	ldrb	r3, [r3, #0]
    93bc:	78fa      	ldrb	r2, [r7, #3]
    93be:	429a      	cmp	r2, r3
    93c0:	d204      	bcs.n	93cc <vPortValidateInterruptPriority+0x30>
    93c2:	f04f 0050 	mov.w	r0, #80	; 0x50
    93c6:	f380 8811 	msr	BASEPRI, r0
    93ca:	e7fe      	b.n	93ca <vPortValidateInterruptPriority+0x2e>
    configuration then the correct setting can be achieved on all Cortex-M
    devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
    scheduler.  Note however that some vendor specific peripheral libraries
    assume a non-zero priority group setting, in which cases using a value
    of zero will result in unpredicable behaviour. */
    configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
    93cc:	4b0b      	ldr	r3, [pc, #44]	; (93fc <vPortValidateInterruptPriority+0x60>)
    93ce:	681b      	ldr	r3, [r3, #0]
    93d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
    93d4:	4b0a      	ldr	r3, [pc, #40]	; (9400 <vPortValidateInterruptPriority+0x64>)
    93d6:	681b      	ldr	r3, [r3, #0]
    93d8:	429a      	cmp	r2, r3
    93da:	d904      	bls.n	93e6 <vPortValidateInterruptPriority+0x4a>
    93dc:	f04f 0050 	mov.w	r0, #80	; 0x50
    93e0:	f380 8811 	msr	BASEPRI, r0
    93e4:	e7fe      	b.n	93e4 <vPortValidateInterruptPriority+0x48>
  }
    93e6:	bf00      	nop
    93e8:	370c      	adds	r7, #12
    93ea:	46bd      	mov	sp, r7
    93ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    93f0:	4770      	bx	lr
    93f2:	bf00      	nop
    93f4:	e000e3f0 	.word	0xe000e3f0
    93f8:	20002ad0 	.word	0x20002ad0
    93fc:	e000ed0c 	.word	0xe000ed0c
    9400:	20002ad4 	.word	0x20002ad4
    9404:	e000ed88 	.word	0xe000ed88
    9408:	e000ed08 	.word	0xe000ed08

0000940c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    940c:	b580      	push	{r7, lr}
    940e:	b084      	sub	sp, #16
    9410:	af00      	add	r7, sp, #0
    9412:	6078      	str	r0, [r7, #4]
    9414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    9416:	687b      	ldr	r3, [r7, #4]
    9418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    941a:	68fb      	ldr	r3, [r7, #12]
    941c:	2b00      	cmp	r3, #0
    941e:	d104      	bne.n	942a <xQueueGenericReset+0x1e>
    9420:	f04f 0050 	mov.w	r0, #80	; 0x50
    9424:	f380 8811 	msr	BASEPRI, r0
    9428:	e7fe      	b.n	9428 <xQueueGenericReset+0x1c>

	taskENTER_CRITICAL();
    942a:	f7ff fef3 	bl	9214 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    942e:	68fb      	ldr	r3, [r7, #12]
    9430:	681a      	ldr	r2, [r3, #0]
    9432:	68fb      	ldr	r3, [r7, #12]
    9434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9436:	68f9      	ldr	r1, [r7, #12]
    9438:	6c09      	ldr	r1, [r1, #64]	; 0x40
    943a:	fb01 f303 	mul.w	r3, r1, r3
    943e:	441a      	add	r2, r3
    9440:	68fb      	ldr	r3, [r7, #12]
    9442:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    9444:	68fb      	ldr	r3, [r7, #12]
    9446:	2200      	movs	r2, #0
    9448:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    944a:	68fb      	ldr	r3, [r7, #12]
    944c:	681a      	ldr	r2, [r3, #0]
    944e:	68fb      	ldr	r3, [r7, #12]
    9450:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    9452:	68fb      	ldr	r3, [r7, #12]
    9454:	681a      	ldr	r2, [r3, #0]
    9456:	68fb      	ldr	r3, [r7, #12]
    9458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    945a:	3b01      	subs	r3, #1
    945c:	68f9      	ldr	r1, [r7, #12]
    945e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    9460:	fb01 f303 	mul.w	r3, r1, r3
    9464:	441a      	add	r2, r3
    9466:	68fb      	ldr	r3, [r7, #12]
    9468:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    946a:	68fb      	ldr	r3, [r7, #12]
    946c:	22ff      	movs	r2, #255	; 0xff
    946e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
    9472:	68fb      	ldr	r3, [r7, #12]
    9474:	22ff      	movs	r2, #255	; 0xff
    9476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
    947a:	683b      	ldr	r3, [r7, #0]
    947c:	2b00      	cmp	r3, #0
    947e:	d10e      	bne.n	949e <xQueueGenericReset+0x92>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9480:	68fb      	ldr	r3, [r7, #12]
    9482:	691b      	ldr	r3, [r3, #16]
    9484:	2b00      	cmp	r3, #0
    9486:	d014      	beq.n	94b2 <xQueueGenericReset+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9488:	68fb      	ldr	r3, [r7, #12]
    948a:	3310      	adds	r3, #16
    948c:	4618      	mov	r0, r3
    948e:	f002 fa2f 	bl	b8f0 <xTaskRemoveFromEventList>
    9492:	4603      	mov	r3, r0
    9494:	2b00      	cmp	r3, #0
    9496:	d00c      	beq.n	94b2 <xQueueGenericReset+0xa6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    9498:	f7ff fef8 	bl	928c <vPortYieldFromISR>
    949c:	e009      	b.n	94b2 <xQueueGenericReset+0xa6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    949e:	68fb      	ldr	r3, [r7, #12]
    94a0:	3310      	adds	r3, #16
    94a2:	4618      	mov	r0, r3
    94a4:	f7ff fd0a 	bl	8ebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    94a8:	68fb      	ldr	r3, [r7, #12]
    94aa:	3324      	adds	r3, #36	; 0x24
    94ac:	4618      	mov	r0, r3
    94ae:	f7ff fd05 	bl	8ebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    94b2:	f7ff fed5 	bl	9260 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    94b6:	2301      	movs	r3, #1
}
    94b8:	4618      	mov	r0, r3
    94ba:	3710      	adds	r7, #16
    94bc:	46bd      	mov	sp, r7
    94be:	bd80      	pop	{r7, pc}

000094c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    94c0:	b580      	push	{r7, lr}
    94c2:	b08a      	sub	sp, #40	; 0x28
    94c4:	af02      	add	r7, sp, #8
    94c6:	60f8      	str	r0, [r7, #12]
    94c8:	60b9      	str	r1, [r7, #8]
    94ca:	4613      	mov	r3, r2
    94cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    94ce:	68fb      	ldr	r3, [r7, #12]
    94d0:	2b00      	cmp	r3, #0
    94d2:	d104      	bne.n	94de <xQueueGenericCreate+0x1e>
    94d4:	f04f 0050 	mov.w	r0, #80	; 0x50
    94d8:	f380 8811 	msr	BASEPRI, r0
    94dc:	e7fe      	b.n	94dc <xQueueGenericCreate+0x1c>

		if( uxItemSize == ( UBaseType_t ) 0 )
    94de:	68bb      	ldr	r3, [r7, #8]
    94e0:	2b00      	cmp	r3, #0
    94e2:	d102      	bne.n	94ea <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    94e4:	2300      	movs	r3, #0
    94e6:	61fb      	str	r3, [r7, #28]
    94e8:	e004      	b.n	94f4 <xQueueGenericCreate+0x34>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    94ea:	68fb      	ldr	r3, [r7, #12]
    94ec:	68ba      	ldr	r2, [r7, #8]
    94ee:	fb02 f303 	mul.w	r3, r2, r3
    94f2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    94f4:	69fb      	ldr	r3, [r7, #28]
    94f6:	3350      	adds	r3, #80	; 0x50
    94f8:	4618      	mov	r0, r3
    94fa:	f7ff fae3 	bl	8ac4 <pvPortMalloc>
    94fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
    9500:	69bb      	ldr	r3, [r7, #24]
    9502:	2b00      	cmp	r3, #0
    9504:	d00b      	beq.n	951e <xQueueGenericCreate+0x5e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    9506:	69bb      	ldr	r3, [r7, #24]
    9508:	3350      	adds	r3, #80	; 0x50
    950a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    950c:	79fa      	ldrb	r2, [r7, #7]
    950e:	69bb      	ldr	r3, [r7, #24]
    9510:	9300      	str	r3, [sp, #0]
    9512:	4613      	mov	r3, r2
    9514:	697a      	ldr	r2, [r7, #20]
    9516:	68b9      	ldr	r1, [r7, #8]
    9518:	68f8      	ldr	r0, [r7, #12]
    951a:	f000 f805 	bl	9528 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    951e:	69bb      	ldr	r3, [r7, #24]
	}
    9520:	4618      	mov	r0, r3
    9522:	3720      	adds	r7, #32
    9524:	46bd      	mov	sp, r7
    9526:	bd80      	pop	{r7, pc}

00009528 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    9528:	b580      	push	{r7, lr}
    952a:	b084      	sub	sp, #16
    952c:	af00      	add	r7, sp, #0
    952e:	60f8      	str	r0, [r7, #12]
    9530:	60b9      	str	r1, [r7, #8]
    9532:	607a      	str	r2, [r7, #4]
    9534:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    9536:	68bb      	ldr	r3, [r7, #8]
    9538:	2b00      	cmp	r3, #0
    953a:	d103      	bne.n	9544 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    953c:	69bb      	ldr	r3, [r7, #24]
    953e:	69ba      	ldr	r2, [r7, #24]
    9540:	601a      	str	r2, [r3, #0]
    9542:	e002      	b.n	954a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    9544:	69bb      	ldr	r3, [r7, #24]
    9546:	687a      	ldr	r2, [r7, #4]
    9548:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    954a:	69bb      	ldr	r3, [r7, #24]
    954c:	68fa      	ldr	r2, [r7, #12]
    954e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    9550:	69bb      	ldr	r3, [r7, #24]
    9552:	68ba      	ldr	r2, [r7, #8]
    9554:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    9556:	2101      	movs	r1, #1
    9558:	69b8      	ldr	r0, [r7, #24]
    955a:	f7ff ff57 	bl	940c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
    955e:	69bb      	ldr	r3, [r7, #24]
    9560:	78fa      	ldrb	r2, [r7, #3]
    9562:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    9566:	69bb      	ldr	r3, [r7, #24]
    9568:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    956c:	2b00      	cmp	r3, #0
    956e:	d002      	beq.n	9576 <prvInitialiseNewQueue+0x4e>
    9570:	2b03      	cmp	r3, #3
    9572:	d008      	beq.n	9586 <prvInitialiseNewQueue+0x5e>
}
    9574:	e00d      	b.n	9592 <prvInitialiseNewQueue+0x6a>
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
    9576:	69b9      	ldr	r1, [r7, #24]
    9578:	69bb      	ldr	r3, [r7, #24]
    957a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    957c:	461a      	mov	r2, r3
    957e:	2011      	movs	r0, #17
    9580:	f003 fff6 	bl	d570 <prvTraceStoreEvent2>
    9584:	e004      	b.n	9590 <prvInitialiseNewQueue+0x68>
    9586:	69bb      	ldr	r3, [r7, #24]
    9588:	4619      	mov	r1, r3
    958a:	2012      	movs	r0, #18
    958c:	f003 ffa4 	bl	d4d8 <prvTraceStoreEvent1>
    9590:	bf00      	nop
}
    9592:	bf00      	nop
    9594:	3710      	adds	r7, #16
    9596:	46bd      	mov	sp, r7
    9598:	bd80      	pop	{r7, pc}
    959a:	bf00      	nop

0000959c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    959c:	b580      	push	{r7, lr}
    959e:	b082      	sub	sp, #8
    95a0:	af00      	add	r7, sp, #0
    95a2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    95a4:	687b      	ldr	r3, [r7, #4]
    95a6:	2b00      	cmp	r3, #0
    95a8:	d023      	beq.n	95f2 <prvInitialiseMutex+0x56>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    95aa:	687b      	ldr	r3, [r7, #4]
    95ac:	2200      	movs	r2, #0
    95ae:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    95b0:	687b      	ldr	r3, [r7, #4]
    95b2:	2200      	movs	r2, #0
    95b4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	2200      	movs	r2, #0
    95ba:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );
    95bc:	687b      	ldr	r3, [r7, #4]
    95be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    95c2:	2b01      	cmp	r3, #1
    95c4:	d002      	beq.n	95cc <prvInitialiseMutex+0x30>
    95c6:	2b04      	cmp	r3, #4
    95c8:	d006      	beq.n	95d8 <prvInitialiseMutex+0x3c>
    95ca:	e00b      	b.n	95e4 <prvInitialiseMutex+0x48>
    95cc:	687b      	ldr	r3, [r7, #4]
    95ce:	4619      	mov	r1, r3
    95d0:	2013      	movs	r0, #19
    95d2:	f003 ff81 	bl	d4d8 <prvTraceStoreEvent1>
    95d6:	e004      	b.n	95e2 <prvInitialiseMutex+0x46>
    95d8:	687b      	ldr	r3, [r7, #4]
    95da:	4619      	mov	r1, r3
    95dc:	2017      	movs	r0, #23
    95de:	f003 ff7b 	bl	d4d8 <prvTraceStoreEvent1>
    95e2:	bf00      	nop

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    95e4:	2300      	movs	r3, #0
    95e6:	2200      	movs	r2, #0
    95e8:	2100      	movs	r1, #0
    95ea:	6878      	ldr	r0, [r7, #4]
    95ec:	f000 f900 	bl	97f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    95f0:	e002      	b.n	95f8 <prvInitialiseMutex+0x5c>
			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
    95f2:	2043      	movs	r0, #67	; 0x43
    95f4:	f003 ff2a 	bl	d44c <prvTraceStoreEvent0>
		}
	}
    95f8:	bf00      	nop
    95fa:	3708      	adds	r7, #8
    95fc:	46bd      	mov	sp, r7
    95fe:	bd80      	pop	{r7, pc}

00009600 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    9600:	b580      	push	{r7, lr}
    9602:	b086      	sub	sp, #24
    9604:	af00      	add	r7, sp, #0
    9606:	4603      	mov	r3, r0
    9608:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    960a:	2301      	movs	r3, #1
    960c:	617b      	str	r3, [r7, #20]
    960e:	2300      	movs	r3, #0
    9610:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    9612:	79fb      	ldrb	r3, [r7, #7]
    9614:	461a      	mov	r2, r3
    9616:	6939      	ldr	r1, [r7, #16]
    9618:	6978      	ldr	r0, [r7, #20]
    961a:	f7ff ff51 	bl	94c0 <xQueueGenericCreate>
    961e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    9620:	68f8      	ldr	r0, [r7, #12]
    9622:	f7ff ffbb 	bl	959c <prvInitialiseMutex>

		return pxNewQueue;
    9626:	68fb      	ldr	r3, [r7, #12]
	}
    9628:	4618      	mov	r0, r3
    962a:	3718      	adds	r7, #24
    962c:	46bd      	mov	sp, r7
    962e:	bd80      	pop	{r7, pc}

00009630 <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
    9630:	b580      	push	{r7, lr}
    9632:	b084      	sub	sp, #16
    9634:	af00      	add	r7, sp, #0
    9636:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    9638:	f7ff fdec 	bl	9214 <vPortEnterCritical>
		{
			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
    963c:	687b      	ldr	r3, [r7, #4]
    963e:	681b      	ldr	r3, [r3, #0]
    9640:	2b00      	cmp	r3, #0
    9642:	d103      	bne.n	964c <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
    9644:	687b      	ldr	r3, [r7, #4]
    9646:	685b      	ldr	r3, [r3, #4]
    9648:	60fb      	str	r3, [r7, #12]
    964a:	e001      	b.n	9650 <xQueueGetMutexHolder+0x20>
			}
			else
			{
				pxReturn = NULL;
    964c:	2300      	movs	r3, #0
    964e:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    9650:	f7ff fe06 	bl	9260 <vPortExitCritical>

		return pxReturn;
    9654:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
    9656:	4618      	mov	r0, r3
    9658:	3710      	adds	r7, #16
    965a:	46bd      	mov	sp, r7
    965c:	bd80      	pop	{r7, pc}
    965e:	bf00      	nop

00009660 <xQueueGetMutexHolderFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
	{
    9660:	b480      	push	{r7}
    9662:	b085      	sub	sp, #20
    9664:	af00      	add	r7, sp, #0
    9666:	6078      	str	r0, [r7, #4]
	void *pxReturn;

		configASSERT( xSemaphore );
    9668:	687b      	ldr	r3, [r7, #4]
    966a:	2b00      	cmp	r3, #0
    966c:	d104      	bne.n	9678 <xQueueGetMutexHolderFromISR+0x18>
    966e:	f04f 0050 	mov.w	r0, #80	; 0x50
    9672:	f380 8811 	msr	BASEPRI, r0
    9676:	e7fe      	b.n	9676 <xQueueGetMutexHolderFromISR+0x16>

		/* Mutexes cannot be used in interrupt service routines, so the mutex
		holder should not change in an ISR, and therefore a critical section is
		not required here. */
		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
    9678:	687b      	ldr	r3, [r7, #4]
    967a:	681b      	ldr	r3, [r3, #0]
    967c:	2b00      	cmp	r3, #0
    967e:	d103      	bne.n	9688 <xQueueGetMutexHolderFromISR+0x28>
		{
			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
    9680:	687b      	ldr	r3, [r7, #4]
    9682:	685b      	ldr	r3, [r3, #4]
    9684:	60fb      	str	r3, [r7, #12]
    9686:	e001      	b.n	968c <xQueueGetMutexHolderFromISR+0x2c>
		}
		else
		{
			pxReturn = NULL;
    9688:	2300      	movs	r3, #0
    968a:	60fb      	str	r3, [r7, #12]
		}

		return pxReturn;
    968c:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
    968e:	4618      	mov	r0, r3
    9690:	3714      	adds	r7, #20
    9692:	46bd      	mov	sp, r7
    9694:	f85d 7b04 	ldr.w	r7, [sp], #4
    9698:	4770      	bx	lr
    969a:	bf00      	nop

0000969c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
    969c:	b590      	push	{r4, r7, lr}
    969e:	b085      	sub	sp, #20
    96a0:	af00      	add	r7, sp, #0
    96a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    96a4:	687b      	ldr	r3, [r7, #4]
    96a6:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
    96a8:	68bb      	ldr	r3, [r7, #8]
    96aa:	2b00      	cmp	r3, #0
    96ac:	d104      	bne.n	96b8 <xQueueGiveMutexRecursive+0x1c>
    96ae:	f04f 0050 	mov.w	r0, #80	; 0x50
    96b2:	f380 8811 	msr	BASEPRI, r0
    96b6:	e7fe      	b.n	96b6 <xQueueGiveMutexRecursive+0x1a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
    96b8:	68bb      	ldr	r3, [r7, #8]
    96ba:	685c      	ldr	r4, [r3, #4]
    96bc:	f002 fbe0 	bl	be80 <xTaskGetCurrentTaskHandle>
    96c0:	4603      	mov	r3, r0
    96c2:	429c      	cmp	r4, r3
    96c4:	d116      	bne.n	96f4 <xQueueGiveMutexRecursive+0x58>
		{
			traceGIVE_MUTEX_RECURSIVE( pxMutex );
    96c6:	68bb      	ldr	r3, [r7, #8]
    96c8:	4619      	mov	r1, r3
    96ca:	20c5      	movs	r0, #197	; 0xc5
    96cc:	f003 ff04 	bl	d4d8 <prvTraceStoreEvent1>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
    96d0:	68bb      	ldr	r3, [r7, #8]
    96d2:	68db      	ldr	r3, [r3, #12]
    96d4:	1e5a      	subs	r2, r3, #1
    96d6:	68bb      	ldr	r3, [r7, #8]
    96d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
    96da:	68bb      	ldr	r3, [r7, #8]
    96dc:	68db      	ldr	r3, [r3, #12]
    96de:	2b00      	cmp	r3, #0
    96e0:	d105      	bne.n	96ee <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
    96e2:	2300      	movs	r3, #0
    96e4:	2200      	movs	r2, #0
    96e6:	2100      	movs	r1, #0
    96e8:	68b8      	ldr	r0, [r7, #8]
    96ea:	f000 f881 	bl	97f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    96ee:	2301      	movs	r3, #1
    96f0:	60fb      	str	r3, [r7, #12]
    96f2:	e006      	b.n	9702 <xQueueGiveMutexRecursive+0x66>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
    96f4:	2300      	movs	r3, #0
    96f6:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
    96f8:	68bb      	ldr	r3, [r7, #8]
    96fa:	4619      	mov	r1, r3
    96fc:	20c6      	movs	r0, #198	; 0xc6
    96fe:	f003 feeb 	bl	d4d8 <prvTraceStoreEvent1>
		}

		return xReturn;
    9702:	68fb      	ldr	r3, [r7, #12]
	}
    9704:	4618      	mov	r0, r3
    9706:	3714      	adds	r7, #20
    9708:	46bd      	mov	sp, r7
    970a:	bd90      	pop	{r4, r7, pc}

0000970c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
    970c:	b590      	push	{r4, r7, lr}
    970e:	b085      	sub	sp, #20
    9710:	af00      	add	r7, sp, #0
    9712:	6078      	str	r0, [r7, #4]
    9714:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
    9716:	687b      	ldr	r3, [r7, #4]
    9718:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
    971a:	68bb      	ldr	r3, [r7, #8]
    971c:	2b00      	cmp	r3, #0
    971e:	d104      	bne.n	972a <xQueueTakeMutexRecursive+0x1e>
    9720:	f04f 0050 	mov.w	r0, #80	; 0x50
    9724:	f380 8811 	msr	BASEPRI, r0
    9728:	e7fe      	b.n	9728 <xQueueTakeMutexRecursive+0x1c>

		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );
    972a:	68bb      	ldr	r3, [r7, #8]
    972c:	683a      	ldr	r2, [r7, #0]
    972e:	4619      	mov	r1, r3
    9730:	20c7      	movs	r0, #199	; 0xc7
    9732:	f003 ff1d 	bl	d570 <prvTraceStoreEvent2>

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    9736:	68bb      	ldr	r3, [r7, #8]
    9738:	685c      	ldr	r4, [r3, #4]
    973a:	f002 fba1 	bl	be80 <xTaskGetCurrentTaskHandle>
    973e:	4603      	mov	r3, r0
    9740:	429c      	cmp	r4, r3
    9742:	d107      	bne.n	9754 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
    9744:	68bb      	ldr	r3, [r7, #8]
    9746:	68db      	ldr	r3, [r3, #12]
    9748:	1c5a      	adds	r2, r3, #1
    974a:	68bb      	ldr	r3, [r7, #8]
    974c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
    974e:	2301      	movs	r3, #1
    9750:	60fb      	str	r3, [r7, #12]
    9752:	e015      	b.n	9780 <xQueueTakeMutexRecursive+0x74>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
    9754:	2300      	movs	r3, #0
    9756:	683a      	ldr	r2, [r7, #0]
    9758:	2100      	movs	r1, #0
    975a:	68b8      	ldr	r0, [r7, #8]
    975c:	f000 fb50 	bl	9e00 <xQueueGenericReceive>
    9760:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
    9762:	68fb      	ldr	r3, [r7, #12]
    9764:	2b00      	cmp	r3, #0
    9766:	d005      	beq.n	9774 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
    9768:	68bb      	ldr	r3, [r7, #8]
    976a:	68db      	ldr	r3, [r3, #12]
    976c:	1c5a      	adds	r2, r3, #1
    976e:	68bb      	ldr	r3, [r7, #8]
    9770:	60da      	str	r2, [r3, #12]
    9772:	e005      	b.n	9780 <xQueueTakeMutexRecursive+0x74>
			}
			else
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
    9774:	68bb      	ldr	r3, [r7, #8]
    9776:	683a      	ldr	r2, [r7, #0]
    9778:	4619      	mov	r1, r3
    977a:	20c8      	movs	r0, #200	; 0xc8
    977c:	f003 fef8 	bl	d570 <prvTraceStoreEvent2>
			}
		}

		return xReturn;
    9780:	68fb      	ldr	r3, [r7, #12]
	}
    9782:	4618      	mov	r0, r3
    9784:	3714      	adds	r7, #20
    9786:	46bd      	mov	sp, r7
    9788:	bd90      	pop	{r4, r7, pc}
    978a:	bf00      	nop

0000978c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
    978c:	b580      	push	{r7, lr}
    978e:	b084      	sub	sp, #16
    9790:	af00      	add	r7, sp, #0
    9792:	6078      	str	r0, [r7, #4]
    9794:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
    9796:	687b      	ldr	r3, [r7, #4]
    9798:	2b00      	cmp	r3, #0
    979a:	d104      	bne.n	97a6 <xQueueCreateCountingSemaphore+0x1a>
    979c:	f04f 0050 	mov.w	r0, #80	; 0x50
    97a0:	f380 8811 	msr	BASEPRI, r0
    97a4:	e7fe      	b.n	97a4 <xQueueCreateCountingSemaphore+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
    97a6:	683a      	ldr	r2, [r7, #0]
    97a8:	687b      	ldr	r3, [r7, #4]
    97aa:	429a      	cmp	r2, r3
    97ac:	d904      	bls.n	97b8 <xQueueCreateCountingSemaphore+0x2c>
    97ae:	f04f 0050 	mov.w	r0, #80	; 0x50
    97b2:	f380 8811 	msr	BASEPRI, r0
    97b6:	e7fe      	b.n	97b6 <xQueueCreateCountingSemaphore+0x2a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
    97b8:	2202      	movs	r2, #2
    97ba:	2100      	movs	r1, #0
    97bc:	6878      	ldr	r0, [r7, #4]
    97be:	f7ff fe7f 	bl	94c0 <xQueueGenericCreate>
    97c2:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
    97c4:	68fb      	ldr	r3, [r7, #12]
    97c6:	2b00      	cmp	r3, #0
    97c8:	d00a      	beq.n	97e0 <xQueueCreateCountingSemaphore+0x54>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
    97ca:	68fb      	ldr	r3, [r7, #12]
    97cc:	683a      	ldr	r2, [r7, #0]
    97ce:	639a      	str	r2, [r3, #56]	; 0x38

			traceCREATE_COUNTING_SEMAPHORE();
    97d0:	68f9      	ldr	r1, [r7, #12]
    97d2:	68fb      	ldr	r3, [r7, #12]
    97d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    97d6:	461a      	mov	r2, r3
    97d8:	2016      	movs	r0, #22
    97da:	f003 fec9 	bl	d570 <prvTraceStoreEvent2>
    97de:	e002      	b.n	97e6 <xQueueCreateCountingSemaphore+0x5a>
		}
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
    97e0:	2046      	movs	r0, #70	; 0x46
    97e2:	f003 fe33 	bl	d44c <prvTraceStoreEvent0>
		}

		return xHandle;
    97e6:	68fb      	ldr	r3, [r7, #12]
	}
    97e8:	4618      	mov	r0, r3
    97ea:	3710      	adds	r7, #16
    97ec:	46bd      	mov	sp, r7
    97ee:	bd80      	pop	{r7, pc}

000097f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    97f0:	b580      	push	{r7, lr}
    97f2:	b08a      	sub	sp, #40	; 0x28
    97f4:	af00      	add	r7, sp, #0
    97f6:	60f8      	str	r0, [r7, #12]
    97f8:	60b9      	str	r1, [r7, #8]
    97fa:	607a      	str	r2, [r7, #4]
    97fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    97fe:	2300      	movs	r3, #0
    9800:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    9802:	68fb      	ldr	r3, [r7, #12]
    9804:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    9806:	6a3b      	ldr	r3, [r7, #32]
    9808:	2b00      	cmp	r3, #0
    980a:	d104      	bne.n	9816 <xQueueGenericSend+0x26>
    980c:	f04f 0050 	mov.w	r0, #80	; 0x50
    9810:	f380 8811 	msr	BASEPRI, r0
    9814:	e7fe      	b.n	9814 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    9816:	68bb      	ldr	r3, [r7, #8]
    9818:	2b00      	cmp	r3, #0
    981a:	d103      	bne.n	9824 <xQueueGenericSend+0x34>
    981c:	6a3b      	ldr	r3, [r7, #32]
    981e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9820:	2b00      	cmp	r3, #0
    9822:	d101      	bne.n	9828 <xQueueGenericSend+0x38>
    9824:	2301      	movs	r3, #1
    9826:	e000      	b.n	982a <xQueueGenericSend+0x3a>
    9828:	2300      	movs	r3, #0
    982a:	2b00      	cmp	r3, #0
    982c:	d104      	bne.n	9838 <xQueueGenericSend+0x48>
    982e:	f04f 0050 	mov.w	r0, #80	; 0x50
    9832:	f380 8811 	msr	BASEPRI, r0
    9836:	e7fe      	b.n	9836 <xQueueGenericSend+0x46>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    9838:	683b      	ldr	r3, [r7, #0]
    983a:	2b02      	cmp	r3, #2
    983c:	d103      	bne.n	9846 <xQueueGenericSend+0x56>
    983e:	6a3b      	ldr	r3, [r7, #32]
    9840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9842:	2b01      	cmp	r3, #1
    9844:	d101      	bne.n	984a <xQueueGenericSend+0x5a>
    9846:	2301      	movs	r3, #1
    9848:	e000      	b.n	984c <xQueueGenericSend+0x5c>
    984a:	2300      	movs	r3, #0
    984c:	2b00      	cmp	r3, #0
    984e:	d104      	bne.n	985a <xQueueGenericSend+0x6a>
    9850:	f04f 0050 	mov.w	r0, #80	; 0x50
    9854:	f380 8811 	msr	BASEPRI, r0
    9858:	e7fe      	b.n	9858 <xQueueGenericSend+0x68>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    985a:	f002 fb21 	bl	bea0 <xTaskGetSchedulerState>
    985e:	4603      	mov	r3, r0
    9860:	2b00      	cmp	r3, #0
    9862:	d102      	bne.n	986a <xQueueGenericSend+0x7a>
    9864:	687b      	ldr	r3, [r7, #4]
    9866:	2b00      	cmp	r3, #0
    9868:	d101      	bne.n	986e <xQueueGenericSend+0x7e>
    986a:	2301      	movs	r3, #1
    986c:	e000      	b.n	9870 <xQueueGenericSend+0x80>
    986e:	2300      	movs	r3, #0
    9870:	2b00      	cmp	r3, #0
    9872:	d104      	bne.n	987e <xQueueGenericSend+0x8e>
    9874:	f04f 0050 	mov.w	r0, #80	; 0x50
    9878:	f380 8811 	msr	BASEPRI, r0
    987c:	e7fe      	b.n	987c <xQueueGenericSend+0x8c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    987e:	f7ff fcc9 	bl	9214 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9882:	6a3b      	ldr	r3, [r7, #32]
    9884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9886:	6a3b      	ldr	r3, [r7, #32]
    9888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    988a:	429a      	cmp	r2, r3
    988c:	d302      	bcc.n	9894 <xQueueGenericSend+0xa4>
    988e:	683b      	ldr	r3, [r7, #0]
    9890:	2b02      	cmp	r3, #2
    9892:	d14c      	bne.n	992e <xQueueGenericSend+0x13e>
			{
				traceQUEUE_SEND( pxQueue );
    9894:	6a3b      	ldr	r3, [r7, #32]
    9896:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    989a:	2b04      	cmp	r3, #4
    989c:	d829      	bhi.n	98f2 <xQueueGenericSend+0x102>
    989e:	a201      	add	r2, pc, #4	; (adr r2, 98a4 <xQueueGenericSend+0xb4>)
    98a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    98a4:	000098b9 	.word	0x000098b9
    98a8:	000098e7 	.word	0x000098e7
    98ac:	000098d5 	.word	0x000098d5
    98b0:	000098d5 	.word	0x000098d5
    98b4:	000098e7 	.word	0x000098e7
    98b8:	683b      	ldr	r3, [r7, #0]
    98ba:	2b00      	cmp	r3, #0
    98bc:	d101      	bne.n	98c2 <xQueueGenericSend+0xd2>
    98be:	2050      	movs	r0, #80	; 0x50
    98c0:	e000      	b.n	98c4 <xQueueGenericSend+0xd4>
    98c2:	20c0      	movs	r0, #192	; 0xc0
    98c4:	6a39      	ldr	r1, [r7, #32]
    98c6:	6a3b      	ldr	r3, [r7, #32]
    98c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    98ca:	3301      	adds	r3, #1
    98cc:	461a      	mov	r2, r3
    98ce:	f003 fe4f 	bl	d570 <prvTraceStoreEvent2>
    98d2:	e00d      	b.n	98f0 <xQueueGenericSend+0x100>
    98d4:	6a39      	ldr	r1, [r7, #32]
    98d6:	6a3b      	ldr	r3, [r7, #32]
    98d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    98da:	3301      	adds	r3, #1
    98dc:	461a      	mov	r2, r3
    98de:	2051      	movs	r0, #81	; 0x51
    98e0:	f003 fe46 	bl	d570 <prvTraceStoreEvent2>
    98e4:	e004      	b.n	98f0 <xQueueGenericSend+0x100>
    98e6:	6a3b      	ldr	r3, [r7, #32]
    98e8:	4619      	mov	r1, r3
    98ea:	2052      	movs	r0, #82	; 0x52
    98ec:	f003 fdf4 	bl	d4d8 <prvTraceStoreEvent1>
    98f0:	bf00      	nop
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    98f2:	683a      	ldr	r2, [r7, #0]
    98f4:	68b9      	ldr	r1, [r7, #8]
    98f6:	6a38      	ldr	r0, [r7, #32]
    98f8:	f000 fe24 	bl	a544 <prvCopyDataToQueue>
    98fc:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    98fe:	6a3b      	ldr	r3, [r7, #32]
    9900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9902:	2b00      	cmp	r3, #0
    9904:	d00a      	beq.n	991c <xQueueGenericSend+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9906:	6a3b      	ldr	r3, [r7, #32]
    9908:	3324      	adds	r3, #36	; 0x24
    990a:	4618      	mov	r0, r3
    990c:	f001 fff0 	bl	b8f0 <xTaskRemoveFromEventList>
    9910:	4603      	mov	r3, r0
    9912:	2b00      	cmp	r3, #0
    9914:	d007      	beq.n	9926 <xQueueGenericSend+0x136>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    9916:	f7ff fcb9 	bl	928c <vPortYieldFromISR>
    991a:	e004      	b.n	9926 <xQueueGenericSend+0x136>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    991c:	69fb      	ldr	r3, [r7, #28]
    991e:	2b00      	cmp	r3, #0
    9920:	d001      	beq.n	9926 <xQueueGenericSend+0x136>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    9922:	f7ff fcb3 	bl	928c <vPortYieldFromISR>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    9926:	f7ff fc9b 	bl	9260 <vPortExitCritical>
				return pdPASS;
    992a:	2301      	movs	r3, #1
    992c:	e0e6      	b.n	9afc <xQueueGenericSend+0x30c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    992e:	687b      	ldr	r3, [r7, #4]
    9930:	2b00      	cmp	r3, #0
    9932:	d130      	bne.n	9996 <xQueueGenericSend+0x1a6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    9934:	f7ff fc94 	bl	9260 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
    9938:	6a3b      	ldr	r3, [r7, #32]
    993a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    993e:	2b04      	cmp	r3, #4
    9940:	d827      	bhi.n	9992 <xQueueGenericSend+0x1a2>
    9942:	a201      	add	r2, pc, #4	; (adr r2, 9948 <xQueueGenericSend+0x158>)
    9944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9948:	0000995d 	.word	0x0000995d
    994c:	00009987 	.word	0x00009987
    9950:	00009977 	.word	0x00009977
    9954:	00009977 	.word	0x00009977
    9958:	00009987 	.word	0x00009987
    995c:	683b      	ldr	r3, [r7, #0]
    995e:	2b00      	cmp	r3, #0
    9960:	d101      	bne.n	9966 <xQueueGenericSend+0x176>
    9962:	2053      	movs	r0, #83	; 0x53
    9964:	e000      	b.n	9968 <xQueueGenericSend+0x178>
    9966:	20c1      	movs	r0, #193	; 0xc1
    9968:	6a39      	ldr	r1, [r7, #32]
    996a:	6a3b      	ldr	r3, [r7, #32]
    996c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    996e:	461a      	mov	r2, r3
    9970:	f003 fdfe 	bl	d570 <prvTraceStoreEvent2>
    9974:	e00c      	b.n	9990 <xQueueGenericSend+0x1a0>
    9976:	6a39      	ldr	r1, [r7, #32]
    9978:	6a3b      	ldr	r3, [r7, #32]
    997a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    997c:	461a      	mov	r2, r3
    997e:	2054      	movs	r0, #84	; 0x54
    9980:	f003 fdf6 	bl	d570 <prvTraceStoreEvent2>
    9984:	e004      	b.n	9990 <xQueueGenericSend+0x1a0>
    9986:	6a3b      	ldr	r3, [r7, #32]
    9988:	4619      	mov	r1, r3
    998a:	2055      	movs	r0, #85	; 0x55
    998c:	f003 fda4 	bl	d4d8 <prvTraceStoreEvent1>
    9990:	bf00      	nop
					return errQUEUE_FULL;
    9992:	2300      	movs	r3, #0
    9994:	e0b2      	b.n	9afc <xQueueGenericSend+0x30c>
				}
				else if( xEntryTimeSet == pdFALSE )
    9996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9998:	2b00      	cmp	r3, #0
    999a:	d106      	bne.n	99aa <xQueueGenericSend+0x1ba>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    999c:	f107 0314 	add.w	r3, r7, #20
    99a0:	4618      	mov	r0, r3
    99a2:	f002 f863 	bl	ba6c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    99a6:	2301      	movs	r3, #1
    99a8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    99aa:	f7ff fc59 	bl	9260 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    99ae:	f001 fbb7 	bl	b120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    99b2:	f7ff fc2f 	bl	9214 <vPortEnterCritical>
    99b6:	6a3b      	ldr	r3, [r7, #32]
    99b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    99bc:	b25b      	sxtb	r3, r3
    99be:	f1b3 3fff 	cmp.w	r3, #4294967295
    99c2:	d103      	bne.n	99cc <xQueueGenericSend+0x1dc>
    99c4:	6a3b      	ldr	r3, [r7, #32]
    99c6:	2200      	movs	r2, #0
    99c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    99cc:	6a3b      	ldr	r3, [r7, #32]
    99ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    99d2:	b25b      	sxtb	r3, r3
    99d4:	f1b3 3fff 	cmp.w	r3, #4294967295
    99d8:	d103      	bne.n	99e2 <xQueueGenericSend+0x1f2>
    99da:	6a3b      	ldr	r3, [r7, #32]
    99dc:	2200      	movs	r2, #0
    99de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    99e2:	f7ff fc3d 	bl	9260 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    99e6:	1d3a      	adds	r2, r7, #4
    99e8:	f107 0314 	add.w	r3, r7, #20
    99ec:	4611      	mov	r1, r2
    99ee:	4618      	mov	r0, r3
    99f0:	f002 f85a 	bl	baa8 <xTaskCheckForTimeOut>
    99f4:	4603      	mov	r3, r0
    99f6:	2b00      	cmp	r3, #0
    99f8:	d14c      	bne.n	9a94 <xQueueGenericSend+0x2a4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    99fa:	6a38      	ldr	r0, [r7, #32]
    99fc:	f000 feb6 	bl	a76c <prvIsQueueFull>
    9a00:	4603      	mov	r3, r0
    9a02:	2b00      	cmp	r3, #0
    9a04:	d040      	beq.n	9a88 <xQueueGenericSend+0x298>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
    9a06:	6a3b      	ldr	r3, [r7, #32]
    9a08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9a0c:	2b04      	cmp	r3, #4
    9a0e:	d828      	bhi.n	9a62 <xQueueGenericSend+0x272>
    9a10:	a201      	add	r2, pc, #4	; (adr r2, 9a18 <xQueueGenericSend+0x228>)
    9a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9a16:	bf00      	nop
    9a18:	00009a2d 	.word	0x00009a2d
    9a1c:	00009a57 	.word	0x00009a57
    9a20:	00009a47 	.word	0x00009a47
    9a24:	00009a47 	.word	0x00009a47
    9a28:	00009a57 	.word	0x00009a57
    9a2c:	683b      	ldr	r3, [r7, #0]
    9a2e:	2b00      	cmp	r3, #0
    9a30:	d101      	bne.n	9a36 <xQueueGenericSend+0x246>
    9a32:	2056      	movs	r0, #86	; 0x56
    9a34:	e000      	b.n	9a38 <xQueueGenericSend+0x248>
    9a36:	20c2      	movs	r0, #194	; 0xc2
    9a38:	6a39      	ldr	r1, [r7, #32]
    9a3a:	6a3b      	ldr	r3, [r7, #32]
    9a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9a3e:	461a      	mov	r2, r3
    9a40:	f003 fd96 	bl	d570 <prvTraceStoreEvent2>
    9a44:	e00c      	b.n	9a60 <xQueueGenericSend+0x270>
    9a46:	6a39      	ldr	r1, [r7, #32]
    9a48:	6a3b      	ldr	r3, [r7, #32]
    9a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9a4c:	461a      	mov	r2, r3
    9a4e:	2057      	movs	r0, #87	; 0x57
    9a50:	f003 fd8e 	bl	d570 <prvTraceStoreEvent2>
    9a54:	e004      	b.n	9a60 <xQueueGenericSend+0x270>
    9a56:	6a3b      	ldr	r3, [r7, #32]
    9a58:	4619      	mov	r1, r3
    9a5a:	2058      	movs	r0, #88	; 0x58
    9a5c:	f003 fd3c 	bl	d4d8 <prvTraceStoreEvent1>
    9a60:	bf00      	nop
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    9a62:	6a3b      	ldr	r3, [r7, #32]
    9a64:	3310      	adds	r3, #16
    9a66:	687a      	ldr	r2, [r7, #4]
    9a68:	4611      	mov	r1, r2
    9a6a:	4618      	mov	r0, r3
    9a6c:	f001 fef2 	bl	b854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    9a70:	6a38      	ldr	r0, [r7, #32]
    9a72:	f000 fdf7 	bl	a664 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    9a76:	f001 fb61 	bl	b13c <xTaskResumeAll>
    9a7a:	4603      	mov	r3, r0
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	f47f aefe 	bne.w	987e <xQueueGenericSend+0x8e>
				{
					portYIELD_WITHIN_API();
    9a82:	f7ff fc03 	bl	928c <vPortYieldFromISR>
    9a86:	e6fa      	b.n	987e <xQueueGenericSend+0x8e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    9a88:	6a38      	ldr	r0, [r7, #32]
    9a8a:	f000 fdeb 	bl	a664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    9a8e:	f001 fb55 	bl	b13c <xTaskResumeAll>
    9a92:	e6f4      	b.n	987e <xQueueGenericSend+0x8e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    9a94:	6a38      	ldr	r0, [r7, #32]
    9a96:	f000 fde5 	bl	a664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    9a9a:	f001 fb4f 	bl	b13c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
    9a9e:	6a3b      	ldr	r3, [r7, #32]
    9aa0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9aa4:	2b04      	cmp	r3, #4
    9aa6:	d828      	bhi.n	9afa <xQueueGenericSend+0x30a>
    9aa8:	a201      	add	r2, pc, #4	; (adr r2, 9ab0 <xQueueGenericSend+0x2c0>)
    9aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9aae:	bf00      	nop
    9ab0:	00009ac5 	.word	0x00009ac5
    9ab4:	00009aef 	.word	0x00009aef
    9ab8:	00009adf 	.word	0x00009adf
    9abc:	00009adf 	.word	0x00009adf
    9ac0:	00009aef 	.word	0x00009aef
    9ac4:	683b      	ldr	r3, [r7, #0]
    9ac6:	2b00      	cmp	r3, #0
    9ac8:	d101      	bne.n	9ace <xQueueGenericSend+0x2de>
    9aca:	2053      	movs	r0, #83	; 0x53
    9acc:	e000      	b.n	9ad0 <xQueueGenericSend+0x2e0>
    9ace:	20c1      	movs	r0, #193	; 0xc1
    9ad0:	6a39      	ldr	r1, [r7, #32]
    9ad2:	6a3b      	ldr	r3, [r7, #32]
    9ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9ad6:	461a      	mov	r2, r3
    9ad8:	f003 fd4a 	bl	d570 <prvTraceStoreEvent2>
    9adc:	e00c      	b.n	9af8 <xQueueGenericSend+0x308>
    9ade:	6a39      	ldr	r1, [r7, #32]
    9ae0:	6a3b      	ldr	r3, [r7, #32]
    9ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9ae4:	461a      	mov	r2, r3
    9ae6:	2054      	movs	r0, #84	; 0x54
    9ae8:	f003 fd42 	bl	d570 <prvTraceStoreEvent2>
    9aec:	e004      	b.n	9af8 <xQueueGenericSend+0x308>
    9aee:	6a3b      	ldr	r3, [r7, #32]
    9af0:	4619      	mov	r1, r3
    9af2:	2055      	movs	r0, #85	; 0x55
    9af4:	f003 fcf0 	bl	d4d8 <prvTraceStoreEvent1>
    9af8:	bf00      	nop
			return errQUEUE_FULL;
    9afa:	2300      	movs	r3, #0
		}
	}
}
    9afc:	4618      	mov	r0, r3
    9afe:	3728      	adds	r7, #40	; 0x28
    9b00:	46bd      	mov	sp, r7
    9b02:	bd80      	pop	{r7, pc}

00009b04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b088      	sub	sp, #32
    9b08:	af00      	add	r7, sp, #0
    9b0a:	60f8      	str	r0, [r7, #12]
    9b0c:	60b9      	str	r1, [r7, #8]
    9b0e:	607a      	str	r2, [r7, #4]
    9b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    9b12:	68fb      	ldr	r3, [r7, #12]
    9b14:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    9b16:	69bb      	ldr	r3, [r7, #24]
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d104      	bne.n	9b26 <xQueueGenericSendFromISR+0x22>
    9b1c:	f04f 0050 	mov.w	r0, #80	; 0x50
    9b20:	f380 8811 	msr	BASEPRI, r0
    9b24:	e7fe      	b.n	9b24 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    9b26:	68bb      	ldr	r3, [r7, #8]
    9b28:	2b00      	cmp	r3, #0
    9b2a:	d103      	bne.n	9b34 <xQueueGenericSendFromISR+0x30>
    9b2c:	69bb      	ldr	r3, [r7, #24]
    9b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9b30:	2b00      	cmp	r3, #0
    9b32:	d101      	bne.n	9b38 <xQueueGenericSendFromISR+0x34>
    9b34:	2301      	movs	r3, #1
    9b36:	e000      	b.n	9b3a <xQueueGenericSendFromISR+0x36>
    9b38:	2300      	movs	r3, #0
    9b3a:	2b00      	cmp	r3, #0
    9b3c:	d104      	bne.n	9b48 <xQueueGenericSendFromISR+0x44>
    9b3e:	f04f 0050 	mov.w	r0, #80	; 0x50
    9b42:	f380 8811 	msr	BASEPRI, r0
    9b46:	e7fe      	b.n	9b46 <xQueueGenericSendFromISR+0x42>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    9b48:	683b      	ldr	r3, [r7, #0]
    9b4a:	2b02      	cmp	r3, #2
    9b4c:	d103      	bne.n	9b56 <xQueueGenericSendFromISR+0x52>
    9b4e:	69bb      	ldr	r3, [r7, #24]
    9b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9b52:	2b01      	cmp	r3, #1
    9b54:	d101      	bne.n	9b5a <xQueueGenericSendFromISR+0x56>
    9b56:	2301      	movs	r3, #1
    9b58:	e000      	b.n	9b5c <xQueueGenericSendFromISR+0x58>
    9b5a:	2300      	movs	r3, #0
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d104      	bne.n	9b6a <xQueueGenericSendFromISR+0x66>
    9b60:	f04f 0050 	mov.w	r0, #80	; 0x50
    9b64:	f380 8811 	msr	BASEPRI, r0
    9b68:	e7fe      	b.n	9b68 <xQueueGenericSendFromISR+0x64>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    9b6a:	f7ff fc17 	bl	939c <vPortValidateInterruptPriority>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    9b6e:	2300      	movs	r3, #0
    9b70:	617b      	str	r3, [r7, #20]
    9b72:	f04f 0050 	mov.w	r0, #80	; 0x50
    9b76:	f380 8811 	msr	BASEPRI, r0
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    9b7a:	69bb      	ldr	r3, [r7, #24]
    9b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    9b7e:	69bb      	ldr	r3, [r7, #24]
    9b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9b82:	429a      	cmp	r2, r3
    9b84:	d302      	bcc.n	9b8c <xQueueGenericSendFromISR+0x88>
    9b86:	683b      	ldr	r3, [r7, #0]
    9b88:	2b02      	cmp	r3, #2
    9b8a:	d14c      	bne.n	9c26 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    9b8c:	69bb      	ldr	r3, [r7, #24]
    9b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    9b92:	74fb      	strb	r3, [r7, #19]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    9b94:	69bb      	ldr	r3, [r7, #24]
    9b96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9b9a:	2b00      	cmp	r3, #0
    9b9c:	d005      	beq.n	9baa <xQueueGenericSendFromISR+0xa6>
    9b9e:	2b00      	cmp	r3, #0
    9ba0:	db1a      	blt.n	9bd8 <xQueueGenericSendFromISR+0xd4>
    9ba2:	3b02      	subs	r3, #2
    9ba4:	2b01      	cmp	r3, #1
    9ba6:	d817      	bhi.n	9bd8 <xQueueGenericSendFromISR+0xd4>
    9ba8:	e00d      	b.n	9bc6 <xQueueGenericSendFromISR+0xc2>
    9baa:	683b      	ldr	r3, [r7, #0]
    9bac:	2b00      	cmp	r3, #0
    9bae:	d101      	bne.n	9bb4 <xQueueGenericSendFromISR+0xb0>
    9bb0:	2059      	movs	r0, #89	; 0x59
    9bb2:	e000      	b.n	9bb6 <xQueueGenericSendFromISR+0xb2>
    9bb4:	20c3      	movs	r0, #195	; 0xc3
    9bb6:	69b9      	ldr	r1, [r7, #24]
    9bb8:	69bb      	ldr	r3, [r7, #24]
    9bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9bbc:	3301      	adds	r3, #1
    9bbe:	461a      	mov	r2, r3
    9bc0:	f003 fcd6 	bl	d570 <prvTraceStoreEvent2>
    9bc4:	e007      	b.n	9bd6 <xQueueGenericSendFromISR+0xd2>
    9bc6:	69b9      	ldr	r1, [r7, #24]
    9bc8:	69bb      	ldr	r3, [r7, #24]
    9bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9bcc:	3301      	adds	r3, #1
    9bce:	461a      	mov	r2, r3
    9bd0:	205a      	movs	r0, #90	; 0x5a
    9bd2:	f003 fccd 	bl	d570 <prvTraceStoreEvent2>
    9bd6:	bf00      	nop
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    9bd8:	683a      	ldr	r2, [r7, #0]
    9bda:	68b9      	ldr	r1, [r7, #8]
    9bdc:	69b8      	ldr	r0, [r7, #24]
    9bde:	f000 fcb1 	bl	a544 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    9be2:	f997 3013 	ldrsb.w	r3, [r7, #19]
    9be6:	f1b3 3fff 	cmp.w	r3, #4294967295
    9bea:	d112      	bne.n	9c12 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9bec:	69bb      	ldr	r3, [r7, #24]
    9bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d015      	beq.n	9c20 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9bf4:	69bb      	ldr	r3, [r7, #24]
    9bf6:	3324      	adds	r3, #36	; 0x24
    9bf8:	4618      	mov	r0, r3
    9bfa:	f001 fe79 	bl	b8f0 <xTaskRemoveFromEventList>
    9bfe:	4603      	mov	r3, r0
    9c00:	2b00      	cmp	r3, #0
    9c02:	d00d      	beq.n	9c20 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    9c04:	687b      	ldr	r3, [r7, #4]
    9c06:	2b00      	cmp	r3, #0
    9c08:	d00a      	beq.n	9c20 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    9c0a:	687b      	ldr	r3, [r7, #4]
    9c0c:	2201      	movs	r2, #1
    9c0e:	601a      	str	r2, [r3, #0]
    9c10:	e006      	b.n	9c20 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    9c12:	7cfb      	ldrb	r3, [r7, #19]
    9c14:	3301      	adds	r3, #1
    9c16:	b2db      	uxtb	r3, r3
    9c18:	b25a      	sxtb	r2, r3
    9c1a:	69bb      	ldr	r3, [r7, #24]
    9c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    9c20:	2301      	movs	r3, #1
    9c22:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    9c24:	e021      	b.n	9c6a <xQueueGenericSendFromISR+0x166>

			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    9c26:	69bb      	ldr	r3, [r7, #24]
    9c28:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9c2c:	2b00      	cmp	r3, #0
    9c2e:	d005      	beq.n	9c3c <xQueueGenericSendFromISR+0x138>
    9c30:	2b00      	cmp	r3, #0
    9c32:	db18      	blt.n	9c66 <xQueueGenericSendFromISR+0x162>
    9c34:	3b02      	subs	r3, #2
    9c36:	2b01      	cmp	r3, #1
    9c38:	d815      	bhi.n	9c66 <xQueueGenericSendFromISR+0x162>
    9c3a:	e00c      	b.n	9c56 <xQueueGenericSendFromISR+0x152>
    9c3c:	683b      	ldr	r3, [r7, #0]
    9c3e:	2b00      	cmp	r3, #0
    9c40:	d101      	bne.n	9c46 <xQueueGenericSendFromISR+0x142>
    9c42:	205c      	movs	r0, #92	; 0x5c
    9c44:	e000      	b.n	9c48 <xQueueGenericSendFromISR+0x144>
    9c46:	20c4      	movs	r0, #196	; 0xc4
    9c48:	69b9      	ldr	r1, [r7, #24]
    9c4a:	69bb      	ldr	r3, [r7, #24]
    9c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9c4e:	461a      	mov	r2, r3
    9c50:	f003 fc8e 	bl	d570 <prvTraceStoreEvent2>
    9c54:	e006      	b.n	9c64 <xQueueGenericSendFromISR+0x160>
    9c56:	69b9      	ldr	r1, [r7, #24]
    9c58:	69bb      	ldr	r3, [r7, #24]
    9c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9c5c:	461a      	mov	r2, r3
    9c5e:	205d      	movs	r0, #93	; 0x5d
    9c60:	f003 fc86 	bl	d570 <prvTraceStoreEvent2>
    9c64:	bf00      	nop
			xReturn = errQUEUE_FULL;
    9c66:	2300      	movs	r3, #0
    9c68:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    9c6a:	f04f 0000 	mov.w	r0, #0
    9c6e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    9c72:	69fb      	ldr	r3, [r7, #28]
}
    9c74:	4618      	mov	r0, r3
    9c76:	3720      	adds	r7, #32
    9c78:	46bd      	mov	sp, r7
    9c7a:	bd80      	pop	{r7, pc}

00009c7c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
    9c7c:	b580      	push	{r7, lr}
    9c7e:	b082      	sub	sp, #8
    9c80:	af00      	add	r7, sp, #0
    9c82:	6078      	str	r0, [r7, #4]
    9c84:	6039      	str	r1, [r7, #0]
    9c86:	2200      	movs	r2, #0
    9c88:	6839      	ldr	r1, [r7, #0]
    9c8a:	6878      	ldr	r0, [r7, #4]
    9c8c:	f000 f806 	bl	9c9c <MyWrapper>
    9c90:	4603      	mov	r3, r0
    9c92:	4618      	mov	r0, r3
    9c94:	3708      	adds	r7, #8
    9c96:	46bd      	mov	sp, r7
    9c98:	bd80      	pop	{r7, pc}
    9c9a:	bf00      	nop

00009c9c <MyWrapper>:
{
    9c9c:	b580      	push	{r7, lr}
    9c9e:	b08a      	sub	sp, #40	; 0x28
    9ca0:	af00      	add	r7, sp, #0
    9ca2:	60f8      	str	r0, [r7, #12]
    9ca4:	60b9      	str	r1, [r7, #8]
    9ca6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    9ca8:	68fb      	ldr	r3, [r7, #12]
    9caa:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
    9cac:	6a3b      	ldr	r3, [r7, #32]
    9cae:	2b00      	cmp	r3, #0
    9cb0:	d104      	bne.n	9cbc <MyWrapper+0x20>
    9cb2:	f04f 0050 	mov.w	r0, #80	; 0x50
    9cb6:	f380 8811 	msr	BASEPRI, r0
    9cba:	e7fe      	b.n	9cba <MyWrapper+0x1e>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
    9cbc:	6a3b      	ldr	r3, [r7, #32]
    9cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d004      	beq.n	9cce <MyWrapper+0x32>
    9cc4:	f04f 0050 	mov.w	r0, #80	; 0x50
    9cc8:	f380 8811 	msr	BASEPRI, r0
    9ccc:	e7fe      	b.n	9ccc <MyWrapper+0x30>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
    9cce:	6a3b      	ldr	r3, [r7, #32]
    9cd0:	681b      	ldr	r3, [r3, #0]
    9cd2:	2b00      	cmp	r3, #0
    9cd4:	d103      	bne.n	9cde <MyWrapper+0x42>
    9cd6:	6a3b      	ldr	r3, [r7, #32]
    9cd8:	685b      	ldr	r3, [r3, #4]
    9cda:	2b00      	cmp	r3, #0
    9cdc:	d101      	bne.n	9ce2 <MyWrapper+0x46>
    9cde:	2301      	movs	r3, #1
    9ce0:	e000      	b.n	9ce4 <MyWrapper+0x48>
    9ce2:	2300      	movs	r3, #0
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d104      	bne.n	9cf2 <MyWrapper+0x56>
    9ce8:	f04f 0050 	mov.w	r0, #80	; 0x50
    9cec:	f380 8811 	msr	BASEPRI, r0
    9cf0:	e7fe      	b.n	9cf0 <MyWrapper+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    9cf2:	f7ff fb53 	bl	939c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    9cf6:	2300      	movs	r3, #0
    9cf8:	61fb      	str	r3, [r7, #28]
    9cfa:	f04f 0050 	mov.w	r0, #80	; 0x50
    9cfe:	f380 8811 	msr	BASEPRI, r0
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9d02:	6a3b      	ldr	r3, [r7, #32]
    9d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9d06:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    9d08:	6a3b      	ldr	r3, [r7, #32]
    9d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    9d0c:	69bb      	ldr	r3, [r7, #24]
    9d0e:	429a      	cmp	r2, r3
    9d10:	d94b      	bls.n	9daa <MyWrapper+0x10e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    9d12:	6a3b      	ldr	r3, [r7, #32]
    9d14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    9d18:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
    9d1a:	6a3b      	ldr	r3, [r7, #32]
    9d1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9d20:	2b00      	cmp	r3, #0
    9d22:	d005      	beq.n	9d30 <MyWrapper+0x94>
    9d24:	2b00      	cmp	r3, #0
    9d26:	db1a      	blt.n	9d5e <MyWrapper+0xc2>
    9d28:	3b02      	subs	r3, #2
    9d2a:	2b01      	cmp	r3, #1
    9d2c:	d817      	bhi.n	9d5e <MyWrapper+0xc2>
    9d2e:	e00d      	b.n	9d4c <MyWrapper+0xb0>
    9d30:	687b      	ldr	r3, [r7, #4]
    9d32:	2b00      	cmp	r3, #0
    9d34:	d101      	bne.n	9d3a <MyWrapper+0x9e>
    9d36:	2059      	movs	r0, #89	; 0x59
    9d38:	e000      	b.n	9d3c <MyWrapper+0xa0>
    9d3a:	20c3      	movs	r0, #195	; 0xc3
    9d3c:	6a39      	ldr	r1, [r7, #32]
    9d3e:	6a3b      	ldr	r3, [r7, #32]
    9d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9d42:	3301      	adds	r3, #1
    9d44:	461a      	mov	r2, r3
    9d46:	f003 fc13 	bl	d570 <prvTraceStoreEvent2>
    9d4a:	e007      	b.n	9d5c <MyWrapper+0xc0>
    9d4c:	6a39      	ldr	r1, [r7, #32]
    9d4e:	6a3b      	ldr	r3, [r7, #32]
    9d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9d52:	3301      	adds	r3, #1
    9d54:	461a      	mov	r2, r3
    9d56:	205a      	movs	r0, #90	; 0x5a
    9d58:	f003 fc0a 	bl	d570 <prvTraceStoreEvent2>
    9d5c:	bf00      	nop
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    9d5e:	69bb      	ldr	r3, [r7, #24]
    9d60:	1c5a      	adds	r2, r3, #1
    9d62:	6a3b      	ldr	r3, [r7, #32]
    9d64:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    9d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
    9d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    9d6e:	d112      	bne.n	9d96 <MyWrapper+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9d70:	6a3b      	ldr	r3, [r7, #32]
    9d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9d74:	2b00      	cmp	r3, #0
    9d76:	d015      	beq.n	9da4 <MyWrapper+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9d78:	6a3b      	ldr	r3, [r7, #32]
    9d7a:	3324      	adds	r3, #36	; 0x24
    9d7c:	4618      	mov	r0, r3
    9d7e:	f001 fdb7 	bl	b8f0 <xTaskRemoveFromEventList>
    9d82:	4603      	mov	r3, r0
    9d84:	2b00      	cmp	r3, #0
    9d86:	d00d      	beq.n	9da4 <MyWrapper+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    9d88:	68bb      	ldr	r3, [r7, #8]
    9d8a:	2b00      	cmp	r3, #0
    9d8c:	d00a      	beq.n	9da4 <MyWrapper+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    9d8e:	68bb      	ldr	r3, [r7, #8]
    9d90:	2201      	movs	r2, #1
    9d92:	601a      	str	r2, [r3, #0]
    9d94:	e006      	b.n	9da4 <MyWrapper+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    9d96:	7dfb      	ldrb	r3, [r7, #23]
    9d98:	3301      	adds	r3, #1
    9d9a:	b2db      	uxtb	r3, r3
    9d9c:	b25a      	sxtb	r2, r3
    9d9e:	6a3b      	ldr	r3, [r7, #32]
    9da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
    9da4:	2301      	movs	r3, #1
    9da6:	627b      	str	r3, [r7, #36]	; 0x24
    9da8:	e021      	b.n	9dee <MyWrapper+0x152>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
    9daa:	6a3b      	ldr	r3, [r7, #32]
    9dac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9db0:	2b00      	cmp	r3, #0
    9db2:	d005      	beq.n	9dc0 <MyWrapper+0x124>
    9db4:	2b00      	cmp	r3, #0
    9db6:	db18      	blt.n	9dea <MyWrapper+0x14e>
    9db8:	3b02      	subs	r3, #2
    9dba:	2b01      	cmp	r3, #1
    9dbc:	d815      	bhi.n	9dea <MyWrapper+0x14e>
    9dbe:	e00c      	b.n	9dda <MyWrapper+0x13e>
    9dc0:	687b      	ldr	r3, [r7, #4]
    9dc2:	2b00      	cmp	r3, #0
    9dc4:	d101      	bne.n	9dca <MyWrapper+0x12e>
    9dc6:	205c      	movs	r0, #92	; 0x5c
    9dc8:	e000      	b.n	9dcc <MyWrapper+0x130>
    9dca:	20c4      	movs	r0, #196	; 0xc4
    9dcc:	6a39      	ldr	r1, [r7, #32]
    9dce:	6a3b      	ldr	r3, [r7, #32]
    9dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9dd2:	461a      	mov	r2, r3
    9dd4:	f003 fbcc 	bl	d570 <prvTraceStoreEvent2>
    9dd8:	e006      	b.n	9de8 <MyWrapper+0x14c>
    9dda:	6a39      	ldr	r1, [r7, #32]
    9ddc:	6a3b      	ldr	r3, [r7, #32]
    9dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9de0:	461a      	mov	r2, r3
    9de2:	205d      	movs	r0, #93	; 0x5d
    9de4:	f003 fbc4 	bl	d570 <prvTraceStoreEvent2>
    9de8:	bf00      	nop
			xReturn = errQUEUE_FULL;
    9dea:	2300      	movs	r3, #0
    9dec:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    9dee:	f04f 0000 	mov.w	r0, #0
    9df2:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    9df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9df8:	4618      	mov	r0, r3
    9dfa:	3728      	adds	r7, #40	; 0x28
    9dfc:	46bd      	mov	sp, r7
    9dfe:	bd80      	pop	{r7, pc}

00009e00 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    9e00:	b580      	push	{r7, lr}
    9e02:	b08a      	sub	sp, #40	; 0x28
    9e04:	af00      	add	r7, sp, #0
    9e06:	60f8      	str	r0, [r7, #12]
    9e08:	60b9      	str	r1, [r7, #8]
    9e0a:	607a      	str	r2, [r7, #4]
    9e0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    9e0e:	2300      	movs	r3, #0
    9e10:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    9e12:	68fb      	ldr	r3, [r7, #12]
    9e14:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    9e16:	6a3b      	ldr	r3, [r7, #32]
    9e18:	2b00      	cmp	r3, #0
    9e1a:	d104      	bne.n	9e26 <xQueueGenericReceive+0x26>
    9e1c:	f04f 0050 	mov.w	r0, #80	; 0x50
    9e20:	f380 8811 	msr	BASEPRI, r0
    9e24:	e7fe      	b.n	9e24 <xQueueGenericReceive+0x24>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    9e26:	68bb      	ldr	r3, [r7, #8]
    9e28:	2b00      	cmp	r3, #0
    9e2a:	d103      	bne.n	9e34 <xQueueGenericReceive+0x34>
    9e2c:	6a3b      	ldr	r3, [r7, #32]
    9e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9e30:	2b00      	cmp	r3, #0
    9e32:	d101      	bne.n	9e38 <xQueueGenericReceive+0x38>
    9e34:	2301      	movs	r3, #1
    9e36:	e000      	b.n	9e3a <xQueueGenericReceive+0x3a>
    9e38:	2300      	movs	r3, #0
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d104      	bne.n	9e48 <xQueueGenericReceive+0x48>
    9e3e:	f04f 0050 	mov.w	r0, #80	; 0x50
    9e42:	f380 8811 	msr	BASEPRI, r0
    9e46:	e7fe      	b.n	9e46 <xQueueGenericReceive+0x46>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    9e48:	f002 f82a 	bl	bea0 <xTaskGetSchedulerState>
    9e4c:	4603      	mov	r3, r0
    9e4e:	2b00      	cmp	r3, #0
    9e50:	d102      	bne.n	9e58 <xQueueGenericReceive+0x58>
    9e52:	687b      	ldr	r3, [r7, #4]
    9e54:	2b00      	cmp	r3, #0
    9e56:	d101      	bne.n	9e5c <xQueueGenericReceive+0x5c>
    9e58:	2301      	movs	r3, #1
    9e5a:	e000      	b.n	9e5e <xQueueGenericReceive+0x5e>
    9e5c:	2300      	movs	r3, #0
    9e5e:	2b00      	cmp	r3, #0
    9e60:	d104      	bne.n	9e6c <xQueueGenericReceive+0x6c>
    9e62:	f04f 0050 	mov.w	r0, #80	; 0x50
    9e66:	f380 8811 	msr	BASEPRI, r0
    9e6a:	e7fe      	b.n	9e6a <xQueueGenericReceive+0x6a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    9e6c:	f7ff f9d2 	bl	9214 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    9e70:	6a3b      	ldr	r3, [r7, #32]
    9e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9e74:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    9e76:	69fb      	ldr	r3, [r7, #28]
    9e78:	2b00      	cmp	r3, #0
    9e7a:	f000 8090 	beq.w	9f9e <xQueueGenericReceive+0x19e>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    9e7e:	6a3b      	ldr	r3, [r7, #32]
    9e80:	68db      	ldr	r3, [r3, #12]
    9e82:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    9e84:	68b9      	ldr	r1, [r7, #8]
    9e86:	6a38      	ldr	r0, [r7, #32]
    9e88:	f000 fbc6 	bl	a618 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    9e8c:	683b      	ldr	r3, [r7, #0]
    9e8e:	2b00      	cmp	r3, #0
    9e90:	d147      	bne.n	9f22 <xQueueGenericReceive+0x122>
				{
					traceQUEUE_RECEIVE( pxQueue );
    9e92:	6a3b      	ldr	r3, [r7, #32]
    9e94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9e98:	2b04      	cmp	r3, #4
    9e9a:	d826      	bhi.n	9eea <xQueueGenericReceive+0xea>
    9e9c:	a201      	add	r2, pc, #4	; (adr r2, 9ea4 <xQueueGenericReceive+0xa4>)
    9e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9ea2:	bf00      	nop
    9ea4:	00009eb9 	.word	0x00009eb9
    9ea8:	00009edd 	.word	0x00009edd
    9eac:	00009ecb 	.word	0x00009ecb
    9eb0:	00009ecb 	.word	0x00009ecb
    9eb4:	00009edd 	.word	0x00009edd
    9eb8:	6a39      	ldr	r1, [r7, #32]
    9eba:	687a      	ldr	r2, [r7, #4]
    9ebc:	6a3b      	ldr	r3, [r7, #32]
    9ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9ec0:	3b01      	subs	r3, #1
    9ec2:	2060      	movs	r0, #96	; 0x60
    9ec4:	f003 fba4 	bl	d610 <prvTraceStoreEvent3>
    9ec8:	e00e      	b.n	9ee8 <xQueueGenericReceive+0xe8>
    9eca:	6a39      	ldr	r1, [r7, #32]
    9ecc:	687a      	ldr	r2, [r7, #4]
    9ece:	6a3b      	ldr	r3, [r7, #32]
    9ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9ed2:	3b01      	subs	r3, #1
    9ed4:	2061      	movs	r0, #97	; 0x61
    9ed6:	f003 fb9b 	bl	d610 <prvTraceStoreEvent3>
    9eda:	e005      	b.n	9ee8 <xQueueGenericReceive+0xe8>
    9edc:	6a3b      	ldr	r3, [r7, #32]
    9ede:	687a      	ldr	r2, [r7, #4]
    9ee0:	4619      	mov	r1, r3
    9ee2:	2062      	movs	r0, #98	; 0x62
    9ee4:	f003 fb44 	bl	d570 <prvTraceStoreEvent2>
    9ee8:	bf00      	nop

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    9eea:	69fb      	ldr	r3, [r7, #28]
    9eec:	1e5a      	subs	r2, r3, #1
    9eee:	6a3b      	ldr	r3, [r7, #32]
    9ef0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    9ef2:	6a3b      	ldr	r3, [r7, #32]
    9ef4:	681b      	ldr	r3, [r3, #0]
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	d104      	bne.n	9f04 <xQueueGenericReceive+0x104>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    9efa:	f002 f99b 	bl	c234 <pvTaskIncrementMutexHeldCount>
    9efe:	4602      	mov	r2, r0
    9f00:	6a3b      	ldr	r3, [r7, #32]
    9f02:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    9f04:	6a3b      	ldr	r3, [r7, #32]
    9f06:	691b      	ldr	r3, [r3, #16]
    9f08:	2b00      	cmp	r3, #0
    9f0a:	d044      	beq.n	9f96 <xQueueGenericReceive+0x196>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    9f0c:	6a3b      	ldr	r3, [r7, #32]
    9f0e:	3310      	adds	r3, #16
    9f10:	4618      	mov	r0, r3
    9f12:	f001 fced 	bl	b8f0 <xTaskRemoveFromEventList>
    9f16:	4603      	mov	r3, r0
    9f18:	2b00      	cmp	r3, #0
    9f1a:	d03c      	beq.n	9f96 <xQueueGenericReceive+0x196>
						{
							queueYIELD_IF_USING_PREEMPTION();
    9f1c:	f7ff f9b6 	bl	928c <vPortYieldFromISR>
    9f20:	e039      	b.n	9f96 <xQueueGenericReceive+0x196>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					traceQUEUE_PEEK( pxQueue );
    9f22:	6a3b      	ldr	r3, [r7, #32]
    9f24:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9f28:	2b04      	cmp	r3, #4
    9f2a:	d823      	bhi.n	9f74 <xQueueGenericReceive+0x174>
    9f2c:	a201      	add	r2, pc, #4	; (adr r2, 9f34 <xQueueGenericReceive+0x134>)
    9f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9f32:	bf00      	nop
    9f34:	00009f49 	.word	0x00009f49
    9f38:	00009f69 	.word	0x00009f69
    9f3c:	00009f59 	.word	0x00009f59
    9f40:	00009f59 	.word	0x00009f59
    9f44:	00009f69 	.word	0x00009f69
    9f48:	6a39      	ldr	r1, [r7, #32]
    9f4a:	687a      	ldr	r2, [r7, #4]
    9f4c:	6a3b      	ldr	r3, [r7, #32]
    9f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9f50:	2070      	movs	r0, #112	; 0x70
    9f52:	f003 fb5d 	bl	d610 <prvTraceStoreEvent3>
    9f56:	e00c      	b.n	9f72 <xQueueGenericReceive+0x172>
    9f58:	6a39      	ldr	r1, [r7, #32]
    9f5a:	687a      	ldr	r2, [r7, #4]
    9f5c:	6a3b      	ldr	r3, [r7, #32]
    9f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9f60:	2071      	movs	r0, #113	; 0x71
    9f62:	f003 fb55 	bl	d610 <prvTraceStoreEvent3>
    9f66:	e004      	b.n	9f72 <xQueueGenericReceive+0x172>
    9f68:	6a3b      	ldr	r3, [r7, #32]
    9f6a:	4619      	mov	r1, r3
    9f6c:	2072      	movs	r0, #114	; 0x72
    9f6e:	f003 fab3 	bl	d4d8 <prvTraceStoreEvent1>
    9f72:	bf00      	nop

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    9f74:	6a3b      	ldr	r3, [r7, #32]
    9f76:	69ba      	ldr	r2, [r7, #24]
    9f78:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    9f7a:	6a3b      	ldr	r3, [r7, #32]
    9f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9f7e:	2b00      	cmp	r3, #0
    9f80:	d009      	beq.n	9f96 <xQueueGenericReceive+0x196>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    9f82:	6a3b      	ldr	r3, [r7, #32]
    9f84:	3324      	adds	r3, #36	; 0x24
    9f86:	4618      	mov	r0, r3
    9f88:	f001 fcb2 	bl	b8f0 <xTaskRemoveFromEventList>
    9f8c:	4603      	mov	r3, r0
    9f8e:	2b00      	cmp	r3, #0
    9f90:	d001      	beq.n	9f96 <xQueueGenericReceive+0x196>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    9f92:	f7ff f97b 	bl	928c <vPortYieldFromISR>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    9f96:	f7ff f963 	bl	9260 <vPortExitCritical>
				return pdPASS;
    9f9a:	2301      	movs	r3, #1
    9f9c:	e119      	b.n	a1d2 <xQueueGenericReceive+0x3d2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    9f9e:	687b      	ldr	r3, [r7, #4]
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d13b      	bne.n	a01c <xQueueGenericReceive+0x21c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    9fa4:	f7ff f95c 	bl	9260 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
    9fa8:	6a3b      	ldr	r3, [r7, #32]
    9faa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    9fae:	2b04      	cmp	r3, #4
    9fb0:	d832      	bhi.n	a018 <xQueueGenericReceive+0x218>
    9fb2:	a201      	add	r2, pc, #4	; (adr r2, 9fb8 <xQueueGenericReceive+0x1b8>)
    9fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    9fb8:	00009fcd 	.word	0x00009fcd
    9fbc:	0000a001 	.word	0x0000a001
    9fc0:	00009fe7 	.word	0x00009fe7
    9fc4:	00009fe7 	.word	0x00009fe7
    9fc8:	0000a001 	.word	0x0000a001
    9fcc:	683b      	ldr	r3, [r7, #0]
    9fce:	2b00      	cmp	r3, #0
    9fd0:	d101      	bne.n	9fd6 <xQueueGenericReceive+0x1d6>
    9fd2:	2063      	movs	r0, #99	; 0x63
    9fd4:	e000      	b.n	9fd8 <xQueueGenericReceive+0x1d8>
    9fd6:	2073      	movs	r0, #115	; 0x73
    9fd8:	6a39      	ldr	r1, [r7, #32]
    9fda:	687a      	ldr	r2, [r7, #4]
    9fdc:	6a3b      	ldr	r3, [r7, #32]
    9fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9fe0:	f003 fb16 	bl	d610 <prvTraceStoreEvent3>
    9fe4:	e017      	b.n	a016 <xQueueGenericReceive+0x216>
    9fe6:	683b      	ldr	r3, [r7, #0]
    9fe8:	2b00      	cmp	r3, #0
    9fea:	d101      	bne.n	9ff0 <xQueueGenericReceive+0x1f0>
    9fec:	2064      	movs	r0, #100	; 0x64
    9fee:	e000      	b.n	9ff2 <xQueueGenericReceive+0x1f2>
    9ff0:	2074      	movs	r0, #116	; 0x74
    9ff2:	6a39      	ldr	r1, [r7, #32]
    9ff4:	687a      	ldr	r2, [r7, #4]
    9ff6:	6a3b      	ldr	r3, [r7, #32]
    9ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    9ffa:	f003 fb09 	bl	d610 <prvTraceStoreEvent3>
    9ffe:	e00a      	b.n	a016 <xQueueGenericReceive+0x216>
    a000:	683b      	ldr	r3, [r7, #0]
    a002:	2b00      	cmp	r3, #0
    a004:	d101      	bne.n	a00a <xQueueGenericReceive+0x20a>
    a006:	2365      	movs	r3, #101	; 0x65
    a008:	e000      	b.n	a00c <xQueueGenericReceive+0x20c>
    a00a:	2375      	movs	r3, #117	; 0x75
    a00c:	6a39      	ldr	r1, [r7, #32]
    a00e:	687a      	ldr	r2, [r7, #4]
    a010:	4618      	mov	r0, r3
    a012:	f003 faad 	bl	d570 <prvTraceStoreEvent2>
    a016:	bf00      	nop
					return errQUEUE_EMPTY;
    a018:	2300      	movs	r3, #0
    a01a:	e0da      	b.n	a1d2 <xQueueGenericReceive+0x3d2>
				}
				else if( xEntryTimeSet == pdFALSE )
    a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a01e:	2b00      	cmp	r3, #0
    a020:	d106      	bne.n	a030 <xQueueGenericReceive+0x230>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    a022:	f107 0310 	add.w	r3, r7, #16
    a026:	4618      	mov	r0, r3
    a028:	f001 fd20 	bl	ba6c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    a02c:	2301      	movs	r3, #1
    a02e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    a030:	f7ff f916 	bl	9260 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    a034:	f001 f874 	bl	b120 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    a038:	f7ff f8ec 	bl	9214 <vPortEnterCritical>
    a03c:	6a3b      	ldr	r3, [r7, #32]
    a03e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    a042:	b25b      	sxtb	r3, r3
    a044:	f1b3 3fff 	cmp.w	r3, #4294967295
    a048:	d103      	bne.n	a052 <xQueueGenericReceive+0x252>
    a04a:	6a3b      	ldr	r3, [r7, #32]
    a04c:	2200      	movs	r2, #0
    a04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    a052:	6a3b      	ldr	r3, [r7, #32]
    a054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    a058:	b25b      	sxtb	r3, r3
    a05a:	f1b3 3fff 	cmp.w	r3, #4294967295
    a05e:	d103      	bne.n	a068 <xQueueGenericReceive+0x268>
    a060:	6a3b      	ldr	r3, [r7, #32]
    a062:	2200      	movs	r2, #0
    a064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    a068:	f7ff f8fa 	bl	9260 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    a06c:	1d3a      	adds	r2, r7, #4
    a06e:	f107 0310 	add.w	r3, r7, #16
    a072:	4611      	mov	r1, r2
    a074:	4618      	mov	r0, r3
    a076:	f001 fd17 	bl	baa8 <xTaskCheckForTimeOut>
    a07a:	4603      	mov	r3, r0
    a07c:	2b00      	cmp	r3, #0
    a07e:	d163      	bne.n	a148 <xQueueGenericReceive+0x348>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    a080:	6a38      	ldr	r0, [r7, #32]
    a082:	f000 fb41 	bl	a708 <prvIsQueueEmpty>
    a086:	4603      	mov	r3, r0
    a088:	2b00      	cmp	r3, #0
    a08a:	d057      	beq.n	a13c <xQueueGenericReceive+0x33c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
    a08c:	6a3b      	ldr	r3, [r7, #32]
    a08e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    a092:	2b04      	cmp	r3, #4
    a094:	d832      	bhi.n	a0fc <xQueueGenericReceive+0x2fc>
    a096:	a201      	add	r2, pc, #4	; (adr r2, a09c <xQueueGenericReceive+0x29c>)
    a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a09c:	0000a0b1 	.word	0x0000a0b1
    a0a0:	0000a0e5 	.word	0x0000a0e5
    a0a4:	0000a0cb 	.word	0x0000a0cb
    a0a8:	0000a0cb 	.word	0x0000a0cb
    a0ac:	0000a0e5 	.word	0x0000a0e5
    a0b0:	683b      	ldr	r3, [r7, #0]
    a0b2:	2b00      	cmp	r3, #0
    a0b4:	d101      	bne.n	a0ba <xQueueGenericReceive+0x2ba>
    a0b6:	2066      	movs	r0, #102	; 0x66
    a0b8:	e000      	b.n	a0bc <xQueueGenericReceive+0x2bc>
    a0ba:	2076      	movs	r0, #118	; 0x76
    a0bc:	6a39      	ldr	r1, [r7, #32]
    a0be:	687a      	ldr	r2, [r7, #4]
    a0c0:	6a3b      	ldr	r3, [r7, #32]
    a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a0c4:	f003 faa4 	bl	d610 <prvTraceStoreEvent3>
    a0c8:	e017      	b.n	a0fa <xQueueGenericReceive+0x2fa>
    a0ca:	683b      	ldr	r3, [r7, #0]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d101      	bne.n	a0d4 <xQueueGenericReceive+0x2d4>
    a0d0:	2067      	movs	r0, #103	; 0x67
    a0d2:	e000      	b.n	a0d6 <xQueueGenericReceive+0x2d6>
    a0d4:	2077      	movs	r0, #119	; 0x77
    a0d6:	6a39      	ldr	r1, [r7, #32]
    a0d8:	687a      	ldr	r2, [r7, #4]
    a0da:	6a3b      	ldr	r3, [r7, #32]
    a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a0de:	f003 fa97 	bl	d610 <prvTraceStoreEvent3>
    a0e2:	e00a      	b.n	a0fa <xQueueGenericReceive+0x2fa>
    a0e4:	683b      	ldr	r3, [r7, #0]
    a0e6:	2b00      	cmp	r3, #0
    a0e8:	d101      	bne.n	a0ee <xQueueGenericReceive+0x2ee>
    a0ea:	2368      	movs	r3, #104	; 0x68
    a0ec:	e000      	b.n	a0f0 <xQueueGenericReceive+0x2f0>
    a0ee:	2378      	movs	r3, #120	; 0x78
    a0f0:	6a39      	ldr	r1, [r7, #32]
    a0f2:	687a      	ldr	r2, [r7, #4]
    a0f4:	4618      	mov	r0, r3
    a0f6:	f003 fa3b 	bl	d570 <prvTraceStoreEvent2>
    a0fa:	bf00      	nop

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    a0fc:	6a3b      	ldr	r3, [r7, #32]
    a0fe:	681b      	ldr	r3, [r3, #0]
    a100:	2b00      	cmp	r3, #0
    a102:	d108      	bne.n	a116 <xQueueGenericReceive+0x316>
					{
						taskENTER_CRITICAL();
    a104:	f7ff f886 	bl	9214 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    a108:	6a3b      	ldr	r3, [r7, #32]
    a10a:	685b      	ldr	r3, [r3, #4]
    a10c:	4618      	mov	r0, r3
    a10e:	f001 fee5 	bl	bedc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    a112:	f7ff f8a5 	bl	9260 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    a116:	6a3b      	ldr	r3, [r7, #32]
    a118:	3324      	adds	r3, #36	; 0x24
    a11a:	687a      	ldr	r2, [r7, #4]
    a11c:	4611      	mov	r1, r2
    a11e:	4618      	mov	r0, r3
    a120:	f001 fb98 	bl	b854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    a124:	6a38      	ldr	r0, [r7, #32]
    a126:	f000 fa9d 	bl	a664 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    a12a:	f001 f807 	bl	b13c <xTaskResumeAll>
    a12e:	4603      	mov	r3, r0
    a130:	2b00      	cmp	r3, #0
    a132:	f47f ae9b 	bne.w	9e6c <xQueueGenericReceive+0x6c>
				{
					portYIELD_WITHIN_API();
    a136:	f7ff f8a9 	bl	928c <vPortYieldFromISR>
    a13a:	e697      	b.n	9e6c <xQueueGenericReceive+0x6c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    a13c:	6a38      	ldr	r0, [r7, #32]
    a13e:	f000 fa91 	bl	a664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    a142:	f000 fffb 	bl	b13c <xTaskResumeAll>
    a146:	e691      	b.n	9e6c <xQueueGenericReceive+0x6c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    a148:	6a38      	ldr	r0, [r7, #32]
    a14a:	f000 fa8b 	bl	a664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    a14e:	f000 fff5 	bl	b13c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    a152:	6a38      	ldr	r0, [r7, #32]
    a154:	f000 fad8 	bl	a708 <prvIsQueueEmpty>
    a158:	4603      	mov	r3, r0
    a15a:	2b00      	cmp	r3, #0
    a15c:	f43f ae86 	beq.w	9e6c <xQueueGenericReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
    a160:	6a3b      	ldr	r3, [r7, #32]
    a162:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    a166:	2b04      	cmp	r3, #4
    a168:	d832      	bhi.n	a1d0 <xQueueGenericReceive+0x3d0>
    a16a:	a201      	add	r2, pc, #4	; (adr r2, a170 <xQueueGenericReceive+0x370>)
    a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a170:	0000a185 	.word	0x0000a185
    a174:	0000a1b9 	.word	0x0000a1b9
    a178:	0000a19f 	.word	0x0000a19f
    a17c:	0000a19f 	.word	0x0000a19f
    a180:	0000a1b9 	.word	0x0000a1b9
    a184:	683b      	ldr	r3, [r7, #0]
    a186:	2b00      	cmp	r3, #0
    a188:	d101      	bne.n	a18e <xQueueGenericReceive+0x38e>
    a18a:	2063      	movs	r0, #99	; 0x63
    a18c:	e000      	b.n	a190 <xQueueGenericReceive+0x390>
    a18e:	2073      	movs	r0, #115	; 0x73
    a190:	6a39      	ldr	r1, [r7, #32]
    a192:	687a      	ldr	r2, [r7, #4]
    a194:	6a3b      	ldr	r3, [r7, #32]
    a196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a198:	f003 fa3a 	bl	d610 <prvTraceStoreEvent3>
    a19c:	e017      	b.n	a1ce <xQueueGenericReceive+0x3ce>
    a19e:	683b      	ldr	r3, [r7, #0]
    a1a0:	2b00      	cmp	r3, #0
    a1a2:	d101      	bne.n	a1a8 <xQueueGenericReceive+0x3a8>
    a1a4:	2064      	movs	r0, #100	; 0x64
    a1a6:	e000      	b.n	a1aa <xQueueGenericReceive+0x3aa>
    a1a8:	2074      	movs	r0, #116	; 0x74
    a1aa:	6a39      	ldr	r1, [r7, #32]
    a1ac:	687a      	ldr	r2, [r7, #4]
    a1ae:	6a3b      	ldr	r3, [r7, #32]
    a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a1b2:	f003 fa2d 	bl	d610 <prvTraceStoreEvent3>
    a1b6:	e00a      	b.n	a1ce <xQueueGenericReceive+0x3ce>
    a1b8:	683b      	ldr	r3, [r7, #0]
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	d101      	bne.n	a1c2 <xQueueGenericReceive+0x3c2>
    a1be:	2365      	movs	r3, #101	; 0x65
    a1c0:	e000      	b.n	a1c4 <xQueueGenericReceive+0x3c4>
    a1c2:	2375      	movs	r3, #117	; 0x75
    a1c4:	6a39      	ldr	r1, [r7, #32]
    a1c6:	687a      	ldr	r2, [r7, #4]
    a1c8:	4618      	mov	r0, r3
    a1ca:	f003 f9d1 	bl	d570 <prvTraceStoreEvent2>
    a1ce:	bf00      	nop
				return errQUEUE_EMPTY;
    a1d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    a1d2:	4618      	mov	r0, r3
    a1d4:	3728      	adds	r7, #40	; 0x28
    a1d6:	46bd      	mov	sp, r7
    a1d8:	bd80      	pop	{r7, pc}
    a1da:	bf00      	nop

0000a1dc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    a1dc:	b580      	push	{r7, lr}
    a1de:	b08a      	sub	sp, #40	; 0x28
    a1e0:	af00      	add	r7, sp, #0
    a1e2:	60f8      	str	r0, [r7, #12]
    a1e4:	60b9      	str	r1, [r7, #8]
    a1e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    a1e8:	68fb      	ldr	r3, [r7, #12]
    a1ea:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    a1ec:	6a3b      	ldr	r3, [r7, #32]
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d104      	bne.n	a1fc <xQueueReceiveFromISR+0x20>
    a1f2:	f04f 0050 	mov.w	r0, #80	; 0x50
    a1f6:	f380 8811 	msr	BASEPRI, r0
    a1fa:	e7fe      	b.n	a1fa <xQueueReceiveFromISR+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    a1fc:	68bb      	ldr	r3, [r7, #8]
    a1fe:	2b00      	cmp	r3, #0
    a200:	d103      	bne.n	a20a <xQueueReceiveFromISR+0x2e>
    a202:	6a3b      	ldr	r3, [r7, #32]
    a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a206:	2b00      	cmp	r3, #0
    a208:	d101      	bne.n	a20e <xQueueReceiveFromISR+0x32>
    a20a:	2301      	movs	r3, #1
    a20c:	e000      	b.n	a210 <xQueueReceiveFromISR+0x34>
    a20e:	2300      	movs	r3, #0
    a210:	2b00      	cmp	r3, #0
    a212:	d104      	bne.n	a21e <xQueueReceiveFromISR+0x42>
    a214:	f04f 0050 	mov.w	r0, #80	; 0x50
    a218:	f380 8811 	msr	BASEPRI, r0
    a21c:	e7fe      	b.n	a21c <xQueueReceiveFromISR+0x40>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    a21e:	f7ff f8bd 	bl	939c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    a222:	2300      	movs	r3, #0
    a224:	61fb      	str	r3, [r7, #28]
    a226:	f04f 0050 	mov.w	r0, #80	; 0x50
    a22a:	f380 8811 	msr	BASEPRI, r0
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    a22e:	6a3b      	ldr	r3, [r7, #32]
    a230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a232:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    a234:	69bb      	ldr	r3, [r7, #24]
    a236:	2b00      	cmp	r3, #0
    a238:	d04a      	beq.n	a2d0 <xQueueReceiveFromISR+0xf4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    a23a:	6a3b      	ldr	r3, [r7, #32]
    a23c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    a240:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
    a242:	6a3b      	ldr	r3, [r7, #32]
    a244:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    a248:	2b00      	cmp	r3, #0
    a24a:	d005      	beq.n	a258 <xQueueReceiveFromISR+0x7c>
    a24c:	2b00      	cmp	r3, #0
    a24e:	db15      	blt.n	a27c <xQueueReceiveFromISR+0xa0>
    a250:	3b02      	subs	r3, #2
    a252:	2b01      	cmp	r3, #1
    a254:	d812      	bhi.n	a27c <xQueueReceiveFromISR+0xa0>
    a256:	e008      	b.n	a26a <xQueueReceiveFromISR+0x8e>
    a258:	6a39      	ldr	r1, [r7, #32]
    a25a:	6a3b      	ldr	r3, [r7, #32]
    a25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a25e:	3b01      	subs	r3, #1
    a260:	461a      	mov	r2, r3
    a262:	2069      	movs	r0, #105	; 0x69
    a264:	f003 f984 	bl	d570 <prvTraceStoreEvent2>
    a268:	e007      	b.n	a27a <xQueueReceiveFromISR+0x9e>
    a26a:	6a39      	ldr	r1, [r7, #32]
    a26c:	6a3b      	ldr	r3, [r7, #32]
    a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a270:	3b01      	subs	r3, #1
    a272:	461a      	mov	r2, r3
    a274:	206a      	movs	r0, #106	; 0x6a
    a276:	f003 f97b 	bl	d570 <prvTraceStoreEvent2>
    a27a:	bf00      	nop

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    a27c:	68b9      	ldr	r1, [r7, #8]
    a27e:	6a38      	ldr	r0, [r7, #32]
    a280:	f000 f9ca 	bl	a618 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    a284:	69bb      	ldr	r3, [r7, #24]
    a286:	1e5a      	subs	r2, r3, #1
    a288:	6a3b      	ldr	r3, [r7, #32]
    a28a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    a28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
    a290:	f1b3 3fff 	cmp.w	r3, #4294967295
    a294:	d112      	bne.n	a2bc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    a296:	6a3b      	ldr	r3, [r7, #32]
    a298:	691b      	ldr	r3, [r3, #16]
    a29a:	2b00      	cmp	r3, #0
    a29c:	d015      	beq.n	a2ca <xQueueReceiveFromISR+0xee>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    a29e:	6a3b      	ldr	r3, [r7, #32]
    a2a0:	3310      	adds	r3, #16
    a2a2:	4618      	mov	r0, r3
    a2a4:	f001 fb24 	bl	b8f0 <xTaskRemoveFromEventList>
    a2a8:	4603      	mov	r3, r0
    a2aa:	2b00      	cmp	r3, #0
    a2ac:	d00d      	beq.n	a2ca <xQueueReceiveFromISR+0xee>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    a2ae:	687b      	ldr	r3, [r7, #4]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d00a      	beq.n	a2ca <xQueueReceiveFromISR+0xee>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    a2b4:	687b      	ldr	r3, [r7, #4]
    a2b6:	2201      	movs	r2, #1
    a2b8:	601a      	str	r2, [r3, #0]
    a2ba:	e006      	b.n	a2ca <xQueueReceiveFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    a2bc:	7dfb      	ldrb	r3, [r7, #23]
    a2be:	3301      	adds	r3, #1
    a2c0:	b2db      	uxtb	r3, r3
    a2c2:	b25a      	sxtb	r2, r3
    a2c4:	6a3b      	ldr	r3, [r7, #32]
    a2c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    a2ca:	2301      	movs	r3, #1
    a2cc:	627b      	str	r3, [r7, #36]	; 0x24
    a2ce:	e01c      	b.n	a30a <xQueueReceiveFromISR+0x12e>
		}
		else
		{
			xReturn = pdFAIL;
    a2d0:	2300      	movs	r3, #0
    a2d2:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
    a2d4:	6a3b      	ldr	r3, [r7, #32]
    a2d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    a2da:	2b00      	cmp	r3, #0
    a2dc:	d005      	beq.n	a2ea <xQueueReceiveFromISR+0x10e>
    a2de:	2b00      	cmp	r3, #0
    a2e0:	db13      	blt.n	a30a <xQueueReceiveFromISR+0x12e>
    a2e2:	3b02      	subs	r3, #2
    a2e4:	2b01      	cmp	r3, #1
    a2e6:	d810      	bhi.n	a30a <xQueueReceiveFromISR+0x12e>
    a2e8:	e007      	b.n	a2fa <xQueueReceiveFromISR+0x11e>
    a2ea:	6a39      	ldr	r1, [r7, #32]
    a2ec:	6a3b      	ldr	r3, [r7, #32]
    a2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a2f0:	461a      	mov	r2, r3
    a2f2:	206c      	movs	r0, #108	; 0x6c
    a2f4:	f003 f93c 	bl	d570 <prvTraceStoreEvent2>
    a2f8:	e006      	b.n	a308 <xQueueReceiveFromISR+0x12c>
    a2fa:	6a39      	ldr	r1, [r7, #32]
    a2fc:	6a3b      	ldr	r3, [r7, #32]
    a2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a300:	461a      	mov	r2, r3
    a302:	206d      	movs	r0, #109	; 0x6d
    a304:	f003 f934 	bl	d570 <prvTraceStoreEvent2>
    a308:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    a30a:	f04f 0000 	mov.w	r0, #0
    a30e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a314:	4618      	mov	r0, r3
    a316:	3728      	adds	r7, #40	; 0x28
    a318:	46bd      	mov	sp, r7
    a31a:	bd80      	pop	{r7, pc}

0000a31c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    a31c:	b580      	push	{r7, lr}
    a31e:	b086      	sub	sp, #24
    a320:	af00      	add	r7, sp, #0
    a322:	6078      	str	r0, [r7, #4]
    a324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    a326:	687b      	ldr	r3, [r7, #4]
    a328:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
    a32a:	693b      	ldr	r3, [r7, #16]
    a32c:	2b00      	cmp	r3, #0
    a32e:	d104      	bne.n	a33a <xQueuePeekFromISR+0x1e>
    a330:	f04f 0050 	mov.w	r0, #80	; 0x50
    a334:	f380 8811 	msr	BASEPRI, r0
    a338:	e7fe      	b.n	a338 <xQueuePeekFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    a33a:	683b      	ldr	r3, [r7, #0]
    a33c:	2b00      	cmp	r3, #0
    a33e:	d103      	bne.n	a348 <xQueuePeekFromISR+0x2c>
    a340:	693b      	ldr	r3, [r7, #16]
    a342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a344:	2b00      	cmp	r3, #0
    a346:	d101      	bne.n	a34c <xQueuePeekFromISR+0x30>
    a348:	2301      	movs	r3, #1
    a34a:	e000      	b.n	a34e <xQueuePeekFromISR+0x32>
    a34c:	2300      	movs	r3, #0
    a34e:	2b00      	cmp	r3, #0
    a350:	d104      	bne.n	a35c <xQueuePeekFromISR+0x40>
    a352:	f04f 0050 	mov.w	r0, #80	; 0x50
    a356:	f380 8811 	msr	BASEPRI, r0
    a35a:	e7fe      	b.n	a35a <xQueuePeekFromISR+0x3e>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
    a35c:	693b      	ldr	r3, [r7, #16]
    a35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a360:	2b00      	cmp	r3, #0
    a362:	d104      	bne.n	a36e <xQueuePeekFromISR+0x52>
    a364:	f04f 0050 	mov.w	r0, #80	; 0x50
    a368:	f380 8811 	msr	BASEPRI, r0
    a36c:	e7fe      	b.n	a36c <xQueuePeekFromISR+0x50>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    a36e:	f7ff f815 	bl	939c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    a372:	2300      	movs	r3, #0
    a374:	60fb      	str	r3, [r7, #12]
    a376:	f04f 0050 	mov.w	r0, #80	; 0x50
    a37a:	f380 8811 	msr	BASEPRI, r0
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    a37e:	693b      	ldr	r3, [r7, #16]
    a380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a382:	2b00      	cmp	r3, #0
    a384:	d00c      	beq.n	a3a0 <xQueuePeekFromISR+0x84>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    a386:	693b      	ldr	r3, [r7, #16]
    a388:	68db      	ldr	r3, [r3, #12]
    a38a:	60bb      	str	r3, [r7, #8]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    a38c:	6839      	ldr	r1, [r7, #0]
    a38e:	6938      	ldr	r0, [r7, #16]
    a390:	f000 f942 	bl	a618 <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    a394:	693b      	ldr	r3, [r7, #16]
    a396:	68ba      	ldr	r2, [r7, #8]
    a398:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
    a39a:	2301      	movs	r3, #1
    a39c:	617b      	str	r3, [r7, #20]
    a39e:	e001      	b.n	a3a4 <xQueuePeekFromISR+0x88>
		}
		else
		{
			xReturn = pdFAIL;
    a3a0:	2300      	movs	r3, #0
    a3a2:	617b      	str	r3, [r7, #20]
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    a3a4:	f04f 0000 	mov.w	r0, #0
    a3a8:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    a3ac:	697b      	ldr	r3, [r7, #20]
}
    a3ae:	4618      	mov	r0, r3
    a3b0:	3718      	adds	r7, #24
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	bf00      	nop

0000a3b8 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    a3b8:	b580      	push	{r7, lr}
    a3ba:	b084      	sub	sp, #16
    a3bc:	af00      	add	r7, sp, #0
    a3be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
    a3c0:	687b      	ldr	r3, [r7, #4]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	d104      	bne.n	a3d0 <uxQueueMessagesWaiting+0x18>
    a3c6:	f04f 0050 	mov.w	r0, #80	; 0x50
    a3ca:	f380 8811 	msr	BASEPRI, r0
    a3ce:	e7fe      	b.n	a3ce <uxQueueMessagesWaiting+0x16>

	taskENTER_CRITICAL();
    a3d0:	f7fe ff20 	bl	9214 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a3d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
    a3da:	f7fe ff41 	bl	9260 <vPortExitCritical>

	return uxReturn;
    a3de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    a3e0:	4618      	mov	r0, r3
    a3e2:	3710      	adds	r7, #16
    a3e4:	46bd      	mov	sp, r7
    a3e6:	bd80      	pop	{r7, pc}

0000a3e8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    a3e8:	b580      	push	{r7, lr}
    a3ea:	b084      	sub	sp, #16
    a3ec:	af00      	add	r7, sp, #0
    a3ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    a3f0:	687b      	ldr	r3, [r7, #4]
    a3f2:	60fb      	str	r3, [r7, #12]
	configASSERT( pxQueue );
    a3f4:	68fb      	ldr	r3, [r7, #12]
    a3f6:	2b00      	cmp	r3, #0
    a3f8:	d104      	bne.n	a404 <uxQueueSpacesAvailable+0x1c>
    a3fa:	f04f 0050 	mov.w	r0, #80	; 0x50
    a3fe:	f380 8811 	msr	BASEPRI, r0
    a402:	e7fe      	b.n	a402 <uxQueueSpacesAvailable+0x1a>

	taskENTER_CRITICAL();
    a404:	f7fe ff06 	bl	9214 <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    a408:	68fb      	ldr	r3, [r7, #12]
    a40a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    a40c:	68fb      	ldr	r3, [r7, #12]
    a40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a410:	1ad3      	subs	r3, r2, r3
    a412:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
    a414:	f7fe ff24 	bl	9260 <vPortExitCritical>

	return uxReturn;
    a418:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    a41a:	4618      	mov	r0, r3
    a41c:	3710      	adds	r7, #16
    a41e:	46bd      	mov	sp, r7
    a420:	bd80      	pop	{r7, pc}
    a422:	bf00      	nop

0000a424 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    a424:	b480      	push	{r7}
    a426:	b085      	sub	sp, #20
    a428:	af00      	add	r7, sp, #0
    a42a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
    a42c:	687b      	ldr	r3, [r7, #4]
    a42e:	2b00      	cmp	r3, #0
    a430:	d104      	bne.n	a43c <uxQueueMessagesWaitingFromISR+0x18>
    a432:	f04f 0050 	mov.w	r0, #80	; 0x50
    a436:	f380 8811 	msr	BASEPRI, r0
    a43a:	e7fe      	b.n	a43a <uxQueueMessagesWaitingFromISR+0x16>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    a43c:	687b      	ldr	r3, [r7, #4]
    a43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a440:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    a442:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    a444:	4618      	mov	r0, r3
    a446:	3714      	adds	r7, #20
    a448:	46bd      	mov	sp, r7
    a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a44e:	4770      	bx	lr

0000a450 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    a450:	b580      	push	{r7, lr}
    a452:	b084      	sub	sp, #16
    a454:	af00      	add	r7, sp, #0
    a456:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    a458:	687b      	ldr	r3, [r7, #4]
    a45a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    a45c:	68fb      	ldr	r3, [r7, #12]
    a45e:	2b00      	cmp	r3, #0
    a460:	d104      	bne.n	a46c <vQueueDelete+0x1c>
    a462:	f04f 0050 	mov.w	r0, #80	; 0x50
    a466:	f380 8811 	msr	BASEPRI, r0
    a46a:	e7fe      	b.n	a46a <vQueueDelete+0x1a>
	traceQUEUE_DELETE( pxQueue );
    a46c:	68fb      	ldr	r3, [r7, #12]
    a46e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    a472:	2b04      	cmp	r3, #4
    a474:	d833      	bhi.n	a4de <vQueueDelete+0x8e>
    a476:	a201      	add	r2, pc, #4	; (adr r2, a47c <vQueueDelete+0x2c>)
    a478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a47c:	0000a491 	.word	0x0000a491
    a480:	0000a4ab 	.word	0x0000a4ab
    a484:	0000a4c5 	.word	0x0000a4c5
    a488:	0000a4c5 	.word	0x0000a4c5
    a48c:	0000a4ab 	.word	0x0000a4ab
    a490:	68f9      	ldr	r1, [r7, #12]
    a492:	68fb      	ldr	r3, [r7, #12]
    a494:	2b00      	cmp	r3, #0
    a496:	d002      	beq.n	a49e <vQueueDelete+0x4e>
    a498:	68fb      	ldr	r3, [r7, #12]
    a49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a49c:	e000      	b.n	a4a0 <vQueueDelete+0x50>
    a49e:	2300      	movs	r3, #0
    a4a0:	461a      	mov	r2, r3
    a4a2:	2021      	movs	r0, #33	; 0x21
    a4a4:	f003 f864 	bl	d570 <prvTraceStoreEvent2>
    a4a8:	e018      	b.n	a4dc <vQueueDelete+0x8c>
    a4aa:	68f9      	ldr	r1, [r7, #12]
    a4ac:	68fb      	ldr	r3, [r7, #12]
    a4ae:	2b00      	cmp	r3, #0
    a4b0:	d002      	beq.n	a4b8 <vQueueDelete+0x68>
    a4b2:	68fb      	ldr	r3, [r7, #12]
    a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a4b6:	e000      	b.n	a4ba <vQueueDelete+0x6a>
    a4b8:	2300      	movs	r3, #0
    a4ba:	461a      	mov	r2, r3
    a4bc:	2023      	movs	r0, #35	; 0x23
    a4be:	f003 f857 	bl	d570 <prvTraceStoreEvent2>
    a4c2:	e00b      	b.n	a4dc <vQueueDelete+0x8c>
    a4c4:	68f9      	ldr	r1, [r7, #12]
    a4c6:	68fb      	ldr	r3, [r7, #12]
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	d002      	beq.n	a4d2 <vQueueDelete+0x82>
    a4cc:	68fb      	ldr	r3, [r7, #12]
    a4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a4d0:	e000      	b.n	a4d4 <vQueueDelete+0x84>
    a4d2:	2300      	movs	r3, #0
    a4d4:	461a      	mov	r2, r3
    a4d6:	2022      	movs	r0, #34	; 0x22
    a4d8:	f003 f84a 	bl	d570 <prvTraceStoreEvent2>
    a4dc:	bf00      	nop
    a4de:	68f8      	ldr	r0, [r7, #12]
    a4e0:	f003 fadc 	bl	da9c <prvTraceDeleteSymbol>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    a4e4:	68f8      	ldr	r0, [r7, #12]
    a4e6:	f7fe fbaf 	bl	8c48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    a4ea:	bf00      	nop
    a4ec:	3710      	adds	r7, #16
    a4ee:	46bd      	mov	sp, r7
    a4f0:	bd80      	pop	{r7, pc}
    a4f2:	bf00      	nop

0000a4f4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
    a4f4:	b480      	push	{r7}
    a4f6:	b083      	sub	sp, #12
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
    a4fc:	687b      	ldr	r3, [r7, #4]
    a4fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
    a500:	4618      	mov	r0, r3
    a502:	370c      	adds	r7, #12
    a504:	46bd      	mov	sp, r7
    a506:	f85d 7b04 	ldr.w	r7, [sp], #4
    a50a:	4770      	bx	lr

0000a50c <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
    a50c:	b480      	push	{r7}
    a50e:	b083      	sub	sp, #12
    a510:	af00      	add	r7, sp, #0
    a512:	6078      	str	r0, [r7, #4]
    a514:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	683a      	ldr	r2, [r7, #0]
    a51a:	649a      	str	r2, [r3, #72]	; 0x48
	}
    a51c:	bf00      	nop
    a51e:	370c      	adds	r7, #12
    a520:	46bd      	mov	sp, r7
    a522:	f85d 7b04 	ldr.w	r7, [sp], #4
    a526:	4770      	bx	lr

0000a528 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
    a528:	b480      	push	{r7}
    a52a:	b083      	sub	sp, #12
    a52c:	af00      	add	r7, sp, #0
    a52e:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
    a530:	687b      	ldr	r3, [r7, #4]
    a532:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
    a536:	4618      	mov	r0, r3
    a538:	370c      	adds	r7, #12
    a53a:	46bd      	mov	sp, r7
    a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a540:	4770      	bx	lr
    a542:	bf00      	nop

0000a544 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    a544:	b580      	push	{r7, lr}
    a546:	b086      	sub	sp, #24
    a548:	af00      	add	r7, sp, #0
    a54a:	60f8      	str	r0, [r7, #12]
    a54c:	60b9      	str	r1, [r7, #8]
    a54e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    a550:	2300      	movs	r3, #0
    a552:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    a554:	68fb      	ldr	r3, [r7, #12]
    a556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a558:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    a55a:	68fb      	ldr	r3, [r7, #12]
    a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a55e:	2b00      	cmp	r3, #0
    a560:	d10d      	bne.n	a57e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    a562:	68fb      	ldr	r3, [r7, #12]
    a564:	681b      	ldr	r3, [r3, #0]
    a566:	2b00      	cmp	r3, #0
    a568:	d14d      	bne.n	a606 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    a56a:	68fb      	ldr	r3, [r7, #12]
    a56c:	685b      	ldr	r3, [r3, #4]
    a56e:	4618      	mov	r0, r3
    a570:	f001 fd20 	bl	bfb4 <xTaskPriorityDisinherit>
    a574:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    a576:	68fb      	ldr	r3, [r7, #12]
    a578:	2200      	movs	r2, #0
    a57a:	605a      	str	r2, [r3, #4]
    a57c:	e043      	b.n	a606 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    a57e:	687b      	ldr	r3, [r7, #4]
    a580:	2b00      	cmp	r3, #0
    a582:	d119      	bne.n	a5b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    a584:	68fb      	ldr	r3, [r7, #12]
    a586:	6898      	ldr	r0, [r3, #8]
    a588:	68fb      	ldr	r3, [r7, #12]
    a58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a58c:	461a      	mov	r2, r3
    a58e:	68b9      	ldr	r1, [r7, #8]
    a590:	f005 fab5 	bl	fafe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    a594:	68fb      	ldr	r3, [r7, #12]
    a596:	689a      	ldr	r2, [r3, #8]
    a598:	68fb      	ldr	r3, [r7, #12]
    a59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a59c:	441a      	add	r2, r3
    a59e:	68fb      	ldr	r3, [r7, #12]
    a5a0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    a5a2:	68fb      	ldr	r3, [r7, #12]
    a5a4:	689a      	ldr	r2, [r3, #8]
    a5a6:	68fb      	ldr	r3, [r7, #12]
    a5a8:	685b      	ldr	r3, [r3, #4]
    a5aa:	429a      	cmp	r2, r3
    a5ac:	d32b      	bcc.n	a606 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    a5ae:	68fb      	ldr	r3, [r7, #12]
    a5b0:	681a      	ldr	r2, [r3, #0]
    a5b2:	68fb      	ldr	r3, [r7, #12]
    a5b4:	609a      	str	r2, [r3, #8]
    a5b6:	e026      	b.n	a606 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a5b8:	68fb      	ldr	r3, [r7, #12]
    a5ba:	68d8      	ldr	r0, [r3, #12]
    a5bc:	68fb      	ldr	r3, [r7, #12]
    a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a5c0:	461a      	mov	r2, r3
    a5c2:	68b9      	ldr	r1, [r7, #8]
    a5c4:	f005 fa9b 	bl	fafe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    a5c8:	68fb      	ldr	r3, [r7, #12]
    a5ca:	68da      	ldr	r2, [r3, #12]
    a5cc:	68fb      	ldr	r3, [r7, #12]
    a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a5d0:	425b      	negs	r3, r3
    a5d2:	441a      	add	r2, r3
    a5d4:	68fb      	ldr	r3, [r7, #12]
    a5d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    a5d8:	68fb      	ldr	r3, [r7, #12]
    a5da:	68da      	ldr	r2, [r3, #12]
    a5dc:	68fb      	ldr	r3, [r7, #12]
    a5de:	681b      	ldr	r3, [r3, #0]
    a5e0:	429a      	cmp	r2, r3
    a5e2:	d207      	bcs.n	a5f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    a5e4:	68fb      	ldr	r3, [r7, #12]
    a5e6:	685a      	ldr	r2, [r3, #4]
    a5e8:	68fb      	ldr	r3, [r7, #12]
    a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a5ec:	425b      	negs	r3, r3
    a5ee:	441a      	add	r2, r3
    a5f0:	68fb      	ldr	r3, [r7, #12]
    a5f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	2b02      	cmp	r3, #2
    a5f8:	d105      	bne.n	a606 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    a5fa:	693b      	ldr	r3, [r7, #16]
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d002      	beq.n	a606 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    a600:	693b      	ldr	r3, [r7, #16]
    a602:	3b01      	subs	r3, #1
    a604:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    a606:	693b      	ldr	r3, [r7, #16]
    a608:	1c5a      	adds	r2, r3, #1
    a60a:	68fb      	ldr	r3, [r7, #12]
    a60c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    a60e:	697b      	ldr	r3, [r7, #20]
}
    a610:	4618      	mov	r0, r3
    a612:	3718      	adds	r7, #24
    a614:	46bd      	mov	sp, r7
    a616:	bd80      	pop	{r7, pc}

0000a618 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    a618:	b580      	push	{r7, lr}
    a61a:	b082      	sub	sp, #8
    a61c:	af00      	add	r7, sp, #0
    a61e:	6078      	str	r0, [r7, #4]
    a620:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    a622:	687b      	ldr	r3, [r7, #4]
    a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a626:	2b00      	cmp	r3, #0
    a628:	d018      	beq.n	a65c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    a62a:	687b      	ldr	r3, [r7, #4]
    a62c:	68da      	ldr	r2, [r3, #12]
    a62e:	687b      	ldr	r3, [r7, #4]
    a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a632:	441a      	add	r2, r3
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    a638:	687b      	ldr	r3, [r7, #4]
    a63a:	68da      	ldr	r2, [r3, #12]
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	685b      	ldr	r3, [r3, #4]
    a640:	429a      	cmp	r2, r3
    a642:	d303      	bcc.n	a64c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    a644:	687b      	ldr	r3, [r7, #4]
    a646:	681a      	ldr	r2, [r3, #0]
    a648:	687b      	ldr	r3, [r7, #4]
    a64a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	68d9      	ldr	r1, [r3, #12]
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a654:	461a      	mov	r2, r3
    a656:	6838      	ldr	r0, [r7, #0]
    a658:	f005 fa51 	bl	fafe <memcpy>
	}
}
    a65c:	bf00      	nop
    a65e:	3708      	adds	r7, #8
    a660:	46bd      	mov	sp, r7
    a662:	bd80      	pop	{r7, pc}

0000a664 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    a664:	b580      	push	{r7, lr}
    a666:	b084      	sub	sp, #16
    a668:	af00      	add	r7, sp, #0
    a66a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    a66c:	f7fe fdd2 	bl	9214 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
    a670:	687b      	ldr	r3, [r7, #4]
    a672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
    a676:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    a678:	e011      	b.n	a69e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    a67a:	687b      	ldr	r3, [r7, #4]
    a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a67e:	2b00      	cmp	r3, #0
    a680:	d012      	beq.n	a6a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    a682:	687b      	ldr	r3, [r7, #4]
    a684:	3324      	adds	r3, #36	; 0x24
    a686:	4618      	mov	r0, r3
    a688:	f001 f932 	bl	b8f0 <xTaskRemoveFromEventList>
    a68c:	4603      	mov	r3, r0
    a68e:	2b00      	cmp	r3, #0
    a690:	d001      	beq.n	a696 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    a692:	f001 fa5d 	bl	bb50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    a696:	7bfb      	ldrb	r3, [r7, #15]
    a698:	3b01      	subs	r3, #1
    a69a:	b2db      	uxtb	r3, r3
    a69c:	73fb      	strb	r3, [r7, #15]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    a69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    a6a2:	2b00      	cmp	r3, #0
    a6a4:	dce9      	bgt.n	a67a <prvUnlockQueue+0x16>
    a6a6:	e000      	b.n	a6aa <prvUnlockQueue+0x46>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
    a6a8:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    a6aa:	687b      	ldr	r3, [r7, #4]
    a6ac:	22ff      	movs	r2, #255	; 0xff
    a6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
    a6b2:	f7fe fdd5 	bl	9260 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    a6b6:	f7fe fdad 	bl	9214 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
    a6ba:	687b      	ldr	r3, [r7, #4]
    a6bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
    a6c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    a6c2:	e011      	b.n	a6e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    a6c4:	687b      	ldr	r3, [r7, #4]
    a6c6:	691b      	ldr	r3, [r3, #16]
    a6c8:	2b00      	cmp	r3, #0
    a6ca:	d012      	beq.n	a6f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    a6cc:	687b      	ldr	r3, [r7, #4]
    a6ce:	3310      	adds	r3, #16
    a6d0:	4618      	mov	r0, r3
    a6d2:	f001 f90d 	bl	b8f0 <xTaskRemoveFromEventList>
    a6d6:	4603      	mov	r3, r0
    a6d8:	2b00      	cmp	r3, #0
    a6da:	d001      	beq.n	a6e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
    a6dc:	f001 fa38 	bl	bb50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    a6e0:	7bbb      	ldrb	r3, [r7, #14]
    a6e2:	3b01      	subs	r3, #1
    a6e4:	b2db      	uxtb	r3, r3
    a6e6:	73bb      	strb	r3, [r7, #14]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    a6e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	dce9      	bgt.n	a6c4 <prvUnlockQueue+0x60>
    a6f0:	e000      	b.n	a6f4 <prvUnlockQueue+0x90>

				--cRxLock;
			}
			else
			{
				break;
    a6f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	22ff      	movs	r2, #255	; 0xff
    a6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    a6fc:	f7fe fdb0 	bl	9260 <vPortExitCritical>
}
    a700:	bf00      	nop
    a702:	3710      	adds	r7, #16
    a704:	46bd      	mov	sp, r7
    a706:	bd80      	pop	{r7, pc}

0000a708 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    a708:	b580      	push	{r7, lr}
    a70a:	b084      	sub	sp, #16
    a70c:	af00      	add	r7, sp, #0
    a70e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    a710:	f7fe fd80 	bl	9214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    a714:	687b      	ldr	r3, [r7, #4]
    a716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a718:	2b00      	cmp	r3, #0
    a71a:	d102      	bne.n	a722 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    a71c:	2301      	movs	r3, #1
    a71e:	60fb      	str	r3, [r7, #12]
    a720:	e001      	b.n	a726 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    a722:	2300      	movs	r3, #0
    a724:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    a726:	f7fe fd9b 	bl	9260 <vPortExitCritical>

	return xReturn;
    a72a:	68fb      	ldr	r3, [r7, #12]
}
    a72c:	4618      	mov	r0, r3
    a72e:	3710      	adds	r7, #16
    a730:	46bd      	mov	sp, r7
    a732:	bd80      	pop	{r7, pc}

0000a734 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    a734:	b480      	push	{r7}
    a736:	b085      	sub	sp, #20
    a738:	af00      	add	r7, sp, #0
    a73a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
    a73c:	687b      	ldr	r3, [r7, #4]
    a73e:	2b00      	cmp	r3, #0
    a740:	d104      	bne.n	a74c <xQueueIsQueueEmptyFromISR+0x18>
    a742:	f04f 0050 	mov.w	r0, #80	; 0x50
    a746:	f380 8811 	msr	BASEPRI, r0
    a74a:	e7fe      	b.n	a74a <xQueueIsQueueEmptyFromISR+0x16>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    a74c:	687b      	ldr	r3, [r7, #4]
    a74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    a750:	2b00      	cmp	r3, #0
    a752:	d102      	bne.n	a75a <xQueueIsQueueEmptyFromISR+0x26>
	{
		xReturn = pdTRUE;
    a754:	2301      	movs	r3, #1
    a756:	60fb      	str	r3, [r7, #12]
    a758:	e001      	b.n	a75e <xQueueIsQueueEmptyFromISR+0x2a>
	}
	else
	{
		xReturn = pdFALSE;
    a75a:	2300      	movs	r3, #0
    a75c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    a75e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    a760:	4618      	mov	r0, r3
    a762:	3714      	adds	r7, #20
    a764:	46bd      	mov	sp, r7
    a766:	f85d 7b04 	ldr.w	r7, [sp], #4
    a76a:	4770      	bx	lr

0000a76c <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    a76c:	b580      	push	{r7, lr}
    a76e:	b084      	sub	sp, #16
    a770:	af00      	add	r7, sp, #0
    a772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    a774:	f7fe fd4e 	bl	9214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    a778:	687b      	ldr	r3, [r7, #4]
    a77a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a77c:	687b      	ldr	r3, [r7, #4]
    a77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a780:	429a      	cmp	r2, r3
    a782:	d102      	bne.n	a78a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    a784:	2301      	movs	r3, #1
    a786:	60fb      	str	r3, [r7, #12]
    a788:	e001      	b.n	a78e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    a78a:	2300      	movs	r3, #0
    a78c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    a78e:	f7fe fd67 	bl	9260 <vPortExitCritical>

	return xReturn;
    a792:	68fb      	ldr	r3, [r7, #12]
}
    a794:	4618      	mov	r0, r3
    a796:	3710      	adds	r7, #16
    a798:	46bd      	mov	sp, r7
    a79a:	bd80      	pop	{r7, pc}

0000a79c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    a79c:	b480      	push	{r7}
    a79e:	b085      	sub	sp, #20
    a7a0:	af00      	add	r7, sp, #0
    a7a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
    a7a4:	687b      	ldr	r3, [r7, #4]
    a7a6:	2b00      	cmp	r3, #0
    a7a8:	d104      	bne.n	a7b4 <xQueueIsQueueFullFromISR+0x18>
    a7aa:	f04f 0050 	mov.w	r0, #80	; 0x50
    a7ae:	f380 8811 	msr	BASEPRI, r0
    a7b2:	e7fe      	b.n	a7b2 <xQueueIsQueueFullFromISR+0x16>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    a7b4:	687b      	ldr	r3, [r7, #4]
    a7b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    a7bc:	429a      	cmp	r2, r3
    a7be:	d102      	bne.n	a7c6 <xQueueIsQueueFullFromISR+0x2a>
	{
		xReturn = pdTRUE;
    a7c0:	2301      	movs	r3, #1
    a7c2:	60fb      	str	r3, [r7, #12]
    a7c4:	e001      	b.n	a7ca <xQueueIsQueueFullFromISR+0x2e>
	}
	else
	{
		xReturn = pdFALSE;
    a7c6:	2300      	movs	r3, #0
    a7c8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    a7ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    a7cc:	4618      	mov	r0, r3
    a7ce:	3714      	adds	r7, #20
    a7d0:	46bd      	mov	sp, r7
    a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7d6:	4770      	bx	lr

0000a7d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
    a7d8:	b580      	push	{r7, lr}
    a7da:	b08c      	sub	sp, #48	; 0x30
    a7dc:	af04      	add	r7, sp, #16
    a7de:	60f8      	str	r0, [r7, #12]
    a7e0:	60b9      	str	r1, [r7, #8]
    a7e2:	603b      	str	r3, [r7, #0]
    a7e4:	4613      	mov	r3, r2
    a7e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a7e8:	88fb      	ldrh	r3, [r7, #6]
    a7ea:	009b      	lsls	r3, r3, #2
    a7ec:	4618      	mov	r0, r3
    a7ee:	f7fe f969 	bl	8ac4 <pvPortMalloc>
    a7f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
    a7f4:	697b      	ldr	r3, [r7, #20]
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	d00e      	beq.n	a818 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    a7fa:	205c      	movs	r0, #92	; 0x5c
    a7fc:	f7fe f962 	bl	8ac4 <pvPortMalloc>
    a800:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
    a802:	69fb      	ldr	r3, [r7, #28]
    a804:	2b00      	cmp	r3, #0
    a806:	d003      	beq.n	a810 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    a808:	69fb      	ldr	r3, [r7, #28]
    a80a:	697a      	ldr	r2, [r7, #20]
    a80c:	631a      	str	r2, [r3, #48]	; 0x30
    a80e:	e005      	b.n	a81c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    a810:	6978      	ldr	r0, [r7, #20]
    a812:	f7fe fa19 	bl	8c48 <vPortFree>
    a816:	e001      	b.n	a81c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
    a818:	2300      	movs	r3, #0
    a81a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    a81c:	69fb      	ldr	r3, [r7, #28]
    a81e:	2b00      	cmp	r3, #0
    a820:	d013      	beq.n	a84a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    a822:	88fa      	ldrh	r2, [r7, #6]
    a824:	2300      	movs	r3, #0
    a826:	9303      	str	r3, [sp, #12]
    a828:	69fb      	ldr	r3, [r7, #28]
    a82a:	9302      	str	r3, [sp, #8]
    a82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a82e:	9301      	str	r3, [sp, #4]
    a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a832:	9300      	str	r3, [sp, #0]
    a834:	683b      	ldr	r3, [r7, #0]
    a836:	68b9      	ldr	r1, [r7, #8]
    a838:	68f8      	ldr	r0, [r7, #12]
    a83a:	f000 f80f 	bl	a85c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    a83e:	69f8      	ldr	r0, [r7, #28]
    a840:	f000 f890 	bl	a964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    a844:	2301      	movs	r3, #1
    a846:	61bb      	str	r3, [r7, #24]
    a848:	e002      	b.n	a850 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    a84a:	f04f 33ff 	mov.w	r3, #4294967295
    a84e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    a850:	69bb      	ldr	r3, [r7, #24]
	}
    a852:	4618      	mov	r0, r3
    a854:	3720      	adds	r7, #32
    a856:	46bd      	mov	sp, r7
    a858:	bd80      	pop	{r7, pc}
    a85a:	bf00      	nop

0000a85c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
    a85c:	b580      	push	{r7, lr}
    a85e:	b086      	sub	sp, #24
    a860:	af00      	add	r7, sp, #0
    a862:	60f8      	str	r0, [r7, #12]
    a864:	60b9      	str	r1, [r7, #8]
    a866:	607a      	str	r2, [r7, #4]
    a868:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
    a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a86c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    a86e:	687b      	ldr	r3, [r7, #4]
    a870:	009b      	lsls	r3, r3, #2
    a872:	461a      	mov	r2, r3
    a874:	21a5      	movs	r1, #165	; 0xa5
    a876:	f005 f94d 	bl	fb14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    a87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a87c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a87e:	687b      	ldr	r3, [r7, #4]
    a880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a884:	3b01      	subs	r3, #1
    a886:	009b      	lsls	r3, r3, #2
    a888:	4413      	add	r3, r2
    a88a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    a88c:	693b      	ldr	r3, [r7, #16]
    a88e:	f023 0307 	bic.w	r3, r3, #7
    a892:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    a894:	693b      	ldr	r3, [r7, #16]
    a896:	f003 0307 	and.w	r3, r3, #7
    a89a:	2b00      	cmp	r3, #0
    a89c:	d004      	beq.n	a8a8 <prvInitialiseNewTask+0x4c>
    a89e:	f04f 0050 	mov.w	r0, #80	; 0x50
    a8a2:	f380 8811 	msr	BASEPRI, r0
    a8a6:	e7fe      	b.n	a8a6 <prvInitialiseNewTask+0x4a>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
    a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a8aa:	693a      	ldr	r2, [r7, #16]
    a8ac:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    a8ae:	2300      	movs	r3, #0
    a8b0:	617b      	str	r3, [r7, #20]
    a8b2:	e012      	b.n	a8da <prvInitialiseNewTask+0x7e>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    a8b4:	68ba      	ldr	r2, [r7, #8]
    a8b6:	697b      	ldr	r3, [r7, #20]
    a8b8:	4413      	add	r3, r2
    a8ba:	7819      	ldrb	r1, [r3, #0]
    a8bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a8be:	697b      	ldr	r3, [r7, #20]
    a8c0:	4413      	add	r3, r2
    a8c2:	3334      	adds	r3, #52	; 0x34
    a8c4:	460a      	mov	r2, r1
    a8c6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    a8c8:	68ba      	ldr	r2, [r7, #8]
    a8ca:	697b      	ldr	r3, [r7, #20]
    a8cc:	4413      	add	r3, r2
    a8ce:	781b      	ldrb	r3, [r3, #0]
    a8d0:	2b00      	cmp	r3, #0
    a8d2:	d006      	beq.n	a8e2 <prvInitialiseNewTask+0x86>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    a8d4:	697b      	ldr	r3, [r7, #20]
    a8d6:	3301      	adds	r3, #1
    a8d8:	617b      	str	r3, [r7, #20]
    a8da:	697b      	ldr	r3, [r7, #20]
    a8dc:	2b0b      	cmp	r3, #11
    a8de:	d9e9      	bls.n	a8b4 <prvInitialiseNewTask+0x58>
    a8e0:	e000      	b.n	a8e4 <prvInitialiseNewTask+0x88>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    a8e2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a8e6:	2200      	movs	r2, #0
    a8e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    a8ec:	6a3b      	ldr	r3, [r7, #32]
    a8ee:	2b05      	cmp	r3, #5
    a8f0:	d901      	bls.n	a8f6 <prvInitialiseNewTask+0x9a>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    a8f2:	2305      	movs	r3, #5
    a8f4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a8f8:	6a3a      	ldr	r2, [r7, #32]
    a8fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    a8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a8fe:	6a3a      	ldr	r2, [r7, #32]
    a900:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
    a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a904:	2200      	movs	r2, #0
    a906:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a90a:	3304      	adds	r3, #4
    a90c:	4618      	mov	r0, r3
    a90e:	f7fe faf5 	bl	8efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    a912:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a914:	3318      	adds	r3, #24
    a916:	4618      	mov	r0, r3
    a918:	f7fe faf0 	bl	8efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a91e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a920:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    a922:	6a3b      	ldr	r3, [r7, #32]
    a924:	f1c3 0206 	rsb	r2, r3, #6
    a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a92a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a92e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a930:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a934:	2200      	movs	r2, #0
    a936:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a93a:	2200      	movs	r2, #0
    a93c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    a940:	683a      	ldr	r2, [r7, #0]
    a942:	68f9      	ldr	r1, [r7, #12]
    a944:	6938      	ldr	r0, [r7, #16]
    a946:	f7fe fb83 	bl	9050 <pxPortInitialiseStack>
    a94a:	4602      	mov	r2, r0
    a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a94e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a952:	2b00      	cmp	r3, #0
    a954:	d002      	beq.n	a95c <prvInitialiseNewTask+0x100>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a958:	6aba      	ldr	r2, [r7, #40]	; 0x28
    a95a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    a95c:	bf00      	nop
    a95e:	3718      	adds	r7, #24
    a960:	46bd      	mov	sp, r7
    a962:	bd80      	pop	{r7, pc}

0000a964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    a964:	b580      	push	{r7, lr}
    a966:	b082      	sub	sp, #8
    a968:	af00      	add	r7, sp, #0
    a96a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    a96c:	f7fe fc52 	bl	9214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
    a970:	4b3b      	ldr	r3, [pc, #236]	; (aa60 <prvAddNewTaskToReadyList+0xfc>)
    a972:	681b      	ldr	r3, [r3, #0]
    a974:	3301      	adds	r3, #1
    a976:	4a3a      	ldr	r2, [pc, #232]	; (aa60 <prvAddNewTaskToReadyList+0xfc>)
    a978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
    a97a:	4b3a      	ldr	r3, [pc, #232]	; (aa64 <prvAddNewTaskToReadyList+0x100>)
    a97c:	681b      	ldr	r3, [r3, #0]
    a97e:	2b00      	cmp	r3, #0
    a980:	d109      	bne.n	a996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    a982:	4a38      	ldr	r2, [pc, #224]	; (aa64 <prvAddNewTaskToReadyList+0x100>)
    a984:	687b      	ldr	r3, [r7, #4]
    a986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    a988:	4b35      	ldr	r3, [pc, #212]	; (aa60 <prvAddNewTaskToReadyList+0xfc>)
    a98a:	681b      	ldr	r3, [r3, #0]
    a98c:	2b01      	cmp	r3, #1
    a98e:	d110      	bne.n	a9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    a990:	f001 f926 	bl	bbe0 <prvInitialiseTaskLists>
    a994:	e00d      	b.n	a9b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    a996:	4b34      	ldr	r3, [pc, #208]	; (aa68 <prvAddNewTaskToReadyList+0x104>)
    a998:	681b      	ldr	r3, [r3, #0]
    a99a:	2b00      	cmp	r3, #0
    a99c:	d109      	bne.n	a9b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    a99e:	4b31      	ldr	r3, [pc, #196]	; (aa64 <prvAddNewTaskToReadyList+0x100>)
    a9a0:	681b      	ldr	r3, [r3, #0]
    a9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a9a4:	687b      	ldr	r3, [r7, #4]
    a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9a8:	429a      	cmp	r2, r3
    a9aa:	d802      	bhi.n	a9b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    a9ac:	4a2d      	ldr	r2, [pc, #180]	; (aa64 <prvAddNewTaskToReadyList+0x100>)
    a9ae:	687b      	ldr	r3, [r7, #4]
    a9b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    a9b2:	4b2e      	ldr	r3, [pc, #184]	; (aa6c <prvAddNewTaskToReadyList+0x108>)
    a9b4:	681b      	ldr	r3, [r3, #0]
    a9b6:	3301      	adds	r3, #1
    a9b8:	4a2c      	ldr	r2, [pc, #176]	; (aa6c <prvAddNewTaskToReadyList+0x108>)
    a9ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    a9bc:	4b2b      	ldr	r3, [pc, #172]	; (aa6c <prvAddNewTaskToReadyList+0x108>)
    a9be:	681a      	ldr	r2, [r3, #0]
    a9c0:	687b      	ldr	r3, [r7, #4]
    a9c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
    a9c4:	687b      	ldr	r3, [r7, #4]
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	d01a      	beq.n	aa00 <prvAddNewTaskToReadyList+0x9c>
    a9ca:	687b      	ldr	r3, [r7, #4]
    a9cc:	3334      	adds	r3, #52	; 0x34
    a9ce:	4619      	mov	r1, r3
    a9d0:	6878      	ldr	r0, [r7, #4]
    a9d2:	f002 ffdb 	bl	d98c <prvTraceSaveSymbol>
    a9d6:	687b      	ldr	r3, [r7, #4]
    a9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9da:	4619      	mov	r1, r3
    a9dc:	6878      	ldr	r0, [r7, #4]
    a9de:	f003 f8bf 	bl	db60 <prvTraceSaveObjectData>
    a9e2:	687b      	ldr	r3, [r7, #4]
    a9e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
    a9e8:	687b      	ldr	r3, [r7, #4]
    a9ea:	2103      	movs	r1, #3
    a9ec:	2001      	movs	r0, #1
    a9ee:	f002 fecf 	bl	d790 <prvTraceStoreStringEvent>
    a9f2:	6879      	ldr	r1, [r7, #4]
    a9f4:	687b      	ldr	r3, [r7, #4]
    a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a9f8:	461a      	mov	r2, r3
    a9fa:	2010      	movs	r0, #16
    a9fc:	f002 fdb8 	bl	d570 <prvTraceStoreEvent2>

		prvAddTaskToReadyList( pxNewTCB );
    aa00:	687b      	ldr	r3, [r7, #4]
    aa02:	4619      	mov	r1, r3
    aa04:	2030      	movs	r0, #48	; 0x30
    aa06:	f002 fd67 	bl	d4d8 <prvTraceStoreEvent1>
    aa0a:	687b      	ldr	r3, [r7, #4]
    aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    aa0e:	4b18      	ldr	r3, [pc, #96]	; (aa70 <prvAddNewTaskToReadyList+0x10c>)
    aa10:	681b      	ldr	r3, [r3, #0]
    aa12:	429a      	cmp	r2, r3
    aa14:	d903      	bls.n	aa1e <prvAddNewTaskToReadyList+0xba>
    aa16:	687b      	ldr	r3, [r7, #4]
    aa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    aa1a:	4a15      	ldr	r2, [pc, #84]	; (aa70 <prvAddNewTaskToReadyList+0x10c>)
    aa1c:	6013      	str	r3, [r2, #0]
    aa1e:	687b      	ldr	r3, [r7, #4]
    aa20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    aa22:	4613      	mov	r3, r2
    aa24:	009b      	lsls	r3, r3, #2
    aa26:	4413      	add	r3, r2
    aa28:	009b      	lsls	r3, r3, #2
    aa2a:	4a12      	ldr	r2, [pc, #72]	; (aa74 <prvAddNewTaskToReadyList+0x110>)
    aa2c:	441a      	add	r2, r3
    aa2e:	687b      	ldr	r3, [r7, #4]
    aa30:	3304      	adds	r3, #4
    aa32:	4619      	mov	r1, r3
    aa34:	4610      	mov	r0, r2
    aa36:	f7fe fa6f 	bl	8f18 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    aa3a:	f7fe fc11 	bl	9260 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
    aa3e:	4b0a      	ldr	r3, [pc, #40]	; (aa68 <prvAddNewTaskToReadyList+0x104>)
    aa40:	681b      	ldr	r3, [r3, #0]
    aa42:	2b00      	cmp	r3, #0
    aa44:	d008      	beq.n	aa58 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    aa46:	4b07      	ldr	r3, [pc, #28]	; (aa64 <prvAddNewTaskToReadyList+0x100>)
    aa48:	681b      	ldr	r3, [r3, #0]
    aa4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    aa4c:	687b      	ldr	r3, [r7, #4]
    aa4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    aa50:	429a      	cmp	r2, r3
    aa52:	d201      	bcs.n	aa58 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
    aa54:	f7fe fc1a 	bl	928c <vPortYieldFromISR>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    aa58:	bf00      	nop
    aa5a:	3708      	adds	r7, #8
    aa5c:	46bd      	mov	sp, r7
    aa5e:	bd80      	pop	{r7, pc}
    aa60:	20002bac 	.word	0x20002bac
    aa64:	20002ad8 	.word	0x20002ad8
    aa68:	20002bb8 	.word	0x20002bb8
    aa6c:	20002bc8 	.word	0x20002bc8
    aa70:	20002bb4 	.word	0x20002bb4
    aa74:	20002adc 	.word	0x20002adc

0000aa78 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    aa78:	b580      	push	{r7, lr}
    aa7a:	b086      	sub	sp, #24
    aa7c:	af00      	add	r7, sp, #0
    aa7e:	6078      	str	r0, [r7, #4]
    aa80:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    aa82:	2300      	movs	r3, #0
    aa84:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    aa86:	687b      	ldr	r3, [r7, #4]
    aa88:	2b00      	cmp	r3, #0
    aa8a:	d104      	bne.n	aa96 <vTaskDelayUntil+0x1e>
    aa8c:	f04f 0050 	mov.w	r0, #80	; 0x50
    aa90:	f380 8811 	msr	BASEPRI, r0
    aa94:	e7fe      	b.n	aa94 <vTaskDelayUntil+0x1c>
		configASSERT( ( xTimeIncrement > 0U ) );
    aa96:	683b      	ldr	r3, [r7, #0]
    aa98:	2b00      	cmp	r3, #0
    aa9a:	d104      	bne.n	aaa6 <vTaskDelayUntil+0x2e>
    aa9c:	f04f 0050 	mov.w	r0, #80	; 0x50
    aaa0:	f380 8811 	msr	BASEPRI, r0
    aaa4:	e7fe      	b.n	aaa4 <vTaskDelayUntil+0x2c>
		configASSERT( uxSchedulerSuspended == 0 );
    aaa6:	4b26      	ldr	r3, [pc, #152]	; (ab40 <vTaskDelayUntil+0xc8>)
    aaa8:	681b      	ldr	r3, [r3, #0]
    aaaa:	2b00      	cmp	r3, #0
    aaac:	d004      	beq.n	aab8 <vTaskDelayUntil+0x40>
    aaae:	f04f 0050 	mov.w	r0, #80	; 0x50
    aab2:	f380 8811 	msr	BASEPRI, r0
    aab6:	e7fe      	b.n	aab6 <vTaskDelayUntil+0x3e>

		vTaskSuspendAll();
    aab8:	f000 fb32 	bl	b120 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    aabc:	4b21      	ldr	r3, [pc, #132]	; (ab44 <vTaskDelayUntil+0xcc>)
    aabe:	681b      	ldr	r3, [r3, #0]
    aac0:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    aac2:	687b      	ldr	r3, [r7, #4]
    aac4:	681a      	ldr	r2, [r3, #0]
    aac6:	683b      	ldr	r3, [r7, #0]
    aac8:	4413      	add	r3, r2
    aaca:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    aacc:	687b      	ldr	r3, [r7, #4]
    aace:	681a      	ldr	r2, [r3, #0]
    aad0:	693b      	ldr	r3, [r7, #16]
    aad2:	429a      	cmp	r2, r3
    aad4:	d90b      	bls.n	aaee <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    aad6:	687b      	ldr	r3, [r7, #4]
    aad8:	681a      	ldr	r2, [r3, #0]
    aada:	68fb      	ldr	r3, [r7, #12]
    aadc:	429a      	cmp	r2, r3
    aade:	d911      	bls.n	ab04 <vTaskDelayUntil+0x8c>
    aae0:	68fa      	ldr	r2, [r7, #12]
    aae2:	693b      	ldr	r3, [r7, #16]
    aae4:	429a      	cmp	r2, r3
    aae6:	d90d      	bls.n	ab04 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
    aae8:	2301      	movs	r3, #1
    aaea:	617b      	str	r3, [r7, #20]
    aaec:	e00a      	b.n	ab04 <vTaskDelayUntil+0x8c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    aaee:	687b      	ldr	r3, [r7, #4]
    aaf0:	681a      	ldr	r2, [r3, #0]
    aaf2:	68fb      	ldr	r3, [r7, #12]
    aaf4:	429a      	cmp	r2, r3
    aaf6:	d803      	bhi.n	ab00 <vTaskDelayUntil+0x88>
    aaf8:	68fa      	ldr	r2, [r7, #12]
    aafa:	693b      	ldr	r3, [r7, #16]
    aafc:	429a      	cmp	r2, r3
    aafe:	d901      	bls.n	ab04 <vTaskDelayUntil+0x8c>
				{
					xShouldDelay = pdTRUE;
    ab00:	2301      	movs	r3, #1
    ab02:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    ab04:	687b      	ldr	r3, [r7, #4]
    ab06:	68fa      	ldr	r2, [r7, #12]
    ab08:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    ab0a:	697b      	ldr	r3, [r7, #20]
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d00a      	beq.n	ab26 <vTaskDelayUntil+0xae>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );
    ab10:	68f9      	ldr	r1, [r7, #12]
    ab12:	2079      	movs	r0, #121	; 0x79
    ab14:	f002 fce0 	bl	d4d8 <prvTraceStoreEvent1>

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    ab18:	68fa      	ldr	r2, [r7, #12]
    ab1a:	693b      	ldr	r3, [r7, #16]
    ab1c:	1ad3      	subs	r3, r2, r3
    ab1e:	2100      	movs	r1, #0
    ab20:	4618      	mov	r0, r3
    ab22:	f001 fe6d 	bl	c800 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    ab26:	f000 fb09 	bl	b13c <xTaskResumeAll>
    ab2a:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    ab2c:	68bb      	ldr	r3, [r7, #8]
    ab2e:	2b00      	cmp	r3, #0
    ab30:	d101      	bne.n	ab36 <vTaskDelayUntil+0xbe>
		{
			portYIELD_WITHIN_API();
    ab32:	f7fe fbab 	bl	928c <vPortYieldFromISR>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ab36:	bf00      	nop
    ab38:	3718      	adds	r7, #24
    ab3a:	46bd      	mov	sp, r7
    ab3c:	bd80      	pop	{r7, pc}
    ab3e:	bf00      	nop
    ab40:	20002bd4 	.word	0x20002bd4
    ab44:	20002bb0 	.word	0x20002bb0

0000ab48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    ab48:	b580      	push	{r7, lr}
    ab4a:	b084      	sub	sp, #16
    ab4c:	af00      	add	r7, sp, #0
    ab4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    ab50:	2300      	movs	r3, #0
    ab52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    ab54:	687b      	ldr	r3, [r7, #4]
    ab56:	2b00      	cmp	r3, #0
    ab58:	d015      	beq.n	ab86 <vTaskDelay+0x3e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    ab5a:	4b0f      	ldr	r3, [pc, #60]	; (ab98 <vTaskDelay+0x50>)
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	2b00      	cmp	r3, #0
    ab60:	d004      	beq.n	ab6c <vTaskDelay+0x24>
    ab62:	f04f 0050 	mov.w	r0, #80	; 0x50
    ab66:	f380 8811 	msr	BASEPRI, r0
    ab6a:	e7fe      	b.n	ab6a <vTaskDelay+0x22>
			vTaskSuspendAll();
    ab6c:	f000 fad8 	bl	b120 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
    ab70:	6879      	ldr	r1, [r7, #4]
    ab72:	207a      	movs	r0, #122	; 0x7a
    ab74:	f002 fcb0 	bl	d4d8 <prvTraceStoreEvent1>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    ab78:	2100      	movs	r1, #0
    ab7a:	6878      	ldr	r0, [r7, #4]
    ab7c:	f001 fe40 	bl	c800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    ab80:	f000 fadc 	bl	b13c <xTaskResumeAll>
    ab84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    ab86:	68fb      	ldr	r3, [r7, #12]
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d101      	bne.n	ab90 <vTaskDelay+0x48>
		{
			portYIELD_WITHIN_API();
    ab8c:	f7fe fb7e 	bl	928c <vPortYieldFromISR>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ab90:	bf00      	nop
    ab92:	3710      	adds	r7, #16
    ab94:	46bd      	mov	sp, r7
    ab96:	bd80      	pop	{r7, pc}
    ab98:	20002bd4 	.word	0x20002bd4

0000ab9c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
    ab9c:	b580      	push	{r7, lr}
    ab9e:	b086      	sub	sp, #24
    aba0:	af00      	add	r7, sp, #0
    aba2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    aba4:	687b      	ldr	r3, [r7, #4]
    aba6:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
    aba8:	693b      	ldr	r3, [r7, #16]
    abaa:	2b00      	cmp	r3, #0
    abac:	d104      	bne.n	abb8 <eTaskGetState+0x1c>
    abae:	f04f 0050 	mov.w	r0, #80	; 0x50
    abb2:	f380 8811 	msr	BASEPRI, r0
    abb6:	e7fe      	b.n	abb6 <eTaskGetState+0x1a>

		if( pxTCB == pxCurrentTCB )
    abb8:	4b18      	ldr	r3, [pc, #96]	; (ac1c <eTaskGetState+0x80>)
    abba:	681b      	ldr	r3, [r3, #0]
    abbc:	693a      	ldr	r2, [r7, #16]
    abbe:	429a      	cmp	r2, r3
    abc0:	d102      	bne.n	abc8 <eTaskGetState+0x2c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
    abc2:	2300      	movs	r3, #0
    abc4:	75fb      	strb	r3, [r7, #23]
    abc6:	e023      	b.n	ac10 <eTaskGetState+0x74>
		}
		else
		{
			taskENTER_CRITICAL();
    abc8:	f7fe fb24 	bl	9214 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
    abcc:	693b      	ldr	r3, [r7, #16]
    abce:	695b      	ldr	r3, [r3, #20]
    abd0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
    abd2:	f7fe fb45 	bl	9260 <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
    abd6:	4b12      	ldr	r3, [pc, #72]	; (ac20 <eTaskGetState+0x84>)
    abd8:	681b      	ldr	r3, [r3, #0]
    abda:	68fa      	ldr	r2, [r7, #12]
    abdc:	429a      	cmp	r2, r3
    abde:	d004      	beq.n	abea <eTaskGetState+0x4e>
    abe0:	4b10      	ldr	r3, [pc, #64]	; (ac24 <eTaskGetState+0x88>)
    abe2:	681b      	ldr	r3, [r3, #0]
    abe4:	68fa      	ldr	r2, [r7, #12]
    abe6:	429a      	cmp	r2, r3
    abe8:	d102      	bne.n	abf0 <eTaskGetState+0x54>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
    abea:	2302      	movs	r3, #2
    abec:	75fb      	strb	r3, [r7, #23]
    abee:	e00f      	b.n	ac10 <eTaskGetState+0x74>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
    abf0:	68fb      	ldr	r3, [r7, #12]
    abf2:	4a0d      	ldr	r2, [pc, #52]	; (ac28 <eTaskGetState+0x8c>)
    abf4:	4293      	cmp	r3, r2
    abf6:	d109      	bne.n	ac0c <eTaskGetState+0x70>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
    abf8:	693b      	ldr	r3, [r7, #16]
    abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    abfc:	2b00      	cmp	r3, #0
    abfe:	d102      	bne.n	ac06 <eTaskGetState+0x6a>
					{
						eReturn = eSuspended;
    ac00:	2303      	movs	r3, #3
    ac02:	75fb      	strb	r3, [r7, #23]
    ac04:	e004      	b.n	ac10 <eTaskGetState+0x74>
					}
					else
					{
						eReturn = eBlocked;
    ac06:	2302      	movs	r3, #2
    ac08:	75fb      	strb	r3, [r7, #23]
    ac0a:	e001      	b.n	ac10 <eTaskGetState+0x74>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
    ac0c:	2301      	movs	r3, #1
    ac0e:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
    ac10:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    ac12:	4618      	mov	r0, r3
    ac14:	3718      	adds	r7, #24
    ac16:	46bd      	mov	sp, r7
    ac18:	bd80      	pop	{r7, pc}
    ac1a:	bf00      	nop
    ac1c:	20002ad8 	.word	0x20002ad8
    ac20:	20002b7c 	.word	0x20002b7c
    ac24:	20002b80 	.word	0x20002b80
    ac28:	20002b98 	.word	0x20002b98

0000ac2c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
    ac2c:	b580      	push	{r7, lr}
    ac2e:	b084      	sub	sp, #16
    ac30:	af00      	add	r7, sp, #0
    ac32:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
    ac34:	f7fe faee 	bl	9214 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the that
			called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    ac38:	687b      	ldr	r3, [r7, #4]
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d102      	bne.n	ac44 <uxTaskPriorityGet+0x18>
    ac3e:	4b07      	ldr	r3, [pc, #28]	; (ac5c <uxTaskPriorityGet+0x30>)
    ac40:	681b      	ldr	r3, [r3, #0]
    ac42:	e000      	b.n	ac46 <uxTaskPriorityGet+0x1a>
    ac44:	687b      	ldr	r3, [r7, #4]
    ac46:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    ac48:	68fb      	ldr	r3, [r7, #12]
    ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ac4c:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    ac4e:	f7fe fb07 	bl	9260 <vPortExitCritical>

		return uxReturn;
    ac52:	68bb      	ldr	r3, [r7, #8]
	}
    ac54:	4618      	mov	r0, r3
    ac56:	3710      	adds	r7, #16
    ac58:	46bd      	mov	sp, r7
    ac5a:	bd80      	pop	{r7, pc}
    ac5c:	20002ad8 	.word	0x20002ad8

0000ac60 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
	{
    ac60:	b580      	push	{r7, lr}
    ac62:	b086      	sub	sp, #24
    ac64:	af00      	add	r7, sp, #0
    ac66:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    ac68:	f7fe fb98 	bl	939c <vPortValidateInterruptPriority>

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
    ac6c:	2300      	movs	r3, #0
    ac6e:	617b      	str	r3, [r7, #20]
    ac70:	f04f 0050 	mov.w	r0, #80	; 0x50
    ac74:	f380 8811 	msr	BASEPRI, r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
    ac78:	687b      	ldr	r3, [r7, #4]
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d102      	bne.n	ac84 <uxTaskPriorityGetFromISR+0x24>
    ac7e:	4b08      	ldr	r3, [pc, #32]	; (aca0 <uxTaskPriorityGetFromISR+0x40>)
    ac80:	681b      	ldr	r3, [r3, #0]
    ac82:	e000      	b.n	ac86 <uxTaskPriorityGetFromISR+0x26>
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	613b      	str	r3, [r7, #16]
			uxReturn = pxTCB->uxPriority;
    ac88:	693b      	ldr	r3, [r7, #16]
    ac8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ac8c:	60fb      	str	r3, [r7, #12]
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
    ac8e:	f04f 0000 	mov.w	r0, #0
    ac92:	f380 8811 	msr	BASEPRI, r0

		return uxReturn;
    ac96:	68fb      	ldr	r3, [r7, #12]
	}
    ac98:	4618      	mov	r0, r3
    ac9a:	3718      	adds	r7, #24
    ac9c:	46bd      	mov	sp, r7
    ac9e:	bd80      	pop	{r7, pc}
    aca0:	20002ad8 	.word	0x20002ad8

0000aca4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    aca4:	b580      	push	{r7, lr}
    aca6:	b086      	sub	sp, #24
    aca8:	af00      	add	r7, sp, #0
    acaa:	6078      	str	r0, [r7, #4]
    acac:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    acae:	2300      	movs	r3, #0
    acb0:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
    acb2:	683b      	ldr	r3, [r7, #0]
    acb4:	2b05      	cmp	r3, #5
    acb6:	d904      	bls.n	acc2 <vTaskPrioritySet+0x1e>
    acb8:	f04f 0050 	mov.w	r0, #80	; 0x50
    acbc:	f380 8811 	msr	BASEPRI, r0
    acc0:	e7fe      	b.n	acc0 <vTaskPrioritySet+0x1c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    acc2:	683b      	ldr	r3, [r7, #0]
    acc4:	2b05      	cmp	r3, #5
    acc6:	d901      	bls.n	accc <vTaskPrioritySet+0x28>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    acc8:	2305      	movs	r3, #5
    acca:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    accc:	f7fe faa2 	bl	9214 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    acd0:	687b      	ldr	r3, [r7, #4]
    acd2:	2b00      	cmp	r3, #0
    acd4:	d102      	bne.n	acdc <vTaskPrioritySet+0x38>
    acd6:	4b42      	ldr	r3, [pc, #264]	; (ade0 <vTaskPrioritySet+0x13c>)
    acd8:	681b      	ldr	r3, [r3, #0]
    acda:	e000      	b.n	acde <vTaskPrioritySet+0x3a>
    acdc:	687b      	ldr	r3, [r7, #4]
    acde:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
    ace0:	6839      	ldr	r1, [r7, #0]
    ace2:	6938      	ldr	r0, [r7, #16]
    ace4:	f002 ff3c 	bl	db60 <prvTraceSaveObjectData>
    ace8:	693b      	ldr	r3, [r7, #16]
    acea:	683a      	ldr	r2, [r7, #0]
    acec:	4619      	mov	r1, r3
    acee:	2004      	movs	r0, #4
    acf0:	f002 fc3e 	bl	d570 <prvTraceStoreEvent2>

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    acf4:	693b      	ldr	r3, [r7, #16]
    acf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    acf8:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    acfa:	68fa      	ldr	r2, [r7, #12]
    acfc:	683b      	ldr	r3, [r7, #0]
    acfe:	429a      	cmp	r2, r3
    ad00:	d067      	beq.n	add2 <vTaskPrioritySet+0x12e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    ad02:	683a      	ldr	r2, [r7, #0]
    ad04:	68fb      	ldr	r3, [r7, #12]
    ad06:	429a      	cmp	r2, r3
    ad08:	d90d      	bls.n	ad26 <vTaskPrioritySet+0x82>
				{
					if( pxTCB != pxCurrentTCB )
    ad0a:	4b35      	ldr	r3, [pc, #212]	; (ade0 <vTaskPrioritySet+0x13c>)
    ad0c:	681b      	ldr	r3, [r3, #0]
    ad0e:	693a      	ldr	r2, [r7, #16]
    ad10:	429a      	cmp	r2, r3
    ad12:	d00f      	beq.n	ad34 <vTaskPrioritySet+0x90>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    ad14:	4b32      	ldr	r3, [pc, #200]	; (ade0 <vTaskPrioritySet+0x13c>)
    ad16:	681b      	ldr	r3, [r3, #0]
    ad18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ad1a:	683b      	ldr	r3, [r7, #0]
    ad1c:	429a      	cmp	r2, r3
    ad1e:	d809      	bhi.n	ad34 <vTaskPrioritySet+0x90>
						{
							xYieldRequired = pdTRUE;
    ad20:	2301      	movs	r3, #1
    ad22:	617b      	str	r3, [r7, #20]
    ad24:	e006      	b.n	ad34 <vTaskPrioritySet+0x90>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    ad26:	4b2e      	ldr	r3, [pc, #184]	; (ade0 <vTaskPrioritySet+0x13c>)
    ad28:	681b      	ldr	r3, [r3, #0]
    ad2a:	693a      	ldr	r2, [r7, #16]
    ad2c:	429a      	cmp	r2, r3
    ad2e:	d101      	bne.n	ad34 <vTaskPrioritySet+0x90>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    ad30:	2301      	movs	r3, #1
    ad32:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    ad34:	693b      	ldr	r3, [r7, #16]
    ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad38:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    ad3a:	693b      	ldr	r3, [r7, #16]
    ad3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    ad3e:	693b      	ldr	r3, [r7, #16]
    ad40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ad42:	429a      	cmp	r2, r3
    ad44:	d102      	bne.n	ad4c <vTaskPrioritySet+0xa8>
					{
						pxTCB->uxPriority = uxNewPriority;
    ad46:	693b      	ldr	r3, [r7, #16]
    ad48:	683a      	ldr	r2, [r7, #0]
    ad4a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    ad4c:	693b      	ldr	r3, [r7, #16]
    ad4e:	683a      	ldr	r2, [r7, #0]
    ad50:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    ad52:	693b      	ldr	r3, [r7, #16]
    ad54:	699b      	ldr	r3, [r3, #24]
    ad56:	2b00      	cmp	r3, #0
    ad58:	db04      	blt.n	ad64 <vTaskPrioritySet+0xc0>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    ad5a:	683b      	ldr	r3, [r7, #0]
    ad5c:	f1c3 0206 	rsb	r2, r3, #6
    ad60:	693b      	ldr	r3, [r7, #16]
    ad62:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    ad64:	693b      	ldr	r3, [r7, #16]
    ad66:	6959      	ldr	r1, [r3, #20]
    ad68:	68ba      	ldr	r2, [r7, #8]
    ad6a:	4613      	mov	r3, r2
    ad6c:	009b      	lsls	r3, r3, #2
    ad6e:	4413      	add	r3, r2
    ad70:	009b      	lsls	r3, r3, #2
    ad72:	4a1c      	ldr	r2, [pc, #112]	; (ade4 <vTaskPrioritySet+0x140>)
    ad74:	4413      	add	r3, r2
    ad76:	4299      	cmp	r1, r3
    ad78:	d101      	bne.n	ad7e <vTaskPrioritySet+0xda>
    ad7a:	2301      	movs	r3, #1
    ad7c:	e000      	b.n	ad80 <vTaskPrioritySet+0xdc>
    ad7e:	2300      	movs	r3, #0
    ad80:	2b00      	cmp	r3, #0
    ad82:	d021      	beq.n	adc8 <vTaskPrioritySet+0x124>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ad84:	693b      	ldr	r3, [r7, #16]
    ad86:	3304      	adds	r3, #4
    ad88:	4618      	mov	r0, r3
    ad8a:	f7fe f923 	bl	8fd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}
#if configUSE_SEGGER_SYSTEM_VIEWER_HOOKS /* << EST */
					prvReAddTaskToReadyList( pxTCB );
#else
					prvAddTaskToReadyList( pxTCB );
    ad8e:	693b      	ldr	r3, [r7, #16]
    ad90:	4619      	mov	r1, r3
    ad92:	2030      	movs	r0, #48	; 0x30
    ad94:	f002 fba0 	bl	d4d8 <prvTraceStoreEvent1>
    ad98:	693b      	ldr	r3, [r7, #16]
    ad9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ad9c:	4b12      	ldr	r3, [pc, #72]	; (ade8 <vTaskPrioritySet+0x144>)
    ad9e:	681b      	ldr	r3, [r3, #0]
    ada0:	429a      	cmp	r2, r3
    ada2:	d903      	bls.n	adac <vTaskPrioritySet+0x108>
    ada4:	693b      	ldr	r3, [r7, #16]
    ada6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ada8:	4a0f      	ldr	r2, [pc, #60]	; (ade8 <vTaskPrioritySet+0x144>)
    adaa:	6013      	str	r3, [r2, #0]
    adac:	693b      	ldr	r3, [r7, #16]
    adae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    adb0:	4613      	mov	r3, r2
    adb2:	009b      	lsls	r3, r3, #2
    adb4:	4413      	add	r3, r2
    adb6:	009b      	lsls	r3, r3, #2
    adb8:	4a0a      	ldr	r2, [pc, #40]	; (ade4 <vTaskPrioritySet+0x140>)
    adba:	441a      	add	r2, r3
    adbc:	693b      	ldr	r3, [r7, #16]
    adbe:	3304      	adds	r3, #4
    adc0:	4619      	mov	r1, r3
    adc2:	4610      	mov	r0, r2
    adc4:	f7fe f8a8 	bl	8f18 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    adc8:	697b      	ldr	r3, [r7, #20]
    adca:	2b00      	cmp	r3, #0
    adcc:	d001      	beq.n	add2 <vTaskPrioritySet+0x12e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    adce:	f7fe fa5d 	bl	928c <vPortYieldFromISR>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    add2:	f7fe fa45 	bl	9260 <vPortExitCritical>
	}
    add6:	bf00      	nop
    add8:	3718      	adds	r7, #24
    adda:	46bd      	mov	sp, r7
    addc:	bd80      	pop	{r7, pc}
    adde:	bf00      	nop
    ade0:	20002ad8 	.word	0x20002ad8
    ade4:	20002adc 	.word	0x20002adc
    ade8:	20002bb4 	.word	0x20002bb4

0000adec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    adec:	b580      	push	{r7, lr}
    adee:	b084      	sub	sp, #16
    adf0:	af00      	add	r7, sp, #0
    adf2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    adf4:	f7fe fa0e 	bl	9214 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    adf8:	687b      	ldr	r3, [r7, #4]
    adfa:	2b00      	cmp	r3, #0
    adfc:	d102      	bne.n	ae04 <vTaskSuspend+0x18>
    adfe:	4b27      	ldr	r3, [pc, #156]	; (ae9c <vTaskSuspend+0xb0>)
    ae00:	681b      	ldr	r3, [r3, #0]
    ae02:	e000      	b.n	ae06 <vTaskSuspend+0x1a>
    ae04:	687b      	ldr	r3, [r7, #4]
    ae06:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
    ae08:	68fb      	ldr	r3, [r7, #12]
    ae0a:	4619      	mov	r1, r3
    ae0c:	207b      	movs	r0, #123	; 0x7b
    ae0e:	f002 fb63 	bl	d4d8 <prvTraceStoreEvent1>

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ae12:	68fb      	ldr	r3, [r7, #12]
    ae14:	3304      	adds	r3, #4
    ae16:	4618      	mov	r0, r3
    ae18:	f7fe f8dc 	bl	8fd4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    ae1c:	68fb      	ldr	r3, [r7, #12]
    ae1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    ae20:	2b00      	cmp	r3, #0
    ae22:	d004      	beq.n	ae2e <vTaskSuspend+0x42>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    ae24:	68fb      	ldr	r3, [r7, #12]
    ae26:	3318      	adds	r3, #24
    ae28:	4618      	mov	r0, r3
    ae2a:	f7fe f8d3 	bl	8fd4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB); /* << EST */
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    ae2e:	68fb      	ldr	r3, [r7, #12]
    ae30:	3304      	adds	r3, #4
    ae32:	4619      	mov	r1, r3
    ae34:	481a      	ldr	r0, [pc, #104]	; (aea0 <vTaskSuspend+0xb4>)
    ae36:	f7fe f86f 	bl	8f18 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    ae3a:	f7fe fa11 	bl	9260 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
    ae3e:	4b19      	ldr	r3, [pc, #100]	; (aea4 <vTaskSuspend+0xb8>)
    ae40:	681b      	ldr	r3, [r3, #0]
    ae42:	2b00      	cmp	r3, #0
    ae44:	d005      	beq.n	ae52 <vTaskSuspend+0x66>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    ae46:	f7fe f9e5 	bl	9214 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
    ae4a:	f000 fff3 	bl	be34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    ae4e:	f7fe fa07 	bl	9260 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    ae52:	4b12      	ldr	r3, [pc, #72]	; (ae9c <vTaskSuspend+0xb0>)
    ae54:	681b      	ldr	r3, [r3, #0]
    ae56:	68fa      	ldr	r2, [r7, #12]
    ae58:	429a      	cmp	r2, r3
    ae5a:	d11b      	bne.n	ae94 <vTaskSuspend+0xa8>
		{
			if( xSchedulerRunning != pdFALSE )
    ae5c:	4b11      	ldr	r3, [pc, #68]	; (aea4 <vTaskSuspend+0xb8>)
    ae5e:	681b      	ldr	r3, [r3, #0]
    ae60:	2b00      	cmp	r3, #0
    ae62:	d00b      	beq.n	ae7c <vTaskSuspend+0x90>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
    ae64:	4b10      	ldr	r3, [pc, #64]	; (aea8 <vTaskSuspend+0xbc>)
    ae66:	681b      	ldr	r3, [r3, #0]
    ae68:	2b00      	cmp	r3, #0
    ae6a:	d004      	beq.n	ae76 <vTaskSuspend+0x8a>
    ae6c:	f04f 0050 	mov.w	r0, #80	; 0x50
    ae70:	f380 8811 	msr	BASEPRI, r0
    ae74:	e7fe      	b.n	ae74 <vTaskSuspend+0x88>
				portYIELD_WITHIN_API();
    ae76:	f7fe fa09 	bl	928c <vPortYieldFromISR>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ae7a:	e00b      	b.n	ae94 <vTaskSuspend+0xa8>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    ae7c:	4b08      	ldr	r3, [pc, #32]	; (aea0 <vTaskSuspend+0xb4>)
    ae7e:	681a      	ldr	r2, [r3, #0]
    ae80:	4b0a      	ldr	r3, [pc, #40]	; (aeac <vTaskSuspend+0xc0>)
    ae82:	681b      	ldr	r3, [r3, #0]
    ae84:	429a      	cmp	r2, r3
    ae86:	d103      	bne.n	ae90 <vTaskSuspend+0xa4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    ae88:	4b04      	ldr	r3, [pc, #16]	; (ae9c <vTaskSuspend+0xb0>)
    ae8a:	2200      	movs	r2, #0
    ae8c:	601a      	str	r2, [r3, #0]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ae8e:	e001      	b.n	ae94 <vTaskSuspend+0xa8>
					is. */
					pxCurrentTCB = NULL;
				}
				else
				{
					vTaskSwitchContext();
    ae90:	f000 fc68 	bl	b764 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    ae94:	bf00      	nop
    ae96:	3710      	adds	r7, #16
    ae98:	46bd      	mov	sp, r7
    ae9a:	bd80      	pop	{r7, pc}
    ae9c:	20002ad8 	.word	0x20002ad8
    aea0:	20002b98 	.word	0x20002b98
    aea4:	20002bb8 	.word	0x20002bb8
    aea8:	20002bd4 	.word	0x20002bd4
    aeac:	20002bac 	.word	0x20002bac

0000aeb0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    aeb0:	b480      	push	{r7}
    aeb2:	b085      	sub	sp, #20
    aeb4:	af00      	add	r7, sp, #0
    aeb6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
    aeb8:	2300      	movs	r3, #0
    aeba:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    aebc:	687b      	ldr	r3, [r7, #4]
    aebe:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
    aec0:	687b      	ldr	r3, [r7, #4]
    aec2:	2b00      	cmp	r3, #0
    aec4:	d104      	bne.n	aed0 <prvTaskIsTaskSuspended+0x20>
    aec6:	f04f 0050 	mov.w	r0, #80	; 0x50
    aeca:	f380 8811 	msr	BASEPRI, r0
    aece:	e7fe      	b.n	aece <prvTaskIsTaskSuspended+0x1e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    aed0:	68bb      	ldr	r3, [r7, #8]
    aed2:	695b      	ldr	r3, [r3, #20]
    aed4:	4a0f      	ldr	r2, [pc, #60]	; (af14 <prvTaskIsTaskSuspended+0x64>)
    aed6:	4293      	cmp	r3, r2
    aed8:	d101      	bne.n	aede <prvTaskIsTaskSuspended+0x2e>
    aeda:	2301      	movs	r3, #1
    aedc:	e000      	b.n	aee0 <prvTaskIsTaskSuspended+0x30>
    aede:	2300      	movs	r3, #0
    aee0:	2b00      	cmp	r3, #0
    aee2:	d00f      	beq.n	af04 <prvTaskIsTaskSuspended+0x54>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    aee4:	68bb      	ldr	r3, [r7, #8]
    aee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aee8:	4a0b      	ldr	r2, [pc, #44]	; (af18 <prvTaskIsTaskSuspended+0x68>)
    aeea:	4293      	cmp	r3, r2
    aeec:	d00a      	beq.n	af04 <prvTaskIsTaskSuspended+0x54>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
    aeee:	68bb      	ldr	r3, [r7, #8]
    aef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    aef2:	2b00      	cmp	r3, #0
    aef4:	d101      	bne.n	aefa <prvTaskIsTaskSuspended+0x4a>
    aef6:	2301      	movs	r3, #1
    aef8:	e000      	b.n	aefc <prvTaskIsTaskSuspended+0x4c>
    aefa:	2300      	movs	r3, #0
    aefc:	2b00      	cmp	r3, #0
    aefe:	d001      	beq.n	af04 <prvTaskIsTaskSuspended+0x54>
				{
					xReturn = pdTRUE;
    af00:	2301      	movs	r3, #1
    af02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    af04:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    af06:	4618      	mov	r0, r3
    af08:	3714      	adds	r7, #20
    af0a:	46bd      	mov	sp, r7
    af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    af10:	4770      	bx	lr
    af12:	bf00      	nop
    af14:	20002b98 	.word	0x20002b98
    af18:	20002b84 	.word	0x20002b84

0000af1c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    af1c:	b580      	push	{r7, lr}
    af1e:	b084      	sub	sp, #16
    af20:	af00      	add	r7, sp, #0
    af22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    af24:	687b      	ldr	r3, [r7, #4]
    af26:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
    af28:	687b      	ldr	r3, [r7, #4]
    af2a:	2b00      	cmp	r3, #0
    af2c:	d104      	bne.n	af38 <vTaskResume+0x1c>
    af2e:	f04f 0050 	mov.w	r0, #80	; 0x50
    af32:	f380 8811 	msr	BASEPRI, r0
    af36:	e7fe      	b.n	af36 <vTaskResume+0x1a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    af38:	68fb      	ldr	r3, [r7, #12]
    af3a:	2b00      	cmp	r3, #0
    af3c:	d03e      	beq.n	afbc <vTaskResume+0xa0>
    af3e:	4b21      	ldr	r3, [pc, #132]	; (afc4 <vTaskResume+0xa8>)
    af40:	681b      	ldr	r3, [r3, #0]
    af42:	68fa      	ldr	r2, [r7, #12]
    af44:	429a      	cmp	r2, r3
    af46:	d039      	beq.n	afbc <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
    af48:	f7fe f964 	bl	9214 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    af4c:	68f8      	ldr	r0, [r7, #12]
    af4e:	f7ff ffaf 	bl	aeb0 <prvTaskIsTaskSuspended>
    af52:	4603      	mov	r3, r0
    af54:	2b00      	cmp	r3, #0
    af56:	d02f      	beq.n	afb8 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );
    af58:	68fb      	ldr	r3, [r7, #12]
    af5a:	4619      	mov	r1, r3
    af5c:	207c      	movs	r0, #124	; 0x7c
    af5e:	f002 fabb 	bl	d4d8 <prvTraceStoreEvent1>

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    af62:	68fb      	ldr	r3, [r7, #12]
    af64:	3304      	adds	r3, #4
    af66:	4618      	mov	r0, r3
    af68:	f7fe f834 	bl	8fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    af6c:	68fb      	ldr	r3, [r7, #12]
    af6e:	4619      	mov	r1, r3
    af70:	2030      	movs	r0, #48	; 0x30
    af72:	f002 fab1 	bl	d4d8 <prvTraceStoreEvent1>
    af76:	68fb      	ldr	r3, [r7, #12]
    af78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    af7a:	4b13      	ldr	r3, [pc, #76]	; (afc8 <vTaskResume+0xac>)
    af7c:	681b      	ldr	r3, [r3, #0]
    af7e:	429a      	cmp	r2, r3
    af80:	d903      	bls.n	af8a <vTaskResume+0x6e>
    af82:	68fb      	ldr	r3, [r7, #12]
    af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    af86:	4a10      	ldr	r2, [pc, #64]	; (afc8 <vTaskResume+0xac>)
    af88:	6013      	str	r3, [r2, #0]
    af8a:	68fb      	ldr	r3, [r7, #12]
    af8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    af8e:	4613      	mov	r3, r2
    af90:	009b      	lsls	r3, r3, #2
    af92:	4413      	add	r3, r2
    af94:	009b      	lsls	r3, r3, #2
    af96:	4a0d      	ldr	r2, [pc, #52]	; (afcc <vTaskResume+0xb0>)
    af98:	441a      	add	r2, r3
    af9a:	68fb      	ldr	r3, [r7, #12]
    af9c:	3304      	adds	r3, #4
    af9e:	4619      	mov	r1, r3
    afa0:	4610      	mov	r0, r2
    afa2:	f7fd ffb9 	bl	8f18 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    afa6:	68fb      	ldr	r3, [r7, #12]
    afa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    afaa:	4b06      	ldr	r3, [pc, #24]	; (afc4 <vTaskResume+0xa8>)
    afac:	681b      	ldr	r3, [r3, #0]
    afae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    afb0:	429a      	cmp	r2, r3
    afb2:	d301      	bcc.n	afb8 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    afb4:	f7fe f96a 	bl	928c <vPortYieldFromISR>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    afb8:	f7fe f952 	bl	9260 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    afbc:	bf00      	nop
    afbe:	3710      	adds	r7, #16
    afc0:	46bd      	mov	sp, r7
    afc2:	bd80      	pop	{r7, pc}
    afc4:	20002ad8 	.word	0x20002ad8
    afc8:	20002bb4 	.word	0x20002bb4
    afcc:	20002adc 	.word	0x20002adc

0000afd0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    afd0:	b580      	push	{r7, lr}
    afd2:	b086      	sub	sp, #24
    afd4:	af00      	add	r7, sp, #0
    afd6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
    afd8:	2300      	movs	r3, #0
    afda:	617b      	str	r3, [r7, #20]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    afdc:	687b      	ldr	r3, [r7, #4]
    afde:	613b      	str	r3, [r7, #16]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
    afe0:	687b      	ldr	r3, [r7, #4]
    afe2:	2b00      	cmp	r3, #0
    afe4:	d104      	bne.n	aff0 <xTaskResumeFromISR+0x20>
    afe6:	f04f 0050 	mov.w	r0, #80	; 0x50
    afea:	f380 8811 	msr	BASEPRI, r0
    afee:	e7fe      	b.n	afee <xTaskResumeFromISR+0x1e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    aff0:	f7fe f9d4 	bl	939c <vPortValidateInterruptPriority>

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    aff4:	2300      	movs	r3, #0
    aff6:	60fb      	str	r3, [r7, #12]
    aff8:	f04f 0050 	mov.w	r0, #80	; 0x50
    affc:	f380 8811 	msr	BASEPRI, r0
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    b000:	6938      	ldr	r0, [r7, #16]
    b002:	f7ff ff55 	bl	aeb0 <prvTaskIsTaskSuspended>
    b006:	4603      	mov	r3, r0
    b008:	2b00      	cmp	r3, #0
    b00a:	d03a      	beq.n	b082 <xTaskResumeFromISR+0xb2>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );
    b00c:	693b      	ldr	r3, [r7, #16]
    b00e:	4619      	mov	r1, r3
    b010:	207d      	movs	r0, #125	; 0x7d
    b012:	f002 fa61 	bl	d4d8 <prvTraceStoreEvent1>

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b016:	4b1f      	ldr	r3, [pc, #124]	; (b094 <xTaskResumeFromISR+0xc4>)
    b018:	681b      	ldr	r3, [r3, #0]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d12b      	bne.n	b076 <xTaskResumeFromISR+0xa6>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b01e:	693b      	ldr	r3, [r7, #16]
    b020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b022:	4b1d      	ldr	r3, [pc, #116]	; (b098 <xTaskResumeFromISR+0xc8>)
    b024:	681b      	ldr	r3, [r3, #0]
    b026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b028:	429a      	cmp	r2, r3
    b02a:	d301      	bcc.n	b030 <xTaskResumeFromISR+0x60>
					{
						xYieldRequired = pdTRUE;
    b02c:	2301      	movs	r3, #1
    b02e:	617b      	str	r3, [r7, #20]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b030:	693b      	ldr	r3, [r7, #16]
    b032:	3304      	adds	r3, #4
    b034:	4618      	mov	r0, r3
    b036:	f7fd ffcd 	bl	8fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    b03a:	693b      	ldr	r3, [r7, #16]
    b03c:	4619      	mov	r1, r3
    b03e:	2030      	movs	r0, #48	; 0x30
    b040:	f002 fa4a 	bl	d4d8 <prvTraceStoreEvent1>
    b044:	693b      	ldr	r3, [r7, #16]
    b046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b048:	4b14      	ldr	r3, [pc, #80]	; (b09c <xTaskResumeFromISR+0xcc>)
    b04a:	681b      	ldr	r3, [r3, #0]
    b04c:	429a      	cmp	r2, r3
    b04e:	d903      	bls.n	b058 <xTaskResumeFromISR+0x88>
    b050:	693b      	ldr	r3, [r7, #16]
    b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b054:	4a11      	ldr	r2, [pc, #68]	; (b09c <xTaskResumeFromISR+0xcc>)
    b056:	6013      	str	r3, [r2, #0]
    b058:	693b      	ldr	r3, [r7, #16]
    b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b05c:	4613      	mov	r3, r2
    b05e:	009b      	lsls	r3, r3, #2
    b060:	4413      	add	r3, r2
    b062:	009b      	lsls	r3, r3, #2
    b064:	4a0e      	ldr	r2, [pc, #56]	; (b0a0 <xTaskResumeFromISR+0xd0>)
    b066:	441a      	add	r2, r3
    b068:	693b      	ldr	r3, [r7, #16]
    b06a:	3304      	adds	r3, #4
    b06c:	4619      	mov	r1, r3
    b06e:	4610      	mov	r0, r2
    b070:	f7fd ff52 	bl	8f18 <vListInsertEnd>
    b074:	e005      	b.n	b082 <xTaskResumeFromISR+0xb2>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    b076:	693b      	ldr	r3, [r7, #16]
    b078:	3318      	adds	r3, #24
    b07a:	4619      	mov	r1, r3
    b07c:	4809      	ldr	r0, [pc, #36]	; (b0a4 <xTaskResumeFromISR+0xd4>)
    b07e:	f7fd ff4b 	bl	8f18 <vListInsertEnd>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    b082:	f04f 0000 	mov.w	r0, #0
    b086:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    b08a:	697b      	ldr	r3, [r7, #20]
	}
    b08c:	4618      	mov	r0, r3
    b08e:	3718      	adds	r7, #24
    b090:	46bd      	mov	sp, r7
    b092:	bd80      	pop	{r7, pc}
    b094:	20002bd4 	.word	0x20002bd4
    b098:	20002ad8 	.word	0x20002ad8
    b09c:	20002bb4 	.word	0x20002bb4
    b0a0:	20002adc 	.word	0x20002adc
    b0a4:	20002b84 	.word	0x20002b84

0000b0a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    b0a8:	b580      	push	{r7, lr}
    b0aa:	b084      	sub	sp, #16
    b0ac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    b0ae:	4b16      	ldr	r3, [pc, #88]	; (b108 <vTaskStartScheduler+0x60>)
    b0b0:	9301      	str	r3, [sp, #4]
    b0b2:	2300      	movs	r3, #0
    b0b4:	9300      	str	r3, [sp, #0]
    b0b6:	2300      	movs	r3, #0
    b0b8:	22c8      	movs	r2, #200	; 0xc8
    b0ba:	4914      	ldr	r1, [pc, #80]	; (b10c <vTaskStartScheduler+0x64>)
    b0bc:	4814      	ldr	r0, [pc, #80]	; (b110 <vTaskStartScheduler+0x68>)
    b0be:	f7ff fb8b 	bl	a7d8 <xTaskCreate>
    b0c2:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    b0c4:	687b      	ldr	r3, [r7, #4]
    b0c6:	2b01      	cmp	r3, #1
    b0c8:	d110      	bne.n	b0ec <vTaskStartScheduler+0x44>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    b0ca:	f04f 0050 	mov.w	r0, #80	; 0x50
    b0ce:	f380 8811 	msr	BASEPRI, r0
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    b0d2:	4b10      	ldr	r3, [pc, #64]	; (b114 <vTaskStartScheduler+0x6c>)
    b0d4:	f04f 32ff 	mov.w	r2, #4294967295
    b0d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    b0da:	4b0f      	ldr	r3, [pc, #60]	; (b118 <vTaskStartScheduler+0x70>)
    b0dc:	2201      	movs	r2, #1
    b0de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    b0e0:	4b0e      	ldr	r3, [pc, #56]	; (b11c <vTaskStartScheduler+0x74>)
    b0e2:	2200      	movs	r2, #0
    b0e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    b0e6:	f7fe f82d 	bl	9144 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    b0ea:	e008      	b.n	b0fe <vTaskStartScheduler+0x56>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    b0ec:	687b      	ldr	r3, [r7, #4]
    b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    b0f2:	d104      	bne.n	b0fe <vTaskStartScheduler+0x56>
    b0f4:	f04f 0050 	mov.w	r0, #80	; 0x50
    b0f8:	f380 8811 	msr	BASEPRI, r0
    b0fc:	e7fe      	b.n	b0fc <vTaskStartScheduler+0x54>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    b0fe:	bf00      	nop
    b100:	3708      	adds	r7, #8
    b102:	46bd      	mov	sp, r7
    b104:	bd80      	pop	{r7, pc}
    b106:	bf00      	nop
    b108:	20002bd0 	.word	0x20002bd0
    b10c:	0000ff40 	.word	0x0000ff40
    b110:	0000bbbd 	.word	0x0000bbbd
    b114:	20002bcc 	.word	0x20002bcc
    b118:	20002bb8 	.word	0x20002bb8
    b11c:	20002bb0 	.word	0x20002bb0

0000b120 <vTaskSuspendAll>:
}
#endif
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    b120:	b480      	push	{r7}
    b122:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    b124:	4b04      	ldr	r3, [pc, #16]	; (b138 <vTaskSuspendAll+0x18>)
    b126:	681b      	ldr	r3, [r3, #0]
    b128:	3301      	adds	r3, #1
    b12a:	4a03      	ldr	r2, [pc, #12]	; (b138 <vTaskSuspendAll+0x18>)
    b12c:	6013      	str	r3, [r2, #0]
}
    b12e:	bf00      	nop
    b130:	46bd      	mov	sp, r7
    b132:	f85d 7b04 	ldr.w	r7, [sp], #4
    b136:	4770      	bx	lr
    b138:	20002bd4 	.word	0x20002bd4

0000b13c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    b13c:	b580      	push	{r7, lr}
    b13e:	b084      	sub	sp, #16
    b140:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    b142:	2300      	movs	r3, #0
    b144:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    b146:	2300      	movs	r3, #0
    b148:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    b14a:	4b3e      	ldr	r3, [pc, #248]	; (b244 <xTaskResumeAll+0x108>)
    b14c:	681b      	ldr	r3, [r3, #0]
    b14e:	2b00      	cmp	r3, #0
    b150:	d104      	bne.n	b15c <xTaskResumeAll+0x20>
    b152:	f04f 0050 	mov.w	r0, #80	; 0x50
    b156:	f380 8811 	msr	BASEPRI, r0
    b15a:	e7fe      	b.n	b15a <xTaskResumeAll+0x1e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    b15c:	f7fe f85a 	bl	9214 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    b160:	4b38      	ldr	r3, [pc, #224]	; (b244 <xTaskResumeAll+0x108>)
    b162:	681b      	ldr	r3, [r3, #0]
    b164:	3b01      	subs	r3, #1
    b166:	4a37      	ldr	r2, [pc, #220]	; (b244 <xTaskResumeAll+0x108>)
    b168:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b16a:	4b36      	ldr	r3, [pc, #216]	; (b244 <xTaskResumeAll+0x108>)
    b16c:	681b      	ldr	r3, [r3, #0]
    b16e:	2b00      	cmp	r3, #0
    b170:	d161      	bne.n	b236 <xTaskResumeAll+0xfa>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    b172:	4b35      	ldr	r3, [pc, #212]	; (b248 <xTaskResumeAll+0x10c>)
    b174:	681b      	ldr	r3, [r3, #0]
    b176:	2b00      	cmp	r3, #0
    b178:	d05d      	beq.n	b236 <xTaskResumeAll+0xfa>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b17a:	e034      	b.n	b1e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    b17c:	4b33      	ldr	r3, [pc, #204]	; (b24c <xTaskResumeAll+0x110>)
    b17e:	68db      	ldr	r3, [r3, #12]
    b180:	68db      	ldr	r3, [r3, #12]
    b182:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b184:	68fb      	ldr	r3, [r7, #12]
    b186:	3318      	adds	r3, #24
    b188:	4618      	mov	r0, r3
    b18a:	f7fd ff23 	bl	8fd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b18e:	68fb      	ldr	r3, [r7, #12]
    b190:	3304      	adds	r3, #4
    b192:	4618      	mov	r0, r3
    b194:	f7fd ff1e 	bl	8fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    b198:	68fb      	ldr	r3, [r7, #12]
    b19a:	4619      	mov	r1, r3
    b19c:	2030      	movs	r0, #48	; 0x30
    b19e:	f002 f99b 	bl	d4d8 <prvTraceStoreEvent1>
    b1a2:	68fb      	ldr	r3, [r7, #12]
    b1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b1a6:	4b2a      	ldr	r3, [pc, #168]	; (b250 <xTaskResumeAll+0x114>)
    b1a8:	681b      	ldr	r3, [r3, #0]
    b1aa:	429a      	cmp	r2, r3
    b1ac:	d903      	bls.n	b1b6 <xTaskResumeAll+0x7a>
    b1ae:	68fb      	ldr	r3, [r7, #12]
    b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b1b2:	4a27      	ldr	r2, [pc, #156]	; (b250 <xTaskResumeAll+0x114>)
    b1b4:	6013      	str	r3, [r2, #0]
    b1b6:	68fb      	ldr	r3, [r7, #12]
    b1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b1ba:	4613      	mov	r3, r2
    b1bc:	009b      	lsls	r3, r3, #2
    b1be:	4413      	add	r3, r2
    b1c0:	009b      	lsls	r3, r3, #2
    b1c2:	4a24      	ldr	r2, [pc, #144]	; (b254 <xTaskResumeAll+0x118>)
    b1c4:	441a      	add	r2, r3
    b1c6:	68fb      	ldr	r3, [r7, #12]
    b1c8:	3304      	adds	r3, #4
    b1ca:	4619      	mov	r1, r3
    b1cc:	4610      	mov	r0, r2
    b1ce:	f7fd fea3 	bl	8f18 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b1d2:	68fb      	ldr	r3, [r7, #12]
    b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b1d6:	4b20      	ldr	r3, [pc, #128]	; (b258 <xTaskResumeAll+0x11c>)
    b1d8:	681b      	ldr	r3, [r3, #0]
    b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b1dc:	429a      	cmp	r2, r3
    b1de:	d302      	bcc.n	b1e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
    b1e0:	4b1e      	ldr	r3, [pc, #120]	; (b25c <xTaskResumeAll+0x120>)
    b1e2:	2201      	movs	r2, #1
    b1e4:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    b1e6:	4b19      	ldr	r3, [pc, #100]	; (b24c <xTaskResumeAll+0x110>)
    b1e8:	681b      	ldr	r3, [r3, #0]
    b1ea:	2b00      	cmp	r3, #0
    b1ec:	d1c6      	bne.n	b17c <xTaskResumeAll+0x40>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    b1ee:	68fb      	ldr	r3, [r7, #12]
    b1f0:	2b00      	cmp	r3, #0
    b1f2:	d001      	beq.n	b1f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    b1f4:	f000 fe1e 	bl	be34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    b1f8:	4b19      	ldr	r3, [pc, #100]	; (b260 <xTaskResumeAll+0x124>)
    b1fa:	681b      	ldr	r3, [r3, #0]
    b1fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    b1fe:	687b      	ldr	r3, [r7, #4]
    b200:	2b00      	cmp	r3, #0
    b202:	d010      	beq.n	b226 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    b204:	f000 f9ce 	bl	b5a4 <xTaskIncrementTick>
    b208:	4603      	mov	r3, r0
    b20a:	2b00      	cmp	r3, #0
    b20c:	d002      	beq.n	b214 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
    b20e:	4b13      	ldr	r3, [pc, #76]	; (b25c <xTaskResumeAll+0x120>)
    b210:	2201      	movs	r2, #1
    b212:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    b214:	687b      	ldr	r3, [r7, #4]
    b216:	3b01      	subs	r3, #1
    b218:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    b21a:	687b      	ldr	r3, [r7, #4]
    b21c:	2b00      	cmp	r3, #0
    b21e:	d1f1      	bne.n	b204 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
    b220:	4b0f      	ldr	r3, [pc, #60]	; (b260 <xTaskResumeAll+0x124>)
    b222:	2200      	movs	r2, #0
    b224:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    b226:	4b0d      	ldr	r3, [pc, #52]	; (b25c <xTaskResumeAll+0x120>)
    b228:	681b      	ldr	r3, [r3, #0]
    b22a:	2b00      	cmp	r3, #0
    b22c:	d003      	beq.n	b236 <xTaskResumeAll+0xfa>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    b22e:	2301      	movs	r3, #1
    b230:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    b232:	f7fe f82b 	bl	928c <vPortYieldFromISR>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    b236:	f7fe f813 	bl	9260 <vPortExitCritical>

	return xAlreadyYielded;
    b23a:	68bb      	ldr	r3, [r7, #8]
}
    b23c:	4618      	mov	r0, r3
    b23e:	3710      	adds	r7, #16
    b240:	46bd      	mov	sp, r7
    b242:	bd80      	pop	{r7, pc}
    b244:	20002bd4 	.word	0x20002bd4
    b248:	20002bac 	.word	0x20002bac
    b24c:	20002b84 	.word	0x20002b84
    b250:	20002bb4 	.word	0x20002bb4
    b254:	20002adc 	.word	0x20002adc
    b258:	20002ad8 	.word	0x20002ad8
    b25c:	20002bc0 	.word	0x20002bc0
    b260:	20002bbc 	.word	0x20002bbc

0000b264 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    b264:	b580      	push	{r7, lr}
    b266:	b082      	sub	sp, #8
    b268:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    b26a:	f7fd ffd3 	bl	9214 <vPortEnterCritical>
	{
		xTicks = xTickCount;
    b26e:	4b05      	ldr	r3, [pc, #20]	; (b284 <xTaskGetTickCount+0x20>)
    b270:	681b      	ldr	r3, [r3, #0]
    b272:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();
    b274:	f7fd fff4 	bl	9260 <vPortExitCritical>

	return xTicks;
    b278:	687b      	ldr	r3, [r7, #4]
}
    b27a:	4618      	mov	r0, r3
    b27c:	3708      	adds	r7, #8
    b27e:	46bd      	mov	sp, r7
    b280:	bd80      	pop	{r7, pc}
    b282:	bf00      	nop
    b284:	20002bb0 	.word	0x20002bb0

0000b288 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    b288:	b580      	push	{r7, lr}
    b28a:	b082      	sub	sp, #8
    b28c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    b28e:	f7fe f885 	bl	939c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    b292:	2300      	movs	r3, #0
    b294:	607b      	str	r3, [r7, #4]
    b296:	f04f 0050 	mov.w	r0, #80	; 0x50
    b29a:	f380 8811 	msr	BASEPRI, r0
	{
		xReturn = xTickCount;
    b29e:	4b06      	ldr	r3, [pc, #24]	; (b2b8 <xTaskGetTickCountFromISR+0x30>)
    b2a0:	681b      	ldr	r3, [r3, #0]
    b2a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    b2a4:	f04f 0000 	mov.w	r0, #0
    b2a8:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    b2ac:	683b      	ldr	r3, [r7, #0]
}
    b2ae:	4618      	mov	r0, r3
    b2b0:	3708      	adds	r7, #8
    b2b2:	46bd      	mov	sp, r7
    b2b4:	bd80      	pop	{r7, pc}
    b2b6:	bf00      	nop
    b2b8:	20002bb0 	.word	0x20002bb0

0000b2bc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    b2bc:	b480      	push	{r7}
    b2be:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    b2c0:	4b03      	ldr	r3, [pc, #12]	; (b2d0 <uxTaskGetNumberOfTasks+0x14>)
    b2c2:	681b      	ldr	r3, [r3, #0]
}
    b2c4:	4618      	mov	r0, r3
    b2c6:	46bd      	mov	sp, r7
    b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2cc:	4770      	bx	lr
    b2ce:	bf00      	nop
    b2d0:	20002bac 	.word	0x20002bac

0000b2d4 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    b2d4:	b480      	push	{r7}
    b2d6:	b085      	sub	sp, #20
    b2d8:	af00      	add	r7, sp, #0
    b2da:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    b2dc:	687b      	ldr	r3, [r7, #4]
    b2de:	2b00      	cmp	r3, #0
    b2e0:	d102      	bne.n	b2e8 <pcTaskGetName+0x14>
    b2e2:	4b0a      	ldr	r3, [pc, #40]	; (b30c <pcTaskGetName+0x38>)
    b2e4:	681b      	ldr	r3, [r3, #0]
    b2e6:	e000      	b.n	b2ea <pcTaskGetName+0x16>
    b2e8:	687b      	ldr	r3, [r7, #4]
    b2ea:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
    b2ec:	68fb      	ldr	r3, [r7, #12]
    b2ee:	2b00      	cmp	r3, #0
    b2f0:	d104      	bne.n	b2fc <pcTaskGetName+0x28>
    b2f2:	f04f 0050 	mov.w	r0, #80	; 0x50
    b2f6:	f380 8811 	msr	BASEPRI, r0
    b2fa:	e7fe      	b.n	b2fa <pcTaskGetName+0x26>
	return &( pxTCB->pcTaskName[ 0 ] );
    b2fc:	68fb      	ldr	r3, [r7, #12]
    b2fe:	3334      	adds	r3, #52	; 0x34
}
    b300:	4618      	mov	r0, r3
    b302:	3714      	adds	r7, #20
    b304:	46bd      	mov	sp, r7
    b306:	f85d 7b04 	ldr.w	r7, [sp], #4
    b30a:	4770      	bx	lr
    b30c:	20002ad8 	.word	0x20002ad8

0000b310 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
    b310:	b480      	push	{r7}
    b312:	b08b      	sub	sp, #44	; 0x2c
    b314:	af00      	add	r7, sp, #0
    b316:	6078      	str	r0, [r7, #4]
    b318:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
    b31a:	2300      	movs	r3, #0
    b31c:	627b      	str	r3, [r7, #36]	; 0x24
	UBaseType_t x;
	char cNextChar;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
    b31e:	687b      	ldr	r3, [r7, #4]
    b320:	681b      	ldr	r3, [r3, #0]
    b322:	2b00      	cmp	r3, #0
    b324:	d052      	beq.n	b3cc <prvSearchForNameWithinSingleList+0xbc>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    b326:	687b      	ldr	r3, [r7, #4]
    b328:	61fb      	str	r3, [r7, #28]
    b32a:	69fb      	ldr	r3, [r7, #28]
    b32c:	685b      	ldr	r3, [r3, #4]
    b32e:	685a      	ldr	r2, [r3, #4]
    b330:	69fb      	ldr	r3, [r7, #28]
    b332:	605a      	str	r2, [r3, #4]
    b334:	69fb      	ldr	r3, [r7, #28]
    b336:	685a      	ldr	r2, [r3, #4]
    b338:	69fb      	ldr	r3, [r7, #28]
    b33a:	3308      	adds	r3, #8
    b33c:	429a      	cmp	r2, r3
    b33e:	d104      	bne.n	b34a <prvSearchForNameWithinSingleList+0x3a>
    b340:	69fb      	ldr	r3, [r7, #28]
    b342:	685b      	ldr	r3, [r3, #4]
    b344:	685a      	ldr	r2, [r3, #4]
    b346:	69fb      	ldr	r3, [r7, #28]
    b348:	605a      	str	r2, [r3, #4]
    b34a:	69fb      	ldr	r3, [r7, #28]
    b34c:	685b      	ldr	r3, [r3, #4]
    b34e:	68db      	ldr	r3, [r3, #12]
    b350:	61bb      	str	r3, [r7, #24]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    b352:	687b      	ldr	r3, [r7, #4]
    b354:	617b      	str	r3, [r7, #20]
    b356:	697b      	ldr	r3, [r7, #20]
    b358:	685b      	ldr	r3, [r3, #4]
    b35a:	685a      	ldr	r2, [r3, #4]
    b35c:	697b      	ldr	r3, [r7, #20]
    b35e:	605a      	str	r2, [r3, #4]
    b360:	697b      	ldr	r3, [r7, #20]
    b362:	685a      	ldr	r2, [r3, #4]
    b364:	697b      	ldr	r3, [r7, #20]
    b366:	3308      	adds	r3, #8
    b368:	429a      	cmp	r2, r3
    b36a:	d104      	bne.n	b376 <prvSearchForNameWithinSingleList+0x66>
    b36c:	697b      	ldr	r3, [r7, #20]
    b36e:	685b      	ldr	r3, [r3, #4]
    b370:	685a      	ldr	r2, [r3, #4]
    b372:	697b      	ldr	r3, [r7, #20]
    b374:	605a      	str	r2, [r3, #4]
    b376:	697b      	ldr	r3, [r7, #20]
    b378:	685b      	ldr	r3, [r3, #4]
    b37a:	68db      	ldr	r3, [r3, #12]
    b37c:	613b      	str	r3, [r7, #16]

				/* Check each character in the name looking for a match or
				mismatch. */
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b37e:	2300      	movs	r3, #0
    b380:	623b      	str	r3, [r7, #32]
    b382:	e015      	b.n	b3b0 <prvSearchForNameWithinSingleList+0xa0>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
    b384:	693a      	ldr	r2, [r7, #16]
    b386:	6a3b      	ldr	r3, [r7, #32]
    b388:	4413      	add	r3, r2
    b38a:	3334      	adds	r3, #52	; 0x34
    b38c:	781b      	ldrb	r3, [r3, #0]
    b38e:	73fb      	strb	r3, [r7, #15]

					if( cNextChar != pcNameToQuery[ x ] )
    b390:	683a      	ldr	r2, [r7, #0]
    b392:	6a3b      	ldr	r3, [r7, #32]
    b394:	4413      	add	r3, r2
    b396:	781b      	ldrb	r3, [r3, #0]
    b398:	7bfa      	ldrb	r2, [r7, #15]
    b39a:	429a      	cmp	r2, r3
    b39c:	d10c      	bne.n	b3b8 <prvSearchForNameWithinSingleList+0xa8>
					{
						/* Characters didn't match. */
						break;
					}
					else if( cNextChar == 0x00 )
    b39e:	7bfb      	ldrb	r3, [r7, #15]
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d102      	bne.n	b3aa <prvSearchForNameWithinSingleList+0x9a>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
    b3a4:	693b      	ldr	r3, [r7, #16]
    b3a6:	627b      	str	r3, [r7, #36]	; 0x24
						break;
    b3a8:	e007      	b.n	b3ba <prvSearchForNameWithinSingleList+0xaa>
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );

				/* Check each character in the name looking for a match or
				mismatch. */
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    b3aa:	6a3b      	ldr	r3, [r7, #32]
    b3ac:	3301      	adds	r3, #1
    b3ae:	623b      	str	r3, [r7, #32]
    b3b0:	6a3b      	ldr	r3, [r7, #32]
    b3b2:	2b0b      	cmp	r3, #11
    b3b4:	d9e6      	bls.n	b384 <prvSearchForNameWithinSingleList+0x74>
    b3b6:	e000      	b.n	b3ba <prvSearchForNameWithinSingleList+0xaa>
					cNextChar = pxNextTCB->pcTaskName[ x ];

					if( cNextChar != pcNameToQuery[ x ] )
					{
						/* Characters didn't match. */
						break;
    b3b8:	bf00      	nop
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxReturn != NULL )
    b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3bc:	2b00      	cmp	r3, #0
    b3be:	d104      	bne.n	b3ca <prvSearchForNameWithinSingleList+0xba>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
    b3c0:	693a      	ldr	r2, [r7, #16]
    b3c2:	69bb      	ldr	r3, [r7, #24]
    b3c4:	429a      	cmp	r2, r3
    b3c6:	d1c4      	bne.n	b352 <prvSearchForNameWithinSingleList+0x42>
    b3c8:	e000      	b.n	b3cc <prvSearchForNameWithinSingleList+0xbc>
				}

				if( pxReturn != NULL )
				{
					/* The handle has been found. */
					break;
    b3ca:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
    b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
    b3ce:	4618      	mov	r0, r3
    b3d0:	372c      	adds	r7, #44	; 0x2c
    b3d2:	46bd      	mov	sp, r7
    b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3d8:	4770      	bx	lr
    b3da:	bf00      	nop

0000b3dc <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    b3dc:	b580      	push	{r7, lr}
    b3de:	b084      	sub	sp, #16
    b3e0:	af00      	add	r7, sp, #0
    b3e2:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
    b3e4:	2306      	movs	r3, #6
    b3e6:	60fb      	str	r3, [r7, #12]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
    b3e8:	6878      	ldr	r0, [r7, #4]
    b3ea:	f004 fb4b 	bl	fa84 <strlen>
    b3ee:	4603      	mov	r3, r0
    b3f0:	2b0b      	cmp	r3, #11
    b3f2:	d904      	bls.n	b3fe <xTaskGetHandle+0x22>
    b3f4:	f04f 0050 	mov.w	r0, #80	; 0x50
    b3f8:	f380 8811 	msr	BASEPRI, r0
    b3fc:	e7fe      	b.n	b3fc <xTaskGetHandle+0x20>

		vTaskSuspendAll();
    b3fe:	f7ff fe8f 	bl	b120 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
    b402:	68fb      	ldr	r3, [r7, #12]
    b404:	3b01      	subs	r3, #1
    b406:	60fb      	str	r3, [r7, #12]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
    b408:	68fa      	ldr	r2, [r7, #12]
    b40a:	4613      	mov	r3, r2
    b40c:	009b      	lsls	r3, r3, #2
    b40e:	4413      	add	r3, r2
    b410:	009b      	lsls	r3, r3, #2
    b412:	4a19      	ldr	r2, [pc, #100]	; (b478 <xTaskGetHandle+0x9c>)
    b414:	4413      	add	r3, r2
    b416:	6879      	ldr	r1, [r7, #4]
    b418:	4618      	mov	r0, r3
    b41a:	f7ff ff79 	bl	b310 <prvSearchForNameWithinSingleList>
    b41e:	60b8      	str	r0, [r7, #8]

				if( pxTCB != NULL )
    b420:	68bb      	ldr	r3, [r7, #8]
    b422:	2b00      	cmp	r3, #0
    b424:	d103      	bne.n	b42e <xTaskGetHandle+0x52>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b426:	68fb      	ldr	r3, [r7, #12]
    b428:	2b00      	cmp	r3, #0
    b42a:	d1ea      	bne.n	b402 <xTaskGetHandle+0x26>
    b42c:	e000      	b.n	b430 <xTaskGetHandle+0x54>
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );

				if( pxTCB != NULL )
				{
					/* Found the handle. */
					break;
    b42e:	bf00      	nop
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

			/* Search the delayed lists. */
			if( pxTCB == NULL )
    b430:	68bb      	ldr	r3, [r7, #8]
    b432:	2b00      	cmp	r3, #0
    b434:	d106      	bne.n	b444 <xTaskGetHandle+0x68>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
    b436:	4b11      	ldr	r3, [pc, #68]	; (b47c <xTaskGetHandle+0xa0>)
    b438:	681b      	ldr	r3, [r3, #0]
    b43a:	6879      	ldr	r1, [r7, #4]
    b43c:	4618      	mov	r0, r3
    b43e:	f7ff ff67 	bl	b310 <prvSearchForNameWithinSingleList>
    b442:	60b8      	str	r0, [r7, #8]
			}

			if( pxTCB == NULL )
    b444:	68bb      	ldr	r3, [r7, #8]
    b446:	2b00      	cmp	r3, #0
    b448:	d106      	bne.n	b458 <xTaskGetHandle+0x7c>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
    b44a:	4b0d      	ldr	r3, [pc, #52]	; (b480 <xTaskGetHandle+0xa4>)
    b44c:	681b      	ldr	r3, [r3, #0]
    b44e:	6879      	ldr	r1, [r7, #4]
    b450:	4618      	mov	r0, r3
    b452:	f7ff ff5d 	bl	b310 <prvSearchForNameWithinSingleList>
    b456:	60b8      	str	r0, [r7, #8]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
    b458:	68bb      	ldr	r3, [r7, #8]
    b45a:	2b00      	cmp	r3, #0
    b45c:	d104      	bne.n	b468 <xTaskGetHandle+0x8c>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
    b45e:	6879      	ldr	r1, [r7, #4]
    b460:	4808      	ldr	r0, [pc, #32]	; (b484 <xTaskGetHandle+0xa8>)
    b462:	f7ff ff55 	bl	b310 <prvSearchForNameWithinSingleList>
    b466:	60b8      	str	r0, [r7, #8]
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
    b468:	f7ff fe68 	bl	b13c <xTaskResumeAll>

		return ( TaskHandle_t ) pxTCB;
    b46c:	68bb      	ldr	r3, [r7, #8]
	}
    b46e:	4618      	mov	r0, r3
    b470:	3710      	adds	r7, #16
    b472:	46bd      	mov	sp, r7
    b474:	bd80      	pop	{r7, pc}
    b476:	bf00      	nop
    b478:	20002adc 	.word	0x20002adc
    b47c:	20002b7c 	.word	0x20002b7c
    b480:	20002b80 	.word	0x20002b80
    b484:	20002b98 	.word	0x20002b98

0000b488 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
    b488:	b580      	push	{r7, lr}
    b48a:	b086      	sub	sp, #24
    b48c:	af00      	add	r7, sp, #0
    b48e:	60f8      	str	r0, [r7, #12]
    b490:	60b9      	str	r1, [r7, #8]
    b492:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
    b494:	2300      	movs	r3, #0
    b496:	617b      	str	r3, [r7, #20]
    b498:	2306      	movs	r3, #6
    b49a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
    b49c:	f7ff fe40 	bl	b120 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
    b4a0:	4b31      	ldr	r3, [pc, #196]	; (b568 <uxTaskGetSystemState+0xe0>)
    b4a2:	681b      	ldr	r3, [r3, #0]
    b4a4:	68ba      	ldr	r2, [r7, #8]
    b4a6:	429a      	cmp	r2, r3
    b4a8:	d357      	bcc.n	b55a <uxTaskGetSystemState+0xd2>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
    b4aa:	693b      	ldr	r3, [r7, #16]
    b4ac:	3b01      	subs	r3, #1
    b4ae:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
    b4b0:	697a      	ldr	r2, [r7, #20]
    b4b2:	4613      	mov	r3, r2
    b4b4:	00db      	lsls	r3, r3, #3
    b4b6:	4413      	add	r3, r2
    b4b8:	009b      	lsls	r3, r3, #2
    b4ba:	461a      	mov	r2, r3
    b4bc:	68fb      	ldr	r3, [r7, #12]
    b4be:	1898      	adds	r0, r3, r2
    b4c0:	693a      	ldr	r2, [r7, #16]
    b4c2:	4613      	mov	r3, r2
    b4c4:	009b      	lsls	r3, r3, #2
    b4c6:	4413      	add	r3, r2
    b4c8:	009b      	lsls	r3, r3, #2
    b4ca:	4a28      	ldr	r2, [pc, #160]	; (b56c <uxTaskGetSystemState+0xe4>)
    b4cc:	4413      	add	r3, r2
    b4ce:	2201      	movs	r2, #1
    b4d0:	4619      	mov	r1, r3
    b4d2:	f000 fc25 	bl	bd20 <prvListTasksWithinSingleList>
    b4d6:	4602      	mov	r2, r0
    b4d8:	697b      	ldr	r3, [r7, #20]
    b4da:	4413      	add	r3, r2
    b4dc:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b4de:	693b      	ldr	r3, [r7, #16]
    b4e0:	2b00      	cmp	r3, #0
    b4e2:	d1e2      	bne.n	b4aa <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
    b4e4:	697a      	ldr	r2, [r7, #20]
    b4e6:	4613      	mov	r3, r2
    b4e8:	00db      	lsls	r3, r3, #3
    b4ea:	4413      	add	r3, r2
    b4ec:	009b      	lsls	r3, r3, #2
    b4ee:	461a      	mov	r2, r3
    b4f0:	68fb      	ldr	r3, [r7, #12]
    b4f2:	1898      	adds	r0, r3, r2
    b4f4:	4b1e      	ldr	r3, [pc, #120]	; (b570 <uxTaskGetSystemState+0xe8>)
    b4f6:	681b      	ldr	r3, [r3, #0]
    b4f8:	2202      	movs	r2, #2
    b4fa:	4619      	mov	r1, r3
    b4fc:	f000 fc10 	bl	bd20 <prvListTasksWithinSingleList>
    b500:	4602      	mov	r2, r0
    b502:	697b      	ldr	r3, [r7, #20]
    b504:	4413      	add	r3, r2
    b506:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
    b508:	697a      	ldr	r2, [r7, #20]
    b50a:	4613      	mov	r3, r2
    b50c:	00db      	lsls	r3, r3, #3
    b50e:	4413      	add	r3, r2
    b510:	009b      	lsls	r3, r3, #2
    b512:	461a      	mov	r2, r3
    b514:	68fb      	ldr	r3, [r7, #12]
    b516:	1898      	adds	r0, r3, r2
    b518:	4b16      	ldr	r3, [pc, #88]	; (b574 <uxTaskGetSystemState+0xec>)
    b51a:	681b      	ldr	r3, [r3, #0]
    b51c:	2202      	movs	r2, #2
    b51e:	4619      	mov	r1, r3
    b520:	f000 fbfe 	bl	bd20 <prvListTasksWithinSingleList>
    b524:	4602      	mov	r2, r0
    b526:	697b      	ldr	r3, [r7, #20]
    b528:	4413      	add	r3, r2
    b52a:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
    b52c:	697a      	ldr	r2, [r7, #20]
    b52e:	4613      	mov	r3, r2
    b530:	00db      	lsls	r3, r3, #3
    b532:	4413      	add	r3, r2
    b534:	009b      	lsls	r3, r3, #2
    b536:	461a      	mov	r2, r3
    b538:	68fb      	ldr	r3, [r7, #12]
    b53a:	4413      	add	r3, r2
    b53c:	2203      	movs	r2, #3
    b53e:	490e      	ldr	r1, [pc, #56]	; (b578 <uxTaskGetSystemState+0xf0>)
    b540:	4618      	mov	r0, r3
    b542:	f000 fbed 	bl	bd20 <prvListTasksWithinSingleList>
    b546:	4602      	mov	r2, r0
    b548:	697b      	ldr	r3, [r7, #20]
    b54a:	4413      	add	r3, r2
    b54c:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
    b54e:	687b      	ldr	r3, [r7, #4]
    b550:	2b00      	cmp	r3, #0
    b552:	d002      	beq.n	b55a <uxTaskGetSystemState+0xd2>
					{
						*pulTotalRunTime = 0;
    b554:	687b      	ldr	r3, [r7, #4]
    b556:	2200      	movs	r2, #0
    b558:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
    b55a:	f7ff fdef 	bl	b13c <xTaskResumeAll>

		return uxTask;
    b55e:	697b      	ldr	r3, [r7, #20]
	}
    b560:	4618      	mov	r0, r3
    b562:	3718      	adds	r7, #24
    b564:	46bd      	mov	sp, r7
    b566:	bd80      	pop	{r7, pc}
    b568:	20002bac 	.word	0x20002bac
    b56c:	20002adc 	.word	0x20002adc
    b570:	20002b7c 	.word	0x20002b7c
    b574:	20002b80 	.word	0x20002b80
    b578:	20002b98 	.word	0x20002b98

0000b57c <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	TaskHandle_t xTaskGetIdleTaskHandle( void )
	{
    b57c:	b480      	push	{r7}
    b57e:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
    b580:	4b07      	ldr	r3, [pc, #28]	; (b5a0 <xTaskGetIdleTaskHandle+0x24>)
    b582:	681b      	ldr	r3, [r3, #0]
    b584:	2b00      	cmp	r3, #0
    b586:	d104      	bne.n	b592 <xTaskGetIdleTaskHandle+0x16>
    b588:	f04f 0050 	mov.w	r0, #80	; 0x50
    b58c:	f380 8811 	msr	BASEPRI, r0
    b590:	e7fe      	b.n	b590 <xTaskGetIdleTaskHandle+0x14>
		return xIdleTaskHandle;
    b592:	4b03      	ldr	r3, [pc, #12]	; (b5a0 <xTaskGetIdleTaskHandle+0x24>)
    b594:	681b      	ldr	r3, [r3, #0]
	}
    b596:	4618      	mov	r0, r3
    b598:	46bd      	mov	sp, r7
    b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b59e:	4770      	bx	lr
    b5a0:	20002bd0 	.word	0x20002bd0

0000b5a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    b5a4:	b580      	push	{r7, lr}
    b5a6:	b086      	sub	sp, #24
    b5a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    b5aa:	2300      	movs	r3, #0
    b5ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
    b5ae:	4b61      	ldr	r3, [pc, #388]	; (b734 <xTaskIncrementTick+0x190>)
    b5b0:	681b      	ldr	r3, [r3, #0]
    b5b2:	2b01      	cmp	r3, #1
    b5b4:	d003      	beq.n	b5be <xTaskIncrementTick+0x1a>
    b5b6:	4b60      	ldr	r3, [pc, #384]	; (b738 <xTaskIncrementTick+0x194>)
    b5b8:	681b      	ldr	r3, [r3, #0]
    b5ba:	2b00      	cmp	r3, #0
    b5bc:	d104      	bne.n	b5c8 <xTaskIncrementTick+0x24>
    b5be:	4b5f      	ldr	r3, [pc, #380]	; (b73c <xTaskIncrementTick+0x198>)
    b5c0:	681b      	ldr	r3, [r3, #0]
    b5c2:	3301      	adds	r3, #1
    b5c4:	4a5d      	ldr	r2, [pc, #372]	; (b73c <xTaskIncrementTick+0x198>)
    b5c6:	6013      	str	r3, [r2, #0]
    b5c8:	4b5a      	ldr	r3, [pc, #360]	; (b734 <xTaskIncrementTick+0x190>)
    b5ca:	681b      	ldr	r3, [r3, #0]
    b5cc:	2b00      	cmp	r3, #0
    b5ce:	d106      	bne.n	b5de <xTaskIncrementTick+0x3a>
    b5d0:	4b5b      	ldr	r3, [pc, #364]	; (b740 <xTaskIncrementTick+0x19c>)
    b5d2:	681b      	ldr	r3, [r3, #0]
    b5d4:	3301      	adds	r3, #1
    b5d6:	4619      	mov	r1, r3
    b5d8:	2031      	movs	r0, #49	; 0x31
    b5da:	f001 ff7d 	bl	d4d8 <prvTraceStoreEvent1>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b5de:	4b55      	ldr	r3, [pc, #340]	; (b734 <xTaskIncrementTick+0x190>)
    b5e0:	681b      	ldr	r3, [r3, #0]
    b5e2:	2b00      	cmp	r3, #0
    b5e4:	f040 8093 	bne.w	b70e <xTaskIncrementTick+0x16a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    b5e8:	4b55      	ldr	r3, [pc, #340]	; (b740 <xTaskIncrementTick+0x19c>)
    b5ea:	681b      	ldr	r3, [r3, #0]
    b5ec:	3301      	adds	r3, #1
    b5ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    b5f0:	4a53      	ldr	r2, [pc, #332]	; (b740 <xTaskIncrementTick+0x19c>)
    b5f2:	693b      	ldr	r3, [r7, #16]
    b5f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    b5f6:	693b      	ldr	r3, [r7, #16]
    b5f8:	2b00      	cmp	r3, #0
    b5fa:	d11a      	bne.n	b632 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
    b5fc:	4b51      	ldr	r3, [pc, #324]	; (b744 <xTaskIncrementTick+0x1a0>)
    b5fe:	681b      	ldr	r3, [r3, #0]
    b600:	681b      	ldr	r3, [r3, #0]
    b602:	2b00      	cmp	r3, #0
    b604:	d004      	beq.n	b610 <xTaskIncrementTick+0x6c>
    b606:	f04f 0050 	mov.w	r0, #80	; 0x50
    b60a:	f380 8811 	msr	BASEPRI, r0
    b60e:	e7fe      	b.n	b60e <xTaskIncrementTick+0x6a>
    b610:	4b4c      	ldr	r3, [pc, #304]	; (b744 <xTaskIncrementTick+0x1a0>)
    b612:	681b      	ldr	r3, [r3, #0]
    b614:	60fb      	str	r3, [r7, #12]
    b616:	4b4c      	ldr	r3, [pc, #304]	; (b748 <xTaskIncrementTick+0x1a4>)
    b618:	681b      	ldr	r3, [r3, #0]
    b61a:	4a4a      	ldr	r2, [pc, #296]	; (b744 <xTaskIncrementTick+0x1a0>)
    b61c:	6013      	str	r3, [r2, #0]
    b61e:	4a4a      	ldr	r2, [pc, #296]	; (b748 <xTaskIncrementTick+0x1a4>)
    b620:	68fb      	ldr	r3, [r7, #12]
    b622:	6013      	str	r3, [r2, #0]
    b624:	4b49      	ldr	r3, [pc, #292]	; (b74c <xTaskIncrementTick+0x1a8>)
    b626:	681b      	ldr	r3, [r3, #0]
    b628:	3301      	adds	r3, #1
    b62a:	4a48      	ldr	r2, [pc, #288]	; (b74c <xTaskIncrementTick+0x1a8>)
    b62c:	6013      	str	r3, [r2, #0]
    b62e:	f000 fc01 	bl	be34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    b632:	4b47      	ldr	r3, [pc, #284]	; (b750 <xTaskIncrementTick+0x1ac>)
    b634:	681b      	ldr	r3, [r3, #0]
    b636:	693a      	ldr	r2, [r7, #16]
    b638:	429a      	cmp	r2, r3
    b63a:	d353      	bcc.n	b6e4 <xTaskIncrementTick+0x140>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    b63c:	4b41      	ldr	r3, [pc, #260]	; (b744 <xTaskIncrementTick+0x1a0>)
    b63e:	681b      	ldr	r3, [r3, #0]
    b640:	681b      	ldr	r3, [r3, #0]
    b642:	2b00      	cmp	r3, #0
    b644:	d101      	bne.n	b64a <xTaskIncrementTick+0xa6>
    b646:	2301      	movs	r3, #1
    b648:	e000      	b.n	b64c <xTaskIncrementTick+0xa8>
    b64a:	2300      	movs	r3, #0
    b64c:	2b00      	cmp	r3, #0
    b64e:	d004      	beq.n	b65a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b650:	4b3f      	ldr	r3, [pc, #252]	; (b750 <xTaskIncrementTick+0x1ac>)
    b652:	f04f 32ff 	mov.w	r2, #4294967295
    b656:	601a      	str	r2, [r3, #0]
					break;
    b658:	e044      	b.n	b6e4 <xTaskIncrementTick+0x140>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    b65a:	4b3a      	ldr	r3, [pc, #232]	; (b744 <xTaskIncrementTick+0x1a0>)
    b65c:	681b      	ldr	r3, [r3, #0]
    b65e:	68db      	ldr	r3, [r3, #12]
    b660:	68db      	ldr	r3, [r3, #12]
    b662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    b664:	68bb      	ldr	r3, [r7, #8]
    b666:	685b      	ldr	r3, [r3, #4]
    b668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    b66a:	693a      	ldr	r2, [r7, #16]
    b66c:	687b      	ldr	r3, [r7, #4]
    b66e:	429a      	cmp	r2, r3
    b670:	d203      	bcs.n	b67a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    b672:	4a37      	ldr	r2, [pc, #220]	; (b750 <xTaskIncrementTick+0x1ac>)
    b674:	687b      	ldr	r3, [r7, #4]
    b676:	6013      	str	r3, [r2, #0]
						break;
    b678:	e034      	b.n	b6e4 <xTaskIncrementTick+0x140>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    b67a:	68bb      	ldr	r3, [r7, #8]
    b67c:	3304      	adds	r3, #4
    b67e:	4618      	mov	r0, r3
    b680:	f7fd fca8 	bl	8fd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    b684:	68bb      	ldr	r3, [r7, #8]
    b686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    b688:	2b00      	cmp	r3, #0
    b68a:	d004      	beq.n	b696 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    b68c:	68bb      	ldr	r3, [r7, #8]
    b68e:	3318      	adds	r3, #24
    b690:	4618      	mov	r0, r3
    b692:	f7fd fc9f 	bl	8fd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    b696:	68bb      	ldr	r3, [r7, #8]
    b698:	4619      	mov	r1, r3
    b69a:	2030      	movs	r0, #48	; 0x30
    b69c:	f001 ff1c 	bl	d4d8 <prvTraceStoreEvent1>
    b6a0:	68bb      	ldr	r3, [r7, #8]
    b6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b6a4:	4b2b      	ldr	r3, [pc, #172]	; (b754 <xTaskIncrementTick+0x1b0>)
    b6a6:	681b      	ldr	r3, [r3, #0]
    b6a8:	429a      	cmp	r2, r3
    b6aa:	d903      	bls.n	b6b4 <xTaskIncrementTick+0x110>
    b6ac:	68bb      	ldr	r3, [r7, #8]
    b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b6b0:	4a28      	ldr	r2, [pc, #160]	; (b754 <xTaskIncrementTick+0x1b0>)
    b6b2:	6013      	str	r3, [r2, #0]
    b6b4:	68bb      	ldr	r3, [r7, #8]
    b6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b6b8:	4613      	mov	r3, r2
    b6ba:	009b      	lsls	r3, r3, #2
    b6bc:	4413      	add	r3, r2
    b6be:	009b      	lsls	r3, r3, #2
    b6c0:	4a25      	ldr	r2, [pc, #148]	; (b758 <xTaskIncrementTick+0x1b4>)
    b6c2:	441a      	add	r2, r3
    b6c4:	68bb      	ldr	r3, [r7, #8]
    b6c6:	3304      	adds	r3, #4
    b6c8:	4619      	mov	r1, r3
    b6ca:	4610      	mov	r0, r2
    b6cc:	f7fd fc24 	bl	8f18 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    b6d0:	68bb      	ldr	r3, [r7, #8]
    b6d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b6d4:	4b21      	ldr	r3, [pc, #132]	; (b75c <xTaskIncrementTick+0x1b8>)
    b6d6:	681b      	ldr	r3, [r3, #0]
    b6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b6da:	429a      	cmp	r2, r3
    b6dc:	d3ae      	bcc.n	b63c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
    b6de:	2301      	movs	r3, #1
    b6e0:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    b6e2:	e7ab      	b.n	b63c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    b6e4:	4b1d      	ldr	r3, [pc, #116]	; (b75c <xTaskIncrementTick+0x1b8>)
    b6e6:	681b      	ldr	r3, [r3, #0]
    b6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b6ea:	491b      	ldr	r1, [pc, #108]	; (b758 <xTaskIncrementTick+0x1b4>)
    b6ec:	4613      	mov	r3, r2
    b6ee:	009b      	lsls	r3, r3, #2
    b6f0:	4413      	add	r3, r2
    b6f2:	009b      	lsls	r3, r3, #2
    b6f4:	440b      	add	r3, r1
    b6f6:	681b      	ldr	r3, [r3, #0]
    b6f8:	2b01      	cmp	r3, #1
    b6fa:	d901      	bls.n	b700 <xTaskIncrementTick+0x15c>
			{
				xSwitchRequired = pdTRUE;
    b6fc:	2301      	movs	r3, #1
    b6fe:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
    b700:	4b0d      	ldr	r3, [pc, #52]	; (b738 <xTaskIncrementTick+0x194>)
    b702:	681b      	ldr	r3, [r3, #0]
    b704:	2b00      	cmp	r3, #0
    b706:	d109      	bne.n	b71c <xTaskIncrementTick+0x178>
			{
#if 1
	      /* << EST: using configuration name macro */
	      extern void configUSE_TICK_HOOK_NAME(void);
	      configUSE_TICK_HOOK_NAME();
    b708:	f002 ff22 	bl	e550 <FRTOS1_vApplicationTickHook>
    b70c:	e006      	b.n	b71c <xTaskIncrementTick+0x178>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    b70e:	4b0a      	ldr	r3, [pc, #40]	; (b738 <xTaskIncrementTick+0x194>)
    b710:	681b      	ldr	r3, [r3, #0]
    b712:	3301      	adds	r3, #1
    b714:	4a08      	ldr	r2, [pc, #32]	; (b738 <xTaskIncrementTick+0x194>)
    b716:	6013      	str	r3, [r2, #0]
		#if ( configUSE_TICK_HOOK == 1 )
		{
#if 1
        /* << EST: using configuration name macro */
        extern void configUSE_TICK_HOOK_NAME(void);
        configUSE_TICK_HOOK_NAME();
    b718:	f002 ff1a 	bl	e550 <FRTOS1_vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    b71c:	4b10      	ldr	r3, [pc, #64]	; (b760 <xTaskIncrementTick+0x1bc>)
    b71e:	681b      	ldr	r3, [r3, #0]
    b720:	2b00      	cmp	r3, #0
    b722:	d001      	beq.n	b728 <xTaskIncrementTick+0x184>
		{
			xSwitchRequired = pdTRUE;
    b724:	2301      	movs	r3, #1
    b726:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    b728:	697b      	ldr	r3, [r7, #20]
}
    b72a:	4618      	mov	r0, r3
    b72c:	3718      	adds	r7, #24
    b72e:	46bd      	mov	sp, r7
    b730:	bd80      	pop	{r7, pc}
    b732:	bf00      	nop
    b734:	20002bd4 	.word	0x20002bd4
    b738:	20002bbc 	.word	0x20002bbc
    b73c:	20003494 	.word	0x20003494
    b740:	20002bb0 	.word	0x20002bb0
    b744:	20002b7c 	.word	0x20002b7c
    b748:	20002b80 	.word	0x20002b80
    b74c:	20002bc4 	.word	0x20002bc4
    b750:	20002bcc 	.word	0x20002bcc
    b754:	20002bb4 	.word	0x20002bb4
    b758:	20002adc 	.word	0x20002adc
    b75c:	20002ad8 	.word	0x20002ad8
    b760:	20002bc0 	.word	0x20002bc0

0000b764 <vTaskSwitchContext>:

#ifdef __GNUC__ /* << EST */
__attribute__((used)) /* using C++ compiler, vTaskSwitchContext() might be removed even with -O0? */
#endif
void vTaskSwitchContext( void )
{
    b764:	b580      	push	{r7, lr}
    b766:	b082      	sub	sp, #8
    b768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    b76a:	4b35      	ldr	r3, [pc, #212]	; (b840 <vTaskSwitchContext+0xdc>)
    b76c:	681b      	ldr	r3, [r3, #0]
    b76e:	2b00      	cmp	r3, #0
    b770:	d003      	beq.n	b77a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    b772:	4b34      	ldr	r3, [pc, #208]	; (b844 <vTaskSwitchContext+0xe0>)
    b774:	2201      	movs	r2, #1
    b776:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    b778:	e05e      	b.n	b838 <vTaskSwitchContext+0xd4>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    b77a:	4b32      	ldr	r3, [pc, #200]	; (b844 <vTaskSwitchContext+0xe0>)
    b77c:	2200      	movs	r2, #0
    b77e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    b780:	4b31      	ldr	r3, [pc, #196]	; (b848 <vTaskSwitchContext+0xe4>)
    b782:	681b      	ldr	r3, [r3, #0]
    b784:	681a      	ldr	r2, [r3, #0]
    b786:	4b30      	ldr	r3, [pc, #192]	; (b848 <vTaskSwitchContext+0xe4>)
    b788:	681b      	ldr	r3, [r3, #0]
    b78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b78c:	429a      	cmp	r2, r3
    b78e:	d808      	bhi.n	b7a2 <vTaskSwitchContext+0x3e>
    b790:	4b2d      	ldr	r3, [pc, #180]	; (b848 <vTaskSwitchContext+0xe4>)
    b792:	681a      	ldr	r2, [r3, #0]
    b794:	4b2c      	ldr	r3, [pc, #176]	; (b848 <vTaskSwitchContext+0xe4>)
    b796:	681b      	ldr	r3, [r3, #0]
    b798:	3334      	adds	r3, #52	; 0x34
    b79a:	4619      	mov	r1, r3
    b79c:	4610      	mov	r0, r2
    b79e:	f002 fecd 	bl	e53c <FRTOS1_vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    b7a2:	4b2a      	ldr	r3, [pc, #168]	; (b84c <vTaskSwitchContext+0xe8>)
    b7a4:	681b      	ldr	r3, [r3, #0]
    b7a6:	607b      	str	r3, [r7, #4]
    b7a8:	e00a      	b.n	b7c0 <vTaskSwitchContext+0x5c>
    b7aa:	687b      	ldr	r3, [r7, #4]
    b7ac:	2b00      	cmp	r3, #0
    b7ae:	d104      	bne.n	b7ba <vTaskSwitchContext+0x56>
    b7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
    b7b4:	f380 8811 	msr	BASEPRI, r0
    b7b8:	e7fe      	b.n	b7b8 <vTaskSwitchContext+0x54>
    b7ba:	687b      	ldr	r3, [r7, #4]
    b7bc:	3b01      	subs	r3, #1
    b7be:	607b      	str	r3, [r7, #4]
    b7c0:	4923      	ldr	r1, [pc, #140]	; (b850 <vTaskSwitchContext+0xec>)
    b7c2:	687a      	ldr	r2, [r7, #4]
    b7c4:	4613      	mov	r3, r2
    b7c6:	009b      	lsls	r3, r3, #2
    b7c8:	4413      	add	r3, r2
    b7ca:	009b      	lsls	r3, r3, #2
    b7cc:	440b      	add	r3, r1
    b7ce:	681b      	ldr	r3, [r3, #0]
    b7d0:	2b00      	cmp	r3, #0
    b7d2:	d0ea      	beq.n	b7aa <vTaskSwitchContext+0x46>
    b7d4:	687a      	ldr	r2, [r7, #4]
    b7d6:	4613      	mov	r3, r2
    b7d8:	009b      	lsls	r3, r3, #2
    b7da:	4413      	add	r3, r2
    b7dc:	009b      	lsls	r3, r3, #2
    b7de:	4a1c      	ldr	r2, [pc, #112]	; (b850 <vTaskSwitchContext+0xec>)
    b7e0:	4413      	add	r3, r2
    b7e2:	603b      	str	r3, [r7, #0]
    b7e4:	683b      	ldr	r3, [r7, #0]
    b7e6:	685b      	ldr	r3, [r3, #4]
    b7e8:	685a      	ldr	r2, [r3, #4]
    b7ea:	683b      	ldr	r3, [r7, #0]
    b7ec:	605a      	str	r2, [r3, #4]
    b7ee:	683b      	ldr	r3, [r7, #0]
    b7f0:	685a      	ldr	r2, [r3, #4]
    b7f2:	683b      	ldr	r3, [r7, #0]
    b7f4:	3308      	adds	r3, #8
    b7f6:	429a      	cmp	r2, r3
    b7f8:	d104      	bne.n	b804 <vTaskSwitchContext+0xa0>
    b7fa:	683b      	ldr	r3, [r7, #0]
    b7fc:	685b      	ldr	r3, [r3, #4]
    b7fe:	685a      	ldr	r2, [r3, #4]
    b800:	683b      	ldr	r3, [r7, #0]
    b802:	605a      	str	r2, [r3, #4]
    b804:	683b      	ldr	r3, [r7, #0]
    b806:	685b      	ldr	r3, [r3, #4]
    b808:	68db      	ldr	r3, [r3, #12]
    b80a:	4a0f      	ldr	r2, [pc, #60]	; (b848 <vTaskSwitchContext+0xe4>)
    b80c:	6013      	str	r3, [r2, #0]
    b80e:	4a0f      	ldr	r2, [pc, #60]	; (b84c <vTaskSwitchContext+0xe8>)
    b810:	687b      	ldr	r3, [r7, #4]
    b812:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
    b814:	4b0c      	ldr	r3, [pc, #48]	; (b848 <vTaskSwitchContext+0xe4>)
    b816:	681b      	ldr	r3, [r3, #0]
    b818:	4618      	mov	r0, r3
    b81a:	f001 f9c7 	bl	cbac <prvIsNewTCB>
    b81e:	4603      	mov	r3, r0
    b820:	2b00      	cmp	r3, #0
    b822:	d009      	beq.n	b838 <vTaskSwitchContext+0xd4>
    b824:	4b08      	ldr	r3, [pc, #32]	; (b848 <vTaskSwitchContext+0xe4>)
    b826:	681b      	ldr	r3, [r3, #0]
    b828:	4619      	mov	r1, r3
    b82a:	4b07      	ldr	r3, [pc, #28]	; (b848 <vTaskSwitchContext+0xe4>)
    b82c:	681b      	ldr	r3, [r3, #0]
    b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b830:	461a      	mov	r2, r3
    b832:	2037      	movs	r0, #55	; 0x37
    b834:	f001 fe9c 	bl	d570 <prvTraceStoreEvent2>
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    b838:	bf00      	nop
    b83a:	3708      	adds	r7, #8
    b83c:	46bd      	mov	sp, r7
    b83e:	bd80      	pop	{r7, pc}
    b840:	20002bd4 	.word	0x20002bd4
    b844:	20002bc0 	.word	0x20002bc0
    b848:	20002ad8 	.word	0x20002ad8
    b84c:	20002bb4 	.word	0x20002bb4
    b850:	20002adc 	.word	0x20002adc

0000b854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    b854:	b580      	push	{r7, lr}
    b856:	b082      	sub	sp, #8
    b858:	af00      	add	r7, sp, #0
    b85a:	6078      	str	r0, [r7, #4]
    b85c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    b85e:	687b      	ldr	r3, [r7, #4]
    b860:	2b00      	cmp	r3, #0
    b862:	d104      	bne.n	b86e <vTaskPlaceOnEventList+0x1a>
    b864:	f04f 0050 	mov.w	r0, #80	; 0x50
    b868:	f380 8811 	msr	BASEPRI, r0
    b86c:	e7fe      	b.n	b86c <vTaskPlaceOnEventList+0x18>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    b86e:	4b07      	ldr	r3, [pc, #28]	; (b88c <vTaskPlaceOnEventList+0x38>)
    b870:	681b      	ldr	r3, [r3, #0]
    b872:	3318      	adds	r3, #24
    b874:	4619      	mov	r1, r3
    b876:	6878      	ldr	r0, [r7, #4]
    b878:	f7fd fb72 	bl	8f60 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    b87c:	2101      	movs	r1, #1
    b87e:	6838      	ldr	r0, [r7, #0]
    b880:	f000 ffbe 	bl	c800 <prvAddCurrentTaskToDelayedList>
}
    b884:	bf00      	nop
    b886:	3708      	adds	r7, #8
    b888:	46bd      	mov	sp, r7
    b88a:	bd80      	pop	{r7, pc}
    b88c:	20002ad8 	.word	0x20002ad8

0000b890 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    b890:	b580      	push	{r7, lr}
    b892:	b084      	sub	sp, #16
    b894:	af00      	add	r7, sp, #0
    b896:	60f8      	str	r0, [r7, #12]
    b898:	60b9      	str	r1, [r7, #8]
    b89a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
    b89c:	68fb      	ldr	r3, [r7, #12]
    b89e:	2b00      	cmp	r3, #0
    b8a0:	d104      	bne.n	b8ac <vTaskPlaceOnUnorderedEventList+0x1c>
    b8a2:	f04f 0050 	mov.w	r0, #80	; 0x50
    b8a6:	f380 8811 	msr	BASEPRI, r0
    b8aa:	e7fe      	b.n	b8aa <vTaskPlaceOnUnorderedEventList+0x1a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
    b8ac:	4b0e      	ldr	r3, [pc, #56]	; (b8e8 <vTaskPlaceOnUnorderedEventList+0x58>)
    b8ae:	681b      	ldr	r3, [r3, #0]
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d104      	bne.n	b8be <vTaskPlaceOnUnorderedEventList+0x2e>
    b8b4:	f04f 0050 	mov.w	r0, #80	; 0x50
    b8b8:	f380 8811 	msr	BASEPRI, r0
    b8bc:	e7fe      	b.n	b8bc <vTaskPlaceOnUnorderedEventList+0x2c>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    b8be:	4b0b      	ldr	r3, [pc, #44]	; (b8ec <vTaskPlaceOnUnorderedEventList+0x5c>)
    b8c0:	681b      	ldr	r3, [r3, #0]
    b8c2:	68ba      	ldr	r2, [r7, #8]
    b8c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    b8c8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    b8ca:	4b08      	ldr	r3, [pc, #32]	; (b8ec <vTaskPlaceOnUnorderedEventList+0x5c>)
    b8cc:	681b      	ldr	r3, [r3, #0]
    b8ce:	3318      	adds	r3, #24
    b8d0:	4619      	mov	r1, r3
    b8d2:	68f8      	ldr	r0, [r7, #12]
    b8d4:	f7fd fb20 	bl	8f18 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    b8d8:	2101      	movs	r1, #1
    b8da:	6878      	ldr	r0, [r7, #4]
    b8dc:	f000 ff90 	bl	c800 <prvAddCurrentTaskToDelayedList>
}
    b8e0:	bf00      	nop
    b8e2:	3710      	adds	r7, #16
    b8e4:	46bd      	mov	sp, r7
    b8e6:	bd80      	pop	{r7, pc}
    b8e8:	20002bd4 	.word	0x20002bd4
    b8ec:	20002ad8 	.word	0x20002ad8

0000b8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	b084      	sub	sp, #16
    b8f4:	af00      	add	r7, sp, #0
    b8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    b8f8:	687b      	ldr	r3, [r7, #4]
    b8fa:	68db      	ldr	r3, [r3, #12]
    b8fc:	68db      	ldr	r3, [r3, #12]
    b8fe:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    b900:	68bb      	ldr	r3, [r7, #8]
    b902:	2b00      	cmp	r3, #0
    b904:	d104      	bne.n	b910 <xTaskRemoveFromEventList+0x20>
    b906:	f04f 0050 	mov.w	r0, #80	; 0x50
    b90a:	f380 8811 	msr	BASEPRI, r0
    b90e:	e7fe      	b.n	b90e <xTaskRemoveFromEventList+0x1e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    b910:	68bb      	ldr	r3, [r7, #8]
    b912:	3318      	adds	r3, #24
    b914:	4618      	mov	r0, r3
    b916:	f7fd fb5d 	bl	8fd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    b91a:	4b20      	ldr	r3, [pc, #128]	; (b99c <xTaskRemoveFromEventList+0xac>)
    b91c:	681b      	ldr	r3, [r3, #0]
    b91e:	2b00      	cmp	r3, #0
    b920:	d122      	bne.n	b968 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    b922:	68bb      	ldr	r3, [r7, #8]
    b924:	3304      	adds	r3, #4
    b926:	4618      	mov	r0, r3
    b928:	f7fd fb54 	bl	8fd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    b92c:	68bb      	ldr	r3, [r7, #8]
    b92e:	4619      	mov	r1, r3
    b930:	2030      	movs	r0, #48	; 0x30
    b932:	f001 fdd1 	bl	d4d8 <prvTraceStoreEvent1>
    b936:	68bb      	ldr	r3, [r7, #8]
    b938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b93a:	4b19      	ldr	r3, [pc, #100]	; (b9a0 <xTaskRemoveFromEventList+0xb0>)
    b93c:	681b      	ldr	r3, [r3, #0]
    b93e:	429a      	cmp	r2, r3
    b940:	d903      	bls.n	b94a <xTaskRemoveFromEventList+0x5a>
    b942:	68bb      	ldr	r3, [r7, #8]
    b944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b946:	4a16      	ldr	r2, [pc, #88]	; (b9a0 <xTaskRemoveFromEventList+0xb0>)
    b948:	6013      	str	r3, [r2, #0]
    b94a:	68bb      	ldr	r3, [r7, #8]
    b94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b94e:	4613      	mov	r3, r2
    b950:	009b      	lsls	r3, r3, #2
    b952:	4413      	add	r3, r2
    b954:	009b      	lsls	r3, r3, #2
    b956:	4a13      	ldr	r2, [pc, #76]	; (b9a4 <xTaskRemoveFromEventList+0xb4>)
    b958:	441a      	add	r2, r3
    b95a:	68bb      	ldr	r3, [r7, #8]
    b95c:	3304      	adds	r3, #4
    b95e:	4619      	mov	r1, r3
    b960:	4610      	mov	r0, r2
    b962:	f7fd fad9 	bl	8f18 <vListInsertEnd>
    b966:	e005      	b.n	b974 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    b968:	68bb      	ldr	r3, [r7, #8]
    b96a:	3318      	adds	r3, #24
    b96c:	4619      	mov	r1, r3
    b96e:	480e      	ldr	r0, [pc, #56]	; (b9a8 <xTaskRemoveFromEventList+0xb8>)
    b970:	f7fd fad2 	bl	8f18 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    b974:	68bb      	ldr	r3, [r7, #8]
    b976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    b978:	4b0c      	ldr	r3, [pc, #48]	; (b9ac <xTaskRemoveFromEventList+0xbc>)
    b97a:	681b      	ldr	r3, [r3, #0]
    b97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    b97e:	429a      	cmp	r2, r3
    b980:	d905      	bls.n	b98e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    b982:	2301      	movs	r3, #1
    b984:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    b986:	4b0a      	ldr	r3, [pc, #40]	; (b9b0 <xTaskRemoveFromEventList+0xc0>)
    b988:	2201      	movs	r2, #1
    b98a:	601a      	str	r2, [r3, #0]
    b98c:	e001      	b.n	b992 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
    b98e:	2300      	movs	r3, #0
    b990:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    b992:	68fb      	ldr	r3, [r7, #12]
}
    b994:	4618      	mov	r0, r3
    b996:	3710      	adds	r7, #16
    b998:	46bd      	mov	sp, r7
    b99a:	bd80      	pop	{r7, pc}
    b99c:	20002bd4 	.word	0x20002bd4
    b9a0:	20002bb4 	.word	0x20002bb4
    b9a4:	20002adc 	.word	0x20002adc
    b9a8:	20002b84 	.word	0x20002b84
    b9ac:	20002ad8 	.word	0x20002ad8
    b9b0:	20002bc0 	.word	0x20002bc0

0000b9b4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    b9b4:	b580      	push	{r7, lr}
    b9b6:	b084      	sub	sp, #16
    b9b8:	af00      	add	r7, sp, #0
    b9ba:	6078      	str	r0, [r7, #4]
    b9bc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
    b9be:	4b26      	ldr	r3, [pc, #152]	; (ba58 <vTaskRemoveFromUnorderedEventList+0xa4>)
    b9c0:	681b      	ldr	r3, [r3, #0]
    b9c2:	2b00      	cmp	r3, #0
    b9c4:	d104      	bne.n	b9d0 <vTaskRemoveFromUnorderedEventList+0x1c>
    b9c6:	f04f 0050 	mov.w	r0, #80	; 0x50
    b9ca:	f380 8811 	msr	BASEPRI, r0
    b9ce:	e7fe      	b.n	b9ce <vTaskRemoveFromUnorderedEventList+0x1a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    b9d0:	683b      	ldr	r3, [r7, #0]
    b9d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    b9d6:	687b      	ldr	r3, [r7, #4]
    b9d8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    b9da:	687b      	ldr	r3, [r7, #4]
    b9dc:	68db      	ldr	r3, [r3, #12]
    b9de:	60fb      	str	r3, [r7, #12]
	configASSERT( pxUnblockedTCB );
    b9e0:	68fb      	ldr	r3, [r7, #12]
    b9e2:	2b00      	cmp	r3, #0
    b9e4:	d104      	bne.n	b9f0 <vTaskRemoveFromUnorderedEventList+0x3c>
    b9e6:	f04f 0050 	mov.w	r0, #80	; 0x50
    b9ea:	f380 8811 	msr	BASEPRI, r0
    b9ee:	e7fe      	b.n	b9ee <vTaskRemoveFromUnorderedEventList+0x3a>
	( void ) uxListRemove( pxEventListItem );
    b9f0:	6878      	ldr	r0, [r7, #4]
    b9f2:	f7fd faef 	bl	8fd4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    b9f6:	68fb      	ldr	r3, [r7, #12]
    b9f8:	3304      	adds	r3, #4
    b9fa:	4618      	mov	r0, r3
    b9fc:	f7fd faea 	bl	8fd4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    ba00:	68fb      	ldr	r3, [r7, #12]
    ba02:	4619      	mov	r1, r3
    ba04:	2030      	movs	r0, #48	; 0x30
    ba06:	f001 fd67 	bl	d4d8 <prvTraceStoreEvent1>
    ba0a:	68fb      	ldr	r3, [r7, #12]
    ba0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba0e:	4b13      	ldr	r3, [pc, #76]	; (ba5c <vTaskRemoveFromUnorderedEventList+0xa8>)
    ba10:	681b      	ldr	r3, [r3, #0]
    ba12:	429a      	cmp	r2, r3
    ba14:	d903      	bls.n	ba1e <vTaskRemoveFromUnorderedEventList+0x6a>
    ba16:	68fb      	ldr	r3, [r7, #12]
    ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ba1a:	4a10      	ldr	r2, [pc, #64]	; (ba5c <vTaskRemoveFromUnorderedEventList+0xa8>)
    ba1c:	6013      	str	r3, [r2, #0]
    ba1e:	68fb      	ldr	r3, [r7, #12]
    ba20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba22:	4613      	mov	r3, r2
    ba24:	009b      	lsls	r3, r3, #2
    ba26:	4413      	add	r3, r2
    ba28:	009b      	lsls	r3, r3, #2
    ba2a:	4a0d      	ldr	r2, [pc, #52]	; (ba60 <vTaskRemoveFromUnorderedEventList+0xac>)
    ba2c:	441a      	add	r2, r3
    ba2e:	68fb      	ldr	r3, [r7, #12]
    ba30:	3304      	adds	r3, #4
    ba32:	4619      	mov	r1, r3
    ba34:	4610      	mov	r0, r2
    ba36:	f7fd fa6f 	bl	8f18 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    ba3a:	68fb      	ldr	r3, [r7, #12]
    ba3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ba3e:	4b09      	ldr	r3, [pc, #36]	; (ba64 <vTaskRemoveFromUnorderedEventList+0xb0>)
    ba40:	681b      	ldr	r3, [r3, #0]
    ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ba44:	429a      	cmp	r2, r3
    ba46:	d902      	bls.n	ba4e <vTaskRemoveFromUnorderedEventList+0x9a>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
    ba48:	4b07      	ldr	r3, [pc, #28]	; (ba68 <vTaskRemoveFromUnorderedEventList+0xb4>)
    ba4a:	2201      	movs	r2, #1
    ba4c:	601a      	str	r2, [r3, #0]
	}
}
    ba4e:	bf00      	nop
    ba50:	3710      	adds	r7, #16
    ba52:	46bd      	mov	sp, r7
    ba54:	bd80      	pop	{r7, pc}
    ba56:	bf00      	nop
    ba58:	20002bd4 	.word	0x20002bd4
    ba5c:	20002bb4 	.word	0x20002bb4
    ba60:	20002adc 	.word	0x20002adc
    ba64:	20002ad8 	.word	0x20002ad8
    ba68:	20002bc0 	.word	0x20002bc0

0000ba6c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    ba6c:	b480      	push	{r7}
    ba6e:	b083      	sub	sp, #12
    ba70:	af00      	add	r7, sp, #0
    ba72:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    ba74:	687b      	ldr	r3, [r7, #4]
    ba76:	2b00      	cmp	r3, #0
    ba78:	d104      	bne.n	ba84 <vTaskSetTimeOutState+0x18>
    ba7a:	f04f 0050 	mov.w	r0, #80	; 0x50
    ba7e:	f380 8811 	msr	BASEPRI, r0
    ba82:	e7fe      	b.n	ba82 <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    ba84:	4b06      	ldr	r3, [pc, #24]	; (baa0 <vTaskSetTimeOutState+0x34>)
    ba86:	681a      	ldr	r2, [r3, #0]
    ba88:	687b      	ldr	r3, [r7, #4]
    ba8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    ba8c:	4b05      	ldr	r3, [pc, #20]	; (baa4 <vTaskSetTimeOutState+0x38>)
    ba8e:	681a      	ldr	r2, [r3, #0]
    ba90:	687b      	ldr	r3, [r7, #4]
    ba92:	605a      	str	r2, [r3, #4]
}
    ba94:	bf00      	nop
    ba96:	370c      	adds	r7, #12
    ba98:	46bd      	mov	sp, r7
    ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ba9e:	4770      	bx	lr
    baa0:	20002bc4 	.word	0x20002bc4
    baa4:	20002bb0 	.word	0x20002bb0

0000baa8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    baa8:	b580      	push	{r7, lr}
    baaa:	b084      	sub	sp, #16
    baac:	af00      	add	r7, sp, #0
    baae:	6078      	str	r0, [r7, #4]
    bab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    bab2:	687b      	ldr	r3, [r7, #4]
    bab4:	2b00      	cmp	r3, #0
    bab6:	d104      	bne.n	bac2 <xTaskCheckForTimeOut+0x1a>
    bab8:	f04f 0050 	mov.w	r0, #80	; 0x50
    babc:	f380 8811 	msr	BASEPRI, r0
    bac0:	e7fe      	b.n	bac0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
    bac2:	683b      	ldr	r3, [r7, #0]
    bac4:	2b00      	cmp	r3, #0
    bac6:	d104      	bne.n	bad2 <xTaskCheckForTimeOut+0x2a>
    bac8:	f04f 0050 	mov.w	r0, #80	; 0x50
    bacc:	f380 8811 	msr	BASEPRI, r0
    bad0:	e7fe      	b.n	bad0 <xTaskCheckForTimeOut+0x28>

	taskENTER_CRITICAL();
    bad2:	f7fd fb9f 	bl	9214 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    bad6:	4b1c      	ldr	r3, [pc, #112]	; (bb48 <xTaskCheckForTimeOut+0xa0>)
    bad8:	681b      	ldr	r3, [r3, #0]
    bada:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    badc:	683b      	ldr	r3, [r7, #0]
    bade:	681b      	ldr	r3, [r3, #0]
    bae0:	f1b3 3fff 	cmp.w	r3, #4294967295
    bae4:	d102      	bne.n	baec <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    bae6:	2300      	movs	r3, #0
    bae8:	60fb      	str	r3, [r7, #12]
    baea:	e026      	b.n	bb3a <xTaskCheckForTimeOut+0x92>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    baec:	687b      	ldr	r3, [r7, #4]
    baee:	681a      	ldr	r2, [r3, #0]
    baf0:	4b16      	ldr	r3, [pc, #88]	; (bb4c <xTaskCheckForTimeOut+0xa4>)
    baf2:	681b      	ldr	r3, [r3, #0]
    baf4:	429a      	cmp	r2, r3
    baf6:	d007      	beq.n	bb08 <xTaskCheckForTimeOut+0x60>
    baf8:	687b      	ldr	r3, [r7, #4]
    bafa:	685a      	ldr	r2, [r3, #4]
    bafc:	68bb      	ldr	r3, [r7, #8]
    bafe:	429a      	cmp	r2, r3
    bb00:	d802      	bhi.n	bb08 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    bb02:	2301      	movs	r3, #1
    bb04:	60fb      	str	r3, [r7, #12]
    bb06:	e018      	b.n	bb3a <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    bb08:	687b      	ldr	r3, [r7, #4]
    bb0a:	685b      	ldr	r3, [r3, #4]
    bb0c:	68ba      	ldr	r2, [r7, #8]
    bb0e:	1ad2      	subs	r2, r2, r3
    bb10:	683b      	ldr	r3, [r7, #0]
    bb12:	681b      	ldr	r3, [r3, #0]
    bb14:	429a      	cmp	r2, r3
    bb16:	d20e      	bcs.n	bb36 <xTaskCheckForTimeOut+0x8e>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    bb18:	683b      	ldr	r3, [r7, #0]
    bb1a:	681a      	ldr	r2, [r3, #0]
    bb1c:	687b      	ldr	r3, [r7, #4]
    bb1e:	6859      	ldr	r1, [r3, #4]
    bb20:	68bb      	ldr	r3, [r7, #8]
    bb22:	1acb      	subs	r3, r1, r3
    bb24:	441a      	add	r2, r3
    bb26:	683b      	ldr	r3, [r7, #0]
    bb28:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    bb2a:	6878      	ldr	r0, [r7, #4]
    bb2c:	f7ff ff9e 	bl	ba6c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    bb30:	2300      	movs	r3, #0
    bb32:	60fb      	str	r3, [r7, #12]
    bb34:	e001      	b.n	bb3a <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
    bb36:	2301      	movs	r3, #1
    bb38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    bb3a:	f7fd fb91 	bl	9260 <vPortExitCritical>

	return xReturn;
    bb3e:	68fb      	ldr	r3, [r7, #12]
}
    bb40:	4618      	mov	r0, r3
    bb42:	3710      	adds	r7, #16
    bb44:	46bd      	mov	sp, r7
    bb46:	bd80      	pop	{r7, pc}
    bb48:	20002bb0 	.word	0x20002bb0
    bb4c:	20002bc4 	.word	0x20002bc4

0000bb50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    bb50:	b480      	push	{r7}
    bb52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    bb54:	4b03      	ldr	r3, [pc, #12]	; (bb64 <vTaskMissedYield+0x14>)
    bb56:	2201      	movs	r2, #1
    bb58:	601a      	str	r2, [r3, #0]
}
    bb5a:	bf00      	nop
    bb5c:	46bd      	mov	sp, r7
    bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb62:	4770      	bx	lr
    bb64:	20002bc0 	.word	0x20002bc0

0000bb68 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
    bb68:	b480      	push	{r7}
    bb6a:	b085      	sub	sp, #20
    bb6c:	af00      	add	r7, sp, #0
    bb6e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
    bb70:	687b      	ldr	r3, [r7, #4]
    bb72:	2b00      	cmp	r3, #0
    bb74:	d005      	beq.n	bb82 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    bb76:	687b      	ldr	r3, [r7, #4]
    bb78:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
    bb7a:	68bb      	ldr	r3, [r7, #8]
    bb7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    bb7e:	60fb      	str	r3, [r7, #12]
    bb80:	e001      	b.n	bb86 <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
    bb82:	2300      	movs	r3, #0
    bb84:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
    bb86:	68fb      	ldr	r3, [r7, #12]
	}
    bb88:	4618      	mov	r0, r3
    bb8a:	3714      	adds	r7, #20
    bb8c:	46bd      	mov	sp, r7
    bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb92:	4770      	bx	lr

0000bb94 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
    bb94:	b480      	push	{r7}
    bb96:	b085      	sub	sp, #20
    bb98:	af00      	add	r7, sp, #0
    bb9a:	6078      	str	r0, [r7, #4]
    bb9c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
    bb9e:	687b      	ldr	r3, [r7, #4]
    bba0:	2b00      	cmp	r3, #0
    bba2:	d004      	beq.n	bbae <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
    bba4:	687b      	ldr	r3, [r7, #4]
    bba6:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
    bba8:	68fb      	ldr	r3, [r7, #12]
    bbaa:	683a      	ldr	r2, [r7, #0]
    bbac:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
    bbae:	bf00      	nop
    bbb0:	3714      	adds	r7, #20
    bbb2:	46bd      	mov	sp, r7
    bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbb8:	4770      	bx	lr
    bbba:	bf00      	nop

0000bbbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    bbbc:	b580      	push	{r7, lr}
    bbbe:	b082      	sub	sp, #8
    bbc0:	af00      	add	r7, sp, #0
    bbc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    bbc4:	f000 f846 	bl	bc54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    bbc8:	4b04      	ldr	r3, [pc, #16]	; (bbdc <prvIdleTask+0x20>)
    bbca:	681b      	ldr	r3, [r3, #0]
    bbcc:	2b01      	cmp	r3, #1
    bbce:	d901      	bls.n	bbd4 <prvIdleTask+0x18>
			{
				taskYIELD();
    bbd0:	f7fd fb5c 	bl	928c <vPortYieldFromISR>
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			configUSE_IDLE_HOOK_NAME();
    bbd4:	f002 fcc4 	bl	e560 <FRTOS1_vApplicationIdleHook>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    bbd8:	e7f4      	b.n	bbc4 <prvIdleTask+0x8>
    bbda:	bf00      	nop
    bbdc:	20002adc 	.word	0x20002adc

0000bbe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    bbe0:	b580      	push	{r7, lr}
    bbe2:	b082      	sub	sp, #8
    bbe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    bbe6:	2300      	movs	r3, #0
    bbe8:	607b      	str	r3, [r7, #4]
    bbea:	e00c      	b.n	bc06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    bbec:	687a      	ldr	r2, [r7, #4]
    bbee:	4613      	mov	r3, r2
    bbf0:	009b      	lsls	r3, r3, #2
    bbf2:	4413      	add	r3, r2
    bbf4:	009b      	lsls	r3, r3, #2
    bbf6:	4a10      	ldr	r2, [pc, #64]	; (bc38 <prvInitialiseTaskLists+0x58>)
    bbf8:	4413      	add	r3, r2
    bbfa:	4618      	mov	r0, r3
    bbfc:	f7fd f95e 	bl	8ebc <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    bc00:	687b      	ldr	r3, [r7, #4]
    bc02:	3301      	adds	r3, #1
    bc04:	607b      	str	r3, [r7, #4]
    bc06:	687b      	ldr	r3, [r7, #4]
    bc08:	2b05      	cmp	r3, #5
    bc0a:	d9ef      	bls.n	bbec <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    bc0c:	480b      	ldr	r0, [pc, #44]	; (bc3c <prvInitialiseTaskLists+0x5c>)
    bc0e:	f7fd f955 	bl	8ebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    bc12:	480b      	ldr	r0, [pc, #44]	; (bc40 <prvInitialiseTaskLists+0x60>)
    bc14:	f7fd f952 	bl	8ebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
    bc18:	480a      	ldr	r0, [pc, #40]	; (bc44 <prvInitialiseTaskLists+0x64>)
    bc1a:	f7fd f94f 	bl	8ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    bc1e:	480a      	ldr	r0, [pc, #40]	; (bc48 <prvInitialiseTaskLists+0x68>)
    bc20:	f7fd f94c 	bl	8ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    bc24:	4b09      	ldr	r3, [pc, #36]	; (bc4c <prvInitialiseTaskLists+0x6c>)
    bc26:	4a05      	ldr	r2, [pc, #20]	; (bc3c <prvInitialiseTaskLists+0x5c>)
    bc28:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    bc2a:	4b09      	ldr	r3, [pc, #36]	; (bc50 <prvInitialiseTaskLists+0x70>)
    bc2c:	4a04      	ldr	r2, [pc, #16]	; (bc40 <prvInitialiseTaskLists+0x60>)
    bc2e:	601a      	str	r2, [r3, #0]
}
    bc30:	bf00      	nop
    bc32:	3708      	adds	r7, #8
    bc34:	46bd      	mov	sp, r7
    bc36:	bd80      	pop	{r7, pc}
    bc38:	20002adc 	.word	0x20002adc
    bc3c:	20002b54 	.word	0x20002b54
    bc40:	20002b68 	.word	0x20002b68
    bc44:	20002b84 	.word	0x20002b84
    bc48:	20002b98 	.word	0x20002b98
    bc4c:	20002b7c 	.word	0x20002b7c
    bc50:	20002b80 	.word	0x20002b80

0000bc54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    bc54:	b480      	push	{r7}
    bc56:	af00      	add	r7, sp, #0
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    bc58:	bf00      	nop
    bc5a:	46bd      	mov	sp, r7
    bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bc60:	4770      	bx	lr
    bc62:	bf00      	nop

0000bc64 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
    bc64:	b580      	push	{r7, lr}
    bc66:	b086      	sub	sp, #24
    bc68:	af00      	add	r7, sp, #0
    bc6a:	60f8      	str	r0, [r7, #12]
    bc6c:	60b9      	str	r1, [r7, #8]
    bc6e:	607a      	str	r2, [r7, #4]
    bc70:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
    bc72:	68fb      	ldr	r3, [r7, #12]
    bc74:	2b00      	cmp	r3, #0
    bc76:	d102      	bne.n	bc7e <vTaskGetInfo+0x1a>
    bc78:	4b28      	ldr	r3, [pc, #160]	; (bd1c <vTaskGetInfo+0xb8>)
    bc7a:	681b      	ldr	r3, [r3, #0]
    bc7c:	e000      	b.n	bc80 <vTaskGetInfo+0x1c>
    bc7e:	68fb      	ldr	r3, [r7, #12]
    bc80:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
    bc82:	68bb      	ldr	r3, [r7, #8]
    bc84:	697a      	ldr	r2, [r7, #20]
    bc86:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
    bc88:	697b      	ldr	r3, [r7, #20]
    bc8a:	f103 0234 	add.w	r2, r3, #52	; 0x34
    bc8e:	68bb      	ldr	r3, [r7, #8]
    bc90:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
    bc92:	697b      	ldr	r3, [r7, #20]
    bc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bc96:	68bb      	ldr	r3, [r7, #8]
    bc98:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
    bc9a:	697b      	ldr	r3, [r7, #20]
    bc9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bc9e:	68bb      	ldr	r3, [r7, #8]
    bca0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
    bca2:	697b      	ldr	r3, [r7, #20]
    bca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    bca6:	68bb      	ldr	r3, [r7, #8]
    bca8:	609a      	str	r2, [r3, #8]
		#if ( INCLUDE_vTaskSuspend == 1 )
		{
			/* If the task is in the suspended list then there is a chance it is
			actually just blocked indefinitely - so really it should be reported as
			being in the Blocked state. */
			if( pxTaskStatus->eCurrentState == eSuspended )
    bcaa:	68bb      	ldr	r3, [r7, #8]
    bcac:	7b1b      	ldrb	r3, [r3, #12]
    bcae:	2b03      	cmp	r3, #3
    bcb0:	d10a      	bne.n	bcc8 <vTaskGetInfo+0x64>
			{
				vTaskSuspendAll();
    bcb2:	f7ff fa35 	bl	b120 <vTaskSuspendAll>
				{
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    bcb6:	697b      	ldr	r3, [r7, #20]
    bcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bcba:	2b00      	cmp	r3, #0
    bcbc:	d002      	beq.n	bcc4 <vTaskGetInfo+0x60>
					{
						pxTaskStatus->eCurrentState = eBlocked;
    bcbe:	68bb      	ldr	r3, [r7, #8]
    bcc0:	2202      	movs	r2, #2
    bcc2:	731a      	strb	r2, [r3, #12]
					}
				}
				(void)xTaskResumeAll();
    bcc4:	f7ff fa3a 	bl	b13c <xTaskResumeAll>
		}
		#endif /* INCLUDE_vTaskSuspend */

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
    bcc8:	697b      	ldr	r3, [r7, #20]
    bcca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    bccc:	68bb      	ldr	r3, [r7, #8]
    bcce:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
    bcd0:	68bb      	ldr	r3, [r7, #8]
    bcd2:	2200      	movs	r2, #0
    bcd4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the value
		of eState passed into this function is eInvalid - otherwise the state is
		just set to whatever is passed in. */
		if( eState != eInvalid )
    bcd6:	78fb      	ldrb	r3, [r7, #3]
    bcd8:	2b05      	cmp	r3, #5
    bcda:	d003      	beq.n	bce4 <vTaskGetInfo+0x80>
		{
			pxTaskStatus->eCurrentState = eState;
    bcdc:	68bb      	ldr	r3, [r7, #8]
    bcde:	78fa      	ldrb	r2, [r7, #3]
    bce0:	731a      	strb	r2, [r3, #12]
    bce2:	e006      	b.n	bcf2 <vTaskGetInfo+0x8e>
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
    bce4:	68f8      	ldr	r0, [r7, #12]
    bce6:	f7fe ff59 	bl	ab9c <eTaskGetState>
    bcea:	4603      	mov	r3, r0
    bcec:	461a      	mov	r2, r3
    bcee:	68bb      	ldr	r3, [r7, #8]
    bcf0:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
    bcf2:	687b      	ldr	r3, [r7, #4]
    bcf4:	2b00      	cmp	r3, #0
    bcf6:	d009      	beq.n	bd0c <vTaskGetInfo+0xa8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
    bcf8:	697b      	ldr	r3, [r7, #20]
    bcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    bcfc:	4618      	mov	r0, r3
    bcfe:	f000 f861 	bl	bdc4 <prvTaskCheckFreeStackSpace>
    bd02:	4603      	mov	r3, r0
    bd04:	461a      	mov	r2, r3
    bd06:	68bb      	ldr	r3, [r7, #8]
    bd08:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
    bd0a:	e002      	b.n	bd12 <vTaskGetInfo+0xae>
			}
			#endif
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
    bd0c:	68bb      	ldr	r3, [r7, #8]
    bd0e:	2200      	movs	r2, #0
    bd10:	841a      	strh	r2, [r3, #32]
		}
	}
    bd12:	bf00      	nop
    bd14:	3718      	adds	r7, #24
    bd16:	46bd      	mov	sp, r7
    bd18:	bd80      	pop	{r7, pc}
    bd1a:	bf00      	nop
    bd1c:	20002ad8 	.word	0x20002ad8

0000bd20 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
    bd20:	b580      	push	{r7, lr}
    bd22:	b08a      	sub	sp, #40	; 0x28
    bd24:	af00      	add	r7, sp, #0
    bd26:	60f8      	str	r0, [r7, #12]
    bd28:	60b9      	str	r1, [r7, #8]
    bd2a:	4613      	mov	r3, r2
    bd2c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
    bd2e:	2300      	movs	r3, #0
    bd30:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
    bd32:	68bb      	ldr	r3, [r7, #8]
    bd34:	681b      	ldr	r3, [r3, #0]
    bd36:	2b00      	cmp	r3, #0
    bd38:	d03f      	beq.n	bdba <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    bd3a:	68bb      	ldr	r3, [r7, #8]
    bd3c:	623b      	str	r3, [r7, #32]
    bd3e:	6a3b      	ldr	r3, [r7, #32]
    bd40:	685b      	ldr	r3, [r3, #4]
    bd42:	685a      	ldr	r2, [r3, #4]
    bd44:	6a3b      	ldr	r3, [r7, #32]
    bd46:	605a      	str	r2, [r3, #4]
    bd48:	6a3b      	ldr	r3, [r7, #32]
    bd4a:	685a      	ldr	r2, [r3, #4]
    bd4c:	6a3b      	ldr	r3, [r7, #32]
    bd4e:	3308      	adds	r3, #8
    bd50:	429a      	cmp	r2, r3
    bd52:	d104      	bne.n	bd5e <prvListTasksWithinSingleList+0x3e>
    bd54:	6a3b      	ldr	r3, [r7, #32]
    bd56:	685b      	ldr	r3, [r3, #4]
    bd58:	685a      	ldr	r2, [r3, #4]
    bd5a:	6a3b      	ldr	r3, [r7, #32]
    bd5c:	605a      	str	r2, [r3, #4]
    bd5e:	6a3b      	ldr	r3, [r7, #32]
    bd60:	685b      	ldr	r3, [r3, #4]
    bd62:	68db      	ldr	r3, [r3, #12]
    bd64:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    bd66:	68bb      	ldr	r3, [r7, #8]
    bd68:	61bb      	str	r3, [r7, #24]
    bd6a:	69bb      	ldr	r3, [r7, #24]
    bd6c:	685b      	ldr	r3, [r3, #4]
    bd6e:	685a      	ldr	r2, [r3, #4]
    bd70:	69bb      	ldr	r3, [r7, #24]
    bd72:	605a      	str	r2, [r3, #4]
    bd74:	69bb      	ldr	r3, [r7, #24]
    bd76:	685a      	ldr	r2, [r3, #4]
    bd78:	69bb      	ldr	r3, [r7, #24]
    bd7a:	3308      	adds	r3, #8
    bd7c:	429a      	cmp	r2, r3
    bd7e:	d104      	bne.n	bd8a <prvListTasksWithinSingleList+0x6a>
    bd80:	69bb      	ldr	r3, [r7, #24]
    bd82:	685b      	ldr	r3, [r3, #4]
    bd84:	685a      	ldr	r2, [r3, #4]
    bd86:	69bb      	ldr	r3, [r7, #24]
    bd88:	605a      	str	r2, [r3, #4]
    bd8a:	69bb      	ldr	r3, [r7, #24]
    bd8c:	685b      	ldr	r3, [r3, #4]
    bd8e:	68db      	ldr	r3, [r3, #12]
    bd90:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
    bd92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    bd94:	4613      	mov	r3, r2
    bd96:	00db      	lsls	r3, r3, #3
    bd98:	4413      	add	r3, r2
    bd9a:	009b      	lsls	r3, r3, #2
    bd9c:	461a      	mov	r2, r3
    bd9e:	68fb      	ldr	r3, [r7, #12]
    bda0:	1899      	adds	r1, r3, r2
    bda2:	79fb      	ldrb	r3, [r7, #7]
    bda4:	2201      	movs	r2, #1
    bda6:	6978      	ldr	r0, [r7, #20]
    bda8:	f7ff ff5c 	bl	bc64 <vTaskGetInfo>
				uxTask++;
    bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bdae:	3301      	adds	r3, #1
    bdb0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
    bdb2:	697a      	ldr	r2, [r7, #20]
    bdb4:	69fb      	ldr	r3, [r7, #28]
    bdb6:	429a      	cmp	r2, r3
    bdb8:	d1d5      	bne.n	bd66 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
    bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
    bdbc:	4618      	mov	r0, r3
    bdbe:	3728      	adds	r7, #40	; 0x28
    bdc0:	46bd      	mov	sp, r7
    bdc2:	bd80      	pop	{r7, pc}

0000bdc4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
    bdc4:	b480      	push	{r7}
    bdc6:	b085      	sub	sp, #20
    bdc8:	af00      	add	r7, sp, #0
    bdca:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
    bdcc:	2300      	movs	r3, #0
    bdce:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    bdd0:	e005      	b.n	bdde <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
    bdd2:	687b      	ldr	r3, [r7, #4]
    bdd4:	3301      	adds	r3, #1
    bdd6:	607b      	str	r3, [r7, #4]
			ulCount++;
    bdd8:	68fb      	ldr	r3, [r7, #12]
    bdda:	3301      	adds	r3, #1
    bddc:	60fb      	str	r3, [r7, #12]

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
    bdde:	687b      	ldr	r3, [r7, #4]
    bde0:	781b      	ldrb	r3, [r3, #0]
    bde2:	2ba5      	cmp	r3, #165	; 0xa5
    bde4:	d0f5      	beq.n	bdd2 <prvTaskCheckFreeStackSpace+0xe>
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
    bde6:	68fb      	ldr	r3, [r7, #12]
    bde8:	089b      	lsrs	r3, r3, #2
    bdea:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
    bdec:	68fb      	ldr	r3, [r7, #12]
    bdee:	b29b      	uxth	r3, r3
	}
    bdf0:	4618      	mov	r0, r3
    bdf2:	3714      	adds	r7, #20
    bdf4:	46bd      	mov	sp, r7
    bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
    bdfa:	4770      	bx	lr

0000bdfc <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
    bdfc:	b580      	push	{r7, lr}
    bdfe:	b086      	sub	sp, #24
    be00:	af00      	add	r7, sp, #0
    be02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
    be04:	687b      	ldr	r3, [r7, #4]
    be06:	2b00      	cmp	r3, #0
    be08:	d102      	bne.n	be10 <uxTaskGetStackHighWaterMark+0x14>
    be0a:	4b09      	ldr	r3, [pc, #36]	; (be30 <uxTaskGetStackHighWaterMark+0x34>)
    be0c:	681b      	ldr	r3, [r3, #0]
    be0e:	e000      	b.n	be12 <uxTaskGetStackHighWaterMark+0x16>
    be10:	687b      	ldr	r3, [r7, #4]
    be12:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
    be14:	697b      	ldr	r3, [r7, #20]
    be16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    be18:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
    be1a:	6938      	ldr	r0, [r7, #16]
    be1c:	f7ff ffd2 	bl	bdc4 <prvTaskCheckFreeStackSpace>
    be20:	4603      	mov	r3, r0
    be22:	60fb      	str	r3, [r7, #12]

		return uxReturn;
    be24:	68fb      	ldr	r3, [r7, #12]
	}
    be26:	4618      	mov	r0, r3
    be28:	3718      	adds	r7, #24
    be2a:	46bd      	mov	sp, r7
    be2c:	bd80      	pop	{r7, pc}
    be2e:	bf00      	nop
    be30:	20002ad8 	.word	0x20002ad8

0000be34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    be34:	b480      	push	{r7}
    be36:	b083      	sub	sp, #12
    be38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    be3a:	4b0f      	ldr	r3, [pc, #60]	; (be78 <prvResetNextTaskUnblockTime+0x44>)
    be3c:	681b      	ldr	r3, [r3, #0]
    be3e:	681b      	ldr	r3, [r3, #0]
    be40:	2b00      	cmp	r3, #0
    be42:	d101      	bne.n	be48 <prvResetNextTaskUnblockTime+0x14>
    be44:	2301      	movs	r3, #1
    be46:	e000      	b.n	be4a <prvResetNextTaskUnblockTime+0x16>
    be48:	2300      	movs	r3, #0
    be4a:	2b00      	cmp	r3, #0
    be4c:	d004      	beq.n	be58 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    be4e:	4b0b      	ldr	r3, [pc, #44]	; (be7c <prvResetNextTaskUnblockTime+0x48>)
    be50:	f04f 32ff 	mov.w	r2, #4294967295
    be54:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    be56:	e008      	b.n	be6a <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    be58:	4b07      	ldr	r3, [pc, #28]	; (be78 <prvResetNextTaskUnblockTime+0x44>)
    be5a:	681b      	ldr	r3, [r3, #0]
    be5c:	68db      	ldr	r3, [r3, #12]
    be5e:	68db      	ldr	r3, [r3, #12]
    be60:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    be62:	687b      	ldr	r3, [r7, #4]
    be64:	685b      	ldr	r3, [r3, #4]
    be66:	4a05      	ldr	r2, [pc, #20]	; (be7c <prvResetNextTaskUnblockTime+0x48>)
    be68:	6013      	str	r3, [r2, #0]
	}
}
    be6a:	bf00      	nop
    be6c:	370c      	adds	r7, #12
    be6e:	46bd      	mov	sp, r7
    be70:	f85d 7b04 	ldr.w	r7, [sp], #4
    be74:	4770      	bx	lr
    be76:	bf00      	nop
    be78:	20002b7c 	.word	0x20002b7c
    be7c:	20002bcc 	.word	0x20002bcc

0000be80 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    be80:	b480      	push	{r7}
    be82:	b083      	sub	sp, #12
    be84:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    be86:	4b05      	ldr	r3, [pc, #20]	; (be9c <xTaskGetCurrentTaskHandle+0x1c>)
    be88:	681b      	ldr	r3, [r3, #0]
    be8a:	607b      	str	r3, [r7, #4]

		return xReturn;
    be8c:	687b      	ldr	r3, [r7, #4]
	}
    be8e:	4618      	mov	r0, r3
    be90:	370c      	adds	r7, #12
    be92:	46bd      	mov	sp, r7
    be94:	f85d 7b04 	ldr.w	r7, [sp], #4
    be98:	4770      	bx	lr
    be9a:	bf00      	nop
    be9c:	20002ad8 	.word	0x20002ad8

0000bea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    bea0:	b480      	push	{r7}
    bea2:	b083      	sub	sp, #12
    bea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    bea6:	4b0b      	ldr	r3, [pc, #44]	; (bed4 <xTaskGetSchedulerState+0x34>)
    bea8:	681b      	ldr	r3, [r3, #0]
    beaa:	2b00      	cmp	r3, #0
    beac:	d102      	bne.n	beb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    beae:	2301      	movs	r3, #1
    beb0:	607b      	str	r3, [r7, #4]
    beb2:	e008      	b.n	bec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    beb4:	4b08      	ldr	r3, [pc, #32]	; (bed8 <xTaskGetSchedulerState+0x38>)
    beb6:	681b      	ldr	r3, [r3, #0]
    beb8:	2b00      	cmp	r3, #0
    beba:	d102      	bne.n	bec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    bebc:	2302      	movs	r3, #2
    bebe:	607b      	str	r3, [r7, #4]
    bec0:	e001      	b.n	bec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    bec2:	2300      	movs	r3, #0
    bec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    bec6:	687b      	ldr	r3, [r7, #4]
	}
    bec8:	4618      	mov	r0, r3
    beca:	370c      	adds	r7, #12
    becc:	46bd      	mov	sp, r7
    bece:	f85d 7b04 	ldr.w	r7, [sp], #4
    bed2:	4770      	bx	lr
    bed4:	20002bb8 	.word	0x20002bb8
    bed8:	20002bd4 	.word	0x20002bd4

0000bedc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    bedc:	b580      	push	{r7, lr}
    bede:	b084      	sub	sp, #16
    bee0:	af00      	add	r7, sp, #0
    bee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    bee4:	687b      	ldr	r3, [r7, #4]
    bee6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    bee8:	687b      	ldr	r3, [r7, #4]
    beea:	2b00      	cmp	r3, #0
    beec:	d057      	beq.n	bf9e <vTaskPriorityInherit+0xc2>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    beee:	68fb      	ldr	r3, [r7, #12]
    bef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bef2:	4b2d      	ldr	r3, [pc, #180]	; (bfa8 <vTaskPriorityInherit+0xcc>)
    bef4:	681b      	ldr	r3, [r3, #0]
    bef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bef8:	429a      	cmp	r2, r3
    befa:	d250      	bcs.n	bf9e <vTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    befc:	68fb      	ldr	r3, [r7, #12]
    befe:	699b      	ldr	r3, [r3, #24]
    bf00:	2b00      	cmp	r3, #0
    bf02:	db06      	blt.n	bf12 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bf04:	4b28      	ldr	r3, [pc, #160]	; (bfa8 <vTaskPriorityInherit+0xcc>)
    bf06:	681b      	ldr	r3, [r3, #0]
    bf08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bf0a:	f1c3 0206 	rsb	r2, r3, #6
    bf0e:	68fb      	ldr	r3, [r7, #12]
    bf10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    bf12:	68fb      	ldr	r3, [r7, #12]
    bf14:	6959      	ldr	r1, [r3, #20]
    bf16:	68fb      	ldr	r3, [r7, #12]
    bf18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf1a:	4613      	mov	r3, r2
    bf1c:	009b      	lsls	r3, r3, #2
    bf1e:	4413      	add	r3, r2
    bf20:	009b      	lsls	r3, r3, #2
    bf22:	4a22      	ldr	r2, [pc, #136]	; (bfac <vTaskPriorityInherit+0xd0>)
    bf24:	4413      	add	r3, r2
    bf26:	4299      	cmp	r1, r3
    bf28:	d101      	bne.n	bf2e <vTaskPriorityInherit+0x52>
    bf2a:	2301      	movs	r3, #1
    bf2c:	e000      	b.n	bf30 <vTaskPriorityInherit+0x54>
    bf2e:	2300      	movs	r3, #0
    bf30:	2b00      	cmp	r3, #0
    bf32:	d027      	beq.n	bf84 <vTaskPriorityInherit+0xa8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    bf34:	68fb      	ldr	r3, [r7, #12]
    bf36:	3304      	adds	r3, #4
    bf38:	4618      	mov	r0, r3
    bf3a:	f7fd f84b 	bl	8fd4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    bf3e:	4b1a      	ldr	r3, [pc, #104]	; (bfa8 <vTaskPriorityInherit+0xcc>)
    bf40:	681b      	ldr	r3, [r3, #0]
    bf42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf44:	68fb      	ldr	r3, [r7, #12]
    bf46:	62da      	str	r2, [r3, #44]	; 0x2c
#if configUSE_SEGGER_SYSTEM_VIEWER_HOOKS /* << EST */
					prvReAddTaskToReadyList( pxTCB );
#else
					prvAddTaskToReadyList( pxTCB );
    bf48:	68fb      	ldr	r3, [r7, #12]
    bf4a:	4619      	mov	r1, r3
    bf4c:	2030      	movs	r0, #48	; 0x30
    bf4e:	f001 fac3 	bl	d4d8 <prvTraceStoreEvent1>
    bf52:	68fb      	ldr	r3, [r7, #12]
    bf54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf56:	4b16      	ldr	r3, [pc, #88]	; (bfb0 <vTaskPriorityInherit+0xd4>)
    bf58:	681b      	ldr	r3, [r3, #0]
    bf5a:	429a      	cmp	r2, r3
    bf5c:	d903      	bls.n	bf66 <vTaskPriorityInherit+0x8a>
    bf5e:	68fb      	ldr	r3, [r7, #12]
    bf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bf62:	4a13      	ldr	r2, [pc, #76]	; (bfb0 <vTaskPriorityInherit+0xd4>)
    bf64:	6013      	str	r3, [r2, #0]
    bf66:	68fb      	ldr	r3, [r7, #12]
    bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf6a:	4613      	mov	r3, r2
    bf6c:	009b      	lsls	r3, r3, #2
    bf6e:	4413      	add	r3, r2
    bf70:	009b      	lsls	r3, r3, #2
    bf72:	4a0e      	ldr	r2, [pc, #56]	; (bfac <vTaskPriorityInherit+0xd0>)
    bf74:	441a      	add	r2, r3
    bf76:	68fb      	ldr	r3, [r7, #12]
    bf78:	3304      	adds	r3, #4
    bf7a:	4619      	mov	r1, r3
    bf7c:	4610      	mov	r0, r2
    bf7e:	f7fc ffcb 	bl	8f18 <vListInsertEnd>
    bf82:	e004      	b.n	bf8e <vTaskPriorityInherit+0xb2>
#endif
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    bf84:	4b08      	ldr	r3, [pc, #32]	; (bfa8 <vTaskPriorityInherit+0xcc>)
    bf86:	681b      	ldr	r3, [r3, #0]
    bf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bf8a:	68fb      	ldr	r3, [r7, #12]
    bf8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
    bf8e:	68f9      	ldr	r1, [r7, #12]
    bf90:	4b05      	ldr	r3, [pc, #20]	; (bfa8 <vTaskPriorityInherit+0xcc>)
    bf92:	681b      	ldr	r3, [r3, #0]
    bf94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bf96:	461a      	mov	r2, r3
    bf98:	2005      	movs	r0, #5
    bf9a:	f001 fae9 	bl	d570 <prvTraceStoreEvent2>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bf9e:	bf00      	nop
    bfa0:	3710      	adds	r7, #16
    bfa2:	46bd      	mov	sp, r7
    bfa4:	bd80      	pop	{r7, pc}
    bfa6:	bf00      	nop
    bfa8:	20002ad8 	.word	0x20002ad8
    bfac:	20002adc 	.word	0x20002adc
    bfb0:	20002bb4 	.word	0x20002bb4

0000bfb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    bfb4:	b580      	push	{r7, lr}
    bfb6:	b084      	sub	sp, #16
    bfb8:	af00      	add	r7, sp, #0
    bfba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    bfbc:	687b      	ldr	r3, [r7, #4]
    bfbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    bfc0:	2300      	movs	r3, #0
    bfc2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    bfc4:	687b      	ldr	r3, [r7, #4]
    bfc6:	2b00      	cmp	r3, #0
    bfc8:	d056      	beq.n	c078 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    bfca:	4b2e      	ldr	r3, [pc, #184]	; (c084 <xTaskPriorityDisinherit+0xd0>)
    bfcc:	681b      	ldr	r3, [r3, #0]
    bfce:	68ba      	ldr	r2, [r7, #8]
    bfd0:	429a      	cmp	r2, r3
    bfd2:	d004      	beq.n	bfde <xTaskPriorityDisinherit+0x2a>
    bfd4:	f04f 0050 	mov.w	r0, #80	; 0x50
    bfd8:	f380 8811 	msr	BASEPRI, r0
    bfdc:	e7fe      	b.n	bfdc <xTaskPriorityDisinherit+0x28>

			configASSERT( pxTCB->uxMutexesHeld );
    bfde:	68bb      	ldr	r3, [r7, #8]
    bfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bfe2:	2b00      	cmp	r3, #0
    bfe4:	d104      	bne.n	bff0 <xTaskPriorityDisinherit+0x3c>
    bfe6:	f04f 0050 	mov.w	r0, #80	; 0x50
    bfea:	f380 8811 	msr	BASEPRI, r0
    bfee:	e7fe      	b.n	bfee <xTaskPriorityDisinherit+0x3a>
			( pxTCB->uxMutexesHeld )--;
    bff0:	68bb      	ldr	r3, [r7, #8]
    bff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bff4:	1e5a      	subs	r2, r3, #1
    bff6:	68bb      	ldr	r3, [r7, #8]
    bff8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    bffa:	68bb      	ldr	r3, [r7, #8]
    bffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bffe:	68bb      	ldr	r3, [r7, #8]
    c000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c002:	429a      	cmp	r2, r3
    c004:	d038      	beq.n	c078 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    c006:	68bb      	ldr	r3, [r7, #8]
    c008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    c00a:	2b00      	cmp	r3, #0
    c00c:	d134      	bne.n	c078 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c00e:	68bb      	ldr	r3, [r7, #8]
    c010:	3304      	adds	r3, #4
    c012:	4618      	mov	r0, r3
    c014:	f7fc ffde 	bl	8fd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
    c018:	68b9      	ldr	r1, [r7, #8]
    c01a:	68bb      	ldr	r3, [r7, #8]
    c01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c01e:	461a      	mov	r2, r3
    c020:	2006      	movs	r0, #6
    c022:	f001 faa5 	bl	d570 <prvTraceStoreEvent2>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    c026:	68bb      	ldr	r3, [r7, #8]
    c028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    c02a:	68bb      	ldr	r3, [r7, #8]
    c02c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c02e:	68bb      	ldr	r3, [r7, #8]
    c030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c032:	f1c3 0206 	rsb	r2, r3, #6
    c036:	68bb      	ldr	r3, [r7, #8]
    c038:	619a      	str	r2, [r3, #24]
#if configUSE_SEGGER_SYSTEM_VIEWER_HOOKS /* << EST */
					prvReAddTaskToReadyList( pxTCB );
#else
					prvAddTaskToReadyList( pxTCB );
    c03a:	68bb      	ldr	r3, [r7, #8]
    c03c:	4619      	mov	r1, r3
    c03e:	2030      	movs	r0, #48	; 0x30
    c040:	f001 fa4a 	bl	d4d8 <prvTraceStoreEvent1>
    c044:	68bb      	ldr	r3, [r7, #8]
    c046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c048:	4b0f      	ldr	r3, [pc, #60]	; (c088 <xTaskPriorityDisinherit+0xd4>)
    c04a:	681b      	ldr	r3, [r3, #0]
    c04c:	429a      	cmp	r2, r3
    c04e:	d903      	bls.n	c058 <xTaskPriorityDisinherit+0xa4>
    c050:	68bb      	ldr	r3, [r7, #8]
    c052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c054:	4a0c      	ldr	r2, [pc, #48]	; (c088 <xTaskPriorityDisinherit+0xd4>)
    c056:	6013      	str	r3, [r2, #0]
    c058:	68bb      	ldr	r3, [r7, #8]
    c05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c05c:	4613      	mov	r3, r2
    c05e:	009b      	lsls	r3, r3, #2
    c060:	4413      	add	r3, r2
    c062:	009b      	lsls	r3, r3, #2
    c064:	4a09      	ldr	r2, [pc, #36]	; (c08c <xTaskPriorityDisinherit+0xd8>)
    c066:	441a      	add	r2, r3
    c068:	68bb      	ldr	r3, [r7, #8]
    c06a:	3304      	adds	r3, #4
    c06c:	4619      	mov	r1, r3
    c06e:	4610      	mov	r0, r2
    c070:	f7fc ff52 	bl	8f18 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    c074:	2301      	movs	r3, #1
    c076:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    c078:	68fb      	ldr	r3, [r7, #12]
	}
    c07a:	4618      	mov	r0, r3
    c07c:	3710      	adds	r7, #16
    c07e:	46bd      	mov	sp, r7
    c080:	bd80      	pop	{r7, pc}
    c082:	bf00      	nop
    c084:	20002ad8 	.word	0x20002ad8
    c088:	20002bb4 	.word	0x20002bb4
    c08c:	20002adc 	.word	0x20002adc

0000c090 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer, size_t bufSize )
	{
    c090:	b580      	push	{r7, lr}
    c092:	b088      	sub	sp, #32
    c094:	af02      	add	r7, sp, #8
    c096:	6078      	str	r0, [r7, #4]
    c098:	6039      	str	r1, [r7, #0]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
    c09a:	687b      	ldr	r3, [r7, #4]
    c09c:	2200      	movs	r2, #0
    c09e:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
    c0a0:	4b55      	ldr	r3, [pc, #340]	; (c1f8 <vTaskList+0x168>)
    c0a2:	681b      	ldr	r3, [r3, #0]
    c0a4:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
    c0a6:	4b54      	ldr	r3, [pc, #336]	; (c1f8 <vTaskList+0x168>)
    c0a8:	681a      	ldr	r2, [r3, #0]
    c0aa:	4613      	mov	r3, r2
    c0ac:	00db      	lsls	r3, r3, #3
    c0ae:	4413      	add	r3, r2
    c0b0:	009b      	lsls	r3, r3, #2
    c0b2:	4618      	mov	r0, r3
    c0b4:	f7fc fd06 	bl	8ac4 <pvPortMalloc>
    c0b8:	6138      	str	r0, [r7, #16]

		if( pxTaskStatusArray != NULL )
    c0ba:	693b      	ldr	r3, [r7, #16]
    c0bc:	2b00      	cmp	r3, #0
    c0be:	f000 8096 	beq.w	c1ee <vTaskList+0x15e>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
    c0c2:	68fb      	ldr	r3, [r7, #12]
    c0c4:	2200      	movs	r2, #0
    c0c6:	4619      	mov	r1, r3
    c0c8:	6938      	ldr	r0, [r7, #16]
    c0ca:	f7ff f9dd 	bl	b488 <uxTaskGetSystemState>
    c0ce:	4603      	mov	r3, r0
    c0d0:	60fb      	str	r3, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
    c0d2:	2300      	movs	r3, #0
    c0d4:	60bb      	str	r3, [r7, #8]
    c0d6:	e082      	b.n	c1de <vTaskList+0x14e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
    c0d8:	68ba      	ldr	r2, [r7, #8]
    c0da:	4613      	mov	r3, r2
    c0dc:	00db      	lsls	r3, r3, #3
    c0de:	4413      	add	r3, r2
    c0e0:	009b      	lsls	r3, r3, #2
    c0e2:	461a      	mov	r2, r3
    c0e4:	693b      	ldr	r3, [r7, #16]
    c0e6:	4413      	add	r3, r2
    c0e8:	7b1b      	ldrb	r3, [r3, #12]
    c0ea:	3b01      	subs	r3, #1
    c0ec:	2b03      	cmp	r3, #3
    c0ee:	d817      	bhi.n	c120 <vTaskList+0x90>
    c0f0:	a201      	add	r2, pc, #4	; (adr r2, c0f8 <vTaskList+0x68>)
    c0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c0f6:	bf00      	nop
    c0f8:	0000c109 	.word	0x0000c109
    c0fc:	0000c10f 	.word	0x0000c10f
    c100:	0000c115 	.word	0x0000c115
    c104:	0000c11b 	.word	0x0000c11b
				{
					case eReady:		cStatus = tskREADY_CHAR;
    c108:	2352      	movs	r3, #82	; 0x52
    c10a:	75fb      	strb	r3, [r7, #23]
										break;
    c10c:	e00b      	b.n	c126 <vTaskList+0x96>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
    c10e:	2342      	movs	r3, #66	; 0x42
    c110:	75fb      	strb	r3, [r7, #23]
										break;
    c112:	e008      	b.n	c126 <vTaskList+0x96>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
    c114:	2353      	movs	r3, #83	; 0x53
    c116:	75fb      	strb	r3, [r7, #23]
										break;
    c118:	e005      	b.n	c126 <vTaskList+0x96>

					case eDeleted:		cStatus = tskDELETED_CHAR;
    c11a:	2344      	movs	r3, #68	; 0x44
    c11c:	75fb      	strb	r3, [r7, #23]
										break;
    c11e:	e002      	b.n	c126 <vTaskList+0x96>

					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = 0x00;
    c120:	2300      	movs	r3, #0
    c122:	75fb      	strb	r3, [r7, #23]
										break;
    c124:	bf00      	nop

				/* Write the rest of the string. */
				sprintf( ( char * ) pcWriteBuffer, ( char * ) "\t\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
				pcWriteBuffer += strlen( pcWriteBuffer );
#else /* << EST */
        UTIL1_strcatPad((uint8_t*)pcWriteBuffer, bufSize, (const unsigned char*)pxTaskStatusArray[ x ].pcTaskName, ' ', configMAX_TASK_NAME_LEN);
    c126:	68ba      	ldr	r2, [r7, #8]
    c128:	4613      	mov	r3, r2
    c12a:	00db      	lsls	r3, r3, #3
    c12c:	4413      	add	r3, r2
    c12e:	009b      	lsls	r3, r3, #2
    c130:	461a      	mov	r2, r3
    c132:	693b      	ldr	r3, [r7, #16]
    c134:	4413      	add	r3, r2
    c136:	685a      	ldr	r2, [r3, #4]
    c138:	230c      	movs	r3, #12
    c13a:	9300      	str	r3, [sp, #0]
    c13c:	2320      	movs	r3, #32
    c13e:	6839      	ldr	r1, [r7, #0]
    c140:	6878      	ldr	r0, [r7, #4]
    c142:	f7fb fc4b 	bl	79dc <UTIL1_strcatPad>
	      UTIL1_strcat((uint8_t*)pcWriteBuffer, bufSize, (const unsigned char*)"\t");
    c146:	4a2d      	ldr	r2, [pc, #180]	; (c1fc <vTaskList+0x16c>)
    c148:	6839      	ldr	r1, [r7, #0]
    c14a:	6878      	ldr	r0, [r7, #4]
    c14c:	f7f9 fee0 	bl	5f10 <UTIL1_strcat>
	      UTIL1_chcat((uint8_t*)pcWriteBuffer, bufSize, (unsigned char)cStatus);
    c150:	7dfb      	ldrb	r3, [r7, #23]
    c152:	461a      	mov	r2, r3
    c154:	6839      	ldr	r1, [r7, #0]
    c156:	6878      	ldr	r0, [r7, #4]
    c158:	f7f9 ff0e 	bl	5f78 <UTIL1_chcat>
	      UTIL1_chcat((uint8_t*)pcWriteBuffer, bufSize, (unsigned char)'\t');
    c15c:	2209      	movs	r2, #9
    c15e:	6839      	ldr	r1, [r7, #0]
    c160:	6878      	ldr	r0, [r7, #4]
    c162:	f7f9 ff09 	bl	5f78 <UTIL1_chcat>
	      UTIL1_strcatNum32u((uint8_t*)pcWriteBuffer, bufSize, pxTaskStatusArray[ x ].uxCurrentPriority);
    c166:	68ba      	ldr	r2, [r7, #8]
    c168:	4613      	mov	r3, r2
    c16a:	00db      	lsls	r3, r3, #3
    c16c:	4413      	add	r3, r2
    c16e:	009b      	lsls	r3, r3, #2
    c170:	461a      	mov	r2, r3
    c172:	693b      	ldr	r3, [r7, #16]
    c174:	4413      	add	r3, r2
    c176:	691b      	ldr	r3, [r3, #16]
    c178:	461a      	mov	r2, r3
    c17a:	6839      	ldr	r1, [r7, #0]
    c17c:	6878      	ldr	r0, [r7, #4]
    c17e:	f7fa faf5 	bl	676c <UTIL1_strcatNum32u>
	      UTIL1_chcat((uint8_t*)pcWriteBuffer, bufSize, (unsigned char)'\t');
    c182:	2209      	movs	r2, #9
    c184:	6839      	ldr	r1, [r7, #0]
    c186:	6878      	ldr	r0, [r7, #4]
    c188:	f7f9 fef6 	bl	5f78 <UTIL1_chcat>
	      UTIL1_strcatNum32u((uint8_t*)pcWriteBuffer, bufSize, pxTaskStatusArray[ x ].usStackHighWaterMark);
    c18c:	68ba      	ldr	r2, [r7, #8]
    c18e:	4613      	mov	r3, r2
    c190:	00db      	lsls	r3, r3, #3
    c192:	4413      	add	r3, r2
    c194:	009b      	lsls	r3, r3, #2
    c196:	461a      	mov	r2, r3
    c198:	693b      	ldr	r3, [r7, #16]
    c19a:	4413      	add	r3, r2
    c19c:	8c1b      	ldrh	r3, [r3, #32]
    c19e:	461a      	mov	r2, r3
    c1a0:	6839      	ldr	r1, [r7, #0]
    c1a2:	6878      	ldr	r0, [r7, #4]
    c1a4:	f7fa fae2 	bl	676c <UTIL1_strcatNum32u>
	      UTIL1_chcat((uint8_t*)pcWriteBuffer, bufSize, (unsigned char)'\t');
    c1a8:	2209      	movs	r2, #9
    c1aa:	6839      	ldr	r1, [r7, #0]
    c1ac:	6878      	ldr	r0, [r7, #4]
    c1ae:	f7f9 fee3 	bl	5f78 <UTIL1_chcat>
	      UTIL1_strcatNum32u((uint8_t*)pcWriteBuffer, bufSize, pxTaskStatusArray[ x ].xTaskNumber);
    c1b2:	68ba      	ldr	r2, [r7, #8]
    c1b4:	4613      	mov	r3, r2
    c1b6:	00db      	lsls	r3, r3, #3
    c1b8:	4413      	add	r3, r2
    c1ba:	009b      	lsls	r3, r3, #2
    c1bc:	461a      	mov	r2, r3
    c1be:	693b      	ldr	r3, [r7, #16]
    c1c0:	4413      	add	r3, r2
    c1c2:	689b      	ldr	r3, [r3, #8]
    c1c4:	461a      	mov	r2, r3
    c1c6:	6839      	ldr	r1, [r7, #0]
    c1c8:	6878      	ldr	r0, [r7, #4]
    c1ca:	f7fa facf 	bl	676c <UTIL1_strcatNum32u>
	      UTIL1_strcat((uint8_t*)pcWriteBuffer, bufSize, (const unsigned char*)"\r\n");
    c1ce:	4a0c      	ldr	r2, [pc, #48]	; (c200 <vTaskList+0x170>)
    c1d0:	6839      	ldr	r1, [r7, #0]
    c1d2:	6878      	ldr	r0, [r7, #4]
    c1d4:	f7f9 fe9c 	bl	5f10 <UTIL1_strcat>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
    c1d8:	68bb      	ldr	r3, [r7, #8]
    c1da:	3301      	adds	r3, #1
    c1dc:	60bb      	str	r3, [r7, #8]
    c1de:	68ba      	ldr	r2, [r7, #8]
    c1e0:	68fb      	ldr	r3, [r7, #12]
    c1e2:	429a      	cmp	r2, r3
    c1e4:	f4ff af78 	bcc.w	c0d8 <vTaskList+0x48>
#endif
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
    c1e8:	6938      	ldr	r0, [r7, #16]
    c1ea:	f7fc fd2d 	bl	8c48 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c1ee:	bf00      	nop
    c1f0:	3718      	adds	r7, #24
    c1f2:	46bd      	mov	sp, r7
    c1f4:	bd80      	pop	{r7, pc}
    c1f6:	bf00      	nop
    c1f8:	20002bac 	.word	0x20002bac
    c1fc:	0000ff48 	.word	0x0000ff48
    c200:	0000ff4c 	.word	0x0000ff4c

0000c204 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    c204:	b480      	push	{r7}
    c206:	b083      	sub	sp, #12
    c208:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    c20a:	4b09      	ldr	r3, [pc, #36]	; (c230 <uxTaskResetEventItemValue+0x2c>)
    c20c:	681b      	ldr	r3, [r3, #0]
    c20e:	699b      	ldr	r3, [r3, #24]
    c210:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c212:	4b07      	ldr	r3, [pc, #28]	; (c230 <uxTaskResetEventItemValue+0x2c>)
    c214:	681b      	ldr	r3, [r3, #0]
    c216:	4a06      	ldr	r2, [pc, #24]	; (c230 <uxTaskResetEventItemValue+0x2c>)
    c218:	6812      	ldr	r2, [r2, #0]
    c21a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    c21c:	f1c2 0206 	rsb	r2, r2, #6
    c220:	619a      	str	r2, [r3, #24]

	return uxReturn;
    c222:	687b      	ldr	r3, [r7, #4]
}
    c224:	4618      	mov	r0, r3
    c226:	370c      	adds	r7, #12
    c228:	46bd      	mov	sp, r7
    c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
    c22e:	4770      	bx	lr
    c230:	20002ad8 	.word	0x20002ad8

0000c234 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    c234:	b480      	push	{r7}
    c236:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    c238:	4b07      	ldr	r3, [pc, #28]	; (c258 <pvTaskIncrementMutexHeldCount+0x24>)
    c23a:	681b      	ldr	r3, [r3, #0]
    c23c:	2b00      	cmp	r3, #0
    c23e:	d004      	beq.n	c24a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    c240:	4b05      	ldr	r3, [pc, #20]	; (c258 <pvTaskIncrementMutexHeldCount+0x24>)
    c242:	681b      	ldr	r3, [r3, #0]
    c244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    c246:	3201      	adds	r2, #1
    c248:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
    c24a:	4b03      	ldr	r3, [pc, #12]	; (c258 <pvTaskIncrementMutexHeldCount+0x24>)
    c24c:	681b      	ldr	r3, [r3, #0]
	}
    c24e:	4618      	mov	r0, r3
    c250:	46bd      	mov	sp, r7
    c252:	f85d 7b04 	ldr.w	r7, [sp], #4
    c256:	4770      	bx	lr
    c258:	20002ad8 	.word	0x20002ad8

0000c25c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    c25c:	b580      	push	{r7, lr}
    c25e:	b084      	sub	sp, #16
    c260:	af00      	add	r7, sp, #0
    c262:	6078      	str	r0, [r7, #4]
    c264:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    c266:	f7fc ffd5 	bl	9214 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    c26a:	4b2a      	ldr	r3, [pc, #168]	; (c314 <ulTaskNotifyTake+0xb8>)
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c270:	2b00      	cmp	r3, #0
    c272:	d114      	bne.n	c29e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    c274:	4b27      	ldr	r3, [pc, #156]	; (c314 <ulTaskNotifyTake+0xb8>)
    c276:	681b      	ldr	r3, [r3, #0]
    c278:	2201      	movs	r2, #1
    c27a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
    c27e:	683b      	ldr	r3, [r7, #0]
    c280:	2b00      	cmp	r3, #0
    c282:	d00c      	beq.n	c29e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    c284:	2101      	movs	r1, #1
    c286:	6838      	ldr	r0, [r7, #0]
    c288:	f000 faba 	bl	c800 <prvAddCurrentTaskToDelayedList>
					traceTASK_NOTIFY_TAKE_BLOCK();
    c28c:	4b21      	ldr	r3, [pc, #132]	; (c314 <ulTaskNotifyTake+0xb8>)
    c28e:	681b      	ldr	r3, [r3, #0]
    c290:	683a      	ldr	r2, [r7, #0]
    c292:	4619      	mov	r1, r3
    c294:	20cb      	movs	r0, #203	; 0xcb
    c296:	f001 f96b 	bl	d570 <prvTraceStoreEvent2>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    c29a:	f7fc fff7 	bl	928c <vPortYieldFromISR>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    c29e:	f7fc ffdf 	bl	9260 <vPortExitCritical>

		taskENTER_CRITICAL();
    c2a2:	f7fc ffb7 	bl	9214 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
    c2a6:	4b1b      	ldr	r3, [pc, #108]	; (c314 <ulTaskNotifyTake+0xb8>)
    c2a8:	681b      	ldr	r3, [r3, #0]
    c2aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c2ae:	b2db      	uxtb	r3, r3
    c2b0:	2b02      	cmp	r3, #2
    c2b2:	d107      	bne.n	c2c4 <ulTaskNotifyTake+0x68>
    c2b4:	4b17      	ldr	r3, [pc, #92]	; (c314 <ulTaskNotifyTake+0xb8>)
    c2b6:	681b      	ldr	r3, [r3, #0]
    c2b8:	683a      	ldr	r2, [r7, #0]
    c2ba:	4619      	mov	r1, r3
    c2bc:	20ca      	movs	r0, #202	; 0xca
    c2be:	f001 f957 	bl	d570 <prvTraceStoreEvent2>
    c2c2:	e006      	b.n	c2d2 <ulTaskNotifyTake+0x76>
    c2c4:	4b13      	ldr	r3, [pc, #76]	; (c314 <ulTaskNotifyTake+0xb8>)
    c2c6:	681b      	ldr	r3, [r3, #0]
    c2c8:	683a      	ldr	r2, [r7, #0]
    c2ca:	4619      	mov	r1, r3
    c2cc:	20cc      	movs	r0, #204	; 0xcc
    c2ce:	f001 f94f 	bl	d570 <prvTraceStoreEvent2>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    c2d2:	4b10      	ldr	r3, [pc, #64]	; (c314 <ulTaskNotifyTake+0xb8>)
    c2d4:	681b      	ldr	r3, [r3, #0]
    c2d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c2d8:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
    c2da:	68fb      	ldr	r3, [r7, #12]
    c2dc:	2b00      	cmp	r3, #0
    c2de:	d00c      	beq.n	c2fa <ulTaskNotifyTake+0x9e>
			{
				if( xClearCountOnExit != pdFALSE )
    c2e0:	687b      	ldr	r3, [r7, #4]
    c2e2:	2b00      	cmp	r3, #0
    c2e4:	d004      	beq.n	c2f0 <ulTaskNotifyTake+0x94>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    c2e6:	4b0b      	ldr	r3, [pc, #44]	; (c314 <ulTaskNotifyTake+0xb8>)
    c2e8:	681b      	ldr	r3, [r3, #0]
    c2ea:	2200      	movs	r2, #0
    c2ec:	655a      	str	r2, [r3, #84]	; 0x54
    c2ee:	e004      	b.n	c2fa <ulTaskNotifyTake+0x9e>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
    c2f0:	4b08      	ldr	r3, [pc, #32]	; (c314 <ulTaskNotifyTake+0xb8>)
    c2f2:	681b      	ldr	r3, [r3, #0]
    c2f4:	68fa      	ldr	r2, [r7, #12]
    c2f6:	3a01      	subs	r2, #1
    c2f8:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    c2fa:	4b06      	ldr	r3, [pc, #24]	; (c314 <ulTaskNotifyTake+0xb8>)
    c2fc:	681b      	ldr	r3, [r3, #0]
    c2fe:	2200      	movs	r2, #0
    c300:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
    c304:	f7fc ffac 	bl	9260 <vPortExitCritical>

		return ulReturn;
    c308:	68fb      	ldr	r3, [r7, #12]
	}
    c30a:	4618      	mov	r0, r3
    c30c:	3710      	adds	r7, #16
    c30e:	46bd      	mov	sp, r7
    c310:	bd80      	pop	{r7, pc}
    c312:	bf00      	nop
    c314:	20002ad8 	.word	0x20002ad8

0000c318 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    c318:	b580      	push	{r7, lr}
    c31a:	b086      	sub	sp, #24
    c31c:	af00      	add	r7, sp, #0
    c31e:	60f8      	str	r0, [r7, #12]
    c320:	60b9      	str	r1, [r7, #8]
    c322:	607a      	str	r2, [r7, #4]
    c324:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    c326:	f7fc ff75 	bl	9214 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    c32a:	4b32      	ldr	r3, [pc, #200]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c32c:	681b      	ldr	r3, [r3, #0]
    c32e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c332:	b2db      	uxtb	r3, r3
    c334:	2b02      	cmp	r3, #2
    c336:	d01b      	beq.n	c370 <xTaskNotifyWait+0x58>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    c338:	4b2e      	ldr	r3, [pc, #184]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c33a:	681b      	ldr	r3, [r3, #0]
    c33c:	6d59      	ldr	r1, [r3, #84]	; 0x54
    c33e:	68fa      	ldr	r2, [r7, #12]
    c340:	43d2      	mvns	r2, r2
    c342:	400a      	ands	r2, r1
    c344:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    c346:	4b2b      	ldr	r3, [pc, #172]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c348:	681b      	ldr	r3, [r3, #0]
    c34a:	2201      	movs	r2, #1
    c34c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
    c350:	683b      	ldr	r3, [r7, #0]
    c352:	2b00      	cmp	r3, #0
    c354:	d00c      	beq.n	c370 <xTaskNotifyWait+0x58>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    c356:	2101      	movs	r1, #1
    c358:	6838      	ldr	r0, [r7, #0]
    c35a:	f000 fa51 	bl	c800 <prvAddCurrentTaskToDelayedList>
					traceTASK_NOTIFY_WAIT_BLOCK();
    c35e:	4b25      	ldr	r3, [pc, #148]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c360:	681b      	ldr	r3, [r3, #0]
    c362:	683a      	ldr	r2, [r7, #0]
    c364:	4619      	mov	r1, r3
    c366:	20ce      	movs	r0, #206	; 0xce
    c368:	f001 f902 	bl	d570 <prvTraceStoreEvent2>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    c36c:	f7fc ff8e 	bl	928c <vPortYieldFromISR>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    c370:	f7fc ff76 	bl	9260 <vPortExitCritical>

		taskENTER_CRITICAL();
    c374:	f7fc ff4e 	bl	9214 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();
    c378:	4b1e      	ldr	r3, [pc, #120]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c37a:	681b      	ldr	r3, [r3, #0]
    c37c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c380:	b2db      	uxtb	r3, r3
    c382:	2b02      	cmp	r3, #2
    c384:	d107      	bne.n	c396 <xTaskNotifyWait+0x7e>
    c386:	4b1b      	ldr	r3, [pc, #108]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c388:	681b      	ldr	r3, [r3, #0]
    c38a:	683a      	ldr	r2, [r7, #0]
    c38c:	4619      	mov	r1, r3
    c38e:	20cd      	movs	r0, #205	; 0xcd
    c390:	f001 f8ee 	bl	d570 <prvTraceStoreEvent2>
    c394:	e006      	b.n	c3a4 <xTaskNotifyWait+0x8c>
    c396:	4b17      	ldr	r3, [pc, #92]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c398:	681b      	ldr	r3, [r3, #0]
    c39a:	683a      	ldr	r2, [r7, #0]
    c39c:	4619      	mov	r1, r3
    c39e:	20cf      	movs	r0, #207	; 0xcf
    c3a0:	f001 f8e6 	bl	d570 <prvTraceStoreEvent2>

			if( pulNotificationValue != NULL )
    c3a4:	687b      	ldr	r3, [r7, #4]
    c3a6:	2b00      	cmp	r3, #0
    c3a8:	d004      	beq.n	c3b4 <xTaskNotifyWait+0x9c>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    c3aa:	4b12      	ldr	r3, [pc, #72]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c3ac:	681b      	ldr	r3, [r3, #0]
    c3ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c3b0:	687b      	ldr	r3, [r7, #4]
    c3b2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    c3b4:	4b0f      	ldr	r3, [pc, #60]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c3b6:	681b      	ldr	r3, [r3, #0]
    c3b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c3bc:	b2db      	uxtb	r3, r3
    c3be:	2b01      	cmp	r3, #1
    c3c0:	d102      	bne.n	c3c8 <xTaskNotifyWait+0xb0>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    c3c2:	2300      	movs	r3, #0
    c3c4:	617b      	str	r3, [r7, #20]
    c3c6:	e008      	b.n	c3da <xTaskNotifyWait+0xc2>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    c3c8:	4b0a      	ldr	r3, [pc, #40]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c3ca:	681b      	ldr	r3, [r3, #0]
    c3cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
    c3ce:	68ba      	ldr	r2, [r7, #8]
    c3d0:	43d2      	mvns	r2, r2
    c3d2:	400a      	ands	r2, r1
    c3d4:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
    c3d6:	2301      	movs	r3, #1
    c3d8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    c3da:	4b06      	ldr	r3, [pc, #24]	; (c3f4 <xTaskNotifyWait+0xdc>)
    c3dc:	681b      	ldr	r3, [r3, #0]
    c3de:	2200      	movs	r2, #0
    c3e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
    c3e4:	f7fc ff3c 	bl	9260 <vPortExitCritical>

		return xReturn;
    c3e8:	697b      	ldr	r3, [r7, #20]
	}
    c3ea:	4618      	mov	r0, r3
    c3ec:	3718      	adds	r7, #24
    c3ee:	46bd      	mov	sp, r7
    c3f0:	bd80      	pop	{r7, pc}
    c3f2:	bf00      	nop
    c3f4:	20002ad8 	.word	0x20002ad8

0000c3f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    c3f8:	b580      	push	{r7, lr}
    c3fa:	b088      	sub	sp, #32
    c3fc:	af00      	add	r7, sp, #0
    c3fe:	60f8      	str	r0, [r7, #12]
    c400:	60b9      	str	r1, [r7, #8]
    c402:	603b      	str	r3, [r7, #0]
    c404:	4613      	mov	r3, r2
    c406:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    c408:	2301      	movs	r3, #1
    c40a:	61fb      	str	r3, [r7, #28]
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
    c40c:	68fb      	ldr	r3, [r7, #12]
    c40e:	2b00      	cmp	r3, #0
    c410:	d104      	bne.n	c41c <xTaskGenericNotify+0x24>
    c412:	f04f 0050 	mov.w	r0, #80	; 0x50
    c416:	f380 8811 	msr	BASEPRI, r0
    c41a:	e7fe      	b.n	c41a <xTaskGenericNotify+0x22>
		pxTCB = ( TCB_t * ) xTaskToNotify;
    c41c:	68fb      	ldr	r3, [r7, #12]
    c41e:	61bb      	str	r3, [r7, #24]

		taskENTER_CRITICAL();
    c420:	f7fc fef8 	bl	9214 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
    c424:	683b      	ldr	r3, [r7, #0]
    c426:	2b00      	cmp	r3, #0
    c428:	d003      	beq.n	c432 <xTaskGenericNotify+0x3a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    c42a:	69bb      	ldr	r3, [r7, #24]
    c42c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c42e:	683b      	ldr	r3, [r7, #0]
    c430:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    c432:	69bb      	ldr	r3, [r7, #24]
    c434:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c438:	75fb      	strb	r3, [r7, #23]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    c43a:	69bb      	ldr	r3, [r7, #24]
    c43c:	2202      	movs	r2, #2
    c43e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
    c442:	79fb      	ldrb	r3, [r7, #7]
    c444:	2b04      	cmp	r3, #4
    c446:	d828      	bhi.n	c49a <xTaskGenericNotify+0xa2>
    c448:	a201      	add	r2, pc, #4	; (adr r2, c450 <xTaskGenericNotify+0x58>)
    c44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c44e:	bf00      	nop
    c450:	0000c49b 	.word	0x0000c49b
    c454:	0000c465 	.word	0x0000c465
    c458:	0000c473 	.word	0x0000c473
    c45c:	0000c47f 	.word	0x0000c47f
    c460:	0000c487 	.word	0x0000c487
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    c464:	69bb      	ldr	r3, [r7, #24]
    c466:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c468:	68bb      	ldr	r3, [r7, #8]
    c46a:	431a      	orrs	r2, r3
    c46c:	69bb      	ldr	r3, [r7, #24]
    c46e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
    c470:	e013      	b.n	c49a <xTaskGenericNotify+0xa2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    c472:	69bb      	ldr	r3, [r7, #24]
    c474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c476:	1c5a      	adds	r2, r3, #1
    c478:	69bb      	ldr	r3, [r7, #24]
    c47a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
    c47c:	e00d      	b.n	c49a <xTaskGenericNotify+0xa2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    c47e:	69bb      	ldr	r3, [r7, #24]
    c480:	68ba      	ldr	r2, [r7, #8]
    c482:	655a      	str	r2, [r3, #84]	; 0x54
					break;
    c484:	e009      	b.n	c49a <xTaskGenericNotify+0xa2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    c486:	7dfb      	ldrb	r3, [r7, #23]
    c488:	2b02      	cmp	r3, #2
    c48a:	d003      	beq.n	c494 <xTaskGenericNotify+0x9c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    c48c:	69bb      	ldr	r3, [r7, #24]
    c48e:	68ba      	ldr	r2, [r7, #8]
    c490:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    c492:	e001      	b.n	c498 <xTaskGenericNotify+0xa0>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    c494:	2300      	movs	r3, #0
    c496:	61fb      	str	r3, [r7, #28]
					}
					break;
    c498:	bf00      	nop
					/* The task is being notified without its notify value being
					updated. */
					break;
			}

			traceTASK_NOTIFY();
    c49a:	68fb      	ldr	r3, [r7, #12]
    c49c:	4619      	mov	r1, r3
    c49e:	20c9      	movs	r0, #201	; 0xc9
    c4a0:	f001 f81a 	bl	d4d8 <prvTraceStoreEvent1>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    c4a4:	7dfb      	ldrb	r3, [r7, #23]
    c4a6:	2b01      	cmp	r3, #1
    c4a8:	d133      	bne.n	c512 <xTaskGenericNotify+0x11a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c4aa:	69bb      	ldr	r3, [r7, #24]
    c4ac:	3304      	adds	r3, #4
    c4ae:	4618      	mov	r0, r3
    c4b0:	f7fc fd90 	bl	8fd4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    c4b4:	69bb      	ldr	r3, [r7, #24]
    c4b6:	4619      	mov	r1, r3
    c4b8:	2030      	movs	r0, #48	; 0x30
    c4ba:	f001 f80d 	bl	d4d8 <prvTraceStoreEvent1>
    c4be:	69bb      	ldr	r3, [r7, #24]
    c4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c4c2:	4b17      	ldr	r3, [pc, #92]	; (c520 <xTaskGenericNotify+0x128>)
    c4c4:	681b      	ldr	r3, [r3, #0]
    c4c6:	429a      	cmp	r2, r3
    c4c8:	d903      	bls.n	c4d2 <xTaskGenericNotify+0xda>
    c4ca:	69bb      	ldr	r3, [r7, #24]
    c4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c4ce:	4a14      	ldr	r2, [pc, #80]	; (c520 <xTaskGenericNotify+0x128>)
    c4d0:	6013      	str	r3, [r2, #0]
    c4d2:	69bb      	ldr	r3, [r7, #24]
    c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c4d6:	4613      	mov	r3, r2
    c4d8:	009b      	lsls	r3, r3, #2
    c4da:	4413      	add	r3, r2
    c4dc:	009b      	lsls	r3, r3, #2
    c4de:	4a11      	ldr	r2, [pc, #68]	; (c524 <xTaskGenericNotify+0x12c>)
    c4e0:	441a      	add	r2, r3
    c4e2:	69bb      	ldr	r3, [r7, #24]
    c4e4:	3304      	adds	r3, #4
    c4e6:	4619      	mov	r1, r3
    c4e8:	4610      	mov	r0, r2
    c4ea:	f7fc fd15 	bl	8f18 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    c4ee:	69bb      	ldr	r3, [r7, #24]
    c4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c4f2:	2b00      	cmp	r3, #0
    c4f4:	d004      	beq.n	c500 <xTaskGenericNotify+0x108>
    c4f6:	f04f 0050 	mov.w	r0, #80	; 0x50
    c4fa:	f380 8811 	msr	BASEPRI, r0
    c4fe:	e7fe      	b.n	c4fe <xTaskGenericNotify+0x106>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    c500:	69bb      	ldr	r3, [r7, #24]
    c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c504:	4b08      	ldr	r3, [pc, #32]	; (c528 <xTaskGenericNotify+0x130>)
    c506:	681b      	ldr	r3, [r3, #0]
    c508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c50a:	429a      	cmp	r2, r3
    c50c:	d901      	bls.n	c512 <xTaskGenericNotify+0x11a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    c50e:	f7fc febd 	bl	928c <vPortYieldFromISR>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    c512:	f7fc fea5 	bl	9260 <vPortExitCritical>

		return xReturn;
    c516:	69fb      	ldr	r3, [r7, #28]
	}
    c518:	4618      	mov	r0, r3
    c51a:	3720      	adds	r7, #32
    c51c:	46bd      	mov	sp, r7
    c51e:	bd80      	pop	{r7, pc}
    c520:	20002bb4 	.word	0x20002bb4
    c524:	20002adc 	.word	0x20002adc
    c528:	20002ad8 	.word	0x20002ad8

0000c52c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    c52c:	b580      	push	{r7, lr}
    c52e:	b088      	sub	sp, #32
    c530:	af00      	add	r7, sp, #0
    c532:	60f8      	str	r0, [r7, #12]
    c534:	60b9      	str	r1, [r7, #8]
    c536:	603b      	str	r3, [r7, #0]
    c538:	4613      	mov	r3, r2
    c53a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    c53c:	2301      	movs	r3, #1
    c53e:	61fb      	str	r3, [r7, #28]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
    c540:	68fb      	ldr	r3, [r7, #12]
    c542:	2b00      	cmp	r3, #0
    c544:	d104      	bne.n	c550 <xTaskGenericNotifyFromISR+0x24>
    c546:	f04f 0050 	mov.w	r0, #80	; 0x50
    c54a:	f380 8811 	msr	BASEPRI, r0
    c54e:	e7fe      	b.n	c54e <xTaskGenericNotifyFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    c550:	f7fc ff24 	bl	939c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
    c554:	68fb      	ldr	r3, [r7, #12]
    c556:	61bb      	str	r3, [r7, #24]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    c558:	2300      	movs	r3, #0
    c55a:	617b      	str	r3, [r7, #20]
    c55c:	f04f 0050 	mov.w	r0, #80	; 0x50
    c560:	f380 8811 	msr	BASEPRI, r0
		{
			if( pulPreviousNotificationValue != NULL )
    c564:	683b      	ldr	r3, [r7, #0]
    c566:	2b00      	cmp	r3, #0
    c568:	d003      	beq.n	c572 <xTaskGenericNotifyFromISR+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    c56a:	69bb      	ldr	r3, [r7, #24]
    c56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c56e:	683b      	ldr	r3, [r7, #0]
    c570:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    c572:	69bb      	ldr	r3, [r7, #24]
    c574:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c578:	74fb      	strb	r3, [r7, #19]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    c57a:	69bb      	ldr	r3, [r7, #24]
    c57c:	2202      	movs	r2, #2
    c57e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
    c582:	79fb      	ldrb	r3, [r7, #7]
    c584:	2b04      	cmp	r3, #4
    c586:	d828      	bhi.n	c5da <xTaskGenericNotifyFromISR+0xae>
    c588:	a201      	add	r2, pc, #4	; (adr r2, c590 <xTaskGenericNotifyFromISR+0x64>)
    c58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c58e:	bf00      	nop
    c590:	0000c5db 	.word	0x0000c5db
    c594:	0000c5a5 	.word	0x0000c5a5
    c598:	0000c5b3 	.word	0x0000c5b3
    c59c:	0000c5bf 	.word	0x0000c5bf
    c5a0:	0000c5c7 	.word	0x0000c5c7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    c5a4:	69bb      	ldr	r3, [r7, #24]
    c5a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    c5a8:	68bb      	ldr	r3, [r7, #8]
    c5aa:	431a      	orrs	r2, r3
    c5ac:	69bb      	ldr	r3, [r7, #24]
    c5ae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
    c5b0:	e013      	b.n	c5da <xTaskGenericNotifyFromISR+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    c5b2:	69bb      	ldr	r3, [r7, #24]
    c5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c5b6:	1c5a      	adds	r2, r3, #1
    c5b8:	69bb      	ldr	r3, [r7, #24]
    c5ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
    c5bc:	e00d      	b.n	c5da <xTaskGenericNotifyFromISR+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    c5be:	69bb      	ldr	r3, [r7, #24]
    c5c0:	68ba      	ldr	r2, [r7, #8]
    c5c2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
    c5c4:	e009      	b.n	c5da <xTaskGenericNotifyFromISR+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    c5c6:	7cfb      	ldrb	r3, [r7, #19]
    c5c8:	2b02      	cmp	r3, #2
    c5ca:	d003      	beq.n	c5d4 <xTaskGenericNotifyFromISR+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
    c5cc:	69bb      	ldr	r3, [r7, #24]
    c5ce:	68ba      	ldr	r2, [r7, #8]
    c5d0:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
    c5d2:	e001      	b.n	c5d8 <xTaskGenericNotifyFromISR+0xac>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    c5d4:	2300      	movs	r3, #0
    c5d6:	61fb      	str	r3, [r7, #28]
					}
					break;
    c5d8:	bf00      	nop
					/* The task is being notified without its notify value being
					updated. */
					break;
			}

			traceTASK_NOTIFY_FROM_ISR();
    c5da:	68fb      	ldr	r3, [r7, #12]
    c5dc:	4619      	mov	r1, r3
    c5de:	20d0      	movs	r0, #208	; 0xd0
    c5e0:	f000 ff7a 	bl	d4d8 <prvTraceStoreEvent1>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    c5e4:	7cfb      	ldrb	r3, [r7, #19]
    c5e6:	2b01      	cmp	r3, #1
    c5e8:	d146      	bne.n	c678 <xTaskGenericNotifyFromISR+0x14c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    c5ea:	69bb      	ldr	r3, [r7, #24]
    c5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d004      	beq.n	c5fc <xTaskGenericNotifyFromISR+0xd0>
    c5f2:	f04f 0050 	mov.w	r0, #80	; 0x50
    c5f6:	f380 8811 	msr	BASEPRI, r0
    c5fa:	e7fe      	b.n	c5fa <xTaskGenericNotifyFromISR+0xce>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c5fc:	4b23      	ldr	r3, [pc, #140]	; (c68c <xTaskGenericNotifyFromISR+0x160>)
    c5fe:	681b      	ldr	r3, [r3, #0]
    c600:	2b00      	cmp	r3, #0
    c602:	d122      	bne.n	c64a <xTaskGenericNotifyFromISR+0x11e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c604:	69bb      	ldr	r3, [r7, #24]
    c606:	3304      	adds	r3, #4
    c608:	4618      	mov	r0, r3
    c60a:	f7fc fce3 	bl	8fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    c60e:	69bb      	ldr	r3, [r7, #24]
    c610:	4619      	mov	r1, r3
    c612:	2030      	movs	r0, #48	; 0x30
    c614:	f000 ff60 	bl	d4d8 <prvTraceStoreEvent1>
    c618:	69bb      	ldr	r3, [r7, #24]
    c61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c61c:	4b1c      	ldr	r3, [pc, #112]	; (c690 <xTaskGenericNotifyFromISR+0x164>)
    c61e:	681b      	ldr	r3, [r3, #0]
    c620:	429a      	cmp	r2, r3
    c622:	d903      	bls.n	c62c <xTaskGenericNotifyFromISR+0x100>
    c624:	69bb      	ldr	r3, [r7, #24]
    c626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c628:	4a19      	ldr	r2, [pc, #100]	; (c690 <xTaskGenericNotifyFromISR+0x164>)
    c62a:	6013      	str	r3, [r2, #0]
    c62c:	69bb      	ldr	r3, [r7, #24]
    c62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c630:	4613      	mov	r3, r2
    c632:	009b      	lsls	r3, r3, #2
    c634:	4413      	add	r3, r2
    c636:	009b      	lsls	r3, r3, #2
    c638:	4a16      	ldr	r2, [pc, #88]	; (c694 <xTaskGenericNotifyFromISR+0x168>)
    c63a:	441a      	add	r2, r3
    c63c:	69bb      	ldr	r3, [r7, #24]
    c63e:	3304      	adds	r3, #4
    c640:	4619      	mov	r1, r3
    c642:	4610      	mov	r0, r2
    c644:	f7fc fc68 	bl	8f18 <vListInsertEnd>
    c648:	e005      	b.n	c656 <xTaskGenericNotifyFromISR+0x12a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    c64a:	69bb      	ldr	r3, [r7, #24]
    c64c:	3318      	adds	r3, #24
    c64e:	4619      	mov	r1, r3
    c650:	4811      	ldr	r0, [pc, #68]	; (c698 <xTaskGenericNotifyFromISR+0x16c>)
    c652:	f7fc fc61 	bl	8f18 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    c656:	69bb      	ldr	r3, [r7, #24]
    c658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c65a:	4b10      	ldr	r3, [pc, #64]	; (c69c <xTaskGenericNotifyFromISR+0x170>)
    c65c:	681b      	ldr	r3, [r3, #0]
    c65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c660:	429a      	cmp	r2, r3
    c662:	d909      	bls.n	c678 <xTaskGenericNotifyFromISR+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c666:	2b00      	cmp	r3, #0
    c668:	d003      	beq.n	c672 <xTaskGenericNotifyFromISR+0x146>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c66c:	2201      	movs	r2, #1
    c66e:	601a      	str	r2, [r3, #0]
    c670:	e002      	b.n	c678 <xTaskGenericNotifyFromISR+0x14c>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    c672:	4b0b      	ldr	r3, [pc, #44]	; (c6a0 <xTaskGenericNotifyFromISR+0x174>)
    c674:	2201      	movs	r2, #1
    c676:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    c678:	f04f 0000 	mov.w	r0, #0
    c67c:	f380 8811 	msr	BASEPRI, r0

		return xReturn;
    c680:	69fb      	ldr	r3, [r7, #28]
	}
    c682:	4618      	mov	r0, r3
    c684:	3720      	adds	r7, #32
    c686:	46bd      	mov	sp, r7
    c688:	bd80      	pop	{r7, pc}
    c68a:	bf00      	nop
    c68c:	20002bd4 	.word	0x20002bd4
    c690:	20002bb4 	.word	0x20002bb4
    c694:	20002adc 	.word	0x20002adc
    c698:	20002b84 	.word	0x20002b84
    c69c:	20002ad8 	.word	0x20002ad8
    c6a0:	20002bc0 	.word	0x20002bc0

0000c6a4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    c6a4:	b580      	push	{r7, lr}
    c6a6:	b086      	sub	sp, #24
    c6a8:	af00      	add	r7, sp, #0
    c6aa:	6078      	str	r0, [r7, #4]
    c6ac:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
    c6ae:	687b      	ldr	r3, [r7, #4]
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	d104      	bne.n	c6be <vTaskNotifyGiveFromISR+0x1a>
    c6b4:	f04f 0050 	mov.w	r0, #80	; 0x50
    c6b8:	f380 8811 	msr	BASEPRI, r0
    c6bc:	e7fe      	b.n	c6bc <vTaskNotifyGiveFromISR+0x18>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    c6be:	f7fc fe6d 	bl	939c <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
    c6c2:	687b      	ldr	r3, [r7, #4]
    c6c4:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    c6c6:	2300      	movs	r3, #0
    c6c8:	613b      	str	r3, [r7, #16]
    c6ca:	f04f 0050 	mov.w	r0, #80	; 0x50
    c6ce:	f380 8811 	msr	BASEPRI, r0
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    c6d2:	697b      	ldr	r3, [r7, #20]
    c6d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c6d8:	73fb      	strb	r3, [r7, #15]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    c6da:	697b      	ldr	r3, [r7, #20]
    c6dc:	2202      	movs	r2, #2
    c6de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    c6e2:	697b      	ldr	r3, [r7, #20]
    c6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    c6e6:	1c5a      	adds	r2, r3, #1
    c6e8:	697b      	ldr	r3, [r7, #20]
    c6ea:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();
    c6ec:	687b      	ldr	r3, [r7, #4]
    c6ee:	4619      	mov	r1, r3
    c6f0:	20d1      	movs	r0, #209	; 0xd1
    c6f2:	f000 fef1 	bl	d4d8 <prvTraceStoreEvent1>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    c6f6:	7bfb      	ldrb	r3, [r7, #15]
    c6f8:	2b01      	cmp	r3, #1
    c6fa:	d146      	bne.n	c78a <vTaskNotifyGiveFromISR+0xe6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
    c6fc:	697b      	ldr	r3, [r7, #20]
    c6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c700:	2b00      	cmp	r3, #0
    c702:	d004      	beq.n	c70e <vTaskNotifyGiveFromISR+0x6a>
    c704:	f04f 0050 	mov.w	r0, #80	; 0x50
    c708:	f380 8811 	msr	BASEPRI, r0
    c70c:	e7fe      	b.n	c70c <vTaskNotifyGiveFromISR+0x68>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c70e:	4b23      	ldr	r3, [pc, #140]	; (c79c <vTaskNotifyGiveFromISR+0xf8>)
    c710:	681b      	ldr	r3, [r3, #0]
    c712:	2b00      	cmp	r3, #0
    c714:	d122      	bne.n	c75c <vTaskNotifyGiveFromISR+0xb8>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c716:	697b      	ldr	r3, [r7, #20]
    c718:	3304      	adds	r3, #4
    c71a:	4618      	mov	r0, r3
    c71c:	f7fc fc5a 	bl	8fd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    c720:	697b      	ldr	r3, [r7, #20]
    c722:	4619      	mov	r1, r3
    c724:	2030      	movs	r0, #48	; 0x30
    c726:	f000 fed7 	bl	d4d8 <prvTraceStoreEvent1>
    c72a:	697b      	ldr	r3, [r7, #20]
    c72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c72e:	4b1c      	ldr	r3, [pc, #112]	; (c7a0 <vTaskNotifyGiveFromISR+0xfc>)
    c730:	681b      	ldr	r3, [r3, #0]
    c732:	429a      	cmp	r2, r3
    c734:	d903      	bls.n	c73e <vTaskNotifyGiveFromISR+0x9a>
    c736:	697b      	ldr	r3, [r7, #20]
    c738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c73a:	4a19      	ldr	r2, [pc, #100]	; (c7a0 <vTaskNotifyGiveFromISR+0xfc>)
    c73c:	6013      	str	r3, [r2, #0]
    c73e:	697b      	ldr	r3, [r7, #20]
    c740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c742:	4613      	mov	r3, r2
    c744:	009b      	lsls	r3, r3, #2
    c746:	4413      	add	r3, r2
    c748:	009b      	lsls	r3, r3, #2
    c74a:	4a16      	ldr	r2, [pc, #88]	; (c7a4 <vTaskNotifyGiveFromISR+0x100>)
    c74c:	441a      	add	r2, r3
    c74e:	697b      	ldr	r3, [r7, #20]
    c750:	3304      	adds	r3, #4
    c752:	4619      	mov	r1, r3
    c754:	4610      	mov	r0, r2
    c756:	f7fc fbdf 	bl	8f18 <vListInsertEnd>
    c75a:	e005      	b.n	c768 <vTaskNotifyGiveFromISR+0xc4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    c75c:	697b      	ldr	r3, [r7, #20]
    c75e:	3318      	adds	r3, #24
    c760:	4619      	mov	r1, r3
    c762:	4811      	ldr	r0, [pc, #68]	; (c7a8 <vTaskNotifyGiveFromISR+0x104>)
    c764:	f7fc fbd8 	bl	8f18 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    c768:	697b      	ldr	r3, [r7, #20]
    c76a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c76c:	4b0f      	ldr	r3, [pc, #60]	; (c7ac <vTaskNotifyGiveFromISR+0x108>)
    c76e:	681b      	ldr	r3, [r3, #0]
    c770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c772:	429a      	cmp	r2, r3
    c774:	d909      	bls.n	c78a <vTaskNotifyGiveFromISR+0xe6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    c776:	683b      	ldr	r3, [r7, #0]
    c778:	2b00      	cmp	r3, #0
    c77a:	d003      	beq.n	c784 <vTaskNotifyGiveFromISR+0xe0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    c77c:	683b      	ldr	r3, [r7, #0]
    c77e:	2201      	movs	r2, #1
    c780:	601a      	str	r2, [r3, #0]
    c782:	e002      	b.n	c78a <vTaskNotifyGiveFromISR+0xe6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    c784:	4b0a      	ldr	r3, [pc, #40]	; (c7b0 <vTaskNotifyGiveFromISR+0x10c>)
    c786:	2201      	movs	r2, #1
    c788:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    c78a:	f04f 0000 	mov.w	r0, #0
    c78e:	f380 8811 	msr	BASEPRI, r0
	}
    c792:	bf00      	nop
    c794:	3718      	adds	r7, #24
    c796:	46bd      	mov	sp, r7
    c798:	bd80      	pop	{r7, pc}
    c79a:	bf00      	nop
    c79c:	20002bd4 	.word	0x20002bd4
    c7a0:	20002bb4 	.word	0x20002bb4
    c7a4:	20002adc 	.word	0x20002adc
    c7a8:	20002b84 	.word	0x20002b84
    c7ac:	20002ad8 	.word	0x20002ad8
    c7b0:	20002bc0 	.word	0x20002bc0

0000c7b4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    c7b4:	b580      	push	{r7, lr}
    c7b6:	b084      	sub	sp, #16
    c7b8:	af00      	add	r7, sp, #0
    c7ba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    c7bc:	687b      	ldr	r3, [r7, #4]
    c7be:	2b00      	cmp	r3, #0
    c7c0:	d102      	bne.n	c7c8 <xTaskNotifyStateClear+0x14>
    c7c2:	4b0e      	ldr	r3, [pc, #56]	; (c7fc <xTaskNotifyStateClear+0x48>)
    c7c4:	681b      	ldr	r3, [r3, #0]
    c7c6:	e000      	b.n	c7ca <xTaskNotifyStateClear+0x16>
    c7c8:	687b      	ldr	r3, [r7, #4]
    c7ca:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
    c7cc:	f7fc fd22 	bl	9214 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    c7d0:	68bb      	ldr	r3, [r7, #8]
    c7d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    c7d6:	b2db      	uxtb	r3, r3
    c7d8:	2b02      	cmp	r3, #2
    c7da:	d106      	bne.n	c7ea <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    c7dc:	68bb      	ldr	r3, [r7, #8]
    c7de:	2200      	movs	r2, #0
    c7e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
    c7e4:	2301      	movs	r3, #1
    c7e6:	60fb      	str	r3, [r7, #12]
    c7e8:	e001      	b.n	c7ee <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
    c7ea:	2300      	movs	r3, #0
    c7ec:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    c7ee:	f7fc fd37 	bl	9260 <vPortExitCritical>

		return xReturn;
    c7f2:	68fb      	ldr	r3, [r7, #12]
	}
    c7f4:	4618      	mov	r0, r3
    c7f6:	3710      	adds	r7, #16
    c7f8:	46bd      	mov	sp, r7
    c7fa:	bd80      	pop	{r7, pc}
    c7fc:	20002ad8 	.word	0x20002ad8

0000c800 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    c800:	b580      	push	{r7, lr}
    c802:	b084      	sub	sp, #16
    c804:	af00      	add	r7, sp, #0
    c806:	6078      	str	r0, [r7, #4]
    c808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    c80a:	4b21      	ldr	r3, [pc, #132]	; (c890 <prvAddCurrentTaskToDelayedList+0x90>)
    c80c:	681b      	ldr	r3, [r3, #0]
    c80e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c810:	4b20      	ldr	r3, [pc, #128]	; (c894 <prvAddCurrentTaskToDelayedList+0x94>)
    c812:	681b      	ldr	r3, [r3, #0]
    c814:	3304      	adds	r3, #4
    c816:	4618      	mov	r0, r3
    c818:	f7fc fbdc 	bl	8fd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    c81c:	687b      	ldr	r3, [r7, #4]
    c81e:	f1b3 3fff 	cmp.w	r3, #4294967295
    c822:	d10a      	bne.n	c83a <prvAddCurrentTaskToDelayedList+0x3a>
    c824:	683b      	ldr	r3, [r7, #0]
    c826:	2b00      	cmp	r3, #0
    c828:	d007      	beq.n	c83a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
		  traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c82a:	4b1a      	ldr	r3, [pc, #104]	; (c894 <prvAddCurrentTaskToDelayedList+0x94>)
    c82c:	681b      	ldr	r3, [r3, #0]
    c82e:	3304      	adds	r3, #4
    c830:	4619      	mov	r1, r3
    c832:	4819      	ldr	r0, [pc, #100]	; (c898 <prvAddCurrentTaskToDelayedList+0x98>)
    c834:	f7fc fb70 	bl	8f18 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c838:	e026      	b.n	c888 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    c83a:	68fa      	ldr	r2, [r7, #12]
    c83c:	687b      	ldr	r3, [r7, #4]
    c83e:	4413      	add	r3, r2
    c840:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    c842:	4b14      	ldr	r3, [pc, #80]	; (c894 <prvAddCurrentTaskToDelayedList+0x94>)
    c844:	681b      	ldr	r3, [r3, #0]
    c846:	68ba      	ldr	r2, [r7, #8]
    c848:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    c84a:	68ba      	ldr	r2, [r7, #8]
    c84c:	68fb      	ldr	r3, [r7, #12]
    c84e:	429a      	cmp	r2, r3
    c850:	d209      	bcs.n	c866 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST(); /* << EST */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c852:	4b12      	ldr	r3, [pc, #72]	; (c89c <prvAddCurrentTaskToDelayedList+0x9c>)
    c854:	681a      	ldr	r2, [r3, #0]
    c856:	4b0f      	ldr	r3, [pc, #60]	; (c894 <prvAddCurrentTaskToDelayedList+0x94>)
    c858:	681b      	ldr	r3, [r3, #0]
    c85a:	3304      	adds	r3, #4
    c85c:	4619      	mov	r1, r3
    c85e:	4610      	mov	r0, r2
    c860:	f7fc fb7e 	bl	8f60 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c864:	e010      	b.n	c888 <prvAddCurrentTaskToDelayedList+0x88>
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				traceMOVED_TASK_TO_DELAYED_LIST(); /* << EST */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c866:	4b0e      	ldr	r3, [pc, #56]	; (c8a0 <prvAddCurrentTaskToDelayedList+0xa0>)
    c868:	681a      	ldr	r2, [r3, #0]
    c86a:	4b0a      	ldr	r3, [pc, #40]	; (c894 <prvAddCurrentTaskToDelayedList+0x94>)
    c86c:	681b      	ldr	r3, [r3, #0]
    c86e:	3304      	adds	r3, #4
    c870:	4619      	mov	r1, r3
    c872:	4610      	mov	r0, r2
    c874:	f7fc fb74 	bl	8f60 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    c878:	4b0a      	ldr	r3, [pc, #40]	; (c8a4 <prvAddCurrentTaskToDelayedList+0xa4>)
    c87a:	681b      	ldr	r3, [r3, #0]
    c87c:	68ba      	ldr	r2, [r7, #8]
    c87e:	429a      	cmp	r2, r3
    c880:	d202      	bcs.n	c888 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    c882:	4a08      	ldr	r2, [pc, #32]	; (c8a4 <prvAddCurrentTaskToDelayedList+0xa4>)
    c884:	68bb      	ldr	r3, [r7, #8]
    c886:	6013      	str	r3, [r2, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c888:	bf00      	nop
    c88a:	3710      	adds	r7, #16
    c88c:	46bd      	mov	sp, r7
    c88e:	bd80      	pop	{r7, pc}
    c890:	20002bb0 	.word	0x20002bb0
    c894:	20002ad8 	.word	0x20002ad8
    c898:	20002b98 	.word	0x20002b98
    c89c:	20002b80 	.word	0x20002b80
    c8a0:	20002b7c 	.word	0x20002b7c
    c8a4:	20002bcc 	.word	0x20002bcc

0000c8a8 <prvCollectTaskHandlesWithinSingleList>:

#endif

#if 1 /* << EST: additional functionality to iterathe through task handles. */
static void prvCollectTaskHandlesWithinSingleList( List_t *pxList,  TaskHandle_t taskHandleArray[], UBaseType_t noTaskHandlesInArray, UBaseType_t *idxCounter)
{
    c8a8:	b480      	push	{r7}
    c8aa:	b089      	sub	sp, #36	; 0x24
    c8ac:	af00      	add	r7, sp, #0
    c8ae:	60f8      	str	r0, [r7, #12]
    c8b0:	60b9      	str	r1, [r7, #8]
    c8b2:	607a      	str	r2, [r7, #4]
    c8b4:	603b      	str	r3, [r7, #0]
  TCB_t *pxNextTCB, *pxFirstTCB;

  /* This function is called with the scheduler suspended. */
  if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
    c8b6:	68fb      	ldr	r3, [r7, #12]
    c8b8:	681b      	ldr	r3, [r3, #0]
    c8ba:	2b00      	cmp	r3, #0
    c8bc:	d040      	beq.n	c940 <prvCollectTaskHandlesWithinSingleList+0x98>
  {
    listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
    c8be:	68fb      	ldr	r3, [r7, #12]
    c8c0:	61fb      	str	r3, [r7, #28]
    c8c2:	69fb      	ldr	r3, [r7, #28]
    c8c4:	685b      	ldr	r3, [r3, #4]
    c8c6:	685a      	ldr	r2, [r3, #4]
    c8c8:	69fb      	ldr	r3, [r7, #28]
    c8ca:	605a      	str	r2, [r3, #4]
    c8cc:	69fb      	ldr	r3, [r7, #28]
    c8ce:	685a      	ldr	r2, [r3, #4]
    c8d0:	69fb      	ldr	r3, [r7, #28]
    c8d2:	3308      	adds	r3, #8
    c8d4:	429a      	cmp	r2, r3
    c8d6:	d104      	bne.n	c8e2 <prvCollectTaskHandlesWithinSingleList+0x3a>
    c8d8:	69fb      	ldr	r3, [r7, #28]
    c8da:	685b      	ldr	r3, [r3, #4]
    c8dc:	685a      	ldr	r2, [r3, #4]
    c8de:	69fb      	ldr	r3, [r7, #28]
    c8e0:	605a      	str	r2, [r3, #4]
    c8e2:	69fb      	ldr	r3, [r7, #28]
    c8e4:	685b      	ldr	r3, [r3, #4]
    c8e6:	68db      	ldr	r3, [r3, #12]
    c8e8:	61bb      	str	r3, [r7, #24]
    do
    {
      listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
    c8ea:	68fb      	ldr	r3, [r7, #12]
    c8ec:	617b      	str	r3, [r7, #20]
    c8ee:	697b      	ldr	r3, [r7, #20]
    c8f0:	685b      	ldr	r3, [r3, #4]
    c8f2:	685a      	ldr	r2, [r3, #4]
    c8f4:	697b      	ldr	r3, [r7, #20]
    c8f6:	605a      	str	r2, [r3, #4]
    c8f8:	697b      	ldr	r3, [r7, #20]
    c8fa:	685a      	ldr	r2, [r3, #4]
    c8fc:	697b      	ldr	r3, [r7, #20]
    c8fe:	3308      	adds	r3, #8
    c900:	429a      	cmp	r2, r3
    c902:	d104      	bne.n	c90e <prvCollectTaskHandlesWithinSingleList+0x66>
    c904:	697b      	ldr	r3, [r7, #20]
    c906:	685b      	ldr	r3, [r3, #4]
    c908:	685a      	ldr	r2, [r3, #4]
    c90a:	697b      	ldr	r3, [r7, #20]
    c90c:	605a      	str	r2, [r3, #4]
    c90e:	697b      	ldr	r3, [r7, #20]
    c910:	685b      	ldr	r3, [r3, #4]
    c912:	68db      	ldr	r3, [r3, #12]
    c914:	613b      	str	r3, [r7, #16]
      if (*idxCounter<noTaskHandlesInArray) {
    c916:	683b      	ldr	r3, [r7, #0]
    c918:	681a      	ldr	r2, [r3, #0]
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	429a      	cmp	r2, r3
    c91e:	d206      	bcs.n	c92e <prvCollectTaskHandlesWithinSingleList+0x86>
        taskHandleArray[*idxCounter] = pxNextTCB;
    c920:	683b      	ldr	r3, [r7, #0]
    c922:	681b      	ldr	r3, [r3, #0]
    c924:	009b      	lsls	r3, r3, #2
    c926:	68ba      	ldr	r2, [r7, #8]
    c928:	4413      	add	r3, r2
    c92a:	693a      	ldr	r2, [r7, #16]
    c92c:	601a      	str	r2, [r3, #0]
      }
      (*idxCounter)++; /* use next entry */
    c92e:	683b      	ldr	r3, [r7, #0]
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	1c5a      	adds	r2, r3, #1
    c934:	683b      	ldr	r3, [r7, #0]
    c936:	601a      	str	r2, [r3, #0]
    } while( pxNextTCB != pxFirstTCB );
    c938:	693a      	ldr	r2, [r7, #16]
    c93a:	69bb      	ldr	r3, [r7, #24]
    c93c:	429a      	cmp	r2, r3
    c93e:	d1d4      	bne.n	c8ea <prvCollectTaskHandlesWithinSingleList+0x42>
  }
  else
  {
    mtCOVERAGE_TEST_MARKER();
  }
}
    c940:	bf00      	nop
    c942:	3724      	adds	r7, #36	; 0x24
    c944:	46bd      	mov	sp, r7
    c946:	f85d 7b04 	ldr.w	r7, [sp], #4
    c94a:	4770      	bx	lr

0000c94c <xGetTaskHandles>:

UBaseType_t xGetTaskHandles(TaskHandle_t pxTaskHandleArray[], UBaseType_t xNofTaskHandlesInArray)
{
    c94c:	b580      	push	{r7, lr}
    c94e:	b084      	sub	sp, #16
    c950:	af00      	add	r7, sp, #0
    c952:	6078      	str	r0, [r7, #4]
    c954:	6039      	str	r1, [r7, #0]
  UBaseType_t uxQueue = configMAX_PRIORITIES;
    c956:	2306      	movs	r3, #6
    c958:	60fb      	str	r3, [r7, #12]
  UBaseType_t idxCounter = 0;
    c95a:	2300      	movs	r3, #0
    c95c:	60bb      	str	r3, [r7, #8]

  vTaskSuspendAll();
    c95e:	f7fe fbdf 	bl	b120 <vTaskSuspendAll>
  {
    /* Search the ready lists. */
    do
    {
      uxQueue--;
    c962:	68fb      	ldr	r3, [r7, #12]
    c964:	3b01      	subs	r3, #1
    c966:	60fb      	str	r3, [r7, #12]
      prvCollectTaskHandlesWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pxTaskHandleArray, xNofTaskHandlesInArray, &idxCounter);
    c968:	68fa      	ldr	r2, [r7, #12]
    c96a:	4613      	mov	r3, r2
    c96c:	009b      	lsls	r3, r3, #2
    c96e:	4413      	add	r3, r2
    c970:	009b      	lsls	r3, r3, #2
    c972:	4a14      	ldr	r2, [pc, #80]	; (c9c4 <xGetTaskHandles+0x78>)
    c974:	1898      	adds	r0, r3, r2
    c976:	f107 0308 	add.w	r3, r7, #8
    c97a:	683a      	ldr	r2, [r7, #0]
    c97c:	6879      	ldr	r1, [r7, #4]
    c97e:	f7ff ff93 	bl	c8a8 <prvCollectTaskHandlesWithinSingleList>
    } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c982:	68fb      	ldr	r3, [r7, #12]
    c984:	2b00      	cmp	r3, #0
    c986:	d1ec      	bne.n	c962 <xGetTaskHandles+0x16>

    /* Search the delayed lists. */
    prvCollectTaskHandlesWithinSingleList( ( List_t * ) pxDelayedTaskList, pxTaskHandleArray, xNofTaskHandlesInArray, &idxCounter);
    c988:	4b0f      	ldr	r3, [pc, #60]	; (c9c8 <xGetTaskHandles+0x7c>)
    c98a:	6818      	ldr	r0, [r3, #0]
    c98c:	f107 0308 	add.w	r3, r7, #8
    c990:	683a      	ldr	r2, [r7, #0]
    c992:	6879      	ldr	r1, [r7, #4]
    c994:	f7ff ff88 	bl	c8a8 <prvCollectTaskHandlesWithinSingleList>
    prvCollectTaskHandlesWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pxTaskHandleArray, xNofTaskHandlesInArray, &idxCounter);
    c998:	4b0c      	ldr	r3, [pc, #48]	; (c9cc <xGetTaskHandles+0x80>)
    c99a:	6818      	ldr	r0, [r3, #0]
    c99c:	f107 0308 	add.w	r3, r7, #8
    c9a0:	683a      	ldr	r2, [r7, #0]
    c9a2:	6879      	ldr	r1, [r7, #4]
    c9a4:	f7ff ff80 	bl	c8a8 <prvCollectTaskHandlesWithinSingleList>
    #if ( INCLUDE_vTaskSuspend == 1 )
    {
      /* Search the suspended list. */
      prvCollectTaskHandlesWithinSingleList( &xSuspendedTaskList, pxTaskHandleArray, xNofTaskHandlesInArray, &idxCounter);
    c9a8:	f107 0308 	add.w	r3, r7, #8
    c9ac:	683a      	ldr	r2, [r7, #0]
    c9ae:	6879      	ldr	r1, [r7, #4]
    c9b0:	4807      	ldr	r0, [pc, #28]	; (c9d0 <xGetTaskHandles+0x84>)
    c9b2:	f7ff ff79 	bl	c8a8 <prvCollectTaskHandlesWithinSingleList>
      /* Search the deleted list. */
      prvCollectTaskHandlesWithinSingleList( &xTasksWaitingTermination, pxTaskHandleArray, xNofTaskHandlesInArray, &idxCounter);
    }
    #endif
  }
  ( void ) xTaskResumeAll();
    c9b6:	f7fe fbc1 	bl	b13c <xTaskResumeAll>
  return idxCounter;
    c9ba:	68bb      	ldr	r3, [r7, #8]
}
    c9bc:	4618      	mov	r0, r3
    c9be:	3710      	adds	r7, #16
    c9c0:	46bd      	mov	sp, r7
    c9c2:	bd80      	pop	{r7, pc}
    c9c4:	20002adc 	.word	0x20002adc
    c9c8:	20002b7c 	.word	0x20002b7c
    c9cc:	20002b80 	.word	0x20002b80
    c9d0:	20002b98 	.word	0x20002b98

0000c9d4 <vTaskGetStackInfo>:

void vTaskGetStackInfo(TaskHandle_t xTask, StackType_t **ppxStart, StackType_t **ppxEnd, StackType_t **ppxTopOfStack, uint8_t *pucStaticallyAllocated)
{
    c9d4:	b580      	push	{r7, lr}
    c9d6:	b086      	sub	sp, #24
    c9d8:	af00      	add	r7, sp, #0
    c9da:	60f8      	str	r0, [r7, #12]
    c9dc:	60b9      	str	r1, [r7, #8]
    c9de:	607a      	str	r2, [r7, #4]
    c9e0:	603b      	str	r3, [r7, #0]
  TCB_t *pxTCB;

  taskENTER_CRITICAL();
    c9e2:	f7fc fc17 	bl	9214 <vPortEnterCritical>
  {
    /* If null is passed in here then it is the priority of the that
    called uxTaskPriorityGet() that is being queried. */
    pxTCB = prvGetTCBFromHandle( xTask );
    c9e6:	68fb      	ldr	r3, [r7, #12]
    c9e8:	2b00      	cmp	r3, #0
    c9ea:	d102      	bne.n	c9f2 <vTaskGetStackInfo+0x1e>
    c9ec:	4b0c      	ldr	r3, [pc, #48]	; (ca20 <vTaskGetStackInfo+0x4c>)
    c9ee:	681b      	ldr	r3, [r3, #0]
    c9f0:	e000      	b.n	c9f4 <vTaskGetStackInfo+0x20>
    c9f2:	68fb      	ldr	r3, [r7, #12]
    c9f4:	617b      	str	r3, [r7, #20]
#if ( portSTACK_GROWTH > 0 )
    *ppxStart = pxTCB->pxStack;
    *ppxEnd = pxTCB->pxEndOfStack;
#elif (configRECORD_STACK_HIGH_ADDRESS == 1)
    *ppxStart = pxTCB->pxEndOfStack;
    c9f6:	697b      	ldr	r3, [r7, #20]
    c9f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    c9fa:	68bb      	ldr	r3, [r7, #8]
    c9fc:	601a      	str	r2, [r3, #0]
    *ppxEnd = pxTCB->pxStack;
    c9fe:	697b      	ldr	r3, [r7, #20]
    ca00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    ca02:	687b      	ldr	r3, [r7, #4]
    ca04:	601a      	str	r2, [r3, #0]
#else /* no stack end information, return a zero size */
    *ppxStart = pxTCB->pxStack;
    *ppxEnd = pxTCB->pxStack;
#endif
    *ppxTopOfStack = (StackType_t*)pxTCB->pxTopOfStack;
    ca06:	697b      	ldr	r3, [r7, #20]
    ca08:	681a      	ldr	r2, [r3, #0]
    ca0a:	683b      	ldr	r3, [r7, #0]
    ca0c:	601a      	str	r2, [r3, #0]
#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
    *pucStaticallyAllocated = pxTCB->ucStaticallyAllocated;
#elif (configSUPPORT_STATIC_ALLOCATION && !configSUPPORT_DYNAMIC_ALLOCATION) /* only static allocation */
    *pucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
#else /* only configSUPPORT_DYNAMIC_ALLOCATION */
    *pucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
    ca0e:	6a3b      	ldr	r3, [r7, #32]
    ca10:	2200      	movs	r2, #0
    ca12:	701a      	strb	r2, [r3, #0]
#endif
  }
  taskEXIT_CRITICAL();
    ca14:	f7fc fc24 	bl	9260 <vPortExitCritical>
}
    ca18:	bf00      	nop
    ca1a:	3718      	adds	r7, #24
    ca1c:	46bd      	mov	sp, r7
    ca1e:	bd80      	pop	{r7, pc}
    ca20:	20002ad8 	.word	0x20002ad8

0000ca24 <vTraceEnable>:
 * Function that enables the tracing and creates the control task. It will halt
 * execution until a Start command has been received if haltUntilStart is true.
 *
 ******************************************************************************/
void vTraceEnable(int startOption)
{
    ca24:	b580      	push	{r7, lr}
    ca26:	b088      	sub	sp, #32
    ca28:	af02      	add	r7, sp, #8
    ca2a:	6078      	str	r0, [r7, #4]
	int bytes = 0;
    ca2c:	2300      	movs	r3, #0
    ca2e:	617b      	str	r3, [r7, #20]
	extern uint32_t RecorderEnabled;
	TracealyzerCommandType msg;
	TRC_STREAM_PORT_INIT();
    ca30:	2302      	movs	r3, #2
    ca32:	9300      	str	r3, [sp, #0]
    ca34:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ca38:	4a31      	ldr	r2, [pc, #196]	; (cb00 <vTraceEnable+0xdc>)
    ca3a:	4932      	ldr	r1, [pc, #200]	; (cb04 <vTraceEnable+0xe0>)
    ca3c:	2002      	movs	r0, #2
    ca3e:	f7f5 f987 	bl	1d50 <SEGGER_RTT_ConfigUpBuffer>
    ca42:	2300      	movs	r3, #0
    ca44:	9300      	str	r3, [sp, #0]
    ca46:	2380      	movs	r3, #128	; 0x80
    ca48:	4a2f      	ldr	r2, [pc, #188]	; (cb08 <vTraceEnable+0xe4>)
    ca4a:	4930      	ldr	r1, [pc, #192]	; (cb0c <vTraceEnable+0xe8>)
    ca4c:	2002      	movs	r0, #2
    ca4e:	f7f5 f9e9 	bl	1e24 <SEGGER_RTT_ConfigDownBuffer>
	
	if (startOption == TRC_START_AWAIT_HOST)
    ca52:	687b      	ldr	r3, [r7, #4]
    ca54:	2b02      	cmp	r3, #2
    ca56:	d12f      	bne.n	cab8 <vTraceEnable+0x94>
	{
		/* We keep trying to read commands until the recorder has been started */
		do
		{
			bytes = 0;
    ca58:	2300      	movs	r3, #0
    ca5a:	617b      	str	r3, [r7, #20]
			TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), &bytes);
    ca5c:	4b2c      	ldr	r3, [pc, #176]	; (cb10 <vTraceEnable+0xec>)
    ca5e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    ca62:	4b2b      	ldr	r3, [pc, #172]	; (cb10 <vTraceEnable+0xec>)
    ca64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    ca68:	429a      	cmp	r2, r3
    ca6a:	d008      	beq.n	ca7e <vTraceEnable+0x5a>
    ca6c:	f107 030c 	add.w	r3, r7, #12
    ca70:	2208      	movs	r2, #8
    ca72:	4619      	mov	r1, r3
    ca74:	2002      	movs	r0, #2
    ca76:	f7f4 fe3b 	bl	16f0 <SEGGER_RTT_Read>
    ca7a:	4603      	mov	r3, r0
    ca7c:	617b      	str	r3, [r7, #20]

			if (bytes == sizeof(TracealyzerCommandType))
    ca7e:	697b      	ldr	r3, [r7, #20]
    ca80:	2b08      	cmp	r3, #8
    ca82:	d114      	bne.n	caae <vTraceEnable+0x8a>
			{
				if (prvIsValidCommand(&msg))
    ca84:	f107 030c 	add.w	r3, r7, #12
    ca88:	4618      	mov	r0, r3
    ca8a:	f001 f923 	bl	dcd4 <prvIsValidCommand>
    ca8e:	4603      	mov	r3, r0
    ca90:	2b00      	cmp	r3, #0
    ca92:	d00c      	beq.n	caae <vTraceEnable+0x8a>
				{
					if (msg.cmdCode == CMD_SET_ACTIVE && msg.param1 == 1)
    ca94:	7b3b      	ldrb	r3, [r7, #12]
    ca96:	2b01      	cmp	r3, #1
    ca98:	d104      	bne.n	caa4 <vTraceEnable+0x80>
    ca9a:	7b7b      	ldrb	r3, [r7, #13]
    ca9c:	2b01      	cmp	r3, #1
    ca9e:	d101      	bne.n	caa4 <vTraceEnable+0x80>
					{
						/* On start, init and reset the timestamping */
						TRC_PORT_SPECIFIC_INIT();
    caa0:	f001 f98e 	bl	ddc0 <prvTraceInitCortexM>
					}
					
					prvProcessCommand(&msg);
    caa4:	f107 030c 	add.w	r3, r7, #12
    caa8:	4618      	mov	r0, r3
    caaa:	f001 f955 	bl	dd58 <prvProcessCommand>
				}
			}
		}
		while (RecorderEnabled == 0);
    caae:	4b19      	ldr	r3, [pc, #100]	; (cb14 <vTraceEnable+0xf0>)
    cab0:	681b      	ldr	r3, [r3, #0]
    cab2:	2b00      	cmp	r3, #0
    cab4:	d0d0      	beq.n	ca58 <vTraceEnable+0x34>
    cab6:	e00e      	b.n	cad6 <vTraceEnable+0xb2>
	}
	else if (startOption == TRC_START)
    cab8:	687b      	ldr	r3, [r7, #4]
    caba:	2b01      	cmp	r3, #1
    cabc:	d109      	bne.n	cad2 <vTraceEnable+0xae>
	{
		/* We start streaming directly - this assumes that the interface is ready! */
		msg.cmdCode = CMD_SET_ACTIVE;
    cabe:	2301      	movs	r3, #1
    cac0:	733b      	strb	r3, [r7, #12]
		msg.param1 = 1;
    cac2:	2301      	movs	r3, #1
    cac4:	737b      	strb	r3, [r7, #13]
		prvProcessCommand(&msg);
    cac6:	f107 030c 	add.w	r3, r7, #12
    caca:	4618      	mov	r0, r3
    cacc:	f001 f944 	bl	dd58 <prvProcessCommand>
    cad0:	e001      	b.n	cad6 <vTraceEnable+0xb2>
	}
	else
	{
		/* Start commands will be processed by the TzCtrl task. */
		TRC_PORT_SPECIFIC_INIT();
    cad2:	f001 f975 	bl	ddc0 <prvTraceInitCortexM>
	}

	trcWarningChannel = xTraceRegisterString("Warnings from Recorder");
    cad6:	4810      	ldr	r0, [pc, #64]	; (cb18 <vTraceEnable+0xf4>)
    cad8:	f000 f930 	bl	cd3c <xTraceRegisterString>
    cadc:	4602      	mov	r2, r0
    cade:	4b0f      	ldr	r3, [pc, #60]	; (cb1c <vTraceEnable+0xf8>)
    cae0:	601a      	str	r2, [r3, #0]
  	/* Creates the TzCtrl task - receives trace commands (start, stop, ...) */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
	HandleTzCtrl = xTaskCreateStatic(TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
	(void)HandleTzCtrl;
#else 
	xTaskCreate( TzCtrl, "TzCtrl", TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl );
    cae2:	4b0f      	ldr	r3, [pc, #60]	; (cb20 <vTraceEnable+0xfc>)
    cae4:	9301      	str	r3, [sp, #4]
    cae6:	2301      	movs	r3, #1
    cae8:	9300      	str	r3, [sp, #0]
    caea:	2300      	movs	r3, #0
    caec:	22c8      	movs	r2, #200	; 0xc8
    caee:	4907      	ldr	r1, [pc, #28]	; (cb0c <vTraceEnable+0xe8>)
    caf0:	480c      	ldr	r0, [pc, #48]	; (cb24 <vTraceEnable+0x100>)
    caf2:	f7fd fe71 	bl	a7d8 <xTaskCreate>
#endif
}
    caf6:	bf00      	nop
    caf8:	3718      	adds	r7, #24
    cafa:	46bd      	mov	sp, r7
    cafc:	bd80      	pop	{r7, pc}
    cafe:	bf00      	nop
    cb00:	20002bf0 	.word	0x20002bf0
    cb04:	0000ff60 	.word	0x0000ff60
    cb08:	20002ff0 	.word	0x20002ff0
    cb0c:	0000ff68 	.word	0x0000ff68
    cb10:	20003518 	.word	0x20003518
    cb14:	20003488 	.word	0x20003488
    cb18:	0000ff70 	.word	0x0000ff70
    cb1c:	200035f0 	.word	0x200035f0
    cb20:	20002bdc 	.word	0x20002bdc
    cb24:	0000ccb1 	.word	0x0000ccb1

0000cb28 <prvTraceOnBegin>:
 * prvTraceOnBegin
 *
 * Called on trace begin.
 ******************************************************************************/
void prvTraceOnBegin()
{
    cb28:	b480      	push	{r7}
    cb2a:	af00      	add	r7, sp, #0
	TRC_STREAM_PORT_ON_TRACE_BEGIN();
}
    cb2c:	bf00      	nop
    cb2e:	46bd      	mov	sp, r7
    cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb34:	4770      	bx	lr
    cb36:	bf00      	nop

0000cb38 <prvTraceOnEnd>:
 * prvTraceOnEnd
 *
 * Called on trace end.
 ******************************************************************************/
void prvTraceOnEnd()
{
    cb38:	b480      	push	{r7}
    cb3a:	af00      	add	r7, sp, #0
	TRC_STREAM_PORT_ON_TRACE_END();
}
    cb3c:	bf00      	nop
    cb3e:	46bd      	mov	sp, r7
    cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
    cb44:	4770      	bx	lr
    cb46:	bf00      	nop

0000cb48 <vTraceSetQueueName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for Queue objects for display in Tracealyzer.
 ******************************************************************************/
void vTraceSetQueueName(void* object, const char* name)
{
    cb48:	b580      	push	{r7, lr}
    cb4a:	b082      	sub	sp, #8
    cb4c:	af00      	add	r7, sp, #0
    cb4e:	6078      	str	r0, [r7, #4]
    cb50:	6039      	str	r1, [r7, #0]
	vTraceStoreKernelObjectName(object, name);
    cb52:	6839      	ldr	r1, [r7, #0]
    cb54:	6878      	ldr	r0, [r7, #4]
    cb56:	f000 f905 	bl	cd64 <vTraceStoreKernelObjectName>
}
    cb5a:	bf00      	nop
    cb5c:	3708      	adds	r7, #8
    cb5e:	46bd      	mov	sp, r7
    cb60:	bd80      	pop	{r7, pc}
    cb62:	bf00      	nop

0000cb64 <vTraceSetSemaphoreName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for Semaphore objects for display in Tracealyzer.
 ******************************************************************************/
void vTraceSetSemaphoreName(void* object, const char* name)
{
    cb64:	b580      	push	{r7, lr}
    cb66:	b082      	sub	sp, #8
    cb68:	af00      	add	r7, sp, #0
    cb6a:	6078      	str	r0, [r7, #4]
    cb6c:	6039      	str	r1, [r7, #0]
	vTraceStoreKernelObjectName(object, name);
    cb6e:	6839      	ldr	r1, [r7, #0]
    cb70:	6878      	ldr	r0, [r7, #4]
    cb72:	f000 f8f7 	bl	cd64 <vTraceStoreKernelObjectName>
}
    cb76:	bf00      	nop
    cb78:	3708      	adds	r7, #8
    cb7a:	46bd      	mov	sp, r7
    cb7c:	bd80      	pop	{r7, pc}
    cb7e:	bf00      	nop

0000cb80 <vTraceSetMutexName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for Semaphore objects for display in Tracealyzer.
 ******************************************************************************/
void vTraceSetMutexName(void* object, const char* name)
{
    cb80:	b580      	push	{r7, lr}
    cb82:	b082      	sub	sp, #8
    cb84:	af00      	add	r7, sp, #0
    cb86:	6078      	str	r0, [r7, #4]
    cb88:	6039      	str	r1, [r7, #0]
	vTraceStoreKernelObjectName(object, name);
    cb8a:	6839      	ldr	r1, [r7, #0]
    cb8c:	6878      	ldr	r0, [r7, #4]
    cb8e:	f000 f8e9 	bl	cd64 <vTraceStoreKernelObjectName>
}
    cb92:	bf00      	nop
    cb94:	3708      	adds	r7, #8
    cb96:	46bd      	mov	sp, r7
    cb98:	bd80      	pop	{r7, pc}
    cb9a:	bf00      	nop

0000cb9c <prvTraceGetCurrentTaskHandle>:
 *
 * Function that returns the handle to the currently executing task.
 *
 ******************************************************************************/
void* prvTraceGetCurrentTaskHandle(void)
{
    cb9c:	b580      	push	{r7, lr}
    cb9e:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
    cba0:	f7ff f96e 	bl	be80 <xTaskGetCurrentTaskHandle>
    cba4:	4603      	mov	r3, r0
}
    cba6:	4618      	mov	r0, r3
    cba8:	bd80      	pop	{r7, pc}
    cbaa:	bf00      	nop

0000cbac <prvIsNewTCB>:
 *
 * Tells if this task is already executing, or if there has been a task-switch.
 * Assumed to be called within a trace hook in kernel context.
 ******************************************************************************/
uint32_t prvIsNewTCB(void* pNewTCB)
{
    cbac:	b480      	push	{r7}
    cbae:	b083      	sub	sp, #12
    cbb0:	af00      	add	r7, sp, #0
    cbb2:	6078      	str	r0, [r7, #4]
	if (pCurrentTCB != pNewTCB)
    cbb4:	4b08      	ldr	r3, [pc, #32]	; (cbd8 <prvIsNewTCB+0x2c>)
    cbb6:	681a      	ldr	r2, [r3, #0]
    cbb8:	687b      	ldr	r3, [r7, #4]
    cbba:	429a      	cmp	r2, r3
    cbbc:	d004      	beq.n	cbc8 <prvIsNewTCB+0x1c>
	{
		pCurrentTCB = pNewTCB;
    cbbe:	4a06      	ldr	r2, [pc, #24]	; (cbd8 <prvIsNewTCB+0x2c>)
    cbc0:	687b      	ldr	r3, [r7, #4]
    cbc2:	6013      	str	r3, [r2, #0]
		return 1;
    cbc4:	2301      	movs	r3, #1
    cbc6:	e000      	b.n	cbca <prvIsNewTCB+0x1e>
	}
	return 0;
    cbc8:	2300      	movs	r3, #0
}
    cbca:	4618      	mov	r0, r3
    cbcc:	370c      	adds	r7, #12
    cbce:	46bd      	mov	sp, r7
    cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cbd4:	4770      	bx	lr
    cbd6:	bf00      	nop
    cbd8:	20002bd8 	.word	0x20002bd8

0000cbdc <prvCheckRecorderStatus>:
 * Called by TzCtrl task periodically (every 100 ms - seems reasonable).
 * Checks a number of diagnostic variables and give warnings as user events,
 * in most cases including a suggested solution.
 ******************************************************************************/
static void prvCheckRecorderStatus(void)
{
    cbdc:	b580      	push	{r7, lr}
    cbde:	af00      	add	r7, sp, #0
	if (NoRoomForSymbol > NoRoomForSymbol_last)
    cbe0:	4b26      	ldr	r3, [pc, #152]	; (cc7c <prvCheckRecorderStatus+0xa0>)
    cbe2:	681a      	ldr	r2, [r3, #0]
    cbe4:	4b26      	ldr	r3, [pc, #152]	; (cc80 <prvCheckRecorderStatus+0xa4>)
    cbe6:	681b      	ldr	r3, [r3, #0]
    cbe8:	429a      	cmp	r2, r3
    cbea:	d90b      	bls.n	cc04 <prvCheckRecorderStatus+0x28>
	{
		vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_TABLE_SLOTS too small. Add %d slots.",
    cbec:	4b25      	ldr	r3, [pc, #148]	; (cc84 <prvCheckRecorderStatus+0xa8>)
    cbee:	6818      	ldr	r0, [r3, #0]
    cbf0:	4b22      	ldr	r3, [pc, #136]	; (cc7c <prvCheckRecorderStatus+0xa0>)
    cbf2:	681b      	ldr	r3, [r3, #0]
    cbf4:	461a      	mov	r2, r3
    cbf6:	4924      	ldr	r1, [pc, #144]	; (cc88 <prvCheckRecorderStatus+0xac>)
    cbf8:	f000 f8f8 	bl	cdec <vTracePrintF>
			NoRoomForSymbol);

		NoRoomForSymbol_last = NoRoomForSymbol;
    cbfc:	4b1f      	ldr	r3, [pc, #124]	; (cc7c <prvCheckRecorderStatus+0xa0>)
    cbfe:	681b      	ldr	r3, [r3, #0]
    cc00:	4a1f      	ldr	r2, [pc, #124]	; (cc80 <prvCheckRecorderStatus+0xa4>)
    cc02:	6013      	str	r3, [r2, #0]
	}

	if (NoRoomForObjectData > NoRoomForObjectData_last)
    cc04:	4b21      	ldr	r3, [pc, #132]	; (cc8c <prvCheckRecorderStatus+0xb0>)
    cc06:	681a      	ldr	r2, [r3, #0]
    cc08:	4b21      	ldr	r3, [pc, #132]	; (cc90 <prvCheckRecorderStatus+0xb4>)
    cc0a:	681b      	ldr	r3, [r3, #0]
    cc0c:	429a      	cmp	r2, r3
    cc0e:	d90b      	bls.n	cc28 <prvCheckRecorderStatus+0x4c>
	{
		vTracePrintF(trcWarningChannel, "TRC_CFG_OBJECT_DATA_SLOTS too small. Add %d slots.",
    cc10:	4b1c      	ldr	r3, [pc, #112]	; (cc84 <prvCheckRecorderStatus+0xa8>)
    cc12:	6818      	ldr	r0, [r3, #0]
    cc14:	4b1d      	ldr	r3, [pc, #116]	; (cc8c <prvCheckRecorderStatus+0xb0>)
    cc16:	681b      	ldr	r3, [r3, #0]
    cc18:	461a      	mov	r2, r3
    cc1a:	491e      	ldr	r1, [pc, #120]	; (cc94 <prvCheckRecorderStatus+0xb8>)
    cc1c:	f000 f8e6 	bl	cdec <vTracePrintF>
			NoRoomForObjectData);

		NoRoomForObjectData_last = NoRoomForObjectData;
    cc20:	4b1a      	ldr	r3, [pc, #104]	; (cc8c <prvCheckRecorderStatus+0xb0>)
    cc22:	681b      	ldr	r3, [r3, #0]
    cc24:	4a1a      	ldr	r2, [pc, #104]	; (cc90 <prvCheckRecorderStatus+0xb4>)
    cc26:	6013      	str	r3, [r2, #0]
	}

	if (LongestSymbolName > LongestSymbolName_last)
    cc28:	4b1b      	ldr	r3, [pc, #108]	; (cc98 <prvCheckRecorderStatus+0xbc>)
    cc2a:	681a      	ldr	r2, [r3, #0]
    cc2c:	4b1b      	ldr	r3, [pc, #108]	; (cc9c <prvCheckRecorderStatus+0xc0>)
    cc2e:	681b      	ldr	r3, [r3, #0]
    cc30:	429a      	cmp	r2, r3
    cc32:	d90f      	bls.n	cc54 <prvCheckRecorderStatus+0x78>
	{
		if (LongestSymbolName > TRC_CFG_SYMBOL_MAX_LENGTH)
    cc34:	4b18      	ldr	r3, [pc, #96]	; (cc98 <prvCheckRecorderStatus+0xbc>)
    cc36:	681b      	ldr	r3, [r3, #0]
    cc38:	2b18      	cmp	r3, #24
    cc3a:	d907      	bls.n	cc4c <prvCheckRecorderStatus+0x70>
		{
			vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_MAX_LENGTH too small. Add %d chars.",
    cc3c:	4b11      	ldr	r3, [pc, #68]	; (cc84 <prvCheckRecorderStatus+0xa8>)
    cc3e:	6818      	ldr	r0, [r3, #0]
    cc40:	4b15      	ldr	r3, [pc, #84]	; (cc98 <prvCheckRecorderStatus+0xbc>)
    cc42:	681b      	ldr	r3, [r3, #0]
    cc44:	461a      	mov	r2, r3
    cc46:	4916      	ldr	r1, [pc, #88]	; (cca0 <prvCheckRecorderStatus+0xc4>)
    cc48:	f000 f8d0 	bl	cdec <vTracePrintF>
				LongestSymbolName);
		}
		LongestSymbolName_last = LongestSymbolName;
    cc4c:	4b12      	ldr	r3, [pc, #72]	; (cc98 <prvCheckRecorderStatus+0xbc>)
    cc4e:	681b      	ldr	r3, [r3, #0]
    cc50:	4a12      	ldr	r2, [pc, #72]	; (cc9c <prvCheckRecorderStatus+0xc0>)
    cc52:	6013      	str	r3, [r2, #0]
	}

	if (MaxBytesTruncated > MaxBytesTruncated_last)
    cc54:	4b13      	ldr	r3, [pc, #76]	; (cca4 <prvCheckRecorderStatus+0xc8>)
    cc56:	681a      	ldr	r2, [r3, #0]
    cc58:	4b13      	ldr	r3, [pc, #76]	; (cca8 <prvCheckRecorderStatus+0xcc>)
    cc5a:	681b      	ldr	r3, [r3, #0]
    cc5c:	429a      	cmp	r2, r3
    cc5e:	d90b      	bls.n	cc78 <prvCheckRecorderStatus+0x9c>

		A PSF event may store maximum 60 bytes payload, including data arguments
		and string characters. For User Events, also the User Event Channel ptr
		must be squeezed in, if a channel is specified. */

		vTracePrintF(trcWarningChannel, "String event too long, up to %d bytes truncated.",
    cc60:	4b08      	ldr	r3, [pc, #32]	; (cc84 <prvCheckRecorderStatus+0xa8>)
    cc62:	6818      	ldr	r0, [r3, #0]
    cc64:	4b0f      	ldr	r3, [pc, #60]	; (cca4 <prvCheckRecorderStatus+0xc8>)
    cc66:	681b      	ldr	r3, [r3, #0]
    cc68:	461a      	mov	r2, r3
    cc6a:	4910      	ldr	r1, [pc, #64]	; (ccac <prvCheckRecorderStatus+0xd0>)
    cc6c:	f000 f8be 	bl	cdec <vTracePrintF>
			MaxBytesTruncated);

		MaxBytesTruncated_last = MaxBytesTruncated;
    cc70:	4b0c      	ldr	r3, [pc, #48]	; (cca4 <prvCheckRecorderStatus+0xc8>)
    cc72:	681b      	ldr	r3, [r3, #0]
    cc74:	4a0c      	ldr	r2, [pc, #48]	; (cca8 <prvCheckRecorderStatus+0xcc>)
    cc76:	6013      	str	r3, [r2, #0]
	}
}
    cc78:	bf00      	nop
    cc7a:	bd80      	pop	{r7, pc}
    cc7c:	200034a4 	.word	0x200034a4
    cc80:	20002be0 	.word	0x20002be0
    cc84:	200035f0 	.word	0x200035f0
    cc88:	0000ff88 	.word	0x0000ff88
    cc8c:	200034a8 	.word	0x200034a8
    cc90:	20002be4 	.word	0x20002be4
    cc94:	0000ffbc 	.word	0x0000ffbc
    cc98:	200034ac 	.word	0x200034ac
    cc9c:	20002be8 	.word	0x20002be8
    cca0:	0000fff0 	.word	0x0000fff0
    cca4:	200034b0 	.word	0x200034b0
    cca8:	20002bec 	.word	0x20002bec
    ccac:	00010024 	.word	0x00010024

0000ccb0 <TzCtrl>:
 *
 * Task for receiving commands from Tracealyzer and for recorder diagnostics.
 *
 ******************************************************************************/
static portTASK_FUNCTION( TzCtrl, pvParameters )
{
    ccb0:	b580      	push	{r7, lr}
    ccb2:	b086      	sub	sp, #24
    ccb4:	af00      	add	r7, sp, #0
    ccb6:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	TracealyzerCommandType msg;
	int bytes = 0;
    ccb8:	2300      	movs	r3, #0
    ccba:	60fb      	str	r3, [r7, #12]
	while (1)
	{
		do
		{
			/* Listen for new commands */
			bytes = 0;
    ccbc:	2300      	movs	r3, #0
    ccbe:	60fb      	str	r3, [r7, #12]
			TRC_STREAM_PORT_READ_DATA(&msg, sizeof(TracealyzerCommandType), &bytes);
    ccc0:	4b15      	ldr	r3, [pc, #84]	; (cd18 <TzCtrl+0x68>)
    ccc2:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
    ccc6:	4b14      	ldr	r3, [pc, #80]	; (cd18 <TzCtrl+0x68>)
    ccc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    cccc:	429a      	cmp	r2, r3
    ccce:	d008      	beq.n	cce2 <TzCtrl+0x32>
    ccd0:	f107 0310 	add.w	r3, r7, #16
    ccd4:	2208      	movs	r2, #8
    ccd6:	4619      	mov	r1, r3
    ccd8:	2002      	movs	r0, #2
    ccda:	f7f4 fd09 	bl	16f0 <SEGGER_RTT_Read>
    ccde:	4603      	mov	r3, r0
    cce0:	60fb      	str	r3, [r7, #12]
			if (bytes == sizeof(TracealyzerCommandType))
    cce2:	68fb      	ldr	r3, [r7, #12]
    cce4:	2b08      	cmp	r3, #8
    cce6:	d10c      	bne.n	cd02 <TzCtrl+0x52>
			{
				if (prvIsValidCommand(&msg))
    cce8:	f107 0310 	add.w	r3, r7, #16
    ccec:	4618      	mov	r0, r3
    ccee:	f000 fff1 	bl	dcd4 <prvIsValidCommand>
    ccf2:	4603      	mov	r3, r0
    ccf4:	2b00      	cmp	r3, #0
    ccf6:	d004      	beq.n	cd02 <TzCtrl+0x52>
				{
					prvProcessCommand(&msg); /* Start or Stop currently... */
    ccf8:	f107 0310 	add.w	r3, r7, #16
    ccfc:	4618      	mov	r0, r3
    ccfe:	f001 f82b 	bl	dd58 <prvProcessCommand>
				}
			}
			
			/* Send periodic data */
			bytes = 0;
    cd02:	2300      	movs	r3, #0
    cd04:	60fb      	str	r3, [r7, #12]
			TRC_STREAM_PORT_PERIODIC_SEND_DATA(&bytes);
			/* If there was data sent (bytes != 0), immediately loop around and do all this again. Otherwise, step out of this loop and sleep for a while. */
		}
		while (bytes != 0);
    cd06:	68fb      	ldr	r3, [r7, #12]
    cd08:	2b00      	cmp	r3, #0
    cd0a:	d1d7      	bne.n	ccbc <TzCtrl+0xc>

		prvCheckRecorderStatus();
    cd0c:	f7ff ff66 	bl	cbdc <prvCheckRecorderStatus>
		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);	/* 10ms */
    cd10:	2001      	movs	r0, #1
    cd12:	f7fd ff19 	bl	ab48 <vTaskDelay>
	}
    cd16:	e7d1      	b.n	ccbc <TzCtrl+0xc>
    cd18:	20003518 	.word	0x20003518

0000cd1c <vTraceInstanceFinishedNow>:
 * Creates an event that ends the current task instance at this very instant.
 * This makes the viewer to splits the current fragment at this point and begin
 * a new actor instance, even if no task-switch has occurred.
 *****************************************************************************/
void vTraceInstanceFinishedNow(void)
{
    cd1c:	b580      	push	{r7, lr}
    cd1e:	af00      	add	r7, sp, #0
	prvTraceStoreEvent0(PSF_EVENT_IFE_DIRECT);
    cd20:	203d      	movs	r0, #61	; 0x3d
    cd22:	f000 fb93 	bl	d44c <prvTraceStoreEvent0>
}
    cd26:	bf00      	nop
    cd28:	bd80      	pop	{r7, pc}
    cd2a:	bf00      	nop

0000cd2c <vTraceInstanceFinishedNext>:
 * If the kernel call is not blocking, the viewer instead splits the current
 * fragment right before the kernel call, which makes this call the first event
 * of the next instance.
 *****************************************************************************/
void vTraceInstanceFinishedNext(void)
{
    cd2c:	b580      	push	{r7, lr}
    cd2e:	af00      	add	r7, sp, #0
	prvTraceStoreEvent0(PSF_EVENT_IFE_NEXT);
    cd30:	203c      	movs	r0, #60	; 0x3c
    cd32:	f000 fb8b 	bl	d44c <prvTraceStoreEvent0>
}
    cd36:	bf00      	nop
    cd38:	bd80      	pop	{r7, pc}
    cd3a:	bf00      	nop

0000cd3c <xTraceRegisterString>:
 * xTraceRegisterString
 *
 * Stores a name for a user event channel, returns the handle.
 ******************************************************************************/
traceString xTraceRegisterString(const char* name)
{
    cd3c:	b580      	push	{r7, lr}
    cd3e:	b082      	sub	sp, #8
    cd40:	af00      	add	r7, sp, #0
    cd42:	6078      	str	r0, [r7, #4]
    prvTraceSaveSymbol((void*)name, name);
    cd44:	6879      	ldr	r1, [r7, #4]
    cd46:	6878      	ldr	r0, [r7, #4]
    cd48:	f000 fe20 	bl	d98c <prvTraceSaveSymbol>

	/* Always save in symbol table, if the recording has not yet started */
	prvTraceStoreStringEvent(1, PSF_EVENT_OBJ_NAME, (traceString)name, (uint32_t)name);
    cd4c:	687b      	ldr	r3, [r7, #4]
    cd4e:	687a      	ldr	r2, [r7, #4]
    cd50:	2103      	movs	r1, #3
    cd52:	2001      	movs	r0, #1
    cd54:	f000 fd1c 	bl	d790 <prvTraceStoreStringEvent>

	return (traceString)name;
    cd58:	687b      	ldr	r3, [r7, #4]
}
    cd5a:	4618      	mov	r0, r3
    cd5c:	3708      	adds	r7, #8
    cd5e:	46bd      	mov	sp, r7
    cd60:	bd80      	pop	{r7, pc}
    cd62:	bf00      	nop

0000cd64 <vTraceStoreKernelObjectName>:
 * Parameter name: the name to set (const string literal)
 *
 * Sets a name for a kernel object for display in Tracealyzer.
 ******************************************************************************/
void vTraceStoreKernelObjectName(void* object, const char* name)
{
    cd64:	b580      	push	{r7, lr}
    cd66:	b082      	sub	sp, #8
    cd68:	af00      	add	r7, sp, #0
    cd6a:	6078      	str	r0, [r7, #4]
    cd6c:	6039      	str	r1, [r7, #0]
	/* Always save in symbol table, if the recording has not yet started */
	prvTraceSaveSymbol(object, name);
    cd6e:	6839      	ldr	r1, [r7, #0]
    cd70:	6878      	ldr	r0, [r7, #4]
    cd72:	f000 fe0b 	bl	d98c <prvTraceSaveSymbol>

	prvTraceStoreStringEvent(1, PSF_EVENT_OBJ_NAME, name, (uint32_t)object);
    cd76:	687b      	ldr	r3, [r7, #4]
    cd78:	683a      	ldr	r2, [r7, #0]
    cd7a:	2103      	movs	r1, #3
    cd7c:	2001      	movs	r0, #1
    cd7e:	f000 fd07 	bl	d790 <prvTraceStoreStringEvent>
}
    cd82:	bf00      	nop
    cd84:	3708      	adds	r7, #8
    cd86:	46bd      	mov	sp, r7
    cd88:	bd80      	pop	{r7, pc}
    cd8a:	bf00      	nop

0000cd8c <vTraceSetFrequency>:
 * Sets the clock rate of the timestamping timer, to give correct timeline.
 * This is normally not required, since the default value (TRC_HWTC_FREQ_HZ)
 * is normally correct. But if using custom setups, this may be necessary.
 *****************************************************************************/
void vTraceSetFrequency(uint32_t frequency)
{
    cd8c:	b480      	push	{r7}
    cd8e:	b083      	sub	sp, #12
    cd90:	af00      	add	r7, sp, #0
    cd92:	6078      	str	r0, [r7, #4]
	timestampFrequency = frequency;
    cd94:	4a04      	ldr	r2, [pc, #16]	; (cda8 <vTraceSetFrequency+0x1c>)
    cd96:	687b      	ldr	r3, [r7, #4]
    cd98:	6013      	str	r3, [r2, #0]
}
    cd9a:	bf00      	nop
    cd9c:	370c      	adds	r7, #12
    cd9e:	46bd      	mov	sp, r7
    cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
    cda4:	4770      	bx	lr
    cda6:	bf00      	nop
    cda8:	20003498 	.word	0x20003498

0000cdac <vTracePrint>:
 *	 ...
 *	 vTracePrint(chn, "Hello World!");
 *
 ******************************************************************************/
void vTracePrint(traceString chn, const char* str)
{
    cdac:	b580      	push	{r7, lr}
    cdae:	b086      	sub	sp, #24
    cdb0:	af02      	add	r7, sp, #8
    cdb2:	6078      	str	r0, [r7, #4]
    cdb4:	6039      	str	r1, [r7, #0]
  va_list vl = { 0 };
    cdb6:	2300      	movs	r3, #0
    cdb8:	60fb      	str	r3, [r7, #12]
  
  if (chn != NULL)
    cdba:	687b      	ldr	r3, [r7, #4]
    cdbc:	2b00      	cmp	r3, #0
    cdbe:	d008      	beq.n	cdd2 <vTracePrint+0x26>
  {
    prvTraceStoreStringEventHelper(0, PSF_EVENT_USER_EVENT + 1, chn, str, vl);
    cdc0:	68fb      	ldr	r3, [r7, #12]
    cdc2:	9300      	str	r3, [sp, #0]
    cdc4:	683b      	ldr	r3, [r7, #0]
    cdc6:	687a      	ldr	r2, [r7, #4]
    cdc8:	2191      	movs	r1, #145	; 0x91
    cdca:	2000      	movs	r0, #0
    cdcc:	f000 fcfa 	bl	d7c4 <prvTraceStoreStringEventHelper>
  }
  else
  {
    prvTraceStoreStringEventHelper(0, PSF_EVENT_USER_EVENT, chn, str, vl);
  }
}
    cdd0:	e007      	b.n	cde2 <vTracePrint+0x36>
  {
    prvTraceStoreStringEventHelper(0, PSF_EVENT_USER_EVENT + 1, chn, str, vl);
  }
  else
  {
    prvTraceStoreStringEventHelper(0, PSF_EVENT_USER_EVENT, chn, str, vl);
    cdd2:	68fb      	ldr	r3, [r7, #12]
    cdd4:	9300      	str	r3, [sp, #0]
    cdd6:	683b      	ldr	r3, [r7, #0]
    cdd8:	687a      	ldr	r2, [r7, #4]
    cdda:	2190      	movs	r1, #144	; 0x90
    cddc:	2000      	movs	r0, #0
    cdde:	f000 fcf1 	bl	d7c4 <prvTraceStoreStringEventHelper>
  }
}
    cde2:	bf00      	nop
    cde4:	3710      	adds	r7, #16
    cde6:	46bd      	mov	sp, r7
    cde8:	bd80      	pop	{r7, pc}
    cdea:	bf00      	nop

0000cdec <vTracePrintF>:
 * one data argument, the maximum string length is 48 chars. If this is exceeded
 * the string is truncated (4 bytes at a time).
 *
 ******************************************************************************/
void vTracePrintF(traceString chn, const char* fmt, ...)
{
    cdec:	b40e      	push	{r1, r2, r3}
    cdee:	b580      	push	{r7, lr}
    cdf0:	b089      	sub	sp, #36	; 0x24
    cdf2:	af02      	add	r7, sp, #8
    cdf4:	6078      	str	r0, [r7, #4]
	va_list vl;
	int i = 0;
    cdf6:	2300      	movs	r3, #0
    cdf8:	617b      	str	r3, [r7, #20]

  int nArgs = 0;
    cdfa:	2300      	movs	r3, #0
    cdfc:	613b      	str	r3, [r7, #16]

  /* Count the number of arguments in the format string (e.g., %d) */
  for (i = 0; (fmt[i] != 0) && (i < 52); i++)
    cdfe:	2300      	movs	r3, #0
    ce00:	617b      	str	r3, [r7, #20]
    ce02:	e015      	b.n	ce30 <vTracePrintF+0x44>
  {
    if (fmt[i] == '%')
    ce04:	697b      	ldr	r3, [r7, #20]
    ce06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce08:	4413      	add	r3, r2
    ce0a:	781b      	ldrb	r3, [r3, #0]
    ce0c:	2b25      	cmp	r3, #37	; 0x25
    ce0e:	d10c      	bne.n	ce2a <vTracePrintF+0x3e>
    {
		if (fmt[i + 1] != '%')
    ce10:	697b      	ldr	r3, [r7, #20]
    ce12:	3301      	adds	r3, #1
    ce14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce16:	4413      	add	r3, r2
    ce18:	781b      	ldrb	r3, [r3, #0]
    ce1a:	2b25      	cmp	r3, #37	; 0x25
    ce1c:	d002      	beq.n	ce24 <vTracePrintF+0x38>
		{
			nArgs++;        /* Found an argument */
    ce1e:	693b      	ldr	r3, [r7, #16]
    ce20:	3301      	adds	r3, #1
    ce22:	613b      	str	r3, [r7, #16]
		}
		
		i++;      /* Move past format specifier or non-argument '%' */
    ce24:	697b      	ldr	r3, [r7, #20]
    ce26:	3301      	adds	r3, #1
    ce28:	617b      	str	r3, [r7, #20]
	int i = 0;

  int nArgs = 0;

  /* Count the number of arguments in the format string (e.g., %d) */
  for (i = 0; (fmt[i] != 0) && (i < 52); i++)
    ce2a:	697b      	ldr	r3, [r7, #20]
    ce2c:	3301      	adds	r3, #1
    ce2e:	617b      	str	r3, [r7, #20]
    ce30:	697b      	ldr	r3, [r7, #20]
    ce32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    ce34:	4413      	add	r3, r2
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	2b00      	cmp	r3, #0
    ce3a:	d002      	beq.n	ce42 <vTracePrintF+0x56>
    ce3c:	697b      	ldr	r3, [r7, #20]
    ce3e:	2b33      	cmp	r3, #51	; 0x33
    ce40:	dde0      	ble.n	ce04 <vTracePrintF+0x18>
		
		i++;      /* Move past format specifier or non-argument '%' */
    }
  }

  va_start(vl, fmt);
    ce42:	f107 0328 	add.w	r3, r7, #40	; 0x28
    ce46:	60fb      	str	r3, [r7, #12]
  if (chn != NULL)
    ce48:	687b      	ldr	r3, [r7, #4]
    ce4a:	2b00      	cmp	r3, #0
    ce4c:	d00b      	beq.n	ce66 <vTracePrintF+0x7a>
  {
    prvTraceStoreStringEventHelper(nArgs, PSF_EVENT_USER_EVENT + nArgs + 1, chn, fmt, vl);
    ce4e:	693b      	ldr	r3, [r7, #16]
    ce50:	b29b      	uxth	r3, r3
    ce52:	3391      	adds	r3, #145	; 0x91
    ce54:	b299      	uxth	r1, r3
    ce56:	68fb      	ldr	r3, [r7, #12]
    ce58:	9300      	str	r3, [sp, #0]
    ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce5c:	687a      	ldr	r2, [r7, #4]
    ce5e:	6938      	ldr	r0, [r7, #16]
    ce60:	f000 fcb0 	bl	d7c4 <prvTraceStoreStringEventHelper>
  else
  {
    prvTraceStoreStringEventHelper(nArgs, PSF_EVENT_USER_EVENT + nArgs, chn, fmt, vl);
  }
  va_end(vl);
}
    ce64:	e00a      	b.n	ce7c <vTracePrintF+0x90>
  {
    prvTraceStoreStringEventHelper(nArgs, PSF_EVENT_USER_EVENT + nArgs + 1, chn, fmt, vl);
  }
  else
  {
    prvTraceStoreStringEventHelper(nArgs, PSF_EVENT_USER_EVENT + nArgs, chn, fmt, vl);
    ce66:	693b      	ldr	r3, [r7, #16]
    ce68:	b29b      	uxth	r3, r3
    ce6a:	3390      	adds	r3, #144	; 0x90
    ce6c:	b299      	uxth	r1, r3
    ce6e:	68fb      	ldr	r3, [r7, #12]
    ce70:	9300      	str	r3, [sp, #0]
    ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ce74:	687a      	ldr	r2, [r7, #4]
    ce76:	6938      	ldr	r0, [r7, #16]
    ce78:	f000 fca4 	bl	d7c4 <prvTraceStoreStringEventHelper>
  }
  va_end(vl);
}
    ce7c:	bf00      	nop
    ce7e:	371c      	adds	r7, #28
    ce80:	46bd      	mov	sp, r7
    ce82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    ce86:	b003      	add	sp, #12
    ce88:	4770      	bx	lr
    ce8a:	bf00      	nop

0000ce8c <xTraceSetISRProperties>:
 *		 vTraceStoreISREnd(0);
 *	 }
 *
 ******************************************************************************/
traceHandle xTraceSetISRProperties(const char* name, uint8_t priority)
{
    ce8c:	b580      	push	{r7, lr}
    ce8e:	b084      	sub	sp, #16
    ce90:	af02      	add	r7, sp, #8
    ce92:	6078      	str	r0, [r7, #4]
    ce94:	460b      	mov	r3, r1
    ce96:	70fb      	strb	r3, [r7, #3]
	/* Save object data in object data table */
	prvTraceSaveObjectData((void*)name, priority);
    ce98:	78fb      	ldrb	r3, [r7, #3]
    ce9a:	4619      	mov	r1, r3
    ce9c:	6878      	ldr	r0, [r7, #4]
    ce9e:	f000 fe5f 	bl	db60 <prvTraceSaveObjectData>
        
	/* Note: "name" is used both as a string argument, and the address as ID */
	prvTraceStoreStringEvent(2, PSF_EVENT_DEFINE_ISR, name, name, priority);
    cea2:	78fb      	ldrb	r3, [r7, #3]
    cea4:	9300      	str	r3, [sp, #0]
    cea6:	687b      	ldr	r3, [r7, #4]
    cea8:	687a      	ldr	r2, [r7, #4]
    ceaa:	2107      	movs	r1, #7
    ceac:	2002      	movs	r0, #2
    ceae:	f000 fc6f 	bl	d790 <prvTraceStoreStringEvent>
        
	/* Always save in symbol table, if the recording has not yet started */
	prvTraceSaveSymbol((void*)name, name);
    ceb2:	6879      	ldr	r1, [r7, #4]
    ceb4:	6878      	ldr	r0, [r7, #4]
    ceb6:	f000 fd69 	bl	d98c <prvTraceSaveSymbol>
	
	return (traceHandle)name;
    ceba:	687b      	ldr	r3, [r7, #4]
}
    cebc:	4618      	mov	r0, r3
    cebe:	3708      	adds	r7, #8
    cec0:	46bd      	mov	sp, r7
    cec2:	bd80      	pop	{r7, pc}

0000cec4 <vTraceStoreISRBegin>:
 *		 vTraceStoreISREnd(0);
 *	 }
 *
 ******************************************************************************/
void vTraceStoreISRBegin(traceHandle handle)
{
    cec4:	b580      	push	{r7, lr}
    cec6:	b088      	sub	sp, #32
    cec8:	af00      	add	r7, sp, #0
    ceca:	6078      	str	r0, [r7, #4]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    cecc:	f3ef 8310 	mrs	r3, PRIMASK
    ced0:	617b      	str	r3, [r7, #20]
    return(result);
    ced2:	697b      	ldr	r3, [r7, #20]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    ced4:	61bb      	str	r3, [r7, #24]
    ced6:	2301      	movs	r3, #1
    ced8:	60fb      	str	r3, [r7, #12]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    ceda:	68fb      	ldr	r3, [r7, #12]
    cedc:	f383 8810 	msr	PRIMASK, r3

	/* We are at the start of a possible ISR chain. 
	No context switches should have been triggered now. */
	if (ISR_stack_index == -1)
    cee0:	4b1a      	ldr	r3, [pc, #104]	; (cf4c <vTraceStoreISRBegin+0x88>)
    cee2:	f993 3000 	ldrsb.w	r3, [r3]
    cee6:	f1b3 3fff 	cmp.w	r3, #4294967295
    ceea:	d102      	bne.n	cef2 <vTraceStoreISRBegin+0x2e>
		isPendingContextSwitch = 0; 
    ceec:	4b18      	ldr	r3, [pc, #96]	; (cf50 <vTraceStoreISRBegin+0x8c>)
    ceee:	2200      	movs	r2, #0
    cef0:	601a      	str	r2, [r3, #0]
	
	if (ISR_stack_index < TRC_CFG_MAX_ISR_NESTING - 1)
    cef2:	4b16      	ldr	r3, [pc, #88]	; (cf4c <vTraceStoreISRBegin+0x88>)
    cef4:	f993 3000 	ldrsb.w	r3, [r3]
    cef8:	2b06      	cmp	r3, #6
    cefa:	dc1b      	bgt.n	cf34 <vTraceStoreISRBegin+0x70>
	{
		ISR_stack_index++;
    cefc:	4b13      	ldr	r3, [pc, #76]	; (cf4c <vTraceStoreISRBegin+0x88>)
    cefe:	f993 3000 	ldrsb.w	r3, [r3]
    cf02:	b2db      	uxtb	r3, r3
    cf04:	3301      	adds	r3, #1
    cf06:	b2db      	uxtb	r3, r3
    cf08:	b25a      	sxtb	r2, r3
    cf0a:	4b10      	ldr	r3, [pc, #64]	; (cf4c <vTraceStoreISRBegin+0x88>)
    cf0c:	701a      	strb	r2, [r3, #0]
		ISR_stack[ISR_stack_index] = (uint32_t)handle;
    cf0e:	4b0f      	ldr	r3, [pc, #60]	; (cf4c <vTraceStoreISRBegin+0x88>)
    cf10:	f993 3000 	ldrsb.w	r3, [r3]
    cf14:	4619      	mov	r1, r3
    cf16:	687b      	ldr	r3, [r7, #4]
    cf18:	4a0e      	ldr	r2, [pc, #56]	; (cf54 <vTraceStoreISRBegin+0x90>)
    cf1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		prvTraceStoreEvent1(PSF_EVENT_ISR_BEGIN, (uint32_t)handle);
    cf1e:	687b      	ldr	r3, [r7, #4]
    cf20:	4619      	mov	r1, r3
    cf22:	2033      	movs	r0, #51	; 0x33
    cf24:	f000 fad8 	bl	d4d8 <prvTraceStoreEvent1>
		TRACE_EXIT_CRITICAL_SECTION();
    cf28:	69bb      	ldr	r3, [r7, #24]
    cf2a:	61fb      	str	r3, [r7, #28]
    cf2c:	69fb      	ldr	r3, [r7, #28]
    cf2e:	f383 8810 	msr	PRIMASK, r3
	else
	{
		TRACE_EXIT_CRITICAL_SECTION();
		prvTraceError(PSF_ERROR_ISR_NESTING_OVERFLOW);
	}
}
    cf32:	e007      	b.n	cf44 <vTraceStoreISRBegin+0x80>
		prvTraceStoreEvent1(PSF_EVENT_ISR_BEGIN, (uint32_t)handle);
		TRACE_EXIT_CRITICAL_SECTION();
	}
	else
	{
		TRACE_EXIT_CRITICAL_SECTION();
    cf34:	69bb      	ldr	r3, [r7, #24]
    cf36:	613b      	str	r3, [r7, #16]
    cf38:	693b      	ldr	r3, [r7, #16]
    cf3a:	f383 8810 	msr	PRIMASK, r3
		prvTraceError(PSF_ERROR_ISR_NESTING_OVERFLOW);
    cf3e:	2002      	movs	r0, #2
    cf40:	f000 ff1e 	bl	dd80 <prvTraceError>
	}
}
    cf44:	bf00      	nop
    cf46:	3720      	adds	r7, #32
    cf48:	46bd      	mov	sp, r7
    cf4a:	bd80      	pop	{r7, pc}
    cf4c:	20000024 	.word	0x20000024
    cf50:	20003490 	.word	0x20003490
    cf54:	20003460 	.word	0x20003460

0000cf58 <vTraceStoreISREnd>:
 *		 vTraceStoreISREnd(0);
 *	 }
 *
 ******************************************************************************/
void vTraceStoreISREnd(int isTaskSwitchRequired)
{
    cf58:	b580      	push	{r7, lr}
    cf5a:	b086      	sub	sp, #24
    cf5c:	af00      	add	r7, sp, #0
    cf5e:	6078      	str	r0, [r7, #4]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    cf60:	f3ef 8310 	mrs	r3, PRIMASK
    cf64:	60fb      	str	r3, [r7, #12]
    return(result);
    cf66:	68fb      	ldr	r3, [r7, #12]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    cf68:	613b      	str	r3, [r7, #16]
    cf6a:	2301      	movs	r3, #1
    cf6c:	60bb      	str	r3, [r7, #8]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    cf6e:	68bb      	ldr	r3, [r7, #8]
    cf70:	f383 8810 	msr	PRIMASK, r3

	/* Is there a pending task-switch? (perhaps from an earlier ISR) */
	isPendingContextSwitch |= isTaskSwitchRequired;
    cf74:	4b1e      	ldr	r3, [pc, #120]	; (cff0 <vTraceStoreISREnd+0x98>)
    cf76:	681a      	ldr	r2, [r3, #0]
    cf78:	687b      	ldr	r3, [r7, #4]
    cf7a:	4313      	orrs	r3, r2
    cf7c:	4a1c      	ldr	r2, [pc, #112]	; (cff0 <vTraceStoreISREnd+0x98>)
    cf7e:	6013      	str	r3, [r2, #0]

	if (ISR_stack_index > 0)
    cf80:	4b1c      	ldr	r3, [pc, #112]	; (cff4 <vTraceStoreISREnd+0x9c>)
    cf82:	f993 3000 	ldrsb.w	r3, [r3]
    cf86:	2b00      	cmp	r3, #0
    cf88:	dd14      	ble.n	cfb4 <vTraceStoreISREnd+0x5c>
	{
		ISR_stack_index--;
    cf8a:	4b1a      	ldr	r3, [pc, #104]	; (cff4 <vTraceStoreISREnd+0x9c>)
    cf8c:	f993 3000 	ldrsb.w	r3, [r3]
    cf90:	b2db      	uxtb	r3, r3
    cf92:	3b01      	subs	r3, #1
    cf94:	b2db      	uxtb	r3, r3
    cf96:	b25a      	sxtb	r2, r3
    cf98:	4b16      	ldr	r3, [pc, #88]	; (cff4 <vTraceStoreISREnd+0x9c>)
    cf9a:	701a      	strb	r2, [r3, #0]

		/* Store return to interrupted ISR (if nested ISRs)*/
		prvTraceStoreEvent1(PSF_EVENT_ISR_RESUME, (uint32_t)ISR_stack[ISR_stack_index]);
    cf9c:	4b15      	ldr	r3, [pc, #84]	; (cff4 <vTraceStoreISREnd+0x9c>)
    cf9e:	f993 3000 	ldrsb.w	r3, [r3]
    cfa2:	461a      	mov	r2, r3
    cfa4:	4b14      	ldr	r3, [pc, #80]	; (cff8 <vTraceStoreISREnd+0xa0>)
    cfa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    cfaa:	4619      	mov	r1, r3
    cfac:	2034      	movs	r0, #52	; 0x34
    cfae:	f000 fa93 	bl	d4d8 <prvTraceStoreEvent1>
    cfb2:	e013      	b.n	cfdc <vTraceStoreISREnd+0x84>
	}
	else
	{
		ISR_stack_index--;
    cfb4:	4b0f      	ldr	r3, [pc, #60]	; (cff4 <vTraceStoreISREnd+0x9c>)
    cfb6:	f993 3000 	ldrsb.w	r3, [r3]
    cfba:	b2db      	uxtb	r3, r3
    cfbc:	3b01      	subs	r3, #1
    cfbe:	b2db      	uxtb	r3, r3
    cfc0:	b25a      	sxtb	r2, r3
    cfc2:	4b0c      	ldr	r3, [pc, #48]	; (cff4 <vTraceStoreISREnd+0x9c>)
    cfc4:	701a      	strb	r2, [r3, #0]
		
		/* Store return to interrupted task, if a task switch has not been triggered by any interrupt */
		if (isPendingContextSwitch == 0)
    cfc6:	4b0a      	ldr	r3, [pc, #40]	; (cff0 <vTraceStoreISREnd+0x98>)
    cfc8:	681b      	ldr	r3, [r3, #0]
    cfca:	2b00      	cmp	r3, #0
    cfcc:	d106      	bne.n	cfdc <vTraceStoreISREnd+0x84>
		{
			prvTraceStoreEvent1(PSF_EVENT_TS_RESUME, (uint32_t)TRACE_GET_CURRENT_TASK());
    cfce:	f7ff fde5 	bl	cb9c <prvTraceGetCurrentTaskHandle>
    cfd2:	4603      	mov	r3, r0
    cfd4:	4619      	mov	r1, r3
    cfd6:	2036      	movs	r0, #54	; 0x36
    cfd8:	f000 fa7e 	bl	d4d8 <prvTraceStoreEvent1>
		}
	}

	TRACE_EXIT_CRITICAL_SECTION();
    cfdc:	693b      	ldr	r3, [r7, #16]
    cfde:	617b      	str	r3, [r7, #20]
    cfe0:	697b      	ldr	r3, [r7, #20]
    cfe2:	f383 8810 	msr	PRIMASK, r3
}
    cfe6:	bf00      	nop
    cfe8:	3718      	adds	r7, #24
    cfea:	46bd      	mov	sp, r7
    cfec:	bd80      	pop	{r7, pc}
    cfee:	bf00      	nop
    cff0:	20003490 	.word	0x20003490
    cff4:	20000024 	.word	0x20000024
    cff8:	20003460 	.word	0x20003460

0000cffc <xTraceGetLastError>:
 * xTraceGetLastError
 *
 * Returns the last error, if any.
 *****************************************************************************/
char* xTraceGetLastError(void)
{
    cffc:	b480      	push	{r7}
    cffe:	af00      	add	r7, sp, #0
	if (NoRoomForSymbol > 0)
    d000:	4b1a      	ldr	r3, [pc, #104]	; (d06c <xTraceGetLastError+0x70>)
    d002:	681b      	ldr	r3, [r3, #0]
    d004:	2b00      	cmp	r3, #0
    d006:	d001      	beq.n	d00c <xTraceGetLastError+0x10>
	{
		return "TRC_CFG_SYMBOL_TABLE_SLOTS too small.";
    d008:	4b19      	ldr	r3, [pc, #100]	; (d070 <xTraceGetLastError+0x74>)
    d00a:	e02a      	b.n	d062 <xTraceGetLastError+0x66>
	}

	if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
    d00c:	4b19      	ldr	r3, [pc, #100]	; (d074 <xTraceGetLastError+0x78>)
    d00e:	681b      	ldr	r3, [r3, #0]
    d010:	2b18      	cmp	r3, #24
    d012:	d901      	bls.n	d018 <xTraceGetLastError+0x1c>
	{
		return "TRC_CFG_SYMBOL_MAX_LENGTH too small.";
    d014:	4b18      	ldr	r3, [pc, #96]	; (d078 <xTraceGetLastError+0x7c>)
    d016:	e024      	b.n	d062 <xTraceGetLastError+0x66>
	}

	if (NoRoomForObjectData > 0)
    d018:	4b18      	ldr	r3, [pc, #96]	; (d07c <xTraceGetLastError+0x80>)
    d01a:	681b      	ldr	r3, [r3, #0]
    d01c:	2b00      	cmp	r3, #0
    d01e:	d001      	beq.n	d024 <xTraceGetLastError+0x28>
	{
		return "TRC_CFG_OBJECT_DATA_SLOTS too small.";
    d020:	4b17      	ldr	r3, [pc, #92]	; (d080 <xTraceGetLastError+0x84>)
    d022:	e01e      	b.n	d062 <xTraceGetLastError+0x66>
	}

	if (MaxBytesTruncated > 0)
    d024:	4b17      	ldr	r3, [pc, #92]	; (d084 <xTraceGetLastError+0x88>)
    d026:	681b      	ldr	r3, [r3, #0]
    d028:	2b00      	cmp	r3, #0
    d02a:	d001      	beq.n	d030 <xTraceGetLastError+0x34>
	{
		return "String or User Event too long.";
    d02c:	4b16      	ldr	r3, [pc, #88]	; (d088 <xTraceGetLastError+0x8c>)
    d02e:	e018      	b.n	d062 <xTraceGetLastError+0x66>
	}

	switch (errorCode)
    d030:	4b16      	ldr	r3, [pc, #88]	; (d08c <xTraceGetLastError+0x90>)
    d032:	681b      	ldr	r3, [r3, #0]
    d034:	3b01      	subs	r3, #1
    d036:	2b03      	cmp	r3, #3
    d038:	d812      	bhi.n	d060 <xTraceGetLastError+0x64>
    d03a:	a201      	add	r2, pc, #4	; (adr r2, d040 <xTraceGetLastError+0x44>)
    d03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d040:	0000d051 	.word	0x0000d051
    d044:	0000d055 	.word	0x0000d055
    d048:	0000d059 	.word	0x0000d059
    d04c:	0000d05d 	.word	0x0000d05d
	{
	case PSF_ERROR_EVENT_CODE_TOO_LARGE:
		return "An invalid event code was used.";
    d050:	4b0f      	ldr	r3, [pc, #60]	; (d090 <xTraceGetLastError+0x94>)
    d052:	e006      	b.n	d062 <xTraceGetLastError+0x66>
	case PSF_ERROR_ISR_NESTING_OVERFLOW:
		return "Too much ISR nesting.";
    d054:	4b0f      	ldr	r3, [pc, #60]	; (d094 <xTraceGetLastError+0x98>)
    d056:	e004      	b.n	d062 <xTraceGetLastError+0x66>
	case PSF_ERROR_DWT_NOT_SUPPORTED:
		return "DWT not supported by this chip.";
    d058:	4b0f      	ldr	r3, [pc, #60]	; (d098 <xTraceGetLastError+0x9c>)
    d05a:	e002      	b.n	d062 <xTraceGetLastError+0x66>
	case PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
		return "DWT_CYCCNT not supported by this chip.";
    d05c:	4b0f      	ldr	r3, [pc, #60]	; (d09c <xTraceGetLastError+0xa0>)
    d05e:	e000      	b.n	d062 <xTraceGetLastError+0x66>
	}
	
	return "";
    d060:	4b0f      	ldr	r3, [pc, #60]	; (d0a0 <xTraceGetLastError+0xa4>)
}
    d062:	4618      	mov	r0, r3
    d064:	46bd      	mov	sp, r7
    d066:	f85d 7b04 	ldr.w	r7, [sp], #4
    d06a:	4770      	bx	lr
    d06c:	200034a4 	.word	0x200034a4
    d070:	00010058 	.word	0x00010058
    d074:	200034ac 	.word	0x200034ac
    d078:	00010080 	.word	0x00010080
    d07c:	200034a8 	.word	0x200034a8
    d080:	000100a8 	.word	0x000100a8
    d084:	200034b0 	.word	0x200034b0
    d088:	000100d0 	.word	0x000100d0
    d08c:	20003480 	.word	0x20003480
    d090:	000100f0 	.word	0x000100f0
    d094:	00010110 	.word	0x00010110
    d098:	00010128 	.word	0x00010128
    d09c:	00010148 	.word	0x00010148
    d0a0:	00010170 	.word	0x00010170

0000d0a4 <vTraceClearError>:
 * vTraceClearError
 *
 * Clears any errors.
 *****************************************************************************/
void vTraceClearError(void)
{
    d0a4:	b480      	push	{r7}
    d0a6:	af00      	add	r7, sp, #0
	NoRoomForSymbol = 0;
    d0a8:	4b09      	ldr	r3, [pc, #36]	; (d0d0 <vTraceClearError+0x2c>)
    d0aa:	2200      	movs	r2, #0
    d0ac:	601a      	str	r2, [r3, #0]
	LongestSymbolName = 0;
    d0ae:	4b09      	ldr	r3, [pc, #36]	; (d0d4 <vTraceClearError+0x30>)
    d0b0:	2200      	movs	r2, #0
    d0b2:	601a      	str	r2, [r3, #0]
	NoRoomForObjectData = 0;
    d0b4:	4b08      	ldr	r3, [pc, #32]	; (d0d8 <vTraceClearError+0x34>)
    d0b6:	2200      	movs	r2, #0
    d0b8:	601a      	str	r2, [r3, #0]
	MaxBytesTruncated = 0;
    d0ba:	4b08      	ldr	r3, [pc, #32]	; (d0dc <vTraceClearError+0x38>)
    d0bc:	2200      	movs	r2, #0
    d0be:	601a      	str	r2, [r3, #0]
	errorCode = PSF_ERROR_NONE;
    d0c0:	4b07      	ldr	r3, [pc, #28]	; (d0e0 <vTraceClearError+0x3c>)
    d0c2:	2200      	movs	r2, #0
    d0c4:	601a      	str	r2, [r3, #0]
}
    d0c6:	bf00      	nop
    d0c8:	46bd      	mov	sp, r7
    d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    d0ce:	4770      	bx	lr
    d0d0:	200034a4 	.word	0x200034a4
    d0d4:	200034ac 	.word	0x200034ac
    d0d8:	200034a8 	.word	0x200034a8
    d0dc:	200034b0 	.word	0x200034b0
    d0e0:	20003480 	.word	0x20003480

0000d0e4 <vTraceStop>:
 * vTraceStop
 *
 * Stops the tracing.
 *****************************************************************************/
void vTraceStop(void)
{
    d0e4:	b580      	push	{r7, lr}
    d0e6:	af00      	add	r7, sp, #0
	prvSetRecorderEnabled(0);
    d0e8:	2000      	movs	r0, #0
    d0ea:	f000 f803 	bl	d0f4 <prvSetRecorderEnabled>
}
    d0ee:	bf00      	nop
    d0f0:	bd80      	pop	{r7, pc}
    d0f2:	bf00      	nop

0000d0f4 <prvSetRecorderEnabled>:
/*** INTERNAL FUNCTIONS *******************************************************/
/******************************************************************************/

/* Internal function for starting/stopping the recorder. */
static void prvSetRecorderEnabled(int isEnabled)
{
    d0f4:	b590      	push	{r4, r7, lr}
    d0f6:	b089      	sub	sp, #36	; 0x24
    d0f8:	af00      	add	r7, sp, #0
    d0fa:	6078      	str	r0, [r7, #4]
	TRACE_ALLOC_CRITICAL_SECTION();

  	void* currentTask = TRACE_GET_CURRENT_TASK();
    d0fc:	f7ff fd4e 	bl	cb9c <prvTraceGetCurrentTaskHandle>
    d100:	61f8      	str	r0, [r7, #28]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d102:	f3ef 8310 	mrs	r3, PRIMASK
    d106:	613b      	str	r3, [r7, #16]
    return(result);
    d108:	693b      	ldr	r3, [r7, #16]

	TRACE_ENTER_CRITICAL_SECTION();
    d10a:	617b      	str	r3, [r7, #20]
    d10c:	2301      	movs	r3, #1
    d10e:	60fb      	str	r3, [r7, #12]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d110:	68fb      	ldr	r3, [r7, #12]
    d112:	f383 8810 	msr	PRIMASK, r3

    RecorderEnabled = isEnabled;
    d116:	687b      	ldr	r3, [r7, #4]
    d118:	4a1a      	ldr	r2, [pc, #104]	; (d184 <prvSetRecorderEnabled+0x90>)
    d11a:	6013      	str	r3, [r2, #0]

    if (currentTask == NULL)
    d11c:	69fb      	ldr	r3, [r7, #28]
    d11e:	2b00      	cmp	r3, #0
    d120:	d101      	bne.n	d126 <prvSetRecorderEnabled+0x32>
    {
		currentTask = (void*)HANDLE_NO_TASK;
    d122:	2302      	movs	r3, #2
    d124:	61fb      	str	r3, [r7, #28]
	}

	if (RecorderEnabled)
    d126:	4b17      	ldr	r3, [pc, #92]	; (d184 <prvSetRecorderEnabled+0x90>)
    d128:	681b      	ldr	r3, [r3, #0]
    d12a:	2b00      	cmp	r3, #0
    d12c:	d01f      	beq.n	d16e <prvSetRecorderEnabled+0x7a>
	{
        prvTraceOnBegin();
    d12e:	f7ff fcfb 	bl	cb28 <prvTraceOnBegin>
        
     	eventCounter = 0;
    d132:	4b15      	ldr	r3, [pc, #84]	; (d188 <prvSetRecorderEnabled+0x94>)
    d134:	2200      	movs	r2, #0
    d136:	601a      	str	r2, [r3, #0]
        ISR_stack_index = -1;
    d138:	4b14      	ldr	r3, [pc, #80]	; (d18c <prvSetRecorderEnabled+0x98>)
    d13a:	22ff      	movs	r2, #255	; 0xff
    d13c:	701a      	strb	r2, [r3, #0]
        prvTraceStoreHeader();
    d13e:	f000 f8b5 	bl	d2ac <prvTraceStoreHeader>
		prvTraceStoreSymbolTable();
    d142:	f000 f829 	bl	d198 <prvTraceStoreSymbolTable>
    	prvTraceStoreObjectDataTable();
    d146:	f000 f86d 	bl	d224 <prvTraceStoreObjectDataTable>
        prvTraceStoreEvent3(	PSF_EVENT_TRACE_START,
    d14a:	4b11      	ldr	r3, [pc, #68]	; (d190 <prvSetRecorderEnabled+0x9c>)
    d14c:	6818      	ldr	r0, [r3, #0]
    d14e:	69fc      	ldr	r4, [r7, #28]
    d150:	4b10      	ldr	r3, [pc, #64]	; (d194 <prvSetRecorderEnabled+0xa0>)
    d152:	681b      	ldr	r3, [r3, #0]
    d154:	1c5a      	adds	r2, r3, #1
    d156:	490f      	ldr	r1, [pc, #60]	; (d194 <prvSetRecorderEnabled+0xa0>)
    d158:	600a      	str	r2, [r1, #0]
    d15a:	4622      	mov	r2, r4
    d15c:	4601      	mov	r1, r0
    d15e:	2001      	movs	r0, #1
    d160:	f000 fa56 	bl	d610 <prvTraceStoreEvent3>
							(uint32_t)TRACE_GET_OS_TICKS(),
							(uint32_t)currentTask,
							SessionCounter++);
        prvTraceStoreTSConfig();
    d164:	f000 fe64 	bl	de30 <prvTraceStoreTSConfig>
		prvTraceStoreWarnings();
    d168:	f000 f8ea 	bl	d340 <prvTraceStoreWarnings>
    d16c:	e001      	b.n	d172 <prvSetRecorderEnabled+0x7e>
	}
    else
    {
        prvTraceOnEnd();
    d16e:	f7ff fce3 	bl	cb38 <prvTraceOnEnd>
    }

	TRACE_EXIT_CRITICAL_SECTION();
    d172:	697b      	ldr	r3, [r7, #20]
    d174:	61bb      	str	r3, [r7, #24]
    d176:	69bb      	ldr	r3, [r7, #24]
    d178:	f383 8810 	msr	PRIMASK, r3
}
    d17c:	bf00      	nop
    d17e:	3724      	adds	r7, #36	; 0x24
    d180:	46bd      	mov	sp, r7
    d182:	bd90      	pop	{r4, r7, pc}
    d184:	20003488 	.word	0x20003488
    d188:	2000348c 	.word	0x2000348c
    d18c:	20000024 	.word	0x20000024
    d190:	20003494 	.word	0x20003494
    d194:	20003484 	.word	0x20003484

0000d198 <prvTraceStoreSymbolTable>:

/* Stores the symbol table on Start */
static void prvTraceStoreSymbolTable()
{
    d198:	b580      	push	{r7, lr}
    d19a:	b08e      	sub	sp, #56	; 0x38
    d19c:	af00      	add	r7, sp, #0
	uint32_t i = 0;
    d19e:	2300      	movs	r3, #0
    d1a0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t j = 0;
    d1a2:	2300      	movs	r3, #0
    d1a4:	633b      	str	r3, [r7, #48]	; 0x30
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d1a6:	f3ef 8310 	mrs	r3, PRIMASK
    d1aa:	627b      	str	r3, [r7, #36]	; 0x24
    return(result);
    d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    d1ae:	62bb      	str	r3, [r7, #40]	; 0x28
    d1b0:	2301      	movs	r3, #1
    d1b2:	61fb      	str	r3, [r7, #28]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d1b4:	69fb      	ldr	r3, [r7, #28]
    d1b6:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d1ba:	4b18      	ldr	r3, [pc, #96]	; (d21c <prvTraceStoreSymbolTable+0x84>)
    d1bc:	681b      	ldr	r3, [r3, #0]
    d1be:	2b00      	cmp	r3, #0
    d1c0:	d022      	beq.n	d208 <prvTraceStoreSymbolTable+0x70>
	{
		for (i = 0; i < sizeof(SymbolTable); i += SYMBOL_TABLE_SLOT_SIZE)
    d1c2:	2300      	movs	r3, #0
    d1c4:	637b      	str	r3, [r7, #52]	; 0x34
    d1c6:	e01b      	b.n	d200 <prvTraceStoreSymbolTable+0x68>
		{
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint8_t, data, SYMBOL_TABLE_SLOT_SIZE);
    d1c8:	463b      	mov	r3, r7
    d1ca:	623b      	str	r3, [r7, #32]
            for (j = 0; j < SYMBOL_TABLE_SLOT_SIZE; j++)
    d1cc:	2300      	movs	r3, #0
    d1ce:	633b      	str	r3, [r7, #48]	; 0x30
    d1d0:	e00b      	b.n	d1ea <prvTraceStoreSymbolTable+0x52>
            {
                    data[j] = symbolTable.pSymbolTableBuffer[i+j];
    d1d2:	6a3a      	ldr	r2, [r7, #32]
    d1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d1d6:	4413      	add	r3, r2
    d1d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d1da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    d1dc:	440a      	add	r2, r1
    d1de:	4910      	ldr	r1, [pc, #64]	; (d220 <prvTraceStoreSymbolTable+0x88>)
    d1e0:	5c8a      	ldrb	r2, [r1, r2]
    d1e2:	701a      	strb	r2, [r3, #0]
	if (RecorderEnabled)
	{
		for (i = 0; i < sizeof(SymbolTable); i += SYMBOL_TABLE_SLOT_SIZE)
		{
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint8_t, data, SYMBOL_TABLE_SLOT_SIZE);
            for (j = 0; j < SYMBOL_TABLE_SLOT_SIZE; j++)
    d1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d1e6:	3301      	adds	r3, #1
    d1e8:	633b      	str	r3, [r7, #48]	; 0x30
    d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d1ec:	2b1b      	cmp	r3, #27
    d1ee:	d9f0      	bls.n	d1d2 <prvTraceStoreSymbolTable+0x3a>
            {
                    data[j] = symbolTable.pSymbolTableBuffer[i+j];
            }
			TRC_STREAM_PORT_COMMIT_EVENT(data, SYMBOL_TABLE_SLOT_SIZE);
    d1f0:	221c      	movs	r2, #28
    d1f2:	6a39      	ldr	r1, [r7, #32]
    d1f4:	2002      	movs	r0, #2
    d1f6:	f7f4 fc19 	bl	1a2c <SEGGER_RTT_Write>

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
		for (i = 0; i < sizeof(SymbolTable); i += SYMBOL_TABLE_SLOT_SIZE)
    d1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d1fc:	331c      	adds	r3, #28
    d1fe:	637b      	str	r3, [r7, #52]	; 0x34
    d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d202:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
    d206:	d3df      	bcc.n	d1c8 <prvTraceStoreSymbolTable+0x30>
                    data[j] = symbolTable.pSymbolTableBuffer[i+j];
            }
			TRC_STREAM_PORT_COMMIT_EVENT(data, SYMBOL_TABLE_SLOT_SIZE);
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d208:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d20a:	62fb      	str	r3, [r7, #44]	; 0x2c
    d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d20e:	f383 8810 	msr	PRIMASK, r3
}
    d212:	bf00      	nop
    d214:	3738      	adds	r7, #56	; 0x38
    d216:	46bd      	mov	sp, r7
    d218:	bd80      	pop	{r7, pc}
    d21a:	bf00      	nop
    d21c:	20003488 	.word	0x20003488
    d220:	20003070 	.word	0x20003070

0000d224 <prvTraceStoreObjectDataTable>:

/* Stores the object table on Start */
static void prvTraceStoreObjectDataTable()
{
    d224:	b580      	push	{r7, lr}
    d226:	b08a      	sub	sp, #40	; 0x28
    d228:	af00      	add	r7, sp, #0
	uint32_t i = 0;
    d22a:	2300      	movs	r3, #0
    d22c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t j = 0;
    d22e:	2300      	movs	r3, #0
    d230:	623b      	str	r3, [r7, #32]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d232:	f3ef 8310 	mrs	r3, PRIMASK
    d236:	617b      	str	r3, [r7, #20]
    return(result);
    d238:	697b      	ldr	r3, [r7, #20]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    d23a:	61bb      	str	r3, [r7, #24]
    d23c:	2301      	movs	r3, #1
    d23e:	60fb      	str	r3, [r7, #12]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d246:	4b17      	ldr	r3, [pc, #92]	; (d2a4 <prvTraceStoreObjectDataTable+0x80>)
    d248:	681b      	ldr	r3, [r3, #0]
    d24a:	2b00      	cmp	r3, #0
    d24c:	d021      	beq.n	d292 <prvTraceStoreObjectDataTable+0x6e>
	{
		for (i = 0; i < sizeof(ObjectDataTable); i += OBJECT_DATA_SLOT_SIZE)
    d24e:	2300      	movs	r3, #0
    d250:	627b      	str	r3, [r7, #36]	; 0x24
    d252:	e01b      	b.n	d28c <prvTraceStoreObjectDataTable+0x68>
        {
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint8_t, data, OBJECT_DATA_SLOT_SIZE);
    d254:	1d3b      	adds	r3, r7, #4
    d256:	613b      	str	r3, [r7, #16]
            for (j = 0; j < OBJECT_DATA_SLOT_SIZE; j++)
    d258:	2300      	movs	r3, #0
    d25a:	623b      	str	r3, [r7, #32]
    d25c:	e00b      	b.n	d276 <prvTraceStoreObjectDataTable+0x52>
            {
                    data[j] = objectDataTable.pObjectDataTableBuffer[i+j];
    d25e:	693a      	ldr	r2, [r7, #16]
    d260:	6a3b      	ldr	r3, [r7, #32]
    d262:	4413      	add	r3, r2
    d264:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d266:	6a3a      	ldr	r2, [r7, #32]
    d268:	440a      	add	r2, r1
    d26a:	490f      	ldr	r1, [pc, #60]	; (d2a8 <prvTraceStoreObjectDataTable+0x84>)
    d26c:	5c8a      	ldrb	r2, [r1, r2]
    d26e:	701a      	strb	r2, [r3, #0]
	if (RecorderEnabled)
	{
		for (i = 0; i < sizeof(ObjectDataTable); i += OBJECT_DATA_SLOT_SIZE)
        {
            TRC_STREAM_PORT_ALLOCATE_EVENT(uint8_t, data, OBJECT_DATA_SLOT_SIZE);
            for (j = 0; j < OBJECT_DATA_SLOT_SIZE; j++)
    d270:	6a3b      	ldr	r3, [r7, #32]
    d272:	3301      	adds	r3, #1
    d274:	623b      	str	r3, [r7, #32]
    d276:	6a3b      	ldr	r3, [r7, #32]
    d278:	2b07      	cmp	r3, #7
    d27a:	d9f0      	bls.n	d25e <prvTraceStoreObjectDataTable+0x3a>
            {
                    data[j] = objectDataTable.pObjectDataTableBuffer[i+j];
            }
            TRC_STREAM_PORT_COMMIT_EVENT(data, OBJECT_DATA_SLOT_SIZE);
    d27c:	2208      	movs	r2, #8
    d27e:	6939      	ldr	r1, [r7, #16]
    d280:	2002      	movs	r0, #2
    d282:	f7f4 fbd3 	bl	1a2c <SEGGER_RTT_Write>

	TRACE_ENTER_CRITICAL_SECTION();

	if (RecorderEnabled)
	{
		for (i = 0; i < sizeof(ObjectDataTable); i += OBJECT_DATA_SLOT_SIZE)
    d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d288:	3308      	adds	r3, #8
    d28a:	627b      	str	r3, [r7, #36]	; 0x24
    d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d28e:	2b9f      	cmp	r3, #159	; 0x9f
    d290:	d9e0      	bls.n	d254 <prvTraceStoreObjectDataTable+0x30>
                    data[j] = objectDataTable.pObjectDataTableBuffer[i+j];
            }
            TRC_STREAM_PORT_COMMIT_EVENT(data, OBJECT_DATA_SLOT_SIZE);
        }
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d292:	69bb      	ldr	r3, [r7, #24]
    d294:	61fb      	str	r3, [r7, #28]
    d296:	69fb      	ldr	r3, [r7, #28]
    d298:	f383 8810 	msr	PRIMASK, r3
}
    d29c:	bf00      	nop
    d29e:	3728      	adds	r7, #40	; 0x28
    d2a0:	46bd      	mov	sp, r7
    d2a2:	bd80      	pop	{r7, pc}
    d2a4:	20003488 	.word	0x20003488
    d2a8:	200033bc 	.word	0x200033bc

0000d2ac <prvTraceStoreHeader>:

/* Stores the header information on Start */
static void prvTraceStoreHeader()
{
    d2ac:	b580      	push	{r7, lr}
    d2ae:	b08a      	sub	sp, #40	; 0x28
    d2b0:	af00      	add	r7, sp, #0
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d2b2:	f3ef 8310 	mrs	r3, PRIMASK
    d2b6:	61fb      	str	r3, [r7, #28]
    return(result);
    d2b8:	69fb      	ldr	r3, [r7, #28]
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    d2ba:	623b      	str	r3, [r7, #32]
    d2bc:	2301      	movs	r3, #1
    d2be:	617b      	str	r3, [r7, #20]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d2c0:	697b      	ldr	r3, [r7, #20]
    d2c2:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d2c6:	4b1b      	ldr	r3, [pc, #108]	; (d334 <prvTraceStoreHeader+0x88>)
    d2c8:	681b      	ldr	r3, [r3, #0]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	d028      	beq.n	d320 <prvTraceStoreHeader+0x74>
	{
	  	TRC_STREAM_PORT_ALLOCATE_EVENT(PSFHeaderInfo, header, sizeof(PSFHeaderInfo));
    d2ce:	463b      	mov	r3, r7
    d2d0:	61bb      	str	r3, [r7, #24]
		if (header != NULL)
    d2d2:	69bb      	ldr	r3, [r7, #24]
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d023      	beq.n	d320 <prvTraceStoreHeader+0x74>
		{
			header->psf = PSFEndianessIdentifier;
    d2d8:	4b17      	ldr	r3, [pc, #92]	; (d338 <prvTraceStoreHeader+0x8c>)
    d2da:	681a      	ldr	r2, [r3, #0]
    d2dc:	69bb      	ldr	r3, [r7, #24]
    d2de:	601a      	str	r2, [r3, #0]
			header->version = FormatVersion;
    d2e0:	4b16      	ldr	r3, [pc, #88]	; (d33c <prvTraceStoreHeader+0x90>)
    d2e2:	881a      	ldrh	r2, [r3, #0]
    d2e4:	69bb      	ldr	r3, [r7, #24]
    d2e6:	809a      	strh	r2, [r3, #4]
			header->platform = TRACE_KERNEL_VERSION;
    d2e8:	69bb      	ldr	r3, [r7, #24]
    d2ea:	f641 22a1 	movw	r2, #6817	; 0x1aa1
    d2ee:	80da      	strh	r2, [r3, #6]
            header->options = 0;
    d2f0:	69bb      	ldr	r3, [r7, #24]
    d2f2:	2200      	movs	r2, #0
    d2f4:	609a      	str	r2, [r3, #8]
            /* Lowest bit used for TRC_IRQ_PRIORITY_ORDER */
            header->options = header->options | (TRC_IRQ_PRIORITY_ORDER << 0);
    d2f6:	69bb      	ldr	r3, [r7, #24]
    d2f8:	689a      	ldr	r2, [r3, #8]
    d2fa:	69bb      	ldr	r3, [r7, #24]
    d2fc:	609a      	str	r2, [r3, #8]
			header->symbolSize = SYMBOL_TABLE_SLOT_SIZE;
    d2fe:	69bb      	ldr	r3, [r7, #24]
    d300:	221c      	movs	r2, #28
    d302:	819a      	strh	r2, [r3, #12]
			header->symbolCount = (TRC_CFG_SYMBOL_TABLE_SLOTS);
    d304:	69bb      	ldr	r3, [r7, #24]
    d306:	221e      	movs	r2, #30
    d308:	81da      	strh	r2, [r3, #14]
			header->objectDataSize = 8;
    d30a:	69bb      	ldr	r3, [r7, #24]
    d30c:	2208      	movs	r2, #8
    d30e:	821a      	strh	r2, [r3, #16]
			header->objectDataCount = TRC_CFG_OBJECT_DATA_SLOTS;
    d310:	69bb      	ldr	r3, [r7, #24]
    d312:	2214      	movs	r2, #20
    d314:	825a      	strh	r2, [r3, #18]
			TRC_STREAM_PORT_COMMIT_EVENT(header, sizeof(PSFHeaderInfo));
    d316:	2214      	movs	r2, #20
    d318:	69b9      	ldr	r1, [r7, #24]
    d31a:	2002      	movs	r0, #2
    d31c:	f7f4 fb86 	bl	1a2c <SEGGER_RTT_Write>
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d320:	6a3b      	ldr	r3, [r7, #32]
    d322:	627b      	str	r3, [r7, #36]	; 0x24
    d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d326:	f383 8810 	msr	PRIMASK, r3
}
    d32a:	bf00      	nop
    d32c:	3728      	adds	r7, #40	; 0x28
    d32e:	46bd      	mov	sp, r7
    d330:	bd80      	pop	{r7, pc}
    d332:	bf00      	nop
    d334:	20003488 	.word	0x20003488
    d338:	20000028 	.word	0x20000028
    d33c:	2000002c 	.word	0x2000002c

0000d340 <prvTraceStoreWarnings>:

/* Store the current warnings */
static void prvTraceStoreWarnings()
{
    d340:	b580      	push	{r7, lr}
    d342:	b084      	sub	sp, #16
    d344:	af00      	add	r7, sp, #0
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d346:	f3ef 8310 	mrs	r3, PRIMASK
    d34a:	607b      	str	r3, [r7, #4]
    return(result);
    d34c:	687b      	ldr	r3, [r7, #4]
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    d34e:	60bb      	str	r3, [r7, #8]
    d350:	2301      	movs	r3, #1
    d352:	603b      	str	r3, [r7, #0]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d354:	683b      	ldr	r3, [r7, #0]
    d356:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d35a:	4b2f      	ldr	r3, [pc, #188]	; (d418 <prvTraceStoreWarnings+0xd8>)
    d35c:	681b      	ldr	r3, [r3, #0]
    d35e:	2b00      	cmp	r3, #0
    d360:	d050      	beq.n	d404 <prvTraceStoreWarnings+0xc4>
	{
		if (NoRoomForSymbol > 0)
    d362:	4b2e      	ldr	r3, [pc, #184]	; (d41c <prvTraceStoreWarnings+0xdc>)
    d364:	681b      	ldr	r3, [r3, #0]
    d366:	2b00      	cmp	r3, #0
    d368:	d007      	beq.n	d37a <prvTraceStoreWarnings+0x3a>
		{
			vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_TABLE_SLOTS too small. Add %d slots.", NoRoomForSymbol);
    d36a:	4b2d      	ldr	r3, [pc, #180]	; (d420 <prvTraceStoreWarnings+0xe0>)
    d36c:	6818      	ldr	r0, [r3, #0]
    d36e:	4b2b      	ldr	r3, [pc, #172]	; (d41c <prvTraceStoreWarnings+0xdc>)
    d370:	681b      	ldr	r3, [r3, #0]
    d372:	461a      	mov	r2, r3
    d374:	492b      	ldr	r1, [pc, #172]	; (d424 <prvTraceStoreWarnings+0xe4>)
    d376:	f7ff fd39 	bl	cdec <vTracePrintF>
		}

		if (LongestSymbolName > 0)
    d37a:	4b2b      	ldr	r3, [pc, #172]	; (d428 <prvTraceStoreWarnings+0xe8>)
    d37c:	681b      	ldr	r3, [r3, #0]
    d37e:	2b00      	cmp	r3, #0
    d380:	d00c      	beq.n	d39c <prvTraceStoreWarnings+0x5c>
		{
			if (LongestSymbolName > (TRC_CFG_SYMBOL_MAX_LENGTH))
    d382:	4b29      	ldr	r3, [pc, #164]	; (d428 <prvTraceStoreWarnings+0xe8>)
    d384:	681b      	ldr	r3, [r3, #0]
    d386:	2b18      	cmp	r3, #24
    d388:	d908      	bls.n	d39c <prvTraceStoreWarnings+0x5c>
			{
				vTracePrintF(trcWarningChannel, "TRC_CFG_SYMBOL_MAX_LENGTH too small. Add %d chars.", LongestSymbolName - (TRC_CFG_SYMBOL_MAX_LENGTH));
    d38a:	4b25      	ldr	r3, [pc, #148]	; (d420 <prvTraceStoreWarnings+0xe0>)
    d38c:	6818      	ldr	r0, [r3, #0]
    d38e:	4b26      	ldr	r3, [pc, #152]	; (d428 <prvTraceStoreWarnings+0xe8>)
    d390:	681b      	ldr	r3, [r3, #0]
    d392:	3b18      	subs	r3, #24
    d394:	461a      	mov	r2, r3
    d396:	4925      	ldr	r1, [pc, #148]	; (d42c <prvTraceStoreWarnings+0xec>)
    d398:	f7ff fd28 	bl	cdec <vTracePrintF>
			}
		}

		if (NoRoomForObjectData > 0)
    d39c:	4b24      	ldr	r3, [pc, #144]	; (d430 <prvTraceStoreWarnings+0xf0>)
    d39e:	681b      	ldr	r3, [r3, #0]
    d3a0:	2b00      	cmp	r3, #0
    d3a2:	d005      	beq.n	d3b0 <prvTraceStoreWarnings+0x70>
		{
			/* We don't know how many objects we actually need to make room for since NoRoomForObjectData can be increased multiple times for the same object! */
			vTracePrintF(trcWarningChannel, "TRC_CFG_OBJECT_DATA_SLOTS too small. Add more slots.");
    d3a4:	4b1e      	ldr	r3, [pc, #120]	; (d420 <prvTraceStoreWarnings+0xe0>)
    d3a6:	681b      	ldr	r3, [r3, #0]
    d3a8:	4922      	ldr	r1, [pc, #136]	; (d434 <prvTraceStoreWarnings+0xf4>)
    d3aa:	4618      	mov	r0, r3
    d3ac:	f7ff fd1e 	bl	cdec <vTracePrintF>
		}

		if (MaxBytesTruncated > 0)
    d3b0:	4b21      	ldr	r3, [pc, #132]	; (d438 <prvTraceStoreWarnings+0xf8>)
    d3b2:	681b      	ldr	r3, [r3, #0]
    d3b4:	2b00      	cmp	r3, #0
    d3b6:	d007      	beq.n	d3c8 <prvTraceStoreWarnings+0x88>

			A PSF event may store maximum 60 bytes payload, including data arguments
			and string characters. For User Events, also the User Event Channel ptr
			must be squeezed in, if a channel is specified. */

			vTracePrintF(trcWarningChannel, "String event too long, up to %d bytes truncated.", MaxBytesTruncated);
    d3b8:	4b19      	ldr	r3, [pc, #100]	; (d420 <prvTraceStoreWarnings+0xe0>)
    d3ba:	6818      	ldr	r0, [r3, #0]
    d3bc:	4b1e      	ldr	r3, [pc, #120]	; (d438 <prvTraceStoreWarnings+0xf8>)
    d3be:	681b      	ldr	r3, [r3, #0]
    d3c0:	461a      	mov	r2, r3
    d3c2:	491e      	ldr	r1, [pc, #120]	; (d43c <prvTraceStoreWarnings+0xfc>)
    d3c4:	f7ff fd12 	bl	cdec <vTracePrintF>
		}

		switch (errorCode)
    d3c8:	4b1d      	ldr	r3, [pc, #116]	; (d440 <prvTraceStoreWarnings+0x100>)
    d3ca:	681b      	ldr	r3, [r3, #0]
    d3cc:	3b01      	subs	r3, #1
    d3ce:	2b03      	cmp	r3, #3
    d3d0:	d818      	bhi.n	d404 <prvTraceStoreWarnings+0xc4>
    d3d2:	a201      	add	r2, pc, #4	; (adr r2, d3d8 <prvTraceStoreWarnings+0x98>)
    d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d3d8:	0000d405 	.word	0x0000d405
    d3dc:	0000d405 	.word	0x0000d405
    d3e0:	0000d3e9 	.word	0x0000d3e9
    d3e4:	0000d3f7 	.word	0x0000d3f7
		case PSF_ERROR_EVENT_CODE_TOO_LARGE:
			break;
		case PSF_ERROR_ISR_NESTING_OVERFLOW:
			break;
		case PSF_ERROR_DWT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT not supported by this chip.");
    d3e8:	4b0d      	ldr	r3, [pc, #52]	; (d420 <prvTraceStoreWarnings+0xe0>)
    d3ea:	681b      	ldr	r3, [r3, #0]
    d3ec:	4915      	ldr	r1, [pc, #84]	; (d444 <prvTraceStoreWarnings+0x104>)
    d3ee:	4618      	mov	r0, r3
    d3f0:	f7ff fcfc 	bl	cdec <vTracePrintF>
			break;
    d3f4:	e006      	b.n	d404 <prvTraceStoreWarnings+0xc4>
		case PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED:
			vTracePrintF(trcWarningChannel, "DWT_CYCCNT not supported by this chip.");
    d3f6:	4b0a      	ldr	r3, [pc, #40]	; (d420 <prvTraceStoreWarnings+0xe0>)
    d3f8:	681b      	ldr	r3, [r3, #0]
    d3fa:	4913      	ldr	r1, [pc, #76]	; (d448 <prvTraceStoreWarnings+0x108>)
    d3fc:	4618      	mov	r0, r3
    d3fe:	f7ff fcf5 	bl	cdec <vTracePrintF>
			break;
    d402:	bf00      	nop
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d404:	68bb      	ldr	r3, [r7, #8]
    d406:	60fb      	str	r3, [r7, #12]
    d408:	68fb      	ldr	r3, [r7, #12]
    d40a:	f383 8810 	msr	PRIMASK, r3
}
    d40e:	bf00      	nop
    d410:	3710      	adds	r7, #16
    d412:	46bd      	mov	sp, r7
    d414:	bd80      	pop	{r7, pc}
    d416:	bf00      	nop
    d418:	20003488 	.word	0x20003488
    d41c:	200034a4 	.word	0x200034a4
    d420:	200035f0 	.word	0x200035f0
    d424:	00010174 	.word	0x00010174
    d428:	200034ac 	.word	0x200034ac
    d42c:	000101a8 	.word	0x000101a8
    d430:	200034a8 	.word	0x200034a8
    d434:	000101dc 	.word	0x000101dc
    d438:	200034b0 	.word	0x200034b0
    d43c:	00010214 	.word	0x00010214
    d440:	20003480 	.word	0x20003480
    d444:	00010128 	.word	0x00010128
    d448:	00010148 	.word	0x00010148

0000d44c <prvTraceStoreEvent0>:

/* Store an event with zero parameters (event ID only) */
void prvTraceStoreEvent0(uint16_t eventID)
{
    d44c:	b580      	push	{r7, lr}
    d44e:	b08a      	sub	sp, #40	; 0x28
    d450:	af00      	add	r7, sp, #0
    d452:	4603      	mov	r3, r0
    d454:	80fb      	strh	r3, [r7, #6]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
    d456:	88fb      	ldrh	r3, [r7, #6]
    d458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d45c:	d303      	bcc.n	d466 <prvTraceStoreEvent0+0x1a>
    d45e:	2001      	movs	r0, #1
    d460:	f000 fc8e 	bl	dd80 <prvTraceError>
    d464:	e030      	b.n	d4c8 <prvTraceStoreEvent0+0x7c>
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d466:	f3ef 8310 	mrs	r3, PRIMASK
    d46a:	61fb      	str	r3, [r7, #28]
    return(result);
    d46c:	69fb      	ldr	r3, [r7, #28]

	TRACE_ENTER_CRITICAL_SECTION();
    d46e:	623b      	str	r3, [r7, #32]
    d470:	2301      	movs	r3, #1
    d472:	617b      	str	r3, [r7, #20]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d474:	697b      	ldr	r3, [r7, #20]
    d476:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d47a:	4b15      	ldr	r3, [pc, #84]	; (d4d0 <prvTraceStoreEvent0+0x84>)
    d47c:	681b      	ldr	r3, [r3, #0]
    d47e:	2b00      	cmp	r3, #0
    d480:	d01d      	beq.n	d4be <prvTraceStoreEvent0+0x72>
	{
		eventCounter++;
    d482:	4b14      	ldr	r3, [pc, #80]	; (d4d4 <prvTraceStoreEvent0+0x88>)
    d484:	681b      	ldr	r3, [r3, #0]
    d486:	3301      	adds	r3, #1
    d488:	4a12      	ldr	r2, [pc, #72]	; (d4d4 <prvTraceStoreEvent0+0x88>)
    d48a:	6013      	str	r3, [r2, #0]

  		TRC_STREAM_PORT_ALLOCATE_EVENT(BaseEvent, event, sizeof(BaseEvent));
    d48c:	f107 030c 	add.w	r3, r7, #12
    d490:	61bb      	str	r3, [r7, #24]
		if (event != NULL)
    d492:	69bb      	ldr	r3, [r7, #24]
    d494:	2b00      	cmp	r3, #0
    d496:	d012      	beq.n	d4be <prvTraceStoreEvent0+0x72>
		{
			event->EventID = eventID | PARAM_COUNT(0);
    d498:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
    d49c:	69bb      	ldr	r3, [r7, #24]
    d49e:	801a      	strh	r2, [r3, #0]
			event->EventCount = eventCounter;
    d4a0:	4b0c      	ldr	r3, [pc, #48]	; (d4d4 <prvTraceStoreEvent0+0x88>)
    d4a2:	681b      	ldr	r3, [r3, #0]
    d4a4:	b29a      	uxth	r2, r3
    d4a6:	69bb      	ldr	r3, [r7, #24]
    d4a8:	805a      	strh	r2, [r3, #2]
			event->TS = prvGetTimestamp32();
    d4aa:	f000 fcb5 	bl	de18 <prvGetTimestamp32>
    d4ae:	4602      	mov	r2, r0
    d4b0:	69bb      	ldr	r3, [r7, #24]
    d4b2:	605a      	str	r2, [r3, #4]
			TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(BaseEvent));
    d4b4:	2208      	movs	r2, #8
    d4b6:	69b9      	ldr	r1, [r7, #24]
    d4b8:	2002      	movs	r0, #2
    d4ba:	f7f4 fab7 	bl	1a2c <SEGGER_RTT_Write>
		}

	}
	TRACE_EXIT_CRITICAL_SECTION();
    d4be:	6a3b      	ldr	r3, [r7, #32]
    d4c0:	627b      	str	r3, [r7, #36]	; 0x24
    d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d4c4:	f383 8810 	msr	PRIMASK, r3
}
    d4c8:	3728      	adds	r7, #40	; 0x28
    d4ca:	46bd      	mov	sp, r7
    d4cc:	bd80      	pop	{r7, pc}
    d4ce:	bf00      	nop
    d4d0:	20003488 	.word	0x20003488
    d4d4:	2000348c 	.word	0x2000348c

0000d4d8 <prvTraceStoreEvent1>:

/* Store an event with one 32-bit parameter (pointer address or an int) */
void prvTraceStoreEvent1(uint16_t eventID, uint32_t param1)
{
    d4d8:	b580      	push	{r7, lr}
    d4da:	b08a      	sub	sp, #40	; 0x28
    d4dc:	af00      	add	r7, sp, #0
    d4de:	4603      	mov	r3, r0
    d4e0:	6039      	str	r1, [r7, #0]
    d4e2:	80fb      	strh	r3, [r7, #6]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
    d4e4:	88fb      	ldrh	r3, [r7, #6]
    d4e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d4ea:	d303      	bcc.n	d4f4 <prvTraceStoreEvent1+0x1c>
    d4ec:	2001      	movs	r0, #1
    d4ee:	f000 fc47 	bl	dd80 <prvTraceError>
    d4f2:	e036      	b.n	d562 <prvTraceStoreEvent1+0x8a>
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d4f4:	f3ef 8310 	mrs	r3, PRIMASK
    d4f8:	61fb      	str	r3, [r7, #28]
    return(result);
    d4fa:	69fb      	ldr	r3, [r7, #28]

	TRACE_ENTER_CRITICAL_SECTION();
    d4fc:	623b      	str	r3, [r7, #32]
    d4fe:	2301      	movs	r3, #1
    d500:	617b      	str	r3, [r7, #20]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d502:	697b      	ldr	r3, [r7, #20]
    d504:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d508:	4b17      	ldr	r3, [pc, #92]	; (d568 <prvTraceStoreEvent1+0x90>)
    d50a:	681b      	ldr	r3, [r3, #0]
    d50c:	2b00      	cmp	r3, #0
    d50e:	d023      	beq.n	d558 <prvTraceStoreEvent1+0x80>
	{
		eventCounter++;
    d510:	4b16      	ldr	r3, [pc, #88]	; (d56c <prvTraceStoreEvent1+0x94>)
    d512:	681b      	ldr	r3, [r3, #0]
    d514:	3301      	adds	r3, #1
    d516:	4a15      	ldr	r2, [pc, #84]	; (d56c <prvTraceStoreEvent1+0x94>)
    d518:	6013      	str	r3, [r2, #0]
  		TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_1, event, sizeof(EventWithParam_1));
    d51a:	f107 0308 	add.w	r3, r7, #8
    d51e:	61bb      	str	r3, [r7, #24]
		if (event != NULL)
    d520:	69bb      	ldr	r3, [r7, #24]
    d522:	2b00      	cmp	r3, #0
    d524:	d018      	beq.n	d558 <prvTraceStoreEvent1+0x80>
		{
			event->base.EventID = eventID | PARAM_COUNT(1);
    d526:	88fb      	ldrh	r3, [r7, #6]
    d528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    d52c:	b29b      	uxth	r3, r3
    d52e:	b21a      	sxth	r2, r3
    d530:	69bb      	ldr	r3, [r7, #24]
    d532:	801a      	strh	r2, [r3, #0]
			event->base.EventCount = eventCounter;
    d534:	4b0d      	ldr	r3, [pc, #52]	; (d56c <prvTraceStoreEvent1+0x94>)
    d536:	681b      	ldr	r3, [r3, #0]
    d538:	b29a      	uxth	r2, r3
    d53a:	69bb      	ldr	r3, [r7, #24]
    d53c:	805a      	strh	r2, [r3, #2]
			event->base.TS = prvGetTimestamp32();
    d53e:	f000 fc6b 	bl	de18 <prvGetTimestamp32>
    d542:	4602      	mov	r2, r0
    d544:	69bb      	ldr	r3, [r7, #24]
    d546:	605a      	str	r2, [r3, #4]
			event->param1 = (uint32_t)param1;
    d548:	69bb      	ldr	r3, [r7, #24]
    d54a:	683a      	ldr	r2, [r7, #0]
    d54c:	609a      	str	r2, [r3, #8]
			TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_1));
    d54e:	220c      	movs	r2, #12
    d550:	69b9      	ldr	r1, [r7, #24]
    d552:	2002      	movs	r0, #2
    d554:	f7f4 fa6a 	bl	1a2c <SEGGER_RTT_Write>
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d558:	6a3b      	ldr	r3, [r7, #32]
    d55a:	627b      	str	r3, [r7, #36]	; 0x24
    d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d55e:	f383 8810 	msr	PRIMASK, r3
}
    d562:	3728      	adds	r7, #40	; 0x28
    d564:	46bd      	mov	sp, r7
    d566:	bd80      	pop	{r7, pc}
    d568:	20003488 	.word	0x20003488
    d56c:	2000348c 	.word	0x2000348c

0000d570 <prvTraceStoreEvent2>:

/* Store an event with two 32-bit parameters */
void prvTraceStoreEvent2(uint16_t eventID, uint32_t param1, uint32_t param2)
{
    d570:	b580      	push	{r7, lr}
    d572:	b08e      	sub	sp, #56	; 0x38
    d574:	af00      	add	r7, sp, #0
    d576:	4603      	mov	r3, r0
    d578:	60b9      	str	r1, [r7, #8]
    d57a:	607a      	str	r2, [r7, #4]
    d57c:	81fb      	strh	r3, [r7, #14]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
    d57e:	89fb      	ldrh	r3, [r7, #14]
    d580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d584:	d303      	bcc.n	d58e <prvTraceStoreEvent2+0x1e>
    d586:	2001      	movs	r0, #1
    d588:	f000 fbfa 	bl	dd80 <prvTraceError>
    d58c:	e039      	b.n	d602 <prvTraceStoreEvent2+0x92>
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d58e:	f3ef 8310 	mrs	r3, PRIMASK
    d592:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(result);
    d594:	6afb      	ldr	r3, [r7, #44]	; 0x2c

	TRACE_ENTER_CRITICAL_SECTION();
    d596:	633b      	str	r3, [r7, #48]	; 0x30
    d598:	2301      	movs	r3, #1
    d59a:	627b      	str	r3, [r7, #36]	; 0x24
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d59e:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d5a2:	4b19      	ldr	r3, [pc, #100]	; (d608 <prvTraceStoreEvent2+0x98>)
    d5a4:	681b      	ldr	r3, [r3, #0]
    d5a6:	2b00      	cmp	r3, #0
    d5a8:	d026      	beq.n	d5f8 <prvTraceStoreEvent2+0x88>
	{
		eventCounter++;
    d5aa:	4b18      	ldr	r3, [pc, #96]	; (d60c <prvTraceStoreEvent2+0x9c>)
    d5ac:	681b      	ldr	r3, [r3, #0]
    d5ae:	3301      	adds	r3, #1
    d5b0:	4a16      	ldr	r2, [pc, #88]	; (d60c <prvTraceStoreEvent2+0x9c>)
    d5b2:	6013      	str	r3, [r2, #0]

	  	TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_2, event, sizeof(EventWithParam_2));
    d5b4:	f107 0314 	add.w	r3, r7, #20
    d5b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (event != NULL)
    d5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5bc:	2b00      	cmp	r3, #0
    d5be:	d01b      	beq.n	d5f8 <prvTraceStoreEvent2+0x88>
		{
		  	event->base.EventID = eventID | PARAM_COUNT(2);
    d5c0:	89fb      	ldrh	r3, [r7, #14]
    d5c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    d5c6:	b29b      	uxth	r3, r3
    d5c8:	b21a      	sxth	r2, r3
    d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5cc:	801a      	strh	r2, [r3, #0]
			event->base.EventCount = eventCounter;
    d5ce:	4b0f      	ldr	r3, [pc, #60]	; (d60c <prvTraceStoreEvent2+0x9c>)
    d5d0:	681b      	ldr	r3, [r3, #0]
    d5d2:	b29a      	uxth	r2, r3
    d5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5d6:	805a      	strh	r2, [r3, #2]
			event->base.TS = prvGetTimestamp32();
    d5d8:	f000 fc1e 	bl	de18 <prvGetTimestamp32>
    d5dc:	4602      	mov	r2, r0
    d5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5e0:	605a      	str	r2, [r3, #4]
			event->param1 = (uint32_t)param1;
    d5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5e4:	68ba      	ldr	r2, [r7, #8]
    d5e6:	609a      	str	r2, [r3, #8]
			event->param2 = param2;
    d5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5ea:	687a      	ldr	r2, [r7, #4]
    d5ec:	60da      	str	r2, [r3, #12]
			TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_2));
    d5ee:	2210      	movs	r2, #16
    d5f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d5f2:	2002      	movs	r0, #2
    d5f4:	f7f4 fa1a 	bl	1a2c <SEGGER_RTT_Write>
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d5fa:	637b      	str	r3, [r7, #52]	; 0x34
    d5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d5fe:	f383 8810 	msr	PRIMASK, r3
}
    d602:	3738      	adds	r7, #56	; 0x38
    d604:	46bd      	mov	sp, r7
    d606:	bd80      	pop	{r7, pc}
    d608:	20003488 	.word	0x20003488
    d60c:	2000348c 	.word	0x2000348c

0000d610 <prvTraceStoreEvent3>:
/* Store an event with three 32-bit parameters */
void prvTraceStoreEvent3(	uint16_t eventID,
						uint32_t param1,
						uint32_t param2,
						uint32_t param3)
{
    d610:	b580      	push	{r7, lr}
    d612:	b08e      	sub	sp, #56	; 0x38
    d614:	af00      	add	r7, sp, #0
    d616:	60b9      	str	r1, [r7, #8]
    d618:	607a      	str	r2, [r7, #4]
    d61a:	603b      	str	r3, [r7, #0]
    d61c:	4603      	mov	r3, r0
    d61e:	81fb      	strh	r3, [r7, #14]
  	TRACE_ALLOC_CRITICAL_SECTION();

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
    d620:	89fb      	ldrh	r3, [r7, #14]
    d622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d626:	d303      	bcc.n	d630 <prvTraceStoreEvent3+0x20>
    d628:	2001      	movs	r0, #1
    d62a:	f000 fba9 	bl	dd80 <prvTraceError>
    d62e:	e03c      	b.n	d6aa <prvTraceStoreEvent3+0x9a>
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d630:	f3ef 8310 	mrs	r3, PRIMASK
    d634:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(result);
    d636:	6afb      	ldr	r3, [r7, #44]	; 0x2c

	TRACE_ENTER_CRITICAL_SECTION();
    d638:	633b      	str	r3, [r7, #48]	; 0x30
    d63a:	2301      	movs	r3, #1
    d63c:	627b      	str	r3, [r7, #36]	; 0x24
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d640:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d644:	4b1a      	ldr	r3, [pc, #104]	; (d6b0 <prvTraceStoreEvent3+0xa0>)
    d646:	681b      	ldr	r3, [r3, #0]
    d648:	2b00      	cmp	r3, #0
    d64a:	d029      	beq.n	d6a0 <prvTraceStoreEvent3+0x90>
	{
  		eventCounter++;
    d64c:	4b19      	ldr	r3, [pc, #100]	; (d6b4 <prvTraceStoreEvent3+0xa4>)
    d64e:	681b      	ldr	r3, [r3, #0]
    d650:	3301      	adds	r3, #1
    d652:	4a18      	ldr	r2, [pc, #96]	; (d6b4 <prvTraceStoreEvent3+0xa4>)
    d654:	6013      	str	r3, [r2, #0]

	  	TRC_STREAM_PORT_ALLOCATE_EVENT(EventWithParam_3, event, sizeof(EventWithParam_3));
    d656:	f107 0310 	add.w	r3, r7, #16
    d65a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (event != NULL)
    d65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d65e:	2b00      	cmp	r3, #0
    d660:	d01e      	beq.n	d6a0 <prvTraceStoreEvent3+0x90>
		{
			event->base.EventID = eventID | PARAM_COUNT(3);
    d662:	89fb      	ldrh	r3, [r7, #14]
    d664:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    d668:	b29b      	uxth	r3, r3
    d66a:	b21a      	sxth	r2, r3
    d66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d66e:	801a      	strh	r2, [r3, #0]
			event->base.EventCount = eventCounter;
    d670:	4b10      	ldr	r3, [pc, #64]	; (d6b4 <prvTraceStoreEvent3+0xa4>)
    d672:	681b      	ldr	r3, [r3, #0]
    d674:	b29a      	uxth	r2, r3
    d676:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d678:	805a      	strh	r2, [r3, #2]
			event->base.TS = prvGetTimestamp32();
    d67a:	f000 fbcd 	bl	de18 <prvGetTimestamp32>
    d67e:	4602      	mov	r2, r0
    d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d682:	605a      	str	r2, [r3, #4]
			event->param1 = (uint32_t)param1;
    d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d686:	68ba      	ldr	r2, [r7, #8]
    d688:	609a      	str	r2, [r3, #8]
			event->param2 = param2;
    d68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d68c:	687a      	ldr	r2, [r7, #4]
    d68e:	60da      	str	r2, [r3, #12]
			event->param3 = param3;
    d690:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d692:	683a      	ldr	r2, [r7, #0]
    d694:	611a      	str	r2, [r3, #16]
			TRC_STREAM_PORT_COMMIT_EVENT(event, sizeof(EventWithParam_3));
    d696:	2214      	movs	r2, #20
    d698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d69a:	2002      	movs	r0, #2
    d69c:	f7f4 f9c6 	bl	1a2c <SEGGER_RTT_Write>
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d6a2:	637b      	str	r3, [r7, #52]	; 0x34
    d6a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d6a6:	f383 8810 	msr	PRIMASK, r3
}
    d6aa:	3738      	adds	r7, #56	; 0x38
    d6ac:	46bd      	mov	sp, r7
    d6ae:	bd80      	pop	{r7, pc}
    d6b0:	20003488 	.word	0x20003488
    d6b4:	2000348c 	.word	0x2000348c

0000d6b8 <prvTraceStoreEvent>:

/* Stores an event with <nParam> 32-bit integer parameters */
void prvTraceStoreEvent(int nParam, uint16_t eventID, ...)
{
    d6b8:	b40e      	push	{r1, r2, r3}
    d6ba:	b580      	push	{r7, lr}
    d6bc:	b09d      	sub	sp, #116	; 0x74
    d6be:	af00      	add	r7, sp, #0
    d6c0:	6078      	str	r0, [r7, #4]
    TRACE_ALLOC_CRITICAL_SECTION();
	va_list vl;
	int i;

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
    d6c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
    d6c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d6ca:	d303      	bcc.n	d6d4 <prvTraceStoreEvent+0x1c>
    d6cc:	2001      	movs	r0, #1
    d6ce:	f000 fb57 	bl	dd80 <prvTraceError>
    d6d2:	e053      	b.n	d77c <prvTraceStoreEvent+0xc4>
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d6d4:	f3ef 8310 	mrs	r3, PRIMASK
    d6d8:	663b      	str	r3, [r7, #96]	; 0x60
    return(result);
    d6da:	6e3b      	ldr	r3, [r7, #96]	; 0x60

	TRACE_ENTER_CRITICAL_SECTION();
    d6dc:	667b      	str	r3, [r7, #100]	; 0x64
    d6de:	2301      	movs	r3, #1
    d6e0:	653b      	str	r3, [r7, #80]	; 0x50
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    d6e4:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d6e8:	4b27      	ldr	r3, [pc, #156]	; (d788 <prvTraceStoreEvent+0xd0>)
    d6ea:	681b      	ldr	r3, [r3, #0]
    d6ec:	2b00      	cmp	r3, #0
    d6ee:	d040      	beq.n	d772 <prvTraceStoreEvent+0xba>
	{
	  	int eventSize = sizeof(BaseEvent) + nParam * sizeof(uint32_t);
    d6f0:	687b      	ldr	r3, [r7, #4]
    d6f2:	3302      	adds	r3, #2
    d6f4:	009b      	lsls	r3, r3, #2
    d6f6:	65fb      	str	r3, [r7, #92]	; 0x5c

		eventCounter++;
    d6f8:	4b24      	ldr	r3, [pc, #144]	; (d78c <prvTraceStoreEvent+0xd4>)
    d6fa:	681b      	ldr	r3, [r3, #0]
    d6fc:	3301      	adds	r3, #1
    d6fe:	4a23      	ldr	r2, [pc, #140]	; (d78c <prvTraceStoreEvent+0xd4>)
    d700:	6013      	str	r3, [r2, #0]

	  	TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
    d702:	f107 0308 	add.w	r3, r7, #8
    d706:	65bb      	str	r3, [r7, #88]	; 0x58
		if (event != NULL)
    d708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d70a:	2b00      	cmp	r3, #0
    d70c:	d031      	beq.n	d772 <prvTraceStoreEvent+0xba>
		{
			event->base.EventID = eventID | PARAM_COUNT(nParam);
    d70e:	687b      	ldr	r3, [r7, #4]
    d710:	031b      	lsls	r3, r3, #12
    d712:	b21a      	sxth	r2, r3
    d714:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
    d718:	4313      	orrs	r3, r2
    d71a:	b21a      	sxth	r2, r3
    d71c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d71e:	801a      	strh	r2, [r3, #0]
			event->base.EventCount = eventCounter;
    d720:	4b1a      	ldr	r3, [pc, #104]	; (d78c <prvTraceStoreEvent+0xd4>)
    d722:	681b      	ldr	r3, [r3, #0]
    d724:	b29a      	uxth	r2, r3
    d726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d728:	805a      	strh	r2, [r3, #2]
			event->base.TS = prvGetTimestamp32();
    d72a:	f000 fb75 	bl	de18 <prvGetTimestamp32>
    d72e:	4602      	mov	r2, r0
    d730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d732:	605a      	str	r2, [r3, #4]

			va_start(vl, eventID);
    d734:	f107 0380 	add.w	r3, r7, #128	; 0x80
    d738:	64fb      	str	r3, [r7, #76]	; 0x4c
  			for (i = 0; i < nParam; i++)
    d73a:	2300      	movs	r3, #0
    d73c:	66fb      	str	r3, [r7, #108]	; 0x6c
    d73e:	e00e      	b.n	d75e <prvTraceStoreEvent+0xa6>
			{
		  		uint32_t* tmp = (uint32_t*) &(event->data[i * 4]);
    d740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    d742:	009b      	lsls	r3, r3, #2
    d744:	3308      	adds	r3, #8
    d746:	6dba      	ldr	r2, [r7, #88]	; 0x58
    d748:	4413      	add	r3, r2
    d74a:	657b      	str	r3, [r7, #84]	; 0x54
	  			*tmp = va_arg(vl, uint32_t);
    d74c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d74e:	1d1a      	adds	r2, r3, #4
    d750:	64fa      	str	r2, [r7, #76]	; 0x4c
    d752:	681a      	ldr	r2, [r3, #0]
    d754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    d756:	601a      	str	r2, [r3, #0]
			event->base.EventID = eventID | PARAM_COUNT(nParam);
			event->base.EventCount = eventCounter;
			event->base.TS = prvGetTimestamp32();

			va_start(vl, eventID);
  			for (i = 0; i < nParam; i++)
    d758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    d75a:	3301      	adds	r3, #1
    d75c:	66fb      	str	r3, [r7, #108]	; 0x6c
    d75e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    d760:	687b      	ldr	r3, [r7, #4]
    d762:	429a      	cmp	r2, r3
    d764:	dbec      	blt.n	d740 <prvTraceStoreEvent+0x88>
		  		uint32_t* tmp = (uint32_t*) &(event->data[i * 4]);
	  			*tmp = va_arg(vl, uint32_t);
			}
			va_end(vl);

			TRC_STREAM_PORT_COMMIT_EVENT(event, eventSize);
    d766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    d768:	461a      	mov	r2, r3
    d76a:	6db9      	ldr	r1, [r7, #88]	; 0x58
    d76c:	2002      	movs	r0, #2
    d76e:	f7f4 f95d 	bl	1a2c <SEGGER_RTT_Write>
		}
	}
	TRACE_EXIT_CRITICAL_SECTION();
    d772:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d774:	66bb      	str	r3, [r7, #104]	; 0x68
    d776:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d778:	f383 8810 	msr	PRIMASK, r3
}
    d77c:	3774      	adds	r7, #116	; 0x74
    d77e:	46bd      	mov	sp, r7
    d780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d784:	b003      	add	sp, #12
    d786:	4770      	bx	lr
    d788:	20003488 	.word	0x20003488
    d78c:	2000348c 	.word	0x2000348c

0000d790 <prvTraceStoreStringEvent>:

/* Stories an event with a string and <nParam> 32-bit integer parameters */
void prvTraceStoreStringEvent(int nArgs, uint16_t eventID, const char* str, ...)
{
    d790:	b40c      	push	{r2, r3}
    d792:	b580      	push	{r7, lr}
    d794:	b086      	sub	sp, #24
    d796:	af02      	add	r7, sp, #8
    d798:	6078      	str	r0, [r7, #4]
    d79a:	460b      	mov	r3, r1
    d79c:	807b      	strh	r3, [r7, #2]
  	va_list vl;

	va_start(vl, str);
    d79e:	f107 031c 	add.w	r3, r7, #28
    d7a2:	60fb      	str	r3, [r7, #12]
	prvTraceStoreStringEventHelper(nArgs, eventID, NULL, str, vl);
    d7a4:	8879      	ldrh	r1, [r7, #2]
    d7a6:	68fb      	ldr	r3, [r7, #12]
    d7a8:	9300      	str	r3, [sp, #0]
    d7aa:	69bb      	ldr	r3, [r7, #24]
    d7ac:	2200      	movs	r2, #0
    d7ae:	6878      	ldr	r0, [r7, #4]
    d7b0:	f000 f808 	bl	d7c4 <prvTraceStoreStringEventHelper>
	va_end(vl);
}
    d7b4:	bf00      	nop
    d7b6:	3710      	adds	r7, #16
    d7b8:	46bd      	mov	sp, r7
    d7ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    d7be:	b002      	add	sp, #8
    d7c0:	4770      	bx	lr
    d7c2:	bf00      	nop

0000d7c4 <prvTraceStoreStringEventHelper>:
/* Internal common function for storing string events */
static void prvTraceStoreStringEventHelper(	int nArgs,
										uint16_t eventID,
										traceString userEvtChannel,
										const char* str, va_list vl)
{
    d7c4:	b580      	push	{r7, lr}
    d7c6:	b0a2      	sub	sp, #136	; 0x88
    d7c8:	af00      	add	r7, sp, #0
    d7ca:	60f8      	str	r0, [r7, #12]
    d7cc:	607a      	str	r2, [r7, #4]
    d7ce:	603b      	str	r3, [r7, #0]
    d7d0:	460b      	mov	r3, r1
    d7d2:	817b      	strh	r3, [r7, #10]
	int len;
  	int nWords;
	int nStrWords;
	int i;

	PSF_ASSERT(eventID < 4096, PSF_ERROR_EVENT_CODE_TOO_LARGE);
    d7d4:	897b      	ldrh	r3, [r7, #10]
    d7d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    d7da:	d303      	bcc.n	d7e4 <prvTraceStoreStringEventHelper+0x20>
    d7dc:	2001      	movs	r0, #1
    d7de:	f000 facf 	bl	dd80 <prvTraceError>
    d7e2:	e0ca      	b.n	d97a <prvTraceStoreStringEventHelper+0x1b6>

	for (len = 0; (str[len] != 0) && (len < 52); len++); /* empty loop */
    d7e4:	2300      	movs	r3, #0
    d7e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    d7ea:	e004      	b.n	d7f6 <prvTraceStoreStringEventHelper+0x32>
    d7ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    d7f0:	3301      	adds	r3, #1
    d7f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    d7f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    d7fa:	683a      	ldr	r2, [r7, #0]
    d7fc:	4413      	add	r3, r2
    d7fe:	781b      	ldrb	r3, [r3, #0]
    d800:	2b00      	cmp	r3, #0
    d802:	d003      	beq.n	d80c <prvTraceStoreStringEventHelper+0x48>
    d804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    d808:	2b33      	cmp	r3, #51	; 0x33
    d80a:	ddef      	ble.n	d7ec <prvTraceStoreStringEventHelper+0x28>
	
	/* The string length in multiples of 32 bit words (+1 for null character) */
	nStrWords = (len+1+3)/4;
    d80c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    d810:	3304      	adds	r3, #4
    d812:	2b00      	cmp	r3, #0
    d814:	da00      	bge.n	d818 <prvTraceStoreStringEventHelper+0x54>
    d816:	3303      	adds	r3, #3
    d818:	109b      	asrs	r3, r3, #2
    d81a:	67bb      	str	r3, [r7, #120]	; 0x78

	/* If a user event channel is specified, add in the list */
	if (userEvtChannel) nArgs++;
    d81c:	687b      	ldr	r3, [r7, #4]
    d81e:	2b00      	cmp	r3, #0
    d820:	d002      	beq.n	d828 <prvTraceStoreStringEventHelper+0x64>
    d822:	68fb      	ldr	r3, [r7, #12]
    d824:	3301      	adds	r3, #1
    d826:	60fb      	str	r3, [r7, #12]

	/* The total number of 32-bit words needed for the whole payload */
	nWords = nStrWords + nArgs;
    d828:	6fba      	ldr	r2, [r7, #120]	; 0x78
    d82a:	68fb      	ldr	r3, [r7, #12]
    d82c:	4413      	add	r3, r2
    d82e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	if (nWords > 15) /* if attempting to store more than 60 byte (= max) */
    d832:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d836:	2b0f      	cmp	r3, #15
    d838:	dd15      	ble.n	d866 <prvTraceStoreStringEventHelper+0xa2>
		/* Truncate event if too large. The	string characters are stored
		last, so usually only the string is truncated, unless there a lot
		of parameters... */

		/* Diagnostics ... */
		uint32_t bytesTruncated = (nWords - 15) * 4;
    d83a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d83e:	3b0f      	subs	r3, #15
    d840:	009b      	lsls	r3, r3, #2
    d842:	677b      	str	r3, [r7, #116]	; 0x74

		if (bytesTruncated > MaxBytesTruncated)
    d844:	4b4e      	ldr	r3, [pc, #312]	; (d980 <prvTraceStoreStringEventHelper+0x1bc>)
    d846:	681b      	ldr	r3, [r3, #0]
    d848:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    d84a:	429a      	cmp	r2, r3
    d84c:	d902      	bls.n	d854 <prvTraceStoreStringEventHelper+0x90>
		{
			MaxBytesTruncated = bytesTruncated;
    d84e:	4a4c      	ldr	r2, [pc, #304]	; (d980 <prvTraceStoreStringEventHelper+0x1bc>)
    d850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    d852:	6013      	str	r3, [r2, #0]
		}

		nWords = 15;
    d854:	230f      	movs	r3, #15
    d856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		len = 15 * 4 - nArgs * 4;
    d85a:	68fb      	ldr	r3, [r7, #12]
    d85c:	f1c3 030f 	rsb	r3, r3, #15
    d860:	009b      	lsls	r3, r3, #2
    d862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d866:	f3ef 8310 	mrs	r3, PRIMASK
    d86a:	66bb      	str	r3, [r7, #104]	; 0x68
    return(result);
    d86c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	}

	TRACE_ENTER_CRITICAL_SECTION();
    d86e:	66fb      	str	r3, [r7, #108]	; 0x6c
    d870:	2301      	movs	r3, #1
    d872:	65bb      	str	r3, [r7, #88]	; 0x58
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    d876:	f383 8810 	msr	PRIMASK, r3

	if (RecorderEnabled)
    d87a:	4b42      	ldr	r3, [pc, #264]	; (d984 <prvTraceStoreStringEventHelper+0x1c0>)
    d87c:	681b      	ldr	r3, [r3, #0]
    d87e:	2b00      	cmp	r3, #0
    d880:	d076      	beq.n	d970 <prvTraceStoreStringEventHelper+0x1ac>
	{
		int eventSize = sizeof(BaseEvent) + nWords * sizeof(uint32_t);
    d882:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d886:	3302      	adds	r3, #2
    d888:	009b      	lsls	r3, r3, #2
    d88a:	667b      	str	r3, [r7, #100]	; 0x64

		eventCounter++;
    d88c:	4b3e      	ldr	r3, [pc, #248]	; (d988 <prvTraceStoreStringEventHelper+0x1c4>)
    d88e:	681b      	ldr	r3, [r3, #0]
    d890:	3301      	adds	r3, #1
    d892:	4a3d      	ldr	r2, [pc, #244]	; (d988 <prvTraceStoreStringEventHelper+0x1c4>)
    d894:	6013      	str	r3, [r2, #0]

	  	TRC_STREAM_PORT_ALLOCATE_DYNAMIC_EVENT(largestEventType, event, eventSize);
    d896:	f107 0314 	add.w	r3, r7, #20
    d89a:	663b      	str	r3, [r7, #96]	; 0x60
		if (event != NULL)
    d89c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    d89e:	2b00      	cmp	r3, #0
    d8a0:	d066      	beq.n	d970 <prvTraceStoreStringEventHelper+0x1ac>
		{
			event->base.EventID = (eventID) | PARAM_COUNT(nWords);
    d8a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    d8a6:	031b      	lsls	r3, r3, #12
    d8a8:	b21a      	sxth	r2, r3
    d8aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
    d8ae:	4313      	orrs	r3, r2
    d8b0:	b21a      	sxth	r2, r3
    d8b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    d8b4:	801a      	strh	r2, [r3, #0]
			event->base.EventCount = eventCounter;
    d8b6:	4b34      	ldr	r3, [pc, #208]	; (d988 <prvTraceStoreStringEventHelper+0x1c4>)
    d8b8:	681b      	ldr	r3, [r3, #0]
    d8ba:	b29a      	uxth	r2, r3
    d8bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    d8be:	805a      	strh	r2, [r3, #2]
			event->base.TS = prvGetTimestamp32();
    d8c0:	f000 faaa 	bl	de18 <prvGetTimestamp32>
    d8c4:	4602      	mov	r2, r0
    d8c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    d8c8:	605a      	str	r2, [r3, #4]

			/* 32-bit write-pointer for the data argument */
			uint32_t* data32 = (uint32_t*) &(event->data[0]);
    d8ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    d8cc:	3308      	adds	r3, #8
    d8ce:	65fb      	str	r3, [r7, #92]	; 0x5c

			for (i = 0; i < nArgs; i++)
    d8d0:	2300      	movs	r3, #0
    d8d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    d8d4:	e01a      	b.n	d90c <prvTraceStoreStringEventHelper+0x148>
			{
				if ((userEvtChannel != NULL) && (i == 0))
    d8d6:	687b      	ldr	r3, [r7, #4]
    d8d8:	2b00      	cmp	r3, #0
    d8da:	d009      	beq.n	d8f0 <prvTraceStoreStringEventHelper+0x12c>
    d8dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d8de:	2b00      	cmp	r3, #0
    d8e0:	d106      	bne.n	d8f0 <prvTraceStoreStringEventHelper+0x12c>
				{
					/* First, add the User Event Channel if not NULL */
					data32[i] = (uint32_t)userEvtChannel;
    d8e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d8e4:	009b      	lsls	r3, r3, #2
    d8e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    d8e8:	4413      	add	r3, r2
    d8ea:	687a      	ldr	r2, [r7, #4]
    d8ec:	601a      	str	r2, [r3, #0]
    d8ee:	e00a      	b.n	d906 <prvTraceStoreStringEventHelper+0x142>
				}
				else
				{
					/* Add data arguments... */
					data32[i] = va_arg(vl, uint32_t);
    d8f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d8f2:	009b      	lsls	r3, r3, #2
    d8f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    d8f6:	441a      	add	r2, r3
    d8f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    d8fc:	1d19      	adds	r1, r3, #4
    d8fe:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
    d902:	681b      	ldr	r3, [r3, #0]
    d904:	6013      	str	r3, [r2, #0]
			event->base.TS = prvGetTimestamp32();

			/* 32-bit write-pointer for the data argument */
			uint32_t* data32 = (uint32_t*) &(event->data[0]);

			for (i = 0; i < nArgs; i++)
    d906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d908:	3301      	adds	r3, #1
    d90a:	67fb      	str	r3, [r7, #124]	; 0x7c
    d90c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    d90e:	68fb      	ldr	r3, [r7, #12]
    d910:	429a      	cmp	r2, r3
    d912:	dbe0      	blt.n	d8d6 <prvTraceStoreStringEventHelper+0x112>
					/* Add data arguments... */
					data32[i] = va_arg(vl, uint32_t);
				}
			}

			for (i = 0; i < len; i++)
    d914:	2300      	movs	r3, #0
    d916:	67fb      	str	r3, [r7, #124]	; 0x7c
    d918:	e00e      	b.n	d938 <prvTraceStoreStringEventHelper+0x174>
			{
		  		event->data[nArgs * 4 + i] = str[i];
    d91a:	68fb      	ldr	r3, [r7, #12]
    d91c:	009a      	lsls	r2, r3, #2
    d91e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d920:	4413      	add	r3, r2
    d922:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    d924:	6839      	ldr	r1, [r7, #0]
    d926:	440a      	add	r2, r1
    d928:	7811      	ldrb	r1, [r2, #0]
    d92a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    d92c:	4413      	add	r3, r2
    d92e:	460a      	mov	r2, r1
    d930:	721a      	strb	r2, [r3, #8]
					/* Add data arguments... */
					data32[i] = va_arg(vl, uint32_t);
				}
			}

			for (i = 0; i < len; i++)
    d932:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    d934:	3301      	adds	r3, #1
    d936:	67fb      	str	r3, [r7, #124]	; 0x7c
    d938:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    d93a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    d93e:	429a      	cmp	r2, r3
    d940:	dbeb      	blt.n	d91a <prvTraceStoreStringEventHelper+0x156>
			{
		  		event->data[nArgs * 4 + i] = str[i];
			}

			if (len < (15 * 4 - nArgs * 4))
    d942:	68fb      	ldr	r3, [r7, #12]
    d944:	f1c3 030f 	rsb	r3, r3, #15
    d948:	009a      	lsls	r2, r3, #2
    d94a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    d94e:	429a      	cmp	r2, r3
    d950:	dd08      	ble.n	d964 <prvTraceStoreStringEventHelper+0x1a0>
				event->data[nArgs * 4 + len] = 0;	/* Only truncate if we don't fill up the buffer completely */
    d952:	68fb      	ldr	r3, [r7, #12]
    d954:	009a      	lsls	r2, r3, #2
    d956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    d95a:	4413      	add	r3, r2
    d95c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    d95e:	4413      	add	r3, r2
    d960:	2200      	movs	r2, #0
    d962:	721a      	strb	r2, [r3, #8]
			TRC_STREAM_PORT_COMMIT_EVENT(event, eventSize);
    d964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    d966:	461a      	mov	r2, r3
    d968:	6e39      	ldr	r1, [r7, #96]	; 0x60
    d96a:	2002      	movs	r0, #2
    d96c:	f7f4 f85e 	bl	1a2c <SEGGER_RTT_Write>
		}
	}
	
	TRACE_EXIT_CRITICAL_SECTION();
    d970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    d972:	673b      	str	r3, [r7, #112]	; 0x70
    d974:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    d976:	f383 8810 	msr	PRIMASK, r3
}
    d97a:	3788      	adds	r7, #136	; 0x88
    d97c:	46bd      	mov	sp, r7
    d97e:	bd80      	pop	{r7, pc}
    d980:	200034b0 	.word	0x200034b0
    d984:	20003488 	.word	0x20003488
    d988:	2000348c 	.word	0x2000348c

0000d98c <prvTraceSaveSymbol>:

/* Saves a symbol name (task name etc.) in symbol table */
void prvTraceSaveSymbol(void *address, const char *name)
{
    d98c:	b480      	push	{r7}
    d98e:	b08b      	sub	sp, #44	; 0x2c
    d990:	af00      	add	r7, sp, #0
    d992:	6078      	str	r0, [r7, #4]
    d994:	6039      	str	r1, [r7, #0]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    d996:	f3ef 8310 	mrs	r3, PRIMASK
    d99a:	617b      	str	r3, [r7, #20]
    return(result);
    d99c:	697b      	ldr	r3, [r7, #20]
	uint32_t foundSlot;
	uint32_t *ptrAddress;
	uint8_t *ptrSymbol;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    d99e:	61bb      	str	r3, [r7, #24]
    d9a0:	2301      	movs	r3, #1
    d9a2:	60bb      	str	r3, [r7, #8]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    d9a4:	68bb      	ldr	r3, [r7, #8]
    d9a6:	f383 8810 	msr	PRIMASK, r3
	
	foundSlot = firstFreeSymbolTableIndex;
    d9aa:	4b38      	ldr	r3, [pc, #224]	; (da8c <prvTraceSaveSymbol+0x100>)
    d9ac:	681b      	ldr	r3, [r3, #0]
    d9ae:	623b      	str	r3, [r7, #32]

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
    d9b0:	2300      	movs	r3, #0
    d9b2:	627b      	str	r3, [r7, #36]	; 0x24
    d9b4:	e00e      	b.n	d9d4 <prvTraceSaveSymbol+0x48>
	{
		ptrAddress = ((uint32_t*)&symbolTable.pSymbolTableBuffer[i]);
    d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d9b8:	4a35      	ldr	r2, [pc, #212]	; (da90 <prvTraceSaveSymbol+0x104>)
    d9ba:	4413      	add	r3, r2
    d9bc:	613b      	str	r3, [r7, #16]
		if (*ptrAddress == (uint32_t)address)
    d9be:	693b      	ldr	r3, [r7, #16]
    d9c0:	681a      	ldr	r2, [r3, #0]
    d9c2:	687b      	ldr	r3, [r7, #4]
    d9c4:	429a      	cmp	r2, r3
    d9c6:	d102      	bne.n	d9ce <prvTraceSaveSymbol+0x42>
		{
			foundSlot = i;
    d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d9ca:	623b      	str	r3, [r7, #32]
			break;
    d9cc:	e007      	b.n	d9de <prvTraceSaveSymbol+0x52>
	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeSymbolTableIndex;

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
    d9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d9d0:	331c      	adds	r3, #28
    d9d2:	627b      	str	r3, [r7, #36]	; 0x24
    d9d4:	4b2d      	ldr	r3, [pc, #180]	; (da8c <prvTraceSaveSymbol+0x100>)
    d9d6:	681b      	ldr	r3, [r3, #0]
    d9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    d9da:	429a      	cmp	r2, r3
    d9dc:	d3eb      	bcc.n	d9b6 <prvTraceSaveSymbol+0x2a>
			foundSlot = i;
			break;
		}
	}

	if (foundSlot < SYMBOL_TABLE_BUFFER_SIZE)
    d9de:	6a3b      	ldr	r3, [r7, #32]
    d9e0:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
    d9e4:	d242      	bcs.n	da6c <prvTraceSaveSymbol+0xe0>
	{
		*((uint32_t*)&symbolTable.pSymbolTableBuffer[foundSlot]) = (uint32_t)address;
    d9e6:	6a3b      	ldr	r3, [r7, #32]
    d9e8:	4a29      	ldr	r2, [pc, #164]	; (da90 <prvTraceSaveSymbol+0x104>)
    d9ea:	4413      	add	r3, r2
    d9ec:	687a      	ldr	r2, [r7, #4]
    d9ee:	601a      	str	r2, [r3, #0]
		ptrSymbol = &symbolTable.pSymbolTableBuffer[foundSlot + sizeof(uint32_t)];
    d9f0:	6a3b      	ldr	r3, [r7, #32]
    d9f2:	3304      	adds	r3, #4
    d9f4:	4a26      	ldr	r2, [pc, #152]	; (da90 <prvTraceSaveSymbol+0x104>)
    d9f6:	4413      	add	r3, r2
    d9f8:	60fb      	str	r3, [r7, #12]

		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
    d9fa:	2300      	movs	r3, #0
    d9fc:	627b      	str	r3, [r7, #36]	; 0x24
    d9fe:	e010      	b.n	da22 <prvTraceSaveSymbol+0x96>
        {
			ptrSymbol[i] = name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */
    da00:	68fa      	ldr	r2, [r7, #12]
    da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da04:	4413      	add	r3, r2
    da06:	6839      	ldr	r1, [r7, #0]
    da08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    da0a:	440a      	add	r2, r1
    da0c:	7812      	ldrb	r2, [r2, #0]
    da0e:	701a      	strb	r2, [r3, #0]

			if (name[i] == 0)
    da10:	683a      	ldr	r2, [r7, #0]
    da12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da14:	4413      	add	r3, r2
    da16:	781b      	ldrb	r3, [r3, #0]
    da18:	2b00      	cmp	r3, #0
    da1a:	d006      	beq.n	da2a <prvTraceSaveSymbol+0x9e>
	if (foundSlot < SYMBOL_TABLE_BUFFER_SIZE)
	{
		*((uint32_t*)&symbolTable.pSymbolTableBuffer[foundSlot]) = (uint32_t)address;
		ptrSymbol = &symbolTable.pSymbolTableBuffer[foundSlot + sizeof(uint32_t)];

		for (i = 0; i < (TRC_CFG_SYMBOL_MAX_LENGTH); i++)
    da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da1e:	3301      	adds	r3, #1
    da20:	627b      	str	r3, [r7, #36]	; 0x24
    da22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da24:	2b17      	cmp	r3, #23
    da26:	d9eb      	bls.n	da00 <prvTraceSaveSymbol+0x74>
    da28:	e004      	b.n	da34 <prvTraceSaveSymbol+0xa8>
        {
			ptrSymbol[i] = name[i];	/* We do this first to ensure we also get the 0 termination, if there is one */

			if (name[i] == 0)
				break;
    da2a:	bf00      	nop
		}

		/* Check the length of "name", if longer than SYMBOL_MAX_LENGTH */
		while ((name[i] != 0) && i < 128)
    da2c:	e002      	b.n	da34 <prvTraceSaveSymbol+0xa8>
		{
			i++;
    da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da30:	3301      	adds	r3, #1
    da32:	627b      	str	r3, [r7, #36]	; 0x24
			if (name[i] == 0)
				break;
		}

		/* Check the length of "name", if longer than SYMBOL_MAX_LENGTH */
		while ((name[i] != 0) && i < 128)
    da34:	683a      	ldr	r2, [r7, #0]
    da36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da38:	4413      	add	r3, r2
    da3a:	781b      	ldrb	r3, [r3, #0]
    da3c:	2b00      	cmp	r3, #0
    da3e:	d002      	beq.n	da46 <prvTraceSaveSymbol+0xba>
    da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da42:	2b7f      	cmp	r3, #127	; 0x7f
    da44:	d9f3      	bls.n	da2e <prvTraceSaveSymbol+0xa2>
		{
			i++;
		}

		/* Remember the longest symbol name, for diagnostic purposes */
		if (i > LongestSymbolName)
    da46:	4b13      	ldr	r3, [pc, #76]	; (da94 <prvTraceSaveSymbol+0x108>)
    da48:	681b      	ldr	r3, [r3, #0]
    da4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    da4c:	429a      	cmp	r2, r3
    da4e:	d902      	bls.n	da56 <prvTraceSaveSymbol+0xca>
		{
			LongestSymbolName = i;
    da50:	4a10      	ldr	r2, [pc, #64]	; (da94 <prvTraceSaveSymbol+0x108>)
    da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    da54:	6013      	str	r3, [r2, #0]
		}

		/* Is this the last entry in the symbol table? */
		if (foundSlot == firstFreeSymbolTableIndex)
    da56:	4b0d      	ldr	r3, [pc, #52]	; (da8c <prvTraceSaveSymbol+0x100>)
    da58:	681b      	ldr	r3, [r3, #0]
    da5a:	6a3a      	ldr	r2, [r7, #32]
    da5c:	429a      	cmp	r2, r3
    da5e:	d10a      	bne.n	da76 <prvTraceSaveSymbol+0xea>
		{
			firstFreeSymbolTableIndex += SYMBOL_TABLE_SLOT_SIZE;
    da60:	4b0a      	ldr	r3, [pc, #40]	; (da8c <prvTraceSaveSymbol+0x100>)
    da62:	681b      	ldr	r3, [r3, #0]
    da64:	331c      	adds	r3, #28
    da66:	4a09      	ldr	r2, [pc, #36]	; (da8c <prvTraceSaveSymbol+0x100>)
    da68:	6013      	str	r3, [r2, #0]
    da6a:	e004      	b.n	da76 <prvTraceSaveSymbol+0xea>
		}
	}
	else
	{
		NoRoomForSymbol++;
    da6c:	4b0a      	ldr	r3, [pc, #40]	; (da98 <prvTraceSaveSymbol+0x10c>)
    da6e:	681b      	ldr	r3, [r3, #0]
    da70:	3301      	adds	r3, #1
    da72:	4a09      	ldr	r2, [pc, #36]	; (da98 <prvTraceSaveSymbol+0x10c>)
    da74:	6013      	str	r3, [r2, #0]
	}

	TRACE_EXIT_CRITICAL_SECTION();
    da76:	69bb      	ldr	r3, [r7, #24]
    da78:	61fb      	str	r3, [r7, #28]
    da7a:	69fb      	ldr	r3, [r7, #28]
    da7c:	f383 8810 	msr	PRIMASK, r3
}
    da80:	bf00      	nop
    da82:	372c      	adds	r7, #44	; 0x2c
    da84:	46bd      	mov	sp, r7
    da86:	f85d 7b04 	ldr.w	r7, [sp], #4
    da8a:	4770      	bx	lr
    da8c:	200033b8 	.word	0x200033b8
    da90:	20003070 	.word	0x20003070
    da94:	200034ac 	.word	0x200034ac
    da98:	200034a4 	.word	0x200034a4

0000da9c <prvTraceDeleteSymbol>:

/* Deletes a symbol name (task name etc.) from symbol table */
void prvTraceDeleteSymbol(void *address)
{
    da9c:	b480      	push	{r7}
    da9e:	b08b      	sub	sp, #44	; 0x2c
    daa0:	af00      	add	r7, sp, #0
    daa2:	6078      	str	r0, [r7, #4]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    daa4:	f3ef 8310 	mrs	r3, PRIMASK
    daa8:	617b      	str	r3, [r7, #20]
    return(result);
    daaa:	697b      	ldr	r3, [r7, #20]
	uint32_t i, j;
	uint32_t *ptr, *lastEntryPtr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    daac:	61bb      	str	r3, [r7, #24]
    daae:	2301      	movs	r3, #1
    dab0:	60bb      	str	r3, [r7, #8]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    dab2:	68bb      	ldr	r3, [r7, #8]
    dab4:	f383 8810 	msr	PRIMASK, r3

	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
    dab8:	2300      	movs	r3, #0
    daba:	627b      	str	r3, [r7, #36]	; 0x24
    dabc:	e03c      	b.n	db38 <prvTraceDeleteSymbol+0x9c>
	{
		ptr = (uint32_t*)&symbolTable.pSymbolTableBuffer[i];
    dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dac0:	4a25      	ldr	r2, [pc, #148]	; (db58 <prvTraceDeleteSymbol+0xbc>)
    dac2:	4413      	add	r3, r2
    dac4:	613b      	str	r3, [r7, #16]
		if (*ptr == (uint32_t)address)
    dac6:	693b      	ldr	r3, [r7, #16]
    dac8:	681a      	ldr	r2, [r3, #0]
    daca:	687b      	ldr	r3, [r7, #4]
    dacc:	429a      	cmp	r2, r3
    dace:	d130      	bne.n	db32 <prvTraceDeleteSymbol+0x96>
		{
			/* See if we have another entry in the table, and that this isn't already the last entry */
			if (firstFreeSymbolTableIndex > SYMBOL_TABLE_SLOT_SIZE && i != (firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE))
    dad0:	4b22      	ldr	r3, [pc, #136]	; (db5c <prvTraceDeleteSymbol+0xc0>)
    dad2:	681b      	ldr	r3, [r3, #0]
    dad4:	2b1c      	cmp	r3, #28
    dad6:	d923      	bls.n	db20 <prvTraceDeleteSymbol+0x84>
    dad8:	4b20      	ldr	r3, [pc, #128]	; (db5c <prvTraceDeleteSymbol+0xc0>)
    dada:	681b      	ldr	r3, [r3, #0]
    dadc:	f1a3 021c 	sub.w	r2, r3, #28
    dae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dae2:	429a      	cmp	r2, r3
    dae4:	d01c      	beq.n	db20 <prvTraceDeleteSymbol+0x84>
			{
				/* Another entry is available, get pointer to the last one */
				lastEntryPtr = ((uint32_t*)&symbolTable.pSymbolTableBuffer[firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE]);
    dae6:	4b1d      	ldr	r3, [pc, #116]	; (db5c <prvTraceDeleteSymbol+0xc0>)
    dae8:	681b      	ldr	r3, [r3, #0]
    daea:	3b1c      	subs	r3, #28
    daec:	4a1a      	ldr	r2, [pc, #104]	; (db58 <prvTraceDeleteSymbol+0xbc>)
    daee:	4413      	add	r3, r2
    daf0:	60fb      	str	r3, [r7, #12]
				
				/* Copy last entry to this position */
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
    daf2:	2300      	movs	r3, #0
    daf4:	623b      	str	r3, [r7, #32]
    daf6:	e00c      	b.n	db12 <prvTraceDeleteSymbol+0x76>
				{
					ptr[j] = lastEntryPtr[j];
    daf8:	6a3b      	ldr	r3, [r7, #32]
    dafa:	009b      	lsls	r3, r3, #2
    dafc:	693a      	ldr	r2, [r7, #16]
    dafe:	4413      	add	r3, r2
    db00:	6a3a      	ldr	r2, [r7, #32]
    db02:	0092      	lsls	r2, r2, #2
    db04:	68f9      	ldr	r1, [r7, #12]
    db06:	440a      	add	r2, r1
    db08:	6812      	ldr	r2, [r2, #0]
    db0a:	601a      	str	r2, [r3, #0]
			{
				/* Another entry is available, get pointer to the last one */
				lastEntryPtr = ((uint32_t*)&symbolTable.pSymbolTableBuffer[firstFreeSymbolTableIndex - SYMBOL_TABLE_SLOT_SIZE]);
				
				/* Copy last entry to this position */
				for (j = 0; j < (SYMBOL_TABLE_SLOT_SIZE) / sizeof(uint32_t); j++)
    db0c:	6a3b      	ldr	r3, [r7, #32]
    db0e:	3301      	adds	r3, #1
    db10:	623b      	str	r3, [r7, #32]
    db12:	6a3b      	ldr	r3, [r7, #32]
    db14:	2b06      	cmp	r3, #6
    db16:	d9ef      	bls.n	daf8 <prvTraceDeleteSymbol+0x5c>
				{
					ptr[j] = lastEntryPtr[j];
				}

				/* For good measure we also zero out the original position */
				*lastEntryPtr = 0;
    db18:	68fb      	ldr	r3, [r7, #12]
    db1a:	2200      	movs	r2, #0
    db1c:	601a      	str	r2, [r3, #0]
    db1e:	e002      	b.n	db26 <prvTraceDeleteSymbol+0x8a>
			}
			else
				*ptr = 0; /* No other entry found, or this is the last entry */
    db20:	693b      	ldr	r3, [r7, #16]
    db22:	2200      	movs	r2, #0
    db24:	601a      	str	r2, [r3, #0]

			/* Lower index */
			firstFreeSymbolTableIndex -= SYMBOL_TABLE_SLOT_SIZE;
    db26:	4b0d      	ldr	r3, [pc, #52]	; (db5c <prvTraceDeleteSymbol+0xc0>)
    db28:	681b      	ldr	r3, [r3, #0]
    db2a:	3b1c      	subs	r3, #28
    db2c:	4a0b      	ldr	r2, [pc, #44]	; (db5c <prvTraceDeleteSymbol+0xc0>)
    db2e:	6013      	str	r3, [r2, #0]

			break;
    db30:	e007      	b.n	db42 <prvTraceDeleteSymbol+0xa6>
	uint32_t *ptr, *lastEntryPtr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();

	for (i = 0; i < firstFreeSymbolTableIndex; i += SYMBOL_TABLE_SLOT_SIZE)
    db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db34:	331c      	adds	r3, #28
    db36:	627b      	str	r3, [r7, #36]	; 0x24
    db38:	4b08      	ldr	r3, [pc, #32]	; (db5c <prvTraceDeleteSymbol+0xc0>)
    db3a:	681b      	ldr	r3, [r3, #0]
    db3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    db3e:	429a      	cmp	r2, r3
    db40:	d3bd      	bcc.n	dabe <prvTraceDeleteSymbol+0x22>

			break;
		}
	}

	TRACE_EXIT_CRITICAL_SECTION();
    db42:	69bb      	ldr	r3, [r7, #24]
    db44:	61fb      	str	r3, [r7, #28]
    db46:	69fb      	ldr	r3, [r7, #28]
    db48:	f383 8810 	msr	PRIMASK, r3
}
    db4c:	bf00      	nop
    db4e:	372c      	adds	r7, #44	; 0x2c
    db50:	46bd      	mov	sp, r7
    db52:	f85d 7b04 	ldr.w	r7, [sp], #4
    db56:	4770      	bx	lr
    db58:	20003070 	.word	0x20003070
    db5c:	200033b8 	.word	0x200033b8

0000db60 <prvTraceSaveObjectData>:

/* Saves an object data entry (current task priority) in object data table */
void prvTraceSaveObjectData(void *address, uint32_t data)
{
    db60:	b480      	push	{r7}
    db62:	b08b      	sub	sp, #44	; 0x2c
    db64:	af00      	add	r7, sp, #0
    db66:	6078      	str	r0, [r7, #4]
    db68:	6039      	str	r1, [r7, #0]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    db6a:	f3ef 8310 	mrs	r3, PRIMASK
    db6e:	617b      	str	r3, [r7, #20]
    return(result);
    db70:	697b      	ldr	r3, [r7, #20]
	uint32_t i;
	uint32_t foundSlot;
	uint32_t *ptr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    db72:	61bb      	str	r3, [r7, #24]
    db74:	2301      	movs	r3, #1
    db76:	60fb      	str	r3, [r7, #12]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    db78:	68fb      	ldr	r3, [r7, #12]
    db7a:	f383 8810 	msr	PRIMASK, r3
	
	foundSlot = firstFreeObjectDataTableIndex;
    db7e:	4b21      	ldr	r3, [pc, #132]	; (dc04 <prvTraceSaveObjectData+0xa4>)
    db80:	681b      	ldr	r3, [r3, #0]
    db82:	623b      	str	r3, [r7, #32]

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
    db84:	2300      	movs	r3, #0
    db86:	627b      	str	r3, [r7, #36]	; 0x24
    db88:	e00e      	b.n	dba8 <prvTraceSaveObjectData+0x48>
	{
		ptr = ((uint32_t*)&objectDataTable.pObjectDataTableBuffer[i]);
    db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db8c:	4a1e      	ldr	r2, [pc, #120]	; (dc08 <prvTraceSaveObjectData+0xa8>)
    db8e:	4413      	add	r3, r2
    db90:	613b      	str	r3, [r7, #16]
		if (*ptr == (uint32_t)address)
    db92:	693b      	ldr	r3, [r7, #16]
    db94:	681a      	ldr	r2, [r3, #0]
    db96:	687b      	ldr	r3, [r7, #4]
    db98:	429a      	cmp	r2, r3
    db9a:	d102      	bne.n	dba2 <prvTraceSaveObjectData+0x42>
		{
			foundSlot = i;
    db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db9e:	623b      	str	r3, [r7, #32]
			break;
    dba0:	e007      	b.n	dbb2 <prvTraceSaveObjectData+0x52>
	TRACE_ENTER_CRITICAL_SECTION();
	
	foundSlot = firstFreeObjectDataTableIndex;

	/* First look for previous entries using this address */
	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
    dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dba4:	3308      	adds	r3, #8
    dba6:	627b      	str	r3, [r7, #36]	; 0x24
    dba8:	4b16      	ldr	r3, [pc, #88]	; (dc04 <prvTraceSaveObjectData+0xa4>)
    dbaa:	681b      	ldr	r3, [r3, #0]
    dbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dbae:	429a      	cmp	r2, r3
    dbb0:	d3eb      	bcc.n	db8a <prvTraceSaveObjectData+0x2a>
			foundSlot = i;
			break;
		}
	}

	if (foundSlot < OBJECT_DATA_TABLE_BUFFER_SIZE)
    dbb2:	6a3b      	ldr	r3, [r7, #32]
    dbb4:	2b9f      	cmp	r3, #159	; 0x9f
    dbb6:	d815      	bhi.n	dbe4 <prvTraceSaveObjectData+0x84>
	{
		*(uint32_t*)&objectDataTable.pObjectDataTableBuffer[foundSlot] = (uint32_t)address;
    dbb8:	6a3b      	ldr	r3, [r7, #32]
    dbba:	4a13      	ldr	r2, [pc, #76]	; (dc08 <prvTraceSaveObjectData+0xa8>)
    dbbc:	4413      	add	r3, r2
    dbbe:	687a      	ldr	r2, [r7, #4]
    dbc0:	601a      	str	r2, [r3, #0]
		*(uint32_t*)&objectDataTable.pObjectDataTableBuffer[foundSlot + sizeof(uint32_t)] = data;
    dbc2:	6a3b      	ldr	r3, [r7, #32]
    dbc4:	3304      	adds	r3, #4
    dbc6:	4a10      	ldr	r2, [pc, #64]	; (dc08 <prvTraceSaveObjectData+0xa8>)
    dbc8:	4413      	add	r3, r2
    dbca:	683a      	ldr	r2, [r7, #0]
    dbcc:	601a      	str	r2, [r3, #0]

		/* Is this the last entry in the object data table? */
		if (foundSlot == firstFreeObjectDataTableIndex)
    dbce:	4b0d      	ldr	r3, [pc, #52]	; (dc04 <prvTraceSaveObjectData+0xa4>)
    dbd0:	681b      	ldr	r3, [r3, #0]
    dbd2:	6a3a      	ldr	r2, [r7, #32]
    dbd4:	429a      	cmp	r2, r3
    dbd6:	d10a      	bne.n	dbee <prvTraceSaveObjectData+0x8e>
		{
			firstFreeObjectDataTableIndex += OBJECT_DATA_SLOT_SIZE;
    dbd8:	4b0a      	ldr	r3, [pc, #40]	; (dc04 <prvTraceSaveObjectData+0xa4>)
    dbda:	681b      	ldr	r3, [r3, #0]
    dbdc:	3308      	adds	r3, #8
    dbde:	4a09      	ldr	r2, [pc, #36]	; (dc04 <prvTraceSaveObjectData+0xa4>)
    dbe0:	6013      	str	r3, [r2, #0]
    dbe2:	e004      	b.n	dbee <prvTraceSaveObjectData+0x8e>
		}
	}
	else
	{
		NoRoomForObjectData++;
    dbe4:	4b09      	ldr	r3, [pc, #36]	; (dc0c <prvTraceSaveObjectData+0xac>)
    dbe6:	681b      	ldr	r3, [r3, #0]
    dbe8:	3301      	adds	r3, #1
    dbea:	4a08      	ldr	r2, [pc, #32]	; (dc0c <prvTraceSaveObjectData+0xac>)
    dbec:	6013      	str	r3, [r2, #0]
	}

	TRACE_EXIT_CRITICAL_SECTION();
    dbee:	69bb      	ldr	r3, [r7, #24]
    dbf0:	61fb      	str	r3, [r7, #28]
    dbf2:	69fb      	ldr	r3, [r7, #28]
    dbf4:	f383 8810 	msr	PRIMASK, r3
}
    dbf8:	bf00      	nop
    dbfa:	372c      	adds	r7, #44	; 0x2c
    dbfc:	46bd      	mov	sp, r7
    dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    dc02:	4770      	bx	lr
    dc04:	2000345c 	.word	0x2000345c
    dc08:	200033bc 	.word	0x200033bc
    dc0c:	200034a8 	.word	0x200034a8

0000dc10 <prvTraceDeleteObjectData>:

/* Removes an object data entry (task base priority) from object data table */
void prvTraceDeleteObjectData(void *address)
{
    dc10:	b480      	push	{r7}
    dc12:	b08b      	sub	sp, #44	; 0x2c
    dc14:	af00      	add	r7, sp, #0
    dc16:	6078      	str	r0, [r7, #4]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    dc18:	f3ef 8310 	mrs	r3, PRIMASK
    dc1c:	617b      	str	r3, [r7, #20]
    return(result);
    dc1e:	697b      	ldr	r3, [r7, #20]
	uint32_t i, j;
	uint32_t *ptr, *lastEntryPtr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    dc20:	61bb      	str	r3, [r7, #24]
    dc22:	2301      	movs	r3, #1
    dc24:	60bb      	str	r3, [r7, #8]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    dc26:	68bb      	ldr	r3, [r7, #8]
    dc28:	f383 8810 	msr	PRIMASK, r3

	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
    dc2c:	2300      	movs	r3, #0
    dc2e:	627b      	str	r3, [r7, #36]	; 0x24
    dc30:	e03c      	b.n	dcac <prvTraceDeleteObjectData+0x9c>
	{
		ptr = (uint32_t*)&objectDataTable.pObjectDataTableBuffer[i];
    dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dc34:	4a25      	ldr	r2, [pc, #148]	; (dccc <prvTraceDeleteObjectData+0xbc>)
    dc36:	4413      	add	r3, r2
    dc38:	613b      	str	r3, [r7, #16]
		if (*ptr == (uint32_t)address)
    dc3a:	693b      	ldr	r3, [r7, #16]
    dc3c:	681a      	ldr	r2, [r3, #0]
    dc3e:	687b      	ldr	r3, [r7, #4]
    dc40:	429a      	cmp	r2, r3
    dc42:	d130      	bne.n	dca6 <prvTraceDeleteObjectData+0x96>
		{
			/* See if we have another entry in the table, and that this isn't already the last entry */
			if (firstFreeObjectDataTableIndex > OBJECT_DATA_SLOT_SIZE && i != (firstFreeObjectDataTableIndex - OBJECT_DATA_SLOT_SIZE))
    dc44:	4b22      	ldr	r3, [pc, #136]	; (dcd0 <prvTraceDeleteObjectData+0xc0>)
    dc46:	681b      	ldr	r3, [r3, #0]
    dc48:	2b08      	cmp	r3, #8
    dc4a:	d923      	bls.n	dc94 <prvTraceDeleteObjectData+0x84>
    dc4c:	4b20      	ldr	r3, [pc, #128]	; (dcd0 <prvTraceDeleteObjectData+0xc0>)
    dc4e:	681b      	ldr	r3, [r3, #0]
    dc50:	f1a3 0208 	sub.w	r2, r3, #8
    dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dc56:	429a      	cmp	r2, r3
    dc58:	d01c      	beq.n	dc94 <prvTraceDeleteObjectData+0x84>
			{
				/* Another entry is available, get pointer to the last one */
				lastEntryPtr = ((uint32_t*)&objectDataTable.pObjectDataTableBuffer[firstFreeObjectDataTableIndex - OBJECT_DATA_SLOT_SIZE]);
    dc5a:	4b1d      	ldr	r3, [pc, #116]	; (dcd0 <prvTraceDeleteObjectData+0xc0>)
    dc5c:	681b      	ldr	r3, [r3, #0]
    dc5e:	3b08      	subs	r3, #8
    dc60:	4a1a      	ldr	r2, [pc, #104]	; (dccc <prvTraceDeleteObjectData+0xbc>)
    dc62:	4413      	add	r3, r2
    dc64:	60fb      	str	r3, [r7, #12]
				
				/* Copy last entry to this position */
				for (j = 0; j < (OBJECT_DATA_SLOT_SIZE) / sizeof(uint32_t); j++)
    dc66:	2300      	movs	r3, #0
    dc68:	623b      	str	r3, [r7, #32]
    dc6a:	e00c      	b.n	dc86 <prvTraceDeleteObjectData+0x76>
				{
					ptr[j] = lastEntryPtr[j];
    dc6c:	6a3b      	ldr	r3, [r7, #32]
    dc6e:	009b      	lsls	r3, r3, #2
    dc70:	693a      	ldr	r2, [r7, #16]
    dc72:	4413      	add	r3, r2
    dc74:	6a3a      	ldr	r2, [r7, #32]
    dc76:	0092      	lsls	r2, r2, #2
    dc78:	68f9      	ldr	r1, [r7, #12]
    dc7a:	440a      	add	r2, r1
    dc7c:	6812      	ldr	r2, [r2, #0]
    dc7e:	601a      	str	r2, [r3, #0]
			{
				/* Another entry is available, get pointer to the last one */
				lastEntryPtr = ((uint32_t*)&objectDataTable.pObjectDataTableBuffer[firstFreeObjectDataTableIndex - OBJECT_DATA_SLOT_SIZE]);
				
				/* Copy last entry to this position */
				for (j = 0; j < (OBJECT_DATA_SLOT_SIZE) / sizeof(uint32_t); j++)
    dc80:	6a3b      	ldr	r3, [r7, #32]
    dc82:	3301      	adds	r3, #1
    dc84:	623b      	str	r3, [r7, #32]
    dc86:	6a3b      	ldr	r3, [r7, #32]
    dc88:	2b01      	cmp	r3, #1
    dc8a:	d9ef      	bls.n	dc6c <prvTraceDeleteObjectData+0x5c>
				{
					ptr[j] = lastEntryPtr[j];
				}

				/* For good measure we also zero out the original position */
				*lastEntryPtr = 0;
    dc8c:	68fb      	ldr	r3, [r7, #12]
    dc8e:	2200      	movs	r2, #0
    dc90:	601a      	str	r2, [r3, #0]
    dc92:	e002      	b.n	dc9a <prvTraceDeleteObjectData+0x8a>
			}
			else
				*ptr = 0; /* No other entry found, or this is the last entry */
    dc94:	693b      	ldr	r3, [r7, #16]
    dc96:	2200      	movs	r2, #0
    dc98:	601a      	str	r2, [r3, #0]

			/* Lower index */
			firstFreeObjectDataTableIndex -= OBJECT_DATA_SLOT_SIZE;
    dc9a:	4b0d      	ldr	r3, [pc, #52]	; (dcd0 <prvTraceDeleteObjectData+0xc0>)
    dc9c:	681b      	ldr	r3, [r3, #0]
    dc9e:	3b08      	subs	r3, #8
    dca0:	4a0b      	ldr	r2, [pc, #44]	; (dcd0 <prvTraceDeleteObjectData+0xc0>)
    dca2:	6013      	str	r3, [r2, #0]

			break;
    dca4:	e007      	b.n	dcb6 <prvTraceDeleteObjectData+0xa6>
	uint32_t *ptr, *lastEntryPtr;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();

	for (i = 0; i < firstFreeObjectDataTableIndex; i += OBJECT_DATA_SLOT_SIZE)
    dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    dca8:	3308      	adds	r3, #8
    dcaa:	627b      	str	r3, [r7, #36]	; 0x24
    dcac:	4b08      	ldr	r3, [pc, #32]	; (dcd0 <prvTraceDeleteObjectData+0xc0>)
    dcae:	681b      	ldr	r3, [r3, #0]
    dcb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    dcb2:	429a      	cmp	r2, r3
    dcb4:	d3bd      	bcc.n	dc32 <prvTraceDeleteObjectData+0x22>

			break;
		}
	}

	TRACE_EXIT_CRITICAL_SECTION();
    dcb6:	69bb      	ldr	r3, [r7, #24]
    dcb8:	61fb      	str	r3, [r7, #28]
    dcba:	69fb      	ldr	r3, [r7, #28]
    dcbc:	f383 8810 	msr	PRIMASK, r3
}
    dcc0:	bf00      	nop
    dcc2:	372c      	adds	r7, #44	; 0x2c
    dcc4:	46bd      	mov	sp, r7
    dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
    dcca:	4770      	bx	lr
    dccc:	200033bc 	.word	0x200033bc
    dcd0:	2000345c 	.word	0x2000345c

0000dcd4 <prvIsValidCommand>:

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
    dcd4:	b480      	push	{r7}
    dcd6:	b085      	sub	sp, #20
    dcd8:	af00      	add	r7, sp, #0
    dcda:	6078      	str	r0, [r7, #4]
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
    dcdc:	687b      	ldr	r3, [r7, #4]
    dcde:	781b      	ldrb	r3, [r3, #0]
    dce0:	b29a      	uxth	r2, r3
												cmd->param1 +
    dce2:	687b      	ldr	r3, [r7, #4]
    dce4:	785b      	ldrb	r3, [r3, #1]
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
    dce6:	b29b      	uxth	r3, r3
    dce8:	4413      	add	r3, r2
    dcea:	b29a      	uxth	r2, r3
												cmd->param1 +
												cmd->param2 +
    dcec:	687b      	ldr	r3, [r7, #4]
    dcee:	789b      	ldrb	r3, [r3, #2]
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
    dcf0:	b29b      	uxth	r3, r3
    dcf2:	4413      	add	r3, r2
    dcf4:	b29a      	uxth	r2, r3
												cmd->param1 +
												cmd->param2 +
												cmd->param3 +
    dcf6:	687b      	ldr	r3, [r7, #4]
    dcf8:	78db      	ldrb	r3, [r3, #3]
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
    dcfa:	b29b      	uxth	r3, r3
    dcfc:	4413      	add	r3, r2
    dcfe:	b29a      	uxth	r2, r3
												cmd->param1 +
												cmd->param2 +
												cmd->param3 +
												cmd->param4 +
    dd00:	687b      	ldr	r3, [r7, #4]
    dd02:	791b      	ldrb	r3, [r3, #4]
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
    dd04:	b29b      	uxth	r3, r3
    dd06:	4413      	add	r3, r2
    dd08:	b29a      	uxth	r2, r3
												cmd->param1 +
												cmd->param2 +
												cmd->param3 +
												cmd->param4 +
												cmd->param5));
    dd0a:	687b      	ldr	r3, [r7, #4]
    dd0c:	795b      	ldrb	r3, [r3, #5]
}

/* Checks if the provided command is a valid command */
int prvIsValidCommand(TracealyzerCommandType* cmd)
{
  	uint16_t checksum = (uint16_t)(0xFFFF - (	cmd->cmdCode +
    dd0e:	b29b      	uxth	r3, r3
    dd10:	4413      	add	r3, r2
    dd12:	b29b      	uxth	r3, r3
    dd14:	43db      	mvns	r3, r3
    dd16:	81fb      	strh	r3, [r7, #14]
												cmd->param2 +
												cmd->param3 +
												cmd->param4 +
												cmd->param5));

	if (cmd->checksumMSB != (unsigned char)(checksum >> 8))
    dd18:	687b      	ldr	r3, [r7, #4]
    dd1a:	79da      	ldrb	r2, [r3, #7]
    dd1c:	89fb      	ldrh	r3, [r7, #14]
    dd1e:	0a1b      	lsrs	r3, r3, #8
    dd20:	b29b      	uxth	r3, r3
    dd22:	b2db      	uxtb	r3, r3
    dd24:	429a      	cmp	r2, r3
    dd26:	d001      	beq.n	dd2c <prvIsValidCommand+0x58>
		return 0;
    dd28:	2300      	movs	r3, #0
    dd2a:	e00e      	b.n	dd4a <prvIsValidCommand+0x76>

	if (cmd->checksumLSB != (unsigned char)(checksum & 0xFF))
    dd2c:	687b      	ldr	r3, [r7, #4]
    dd2e:	799a      	ldrb	r2, [r3, #6]
    dd30:	89fb      	ldrh	r3, [r7, #14]
    dd32:	b2db      	uxtb	r3, r3
    dd34:	429a      	cmp	r2, r3
    dd36:	d001      	beq.n	dd3c <prvIsValidCommand+0x68>
		return 0;
    dd38:	2300      	movs	r3, #0
    dd3a:	e006      	b.n	dd4a <prvIsValidCommand+0x76>

	if (cmd->cmdCode > CMD_LAST_COMMAND)
    dd3c:	687b      	ldr	r3, [r7, #4]
    dd3e:	781b      	ldrb	r3, [r3, #0]
    dd40:	2b01      	cmp	r3, #1
    dd42:	d901      	bls.n	dd48 <prvIsValidCommand+0x74>
		return 0;
    dd44:	2300      	movs	r3, #0
    dd46:	e000      	b.n	dd4a <prvIsValidCommand+0x76>

	return 1;
    dd48:	2301      	movs	r3, #1
}
    dd4a:	4618      	mov	r0, r3
    dd4c:	3714      	adds	r7, #20
    dd4e:	46bd      	mov	sp, r7
    dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
    dd54:	4770      	bx	lr
    dd56:	bf00      	nop

0000dd58 <prvProcessCommand>:

/* Executed the received command (Start or Stop) */
void prvProcessCommand(TracealyzerCommandType* cmd)
{
    dd58:	b580      	push	{r7, lr}
    dd5a:	b082      	sub	sp, #8
    dd5c:	af00      	add	r7, sp, #0
    dd5e:	6078      	str	r0, [r7, #4]
  	switch(cmd->cmdCode)
    dd60:	687b      	ldr	r3, [r7, #4]
    dd62:	781b      	ldrb	r3, [r3, #0]
    dd64:	2b01      	cmp	r3, #1
    dd66:	d000      	beq.n	dd6a <prvProcessCommand+0x12>
	{
		case CMD_SET_ACTIVE:
		  	prvSetRecorderEnabled(cmd->param1);
		  	break;
		default:
		  	break;
    dd68:	e005      	b.n	dd76 <prvProcessCommand+0x1e>
void prvProcessCommand(TracealyzerCommandType* cmd)
{
  	switch(cmd->cmdCode)
	{
		case CMD_SET_ACTIVE:
		  	prvSetRecorderEnabled(cmd->param1);
    dd6a:	687b      	ldr	r3, [r7, #4]
    dd6c:	785b      	ldrb	r3, [r3, #1]
    dd6e:	4618      	mov	r0, r3
    dd70:	f7ff f9c0 	bl	d0f4 <prvSetRecorderEnabled>
		  	break;
    dd74:	bf00      	nop
		default:
		  	break;
	}
}
    dd76:	bf00      	nop
    dd78:	3708      	adds	r7, #8
    dd7a:	46bd      	mov	sp, r7
    dd7c:	bd80      	pop	{r7, pc}
    dd7e:	bf00      	nop

0000dd80 <prvTraceError>:

/* Called on critical errors in the recorder. Stops the recorder! */
void prvTraceError(int errCode)
{
    dd80:	b580      	push	{r7, lr}
    dd82:	b082      	sub	sp, #8
    dd84:	af00      	add	r7, sp, #0
    dd86:	6078      	str	r0, [r7, #4]
	if (! errorCode)
    dd88:	4b0a      	ldr	r3, [pc, #40]	; (ddb4 <prvTraceError+0x34>)
    dd8a:	681b      	ldr	r3, [r3, #0]
    dd8c:	2b00      	cmp	r3, #0
    dd8e:	d10d      	bne.n	ddac <prvTraceError+0x2c>
	{
		errorCode = errCode;
    dd90:	4a08      	ldr	r2, [pc, #32]	; (ddb4 <prvTraceError+0x34>)
    dd92:	687b      	ldr	r3, [r7, #4]
    dd94:	6013      	str	r3, [r2, #0]
		prvTraceStoreWarnings();
    dd96:	f7ff fad3 	bl	d340 <prvTraceStoreWarnings>
		vTracePrintF(trcWarningChannel, "Error detected. Stopped recorder.");
    dd9a:	4b07      	ldr	r3, [pc, #28]	; (ddb8 <prvTraceError+0x38>)
    dd9c:	681b      	ldr	r3, [r3, #0]
    dd9e:	4907      	ldr	r1, [pc, #28]	; (ddbc <prvTraceError+0x3c>)
    dda0:	4618      	mov	r0, r3
    dda2:	f7ff f823 	bl	cdec <vTracePrintF>

		prvSetRecorderEnabled(0);
    dda6:	2000      	movs	r0, #0
    dda8:	f7ff f9a4 	bl	d0f4 <prvSetRecorderEnabled>
	}
}
    ddac:	bf00      	nop
    ddae:	3708      	adds	r7, #8
    ddb0:	46bd      	mov	sp, r7
    ddb2:	bd80      	pop	{r7, pc}
    ddb4:	20003480 	.word	0x20003480
    ddb8:	200035f0 	.word	0x200035f0
    ddbc:	00010248 	.word	0x00010248

0000ddc0 <prvTraceInitCortexM>:

/* If ARM Cortex-M3, M4 or M7, make sure the DWT unit is initialized. */
#if (TRC_CFG_HARDWARE_PORT == TRC_HARDWARE_PORT_ARM_Cortex_M && defined (TRC_REG_DWT_CYCCNT))

void prvTraceInitCortexM()
{
    ddc0:	b580      	push	{r7, lr}
    ddc2:	af00      	add	r7, sp, #0
	/* Make sure DWT is enabled is enabled, if supported */
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
    ddc4:	4a11      	ldr	r2, [pc, #68]	; (de0c <prvTraceInitCortexM+0x4c>)
    ddc6:	4b11      	ldr	r3, [pc, #68]	; (de0c <prvTraceInitCortexM+0x4c>)
    ddc8:	681b      	ldr	r3, [r3, #0]
    ddca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    ddce:	6013      	str	r3, [r2, #0]

	do
	{
		/* Verify that DWT is supported */
		if (TRC_REG_DEMCR == 0)
    ddd0:	4b0e      	ldr	r3, [pc, #56]	; (de0c <prvTraceInitCortexM+0x4c>)
    ddd2:	681b      	ldr	r3, [r3, #0]
    ddd4:	2b00      	cmp	r3, #0
    ddd6:	d103      	bne.n	dde0 <prvTraceInitCortexM+0x20>
		{
			prvTraceError(PSF_ERROR_DWT_NOT_SUPPORTED);
    ddd8:	2003      	movs	r0, #3
    ddda:	f7ff ffd1 	bl	dd80 <prvTraceError>
			break;
    ddde:	e012      	b.n	de06 <prvTraceInitCortexM+0x46>
		}

		/* Verify that DWT_CYCCNT is supported */
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
    dde0:	4b0b      	ldr	r3, [pc, #44]	; (de10 <prvTraceInitCortexM+0x50>)
    dde2:	681b      	ldr	r3, [r3, #0]
    dde4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    dde8:	2b00      	cmp	r3, #0
    ddea:	d003      	beq.n	ddf4 <prvTraceInitCortexM+0x34>
		{
			prvTraceError(PSF_ERROR_DWT_CYCCNT_NOT_SUPPORTED);
    ddec:	2004      	movs	r0, #4
    ddee:	f7ff ffc7 	bl	dd80 <prvTraceError>
			break;
    ddf2:	e008      	b.n	de06 <prvTraceInitCortexM+0x46>
		}

		/* Reset the cycle counter */
		TRC_REG_DWT_CYCCNT = 0;
    ddf4:	4b07      	ldr	r3, [pc, #28]	; (de14 <prvTraceInitCortexM+0x54>)
    ddf6:	2200      	movs	r2, #0
    ddf8:	601a      	str	r2, [r3, #0]

		/* Enable the cycle counter */
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
    ddfa:	4a05      	ldr	r2, [pc, #20]	; (de10 <prvTraceInitCortexM+0x50>)
    ddfc:	4b04      	ldr	r3, [pc, #16]	; (de10 <prvTraceInitCortexM+0x50>)
    ddfe:	681b      	ldr	r3, [r3, #0]
    de00:	f043 0301 	orr.w	r3, r3, #1
    de04:	6013      	str	r3, [r2, #0]

	} while(0);	/* breaks above jump here */
}
    de06:	bf00      	nop
    de08:	bd80      	pop	{r7, pc}
    de0a:	bf00      	nop
    de0c:	e000edfc 	.word	0xe000edfc
    de10:	e0001000 	.word	0xe0001000
    de14:	e0001004 	.word	0xe0001004

0000de18 <prvGetTimestamp32>:
#endif

/* Performs timestamping using definitions in trcHardwarePort.h */
static uint32_t prvGetTimestamp32(void)
{
    de18:	b480      	push	{r7}
    de1a:	af00      	add	r7, sp, #0
#if ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR))
	return TRC_HWTC_COUNT;
    de1c:	4b03      	ldr	r3, [pc, #12]	; (de2c <prvGetTimestamp32+0x14>)
    de1e:	681b      	ldr	r3, [r3, #0]
#else /* ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)) */
	int ticks = TRACE_GET_OS_TICKS();
	return (TRC_HWTC_COUNT & 0x00FFFFFF) + ((ticks & 0x000000FF) << 24);
#endif /* ((TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR) || (TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)) */
}
    de20:	4618      	mov	r0, r3
    de22:	46bd      	mov	sp, r7
    de24:	f85d 7b04 	ldr.w	r7, [sp], #4
    de28:	4770      	bx	lr
    de2a:	bf00      	nop
    de2c:	e0001004 	.word	0xe0001004

0000de30 <prvTraceStoreTSConfig>:

/* Store the Timestamp Config event */
static void prvTraceStoreTSConfig(void)
{
    de30:	b580      	push	{r7, lr}
    de32:	b082      	sub	sp, #8
    de34:	af02      	add	r7, sp, #8
	/* If not overridden using vTraceSetFrequency, use default value */
	if (timestampFrequency == 0)
    de36:	4b0b      	ldr	r3, [pc, #44]	; (de64 <prvTraceStoreTSConfig+0x34>)
    de38:	681b      	ldr	r3, [r3, #0]
    de3a:	2b00      	cmp	r3, #0
    de3c:	d103      	bne.n	de46 <prvTraceStoreTSConfig+0x16>
	{
		timestampFrequency = TRC_HWTC_FREQ_HZ;
    de3e:	4b09      	ldr	r3, [pc, #36]	; (de64 <prvTraceStoreTSConfig+0x34>)
    de40:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    de44:	601a      	str	r2, [r3, #0]
	}
	
	prvTraceStoreEvent(4, 
    de46:	4b07      	ldr	r3, [pc, #28]	; (de64 <prvTraceStoreTSConfig+0x34>)
    de48:	681a      	ldr	r2, [r3, #0]
    de4a:	2300      	movs	r3, #0
    de4c:	9301      	str	r3, [sp, #4]
    de4e:	2301      	movs	r3, #1
    de50:	9300      	str	r3, [sp, #0]
    de52:	2364      	movs	r3, #100	; 0x64
    de54:	2102      	movs	r1, #2
    de56:	2004      	movs	r0, #4
    de58:	f7ff fc2e 	bl	d6b8 <prvTraceStoreEvent>
						PSF_EVENT_TS_CONFIG,
						timestampFrequency,
						(uint32_t)TRACE_TICK_RATE_HZ,
						(int32_t)TRC_HWTC_TYPE,
						(uint32_t)TRC_CFG_ISR_TAILCHAINING_THRESHOLD);
}
    de5c:	bf00      	nop
    de5e:	46bd      	mov	sp, r7
    de60:	bd80      	pop	{r7, pc}
    de62:	bf00      	nop
    de64:	20003498 	.word	0x20003498

0000de68 <prvAllocateBufferPage>:

/* Retrieve a buffer page to write to. */
static int prvAllocateBufferPage(int prevPage)
{
    de68:	b480      	push	{r7}
    de6a:	b085      	sub	sp, #20
    de6c:	af00      	add	r7, sp, #0
    de6e:	6078      	str	r0, [r7, #4]
	int index;
	int count = 0;
    de70:	2300      	movs	r3, #0
    de72:	60bb      	str	r3, [r7, #8]

	index = (prevPage + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;
    de74:	687b      	ldr	r3, [r7, #4]
    de76:	1c5a      	adds	r2, r3, #1
    de78:	4b17      	ldr	r3, [pc, #92]	; (ded8 <prvAllocateBufferPage+0x70>)
    de7a:	4013      	ands	r3, r2
    de7c:	2b00      	cmp	r3, #0
    de7e:	da03      	bge.n	de88 <prvAllocateBufferPage+0x20>
    de80:	3b01      	subs	r3, #1
    de82:	f063 0301 	orn	r3, r3, #1
    de86:	3301      	adds	r3, #1
    de88:	60fb      	str	r3, [r7, #12]

	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT))
    de8a:	e00a      	b.n	dea2 <prvAllocateBufferPage+0x3a>
	{
		index = (index + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;
    de8c:	68fb      	ldr	r3, [r7, #12]
    de8e:	1c5a      	adds	r2, r3, #1
    de90:	4b11      	ldr	r3, [pc, #68]	; (ded8 <prvAllocateBufferPage+0x70>)
    de92:	4013      	ands	r3, r2
    de94:	2b00      	cmp	r3, #0
    de96:	da03      	bge.n	dea0 <prvAllocateBufferPage+0x38>
    de98:	3b01      	subs	r3, #1
    de9a:	f063 0301 	orn	r3, r3, #1
    de9e:	3301      	adds	r3, #1
    dea0:	60fb      	str	r3, [r7, #12]
	int index;
	int count = 0;

	index = (prevPage + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;

	while((PageInfo[index].Status != PAGE_STATUS_FREE) && (count ++ < TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT))
    dea2:	4a0e      	ldr	r2, [pc, #56]	; (dedc <prvAllocateBufferPage+0x74>)
    dea4:	68fb      	ldr	r3, [r7, #12]
    dea6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    deaa:	2b00      	cmp	r3, #0
    deac:	d004      	beq.n	deb8 <prvAllocateBufferPage+0x50>
    deae:	68bb      	ldr	r3, [r7, #8]
    deb0:	1c5a      	adds	r2, r3, #1
    deb2:	60ba      	str	r2, [r7, #8]
    deb4:	2b01      	cmp	r3, #1
    deb6:	dde9      	ble.n	de8c <prvAllocateBufferPage+0x24>
	{
		index = (index + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;
	}

	if (PageInfo[index].Status == PAGE_STATUS_FREE)
    deb8:	4a08      	ldr	r2, [pc, #32]	; (dedc <prvAllocateBufferPage+0x74>)
    deba:	68fb      	ldr	r3, [r7, #12]
    debc:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    dec0:	2b00      	cmp	r3, #0
    dec2:	d101      	bne.n	dec8 <prvAllocateBufferPage+0x60>
	{
		return index;
    dec4:	68fb      	ldr	r3, [r7, #12]
    dec6:	e001      	b.n	decc <prvAllocateBufferPage+0x64>
	}

	return -1;
    dec8:	f04f 33ff 	mov.w	r3, #4294967295
}
    decc:	4618      	mov	r0, r3
    dece:	3714      	adds	r7, #20
    ded0:	46bd      	mov	sp, r7
    ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
    ded6:	4770      	bx	lr
    ded8:	80000001 	.word	0x80000001
    dedc:	200035f4 	.word	0x200035f4

0000dee0 <prvPageReadComplete>:

/* Mark the page read as complete. */
static void prvPageReadComplete(int pageIndex)
{
    dee0:	b480      	push	{r7}
    dee2:	b087      	sub	sp, #28
    dee4:	af00      	add	r7, sp, #0
    dee6:	6078      	str	r0, [r7, #4]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    dee8:	f3ef 8310 	mrs	r3, PRIMASK
    deec:	613b      	str	r3, [r7, #16]
    return(result);
    deee:	693b      	ldr	r3, [r7, #16]
  	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ENTER_CRITICAL_SECTION();
    def0:	617b      	str	r3, [r7, #20]
    def2:	2301      	movs	r3, #1
    def4:	60fb      	str	r3, [r7, #12]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    def6:	68fb      	ldr	r3, [r7, #12]
    def8:	f383 8810 	msr	PRIMASK, r3
	PageInfo[pageIndex].BytesRemaining = TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE;
    defc:	4a14      	ldr	r2, [pc, #80]	; (df50 <prvPageReadComplete+0x70>)
    defe:	687b      	ldr	r3, [r7, #4]
    df00:	00db      	lsls	r3, r3, #3
    df02:	4413      	add	r3, r2
    df04:	f640 12c4 	movw	r2, #2500	; 0x9c4
    df08:	805a      	strh	r2, [r3, #2]
	PageInfo[pageIndex].WritePointer = &EventBuffer[pageIndex * TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE];
    df0a:	4b12      	ldr	r3, [pc, #72]	; (df54 <prvPageReadComplete+0x74>)
    df0c:	681b      	ldr	r3, [r3, #0]
    df0e:	687a      	ldr	r2, [r7, #4]
    df10:	f640 11c4 	movw	r1, #2500	; 0x9c4
    df14:	fb01 f202 	mul.w	r2, r1, r2
    df18:	441a      	add	r2, r3
    df1a:	490d      	ldr	r1, [pc, #52]	; (df50 <prvPageReadComplete+0x70>)
    df1c:	687b      	ldr	r3, [r7, #4]
    df1e:	00db      	lsls	r3, r3, #3
    df20:	440b      	add	r3, r1
    df22:	605a      	str	r2, [r3, #4]
	PageInfo[pageIndex].Status = PAGE_STATUS_FREE;
    df24:	4a0a      	ldr	r2, [pc, #40]	; (df50 <prvPageReadComplete+0x70>)
    df26:	687b      	ldr	r3, [r7, #4]
    df28:	2100      	movs	r1, #0
    df2a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

	TotalBytesRemaining += TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE;
    df2e:	4b0a      	ldr	r3, [pc, #40]	; (df58 <prvPageReadComplete+0x78>)
    df30:	681b      	ldr	r3, [r3, #0]
    df32:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
    df36:	4a08      	ldr	r2, [pc, #32]	; (df58 <prvPageReadComplete+0x78>)
    df38:	6013      	str	r3, [r2, #0]

	TRACE_EXIT_CRITICAL_SECTION();
    df3a:	697b      	ldr	r3, [r7, #20]
    df3c:	60bb      	str	r3, [r7, #8]
    df3e:	68bb      	ldr	r3, [r7, #8]
    df40:	f383 8810 	msr	PRIMASK, r3
}
    df44:	bf00      	nop
    df46:	371c      	adds	r7, #28
    df48:	46bd      	mov	sp, r7
    df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
    df4e:	4770      	bx	lr
    df50:	200035f4 	.word	0x200035f4
    df54:	200034a0 	.word	0x200034a0
    df58:	20000034 	.word	0x20000034

0000df5c <prvGetBufferPage>:

/* Get the current buffer page index and remaining number of bytes. */
static int prvGetBufferPage(int32_t* bytesUsed)
{
    df5c:	b480      	push	{r7}
    df5e:	b085      	sub	sp, #20
    df60:	af00      	add	r7, sp, #0
    df62:	6078      	str	r0, [r7, #4]
	static int8_t lastPage = -1;
	int count = 0;
    df64:	2300      	movs	r3, #0
    df66:	60fb      	str	r3, [r7, #12]
  	int8_t index = (lastPage + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;
    df68:	4b24      	ldr	r3, [pc, #144]	; (dffc <prvGetBufferPage+0xa0>)
    df6a:	f993 3000 	ldrsb.w	r3, [r3]
    df6e:	1c5a      	adds	r2, r3, #1
    df70:	4b23      	ldr	r3, [pc, #140]	; (e000 <prvGetBufferPage+0xa4>)
    df72:	4013      	ands	r3, r2
    df74:	2b00      	cmp	r3, #0
    df76:	da03      	bge.n	df80 <prvGetBufferPage+0x24>
    df78:	3b01      	subs	r3, #1
    df7a:	f063 0301 	orn	r3, r3, #1
    df7e:	3301      	adds	r3, #1
    df80:	72fb      	strb	r3, [r7, #11]

	while((PageInfo[index].Status != PAGE_STATUS_READ) && (count++ < TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT))
    df82:	e00b      	b.n	df9c <prvGetBufferPage+0x40>
	{
		index = (index + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;
    df84:	f997 300b 	ldrsb.w	r3, [r7, #11]
    df88:	1c5a      	adds	r2, r3, #1
    df8a:	4b1d      	ldr	r3, [pc, #116]	; (e000 <prvGetBufferPage+0xa4>)
    df8c:	4013      	ands	r3, r2
    df8e:	2b00      	cmp	r3, #0
    df90:	da03      	bge.n	df9a <prvGetBufferPage+0x3e>
    df92:	3b01      	subs	r3, #1
    df94:	f063 0301 	orn	r3, r3, #1
    df98:	3301      	adds	r3, #1
    df9a:	72fb      	strb	r3, [r7, #11]
{
	static int8_t lastPage = -1;
	int count = 0;
  	int8_t index = (lastPage + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;

	while((PageInfo[index].Status != PAGE_STATUS_READ) && (count++ < TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT))
    df9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
    dfa0:	4a18      	ldr	r2, [pc, #96]	; (e004 <prvGetBufferPage+0xa8>)
    dfa2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    dfa6:	2b02      	cmp	r3, #2
    dfa8:	d004      	beq.n	dfb4 <prvGetBufferPage+0x58>
    dfaa:	68fb      	ldr	r3, [r7, #12]
    dfac:	1c5a      	adds	r2, r3, #1
    dfae:	60fa      	str	r2, [r7, #12]
    dfb0:	2b01      	cmp	r3, #1
    dfb2:	dde7      	ble.n	df84 <prvGetBufferPage+0x28>
	{
		index = (index + 1) % TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT;
	}

	if (PageInfo[index].Status == PAGE_STATUS_READ)
    dfb4:	f997 300b 	ldrsb.w	r3, [r7, #11]
    dfb8:	4a12      	ldr	r2, [pc, #72]	; (e004 <prvGetBufferPage+0xa8>)
    dfba:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    dfbe:	2b02      	cmp	r3, #2
    dfc0:	d110      	bne.n	dfe4 <prvGetBufferPage+0x88>
	{
		*bytesUsed = TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE - PageInfo[index].BytesRemaining;
    dfc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
    dfc6:	4a0f      	ldr	r2, [pc, #60]	; (e004 <prvGetBufferPage+0xa8>)
    dfc8:	00db      	lsls	r3, r3, #3
    dfca:	4413      	add	r3, r2
    dfcc:	885b      	ldrh	r3, [r3, #2]
    dfce:	f5c3 631c 	rsb	r3, r3, #2496	; 0x9c0
    dfd2:	3304      	adds	r3, #4
    dfd4:	687a      	ldr	r2, [r7, #4]
    dfd6:	6013      	str	r3, [r2, #0]
		lastPage = index;
    dfd8:	4a08      	ldr	r2, [pc, #32]	; (dffc <prvGetBufferPage+0xa0>)
    dfda:	7afb      	ldrb	r3, [r7, #11]
    dfdc:	7013      	strb	r3, [r2, #0]
		return index;
    dfde:	f997 300b 	ldrsb.w	r3, [r7, #11]
    dfe2:	e004      	b.n	dfee <prvGetBufferPage+0x92>
	}

	*bytesUsed = 0;
    dfe4:	687b      	ldr	r3, [r7, #4]
    dfe6:	2200      	movs	r2, #0
    dfe8:	601a      	str	r2, [r3, #0]

	return -1;
    dfea:	f04f 33ff 	mov.w	r3, #4294967295
}
    dfee:	4618      	mov	r0, r3
    dff0:	3714      	adds	r7, #20
    dff2:	46bd      	mov	sp, r7
    dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
    dff8:	4770      	bx	lr
    dffa:	bf00      	nop
    dffc:	20000038 	.word	0x20000038
    e000:	80000001 	.word	0x80000001
    e004:	200035f4 	.word	0x200035f4

0000e008 <prvPagedEventBufferTransfer>:
- int32_t* nofBytes
Pointer to an integer assigned the number of bytes that was transfered.

*******************************************************************************/
int32_t prvPagedEventBufferTransfer(int32_t (*writeFunc)(void* data, uint32_t size, int32_t* ptrBytesWritten), int32_t* nofBytes)
{
    e008:	b580      	push	{r7, lr}
    e00a:	b086      	sub	sp, #24
    e00c:	af00      	add	r7, sp, #0
    e00e:	6078      	str	r0, [r7, #4]
    e010:	6039      	str	r1, [r7, #0]
	int8_t pageToTransfer = -1;
    e012:	23ff      	movs	r3, #255	; 0xff
    e014:	74fb      	strb	r3, [r7, #19]
    int32_t transferred = 0;
    e016:	2300      	movs	r3, #0
    e018:	617b      	str	r3, [r7, #20]
    int32_t size = 0;
    e01a:	2300      	movs	r3, #0
    e01c:	60fb      	str	r3, [r7, #12]
    
    pageToTransfer = prvGetBufferPage(nofBytes);
    e01e:	6838      	ldr	r0, [r7, #0]
    e020:	f7ff ff9c 	bl	df5c <prvGetBufferPage>
    e024:	4603      	mov	r3, r0
    e026:	74fb      	strb	r3, [r7, #19]
    size = *nofBytes;	// The number of bytes we want to transfer
    e028:	683b      	ldr	r3, [r7, #0]
    e02a:	681b      	ldr	r3, [r3, #0]
    e02c:	60fb      	str	r3, [r7, #12]
    transferred = 0;	// The number of bytes we have transferred so far
    e02e:	2300      	movs	r3, #0
    e030:	617b      	str	r3, [r7, #20]

    if (pageToTransfer > -1)
    e032:	f997 3013 	ldrsb.w	r3, [r7, #19]
    e036:	2b00      	cmp	r3, #0
    e038:	db2c      	blt.n	e094 <prvPagedEventBufferTransfer+0x8c>
    {
        while (1) // Keep going until we have transferred all that we intended to
        {
			if (writeFunc(&EventBuffer[pageToTransfer * TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE + transferred], size - transferred, nofBytes) == 0)
    e03a:	4b19      	ldr	r3, [pc, #100]	; (e0a0 <prvPagedEventBufferTransfer+0x98>)
    e03c:	681b      	ldr	r3, [r3, #0]
    e03e:	f997 2013 	ldrsb.w	r2, [r7, #19]
    e042:	f640 11c4 	movw	r1, #2500	; 0x9c4
    e046:	fb01 f102 	mul.w	r1, r1, r2
    e04a:	697a      	ldr	r2, [r7, #20]
    e04c:	440a      	add	r2, r1
    e04e:	1898      	adds	r0, r3, r2
    e050:	68fa      	ldr	r2, [r7, #12]
    e052:	697b      	ldr	r3, [r7, #20]
    e054:	1ad3      	subs	r3, r2, r3
    e056:	4619      	mov	r1, r3
    e058:	687b      	ldr	r3, [r7, #4]
    e05a:	683a      	ldr	r2, [r7, #0]
    e05c:	4798      	blx	r3
    e05e:	4603      	mov	r3, r0
    e060:	2b00      	cmp	r3, #0
    e062:	d112      	bne.n	e08a <prvPagedEventBufferTransfer+0x82>
			{
				// Write was successful. Update the number of transferred bytes.
				transferred += *nofBytes;
    e064:	683b      	ldr	r3, [r7, #0]
    e066:	681b      	ldr	r3, [r3, #0]
    e068:	697a      	ldr	r2, [r7, #20]
    e06a:	4413      	add	r3, r2
    e06c:	617b      	str	r3, [r7, #20]
				if (size == transferred)
    e06e:	68fa      	ldr	r2, [r7, #12]
    e070:	697b      	ldr	r3, [r7, #20]
    e072:	429a      	cmp	r2, r3
    e074:	d1e1      	bne.n	e03a <prvPagedEventBufferTransfer+0x32>
				{
					// All bytes have been transferred. Mark as Complete and return.
                    *nofBytes = transferred;
    e076:	683b      	ldr	r3, [r7, #0]
    e078:	697a      	ldr	r2, [r7, #20]
    e07a:	601a      	str	r2, [r3, #0]
					prvPageReadComplete(pageToTransfer);
    e07c:	f997 3013 	ldrsb.w	r3, [r7, #19]
    e080:	4618      	mov	r0, r3
    e082:	f7ff ff2d 	bl	dee0 <prvPageReadComplete>
					return 0;
    e086:	2300      	movs	r3, #0
    e088:	e005      	b.n	e096 <prvPagedEventBufferTransfer+0x8e>
				}
			}
			else
			{
				*nofBytes = 0;
    e08a:	683b      	ldr	r3, [r7, #0]
    e08c:	2200      	movs	r2, #0
    e08e:	601a      	str	r2, [r3, #0]
				return 1;
    e090:	2301      	movs	r3, #1
    e092:	e000      	b.n	e096 <prvPagedEventBufferTransfer+0x8e>
			}
		}
	}
	return 0;
    e094:	2300      	movs	r3, #0
}
    e096:	4618      	mov	r0, r3
    e098:	3718      	adds	r7, #24
    e09a:	46bd      	mov	sp, r7
    e09c:	bd80      	pop	{r7, pc}
    e09e:	bf00      	nop
    e0a0:	200034a0 	.word	0x200034a0

0000e0a4 <prvPagedEventBufferGetWritePointer>:
- sizeOfEvent
The size of the event that is to be placed in the buffer.

*******************************************************************************/
void* prvPagedEventBufferGetWritePointer(int sizeOfEvent)
{
    e0a4:	b580      	push	{r7, lr}
    e0a6:	b084      	sub	sp, #16
    e0a8:	af00      	add	r7, sp, #0
    e0aa:	6078      	str	r0, [r7, #4]
	void* ret;
	static int currentWritePage = -1;

	if (currentWritePage == -1)
    e0ac:	4b46      	ldr	r3, [pc, #280]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e0ae:	681b      	ldr	r3, [r3, #0]
    e0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
    e0b4:	d113      	bne.n	e0de <prvPagedEventBufferGetWritePointer+0x3a>
	{
	    currentWritePage = prvAllocateBufferPage(currentWritePage);
    e0b6:	4b44      	ldr	r3, [pc, #272]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e0b8:	681b      	ldr	r3, [r3, #0]
    e0ba:	4618      	mov	r0, r3
    e0bc:	f7ff fed4 	bl	de68 <prvAllocateBufferPage>
    e0c0:	4602      	mov	r2, r0
    e0c2:	4b41      	ldr	r3, [pc, #260]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e0c4:	601a      	str	r2, [r3, #0]
		if (currentWritePage == -1)
    e0c6:	4b40      	ldr	r3, [pc, #256]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e0c8:	681b      	ldr	r3, [r3, #0]
    e0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    e0ce:	d106      	bne.n	e0de <prvPagedEventBufferGetWritePointer+0x3a>
		{
		  	DroppedEventCounter++;
    e0d0:	4b3e      	ldr	r3, [pc, #248]	; (e1cc <prvPagedEventBufferGetWritePointer+0x128>)
    e0d2:	681b      	ldr	r3, [r3, #0]
    e0d4:	3301      	adds	r3, #1
    e0d6:	4a3d      	ldr	r2, [pc, #244]	; (e1cc <prvPagedEventBufferGetWritePointer+0x128>)
    e0d8:	6013      	str	r3, [r2, #0]
			return NULL;
    e0da:	2300      	movs	r3, #0
    e0dc:	e070      	b.n	e1c0 <prvPagedEventBufferGetWritePointer+0x11c>
		}
	}

    if (PageInfo[currentWritePage].BytesRemaining - sizeOfEvent < 0)
    e0de:	4b3a      	ldr	r3, [pc, #232]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e0e0:	681b      	ldr	r3, [r3, #0]
    e0e2:	4a3b      	ldr	r2, [pc, #236]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e0e4:	00db      	lsls	r3, r3, #3
    e0e6:	4413      	add	r3, r2
    e0e8:	885b      	ldrh	r3, [r3, #2]
    e0ea:	461a      	mov	r2, r3
    e0ec:	687b      	ldr	r3, [r7, #4]
    e0ee:	1ad3      	subs	r3, r2, r3
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	da2e      	bge.n	e152 <prvPagedEventBufferGetWritePointer+0xae>
	{
		PageInfo[currentWritePage].Status = PAGE_STATUS_READ;
    e0f4:	4b34      	ldr	r3, [pc, #208]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e0f6:	681b      	ldr	r3, [r3, #0]
    e0f8:	4a35      	ldr	r2, [pc, #212]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e0fa:	2102      	movs	r1, #2
    e0fc:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

		TotalBytesRemaining -= PageInfo[currentWritePage].BytesRemaining; // Last trailing bytes
    e100:	4b34      	ldr	r3, [pc, #208]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e102:	681a      	ldr	r2, [r3, #0]
    e104:	4b30      	ldr	r3, [pc, #192]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e106:	681b      	ldr	r3, [r3, #0]
    e108:	4931      	ldr	r1, [pc, #196]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e10a:	00db      	lsls	r3, r3, #3
    e10c:	440b      	add	r3, r1
    e10e:	885b      	ldrh	r3, [r3, #2]
    e110:	1ad3      	subs	r3, r2, r3
    e112:	4a30      	ldr	r2, [pc, #192]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e114:	6013      	str	r3, [r2, #0]

		if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
    e116:	4b2f      	ldr	r3, [pc, #188]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e118:	681a      	ldr	r2, [r3, #0]
    e11a:	4b2f      	ldr	r3, [pc, #188]	; (e1d8 <prvPagedEventBufferGetWritePointer+0x134>)
    e11c:	681b      	ldr	r3, [r3, #0]
    e11e:	429a      	cmp	r2, r3
    e120:	d203      	bcs.n	e12a <prvPagedEventBufferGetWritePointer+0x86>
		  TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;
    e122:	4b2c      	ldr	r3, [pc, #176]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e124:	681b      	ldr	r3, [r3, #0]
    e126:	4a2c      	ldr	r2, [pc, #176]	; (e1d8 <prvPagedEventBufferGetWritePointer+0x134>)
    e128:	6013      	str	r3, [r2, #0]

		currentWritePage = prvAllocateBufferPage(currentWritePage);
    e12a:	4b27      	ldr	r3, [pc, #156]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e12c:	681b      	ldr	r3, [r3, #0]
    e12e:	4618      	mov	r0, r3
    e130:	f7ff fe9a 	bl	de68 <prvAllocateBufferPage>
    e134:	4602      	mov	r2, r0
    e136:	4b24      	ldr	r3, [pc, #144]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e138:	601a      	str	r2, [r3, #0]
		if (currentWritePage == -1)
    e13a:	4b23      	ldr	r3, [pc, #140]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e13c:	681b      	ldr	r3, [r3, #0]
    e13e:	f1b3 3fff 	cmp.w	r3, #4294967295
    e142:	d106      	bne.n	e152 <prvPagedEventBufferGetWritePointer+0xae>
		{
		  DroppedEventCounter++;
    e144:	4b21      	ldr	r3, [pc, #132]	; (e1cc <prvPagedEventBufferGetWritePointer+0x128>)
    e146:	681b      	ldr	r3, [r3, #0]
    e148:	3301      	adds	r3, #1
    e14a:	4a20      	ldr	r2, [pc, #128]	; (e1cc <prvPagedEventBufferGetWritePointer+0x128>)
    e14c:	6013      	str	r3, [r2, #0]
		  return NULL;
    e14e:	2300      	movs	r3, #0
    e150:	e036      	b.n	e1c0 <prvPagedEventBufferGetWritePointer+0x11c>
		}
	}
	ret = PageInfo[currentWritePage].WritePointer;
    e152:	4b1d      	ldr	r3, [pc, #116]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e154:	681b      	ldr	r3, [r3, #0]
    e156:	4a1e      	ldr	r2, [pc, #120]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e158:	00db      	lsls	r3, r3, #3
    e15a:	4413      	add	r3, r2
    e15c:	685b      	ldr	r3, [r3, #4]
    e15e:	60fb      	str	r3, [r7, #12]
	PageInfo[currentWritePage].WritePointer += sizeOfEvent;
    e160:	4b19      	ldr	r3, [pc, #100]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e162:	6819      	ldr	r1, [r3, #0]
    e164:	4b18      	ldr	r3, [pc, #96]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e166:	681b      	ldr	r3, [r3, #0]
    e168:	4a19      	ldr	r2, [pc, #100]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e16a:	00db      	lsls	r3, r3, #3
    e16c:	4413      	add	r3, r2
    e16e:	685a      	ldr	r2, [r3, #4]
    e170:	687b      	ldr	r3, [r7, #4]
    e172:	441a      	add	r2, r3
    e174:	4816      	ldr	r0, [pc, #88]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e176:	00cb      	lsls	r3, r1, #3
    e178:	4403      	add	r3, r0
    e17a:	605a      	str	r2, [r3, #4]
	PageInfo[currentWritePage].BytesRemaining -= sizeOfEvent;
    e17c:	4b12      	ldr	r3, [pc, #72]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e17e:	681a      	ldr	r2, [r3, #0]
    e180:	4b11      	ldr	r3, [pc, #68]	; (e1c8 <prvPagedEventBufferGetWritePointer+0x124>)
    e182:	681b      	ldr	r3, [r3, #0]
    e184:	4912      	ldr	r1, [pc, #72]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e186:	00db      	lsls	r3, r3, #3
    e188:	440b      	add	r3, r1
    e18a:	8859      	ldrh	r1, [r3, #2]
    e18c:	687b      	ldr	r3, [r7, #4]
    e18e:	b29b      	uxth	r3, r3
    e190:	1acb      	subs	r3, r1, r3
    e192:	b298      	uxth	r0, r3
    e194:	490e      	ldr	r1, [pc, #56]	; (e1d0 <prvPagedEventBufferGetWritePointer+0x12c>)
    e196:	00d3      	lsls	r3, r2, #3
    e198:	440b      	add	r3, r1
    e19a:	4602      	mov	r2, r0
    e19c:	805a      	strh	r2, [r3, #2]

	TotalBytesRemaining -= sizeOfEvent;
    e19e:	4b0d      	ldr	r3, [pc, #52]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e1a0:	681a      	ldr	r2, [r3, #0]
    e1a2:	687b      	ldr	r3, [r7, #4]
    e1a4:	1ad3      	subs	r3, r2, r3
    e1a6:	4a0b      	ldr	r2, [pc, #44]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e1a8:	6013      	str	r3, [r2, #0]

	if (TotalBytesRemaining < TotalBytesRemaining_LowWaterMark)
    e1aa:	4b0a      	ldr	r3, [pc, #40]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e1ac:	681a      	ldr	r2, [r3, #0]
    e1ae:	4b0a      	ldr	r3, [pc, #40]	; (e1d8 <prvPagedEventBufferGetWritePointer+0x134>)
    e1b0:	681b      	ldr	r3, [r3, #0]
    e1b2:	429a      	cmp	r2, r3
    e1b4:	d203      	bcs.n	e1be <prvPagedEventBufferGetWritePointer+0x11a>
		TotalBytesRemaining_LowWaterMark = TotalBytesRemaining;
    e1b6:	4b07      	ldr	r3, [pc, #28]	; (e1d4 <prvPagedEventBufferGetWritePointer+0x130>)
    e1b8:	681b      	ldr	r3, [r3, #0]
    e1ba:	4a07      	ldr	r2, [pc, #28]	; (e1d8 <prvPagedEventBufferGetWritePointer+0x134>)
    e1bc:	6013      	str	r3, [r2, #0]

	return ret;
    e1be:	68fb      	ldr	r3, [r7, #12]
}
    e1c0:	4618      	mov	r0, r3
    e1c2:	3710      	adds	r7, #16
    e1c4:	46bd      	mov	sp, r7
    e1c6:	bd80      	pop	{r7, pc}
    e1c8:	2000003c 	.word	0x2000003c
    e1cc:	2000349c 	.word	0x2000349c
    e1d0:	200035f4 	.word	0x200035f4
    e1d4:	20000034 	.word	0x20000034
    e1d8:	20000030 	.word	0x20000030

0000e1dc <prvPagedEventBufferInit>:
Pointer to the buffer location that is dynamically or statically allocated by
the caller.

*******************************************************************************/
void prvPagedEventBufferInit(char* buffer)
{
    e1dc:	b480      	push	{r7}
    e1de:	b089      	sub	sp, #36	; 0x24
    e1e0:	af00      	add	r7, sp, #0
    e1e2:	6078      	str	r0, [r7, #4]
  	TRACE_ALLOC_CRITICAL_SECTION();
  	int i;
    
    EventBuffer = buffer;
    e1e4:	4a1c      	ldr	r2, [pc, #112]	; (e258 <prvPagedEventBufferInit+0x7c>)
    e1e6:	687b      	ldr	r3, [r7, #4]
    e1e8:	6013      	str	r3, [r2, #0]
   */
  __attribute__( ( always_inline ) ) static inline uint32_t __get_PRIMASK(void)
  {
    uint32_t result;

    __asm volatile ("MRS %0, primask" : "=r" (result) );
    e1ea:	f3ef 8310 	mrs	r3, PRIMASK
    e1ee:	613b      	str	r3, [r7, #16]
    return(result);
    e1f0:	693b      	ldr	r3, [r7, #16]
    
	TRACE_ENTER_CRITICAL_SECTION();
    e1f2:	617b      	str	r3, [r7, #20]
    e1f4:	2301      	movs	r3, #1
    e1f6:	60fb      	str	r3, [r7, #12]
      This function assigns the given value to the Priority Mask Register.
      \param [in]    priMask  Priority Mask
   */
  __attribute__( ( always_inline ) ) static inline void __set_PRIMASK(uint32_t priMask)
  {
    __asm volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    e1f8:	68fb      	ldr	r3, [r7, #12]
    e1fa:	f383 8810 	msr	PRIMASK, r3
	for (i = 0; i < TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT; i++)
    e1fe:	2300      	movs	r3, #0
    e200:	61fb      	str	r3, [r7, #28]
    e202:	e01b      	b.n	e23c <prvPagedEventBufferInit+0x60>
	{
		PageInfo[i].BytesRemaining = TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE;
    e204:	4a15      	ldr	r2, [pc, #84]	; (e25c <prvPagedEventBufferInit+0x80>)
    e206:	69fb      	ldr	r3, [r7, #28]
    e208:	00db      	lsls	r3, r3, #3
    e20a:	4413      	add	r3, r2
    e20c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    e210:	805a      	strh	r2, [r3, #2]
		PageInfo[i].WritePointer = &EventBuffer[i * TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE];
    e212:	4b11      	ldr	r3, [pc, #68]	; (e258 <prvPagedEventBufferInit+0x7c>)
    e214:	681b      	ldr	r3, [r3, #0]
    e216:	69fa      	ldr	r2, [r7, #28]
    e218:	f640 11c4 	movw	r1, #2500	; 0x9c4
    e21c:	fb01 f202 	mul.w	r2, r1, r2
    e220:	441a      	add	r2, r3
    e222:	490e      	ldr	r1, [pc, #56]	; (e25c <prvPagedEventBufferInit+0x80>)
    e224:	69fb      	ldr	r3, [r7, #28]
    e226:	00db      	lsls	r3, r3, #3
    e228:	440b      	add	r3, r1
    e22a:	605a      	str	r2, [r3, #4]
		PageInfo[i].Status = PAGE_STATUS_FREE;
    e22c:	4a0b      	ldr	r2, [pc, #44]	; (e25c <prvPagedEventBufferInit+0x80>)
    e22e:	69fb      	ldr	r3, [r7, #28]
    e230:	2100      	movs	r1, #0
    e232:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  	int i;
    
    EventBuffer = buffer;
    
	TRACE_ENTER_CRITICAL_SECTION();
	for (i = 0; i < TRC_CFG_PAGED_EVENT_BUFFER_PAGE_COUNT; i++)
    e236:	69fb      	ldr	r3, [r7, #28]
    e238:	3301      	adds	r3, #1
    e23a:	61fb      	str	r3, [r7, #28]
    e23c:	69fb      	ldr	r3, [r7, #28]
    e23e:	2b01      	cmp	r3, #1
    e240:	dde0      	ble.n	e204 <prvPagedEventBufferInit+0x28>
	{
		PageInfo[i].BytesRemaining = TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE;
		PageInfo[i].WritePointer = &EventBuffer[i * TRC_CFG_PAGED_EVENT_BUFFER_PAGE_SIZE];
		PageInfo[i].Status = PAGE_STATUS_FREE;
	}
	TRACE_EXIT_CRITICAL_SECTION();
    e242:	697b      	ldr	r3, [r7, #20]
    e244:	61bb      	str	r3, [r7, #24]
    e246:	69bb      	ldr	r3, [r7, #24]
    e248:	f383 8810 	msr	PRIMASK, r3
}
    e24c:	bf00      	nop
    e24e:	3724      	adds	r7, #36	; 0x24
    e250:	46bd      	mov	sp, r7
    e252:	f85d 7b04 	ldr.w	r7, [sp], #4
    e256:	4770      	bx	lr
    e258:	200034a0 	.word	0x200034a0
    e25c:	200035f4 	.word	0x200035f4

0000e260 <__copy_rom_section>:

/*
 *	Routine to copy a single section from ROM to RAM ...
 */
void __copy_rom_section(unsigned long dst, unsigned long src, unsigned long size)
{
    e260:	b480      	push	{r7}
    e262:	b08b      	sub	sp, #44	; 0x2c
    e264:	af00      	add	r7, sp, #0
    e266:	60f8      	str	r0, [r7, #12]
    e268:	60b9      	str	r1, [r7, #8]
    e26a:	607a      	str	r2, [r7, #4]
	unsigned long len = size;
    e26c:	687b      	ldr	r3, [r7, #4]
    e26e:	627b      	str	r3, [r7, #36]	; 0x24

	const unsigned int size_int = sizeof(int);
    e270:	2304      	movs	r3, #4
    e272:	623b      	str	r3, [r7, #32]
	const unsigned int mask_int = sizeof(int)-1;
    e274:	2303      	movs	r3, #3
    e276:	61fb      	str	r3, [r7, #28]

	const unsigned int size_short = sizeof(short);
    e278:	2302      	movs	r3, #2
    e27a:	61bb      	str	r3, [r7, #24]
	const unsigned int mask_short = sizeof(short)-1;
    e27c:	2301      	movs	r3, #1
    e27e:	617b      	str	r3, [r7, #20]

	const unsigned int size_char = sizeof(char);
    e280:	2301      	movs	r3, #1
    e282:	613b      	str	r3, [r7, #16]

	if( dst == src || size == 0)
    e284:	68fa      	ldr	r2, [r7, #12]
    e286:	68bb      	ldr	r3, [r7, #8]
    e288:	429a      	cmp	r2, r3
    e28a:	d056      	beq.n	e33a <__copy_rom_section+0xda>
    e28c:	687b      	ldr	r3, [r7, #4]
    e28e:	2b00      	cmp	r3, #0
    e290:	d053      	beq.n	e33a <__copy_rom_section+0xda>
	{
		return;
	}


	while( len > 0)
    e292:	e04e      	b.n	e332 <__copy_rom_section+0xd2>
	{

		if( !(src & mask_int) && !(dst & mask_int) && len >= size_int)
    e294:	68ba      	ldr	r2, [r7, #8]
    e296:	69fb      	ldr	r3, [r7, #28]
    e298:	4013      	ands	r3, r2
    e29a:	2b00      	cmp	r3, #0
    e29c:	d119      	bne.n	e2d2 <__copy_rom_section+0x72>
    e29e:	68fa      	ldr	r2, [r7, #12]
    e2a0:	69fb      	ldr	r3, [r7, #28]
    e2a2:	4013      	ands	r3, r2
    e2a4:	2b00      	cmp	r3, #0
    e2a6:	d114      	bne.n	e2d2 <__copy_rom_section+0x72>
    e2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e2aa:	6a3b      	ldr	r3, [r7, #32]
    e2ac:	429a      	cmp	r2, r3
    e2ae:	d310      	bcc.n	e2d2 <__copy_rom_section+0x72>
		{
			*((int *)dst)  = *((int*)src);
    e2b0:	68fb      	ldr	r3, [r7, #12]
    e2b2:	68ba      	ldr	r2, [r7, #8]
    e2b4:	6812      	ldr	r2, [r2, #0]
    e2b6:	601a      	str	r2, [r3, #0]
			dst += size_int;
    e2b8:	68fa      	ldr	r2, [r7, #12]
    e2ba:	6a3b      	ldr	r3, [r7, #32]
    e2bc:	4413      	add	r3, r2
    e2be:	60fb      	str	r3, [r7, #12]
			src += size_int;
    e2c0:	68ba      	ldr	r2, [r7, #8]
    e2c2:	6a3b      	ldr	r3, [r7, #32]
    e2c4:	4413      	add	r3, r2
    e2c6:	60bb      	str	r3, [r7, #8]
			len -= size_int;
    e2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e2ca:	6a3b      	ldr	r3, [r7, #32]
    e2cc:	1ad3      	subs	r3, r2, r3
    e2ce:	627b      	str	r3, [r7, #36]	; 0x24
    e2d0:	e02f      	b.n	e332 <__copy_rom_section+0xd2>
		}
		else if( !(src & mask_short) && !(dst & mask_short) && len >= size_short)
    e2d2:	68ba      	ldr	r2, [r7, #8]
    e2d4:	697b      	ldr	r3, [r7, #20]
    e2d6:	4013      	ands	r3, r2
    e2d8:	2b00      	cmp	r3, #0
    e2da:	d11a      	bne.n	e312 <__copy_rom_section+0xb2>
    e2dc:	68fa      	ldr	r2, [r7, #12]
    e2de:	697b      	ldr	r3, [r7, #20]
    e2e0:	4013      	ands	r3, r2
    e2e2:	2b00      	cmp	r3, #0
    e2e4:	d115      	bne.n	e312 <__copy_rom_section+0xb2>
    e2e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e2e8:	69bb      	ldr	r3, [r7, #24]
    e2ea:	429a      	cmp	r2, r3
    e2ec:	d311      	bcc.n	e312 <__copy_rom_section+0xb2>
		{
			*((short *)dst)  = *((short*)src);
    e2ee:	68fb      	ldr	r3, [r7, #12]
    e2f0:	68ba      	ldr	r2, [r7, #8]
    e2f2:	f9b2 2000 	ldrsh.w	r2, [r2]
    e2f6:	801a      	strh	r2, [r3, #0]
			dst += size_short;
    e2f8:	68fa      	ldr	r2, [r7, #12]
    e2fa:	69bb      	ldr	r3, [r7, #24]
    e2fc:	4413      	add	r3, r2
    e2fe:	60fb      	str	r3, [r7, #12]
			src += size_short;
    e300:	68ba      	ldr	r2, [r7, #8]
    e302:	69bb      	ldr	r3, [r7, #24]
    e304:	4413      	add	r3, r2
    e306:	60bb      	str	r3, [r7, #8]
			len -= size_short;
    e308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e30a:	69bb      	ldr	r3, [r7, #24]
    e30c:	1ad3      	subs	r3, r2, r3
    e30e:	627b      	str	r3, [r7, #36]	; 0x24
    e310:	e00f      	b.n	e332 <__copy_rom_section+0xd2>
		}
		else
		{
			*((char *)dst)  = *((char*)src);
    e312:	68fb      	ldr	r3, [r7, #12]
    e314:	68ba      	ldr	r2, [r7, #8]
    e316:	7812      	ldrb	r2, [r2, #0]
    e318:	701a      	strb	r2, [r3, #0]
			dst += size_char;
    e31a:	68fa      	ldr	r2, [r7, #12]
    e31c:	693b      	ldr	r3, [r7, #16]
    e31e:	4413      	add	r3, r2
    e320:	60fb      	str	r3, [r7, #12]
			src += size_char;
    e322:	68ba      	ldr	r2, [r7, #8]
    e324:	693b      	ldr	r3, [r7, #16]
    e326:	4413      	add	r3, r2
    e328:	60bb      	str	r3, [r7, #8]
			len -= size_char;
    e32a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e32c:	693b      	ldr	r3, [r7, #16]
    e32e:	1ad3      	subs	r3, r2, r3
    e330:	627b      	str	r3, [r7, #36]	; 0x24
	{
		return;
	}


	while( len > 0)
    e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e334:	2b00      	cmp	r3, #0
    e336:	d1ad      	bne.n	e294 <__copy_rom_section+0x34>
    e338:	e000      	b.n	e33c <__copy_rom_section+0xdc>

	const unsigned int size_char = sizeof(char);

	if( dst == src || size == 0)
	{
		return;
    e33a:	bf00      	nop
			dst += size_char;
			src += size_char;
			len -= size_char;
		}
	}
}
    e33c:	372c      	adds	r7, #44	; 0x2c
    e33e:	46bd      	mov	sp, r7
    e340:	f85d 7b04 	ldr.w	r7, [sp], #4
    e344:	4770      	bx	lr
    e346:	bf00      	nop

0000e348 <__copy_rom_sections_to_ram>:
 *  It is a table of RomInfo
 *	structures.  The final entry in the table has all-zero
 *	fields.
 */
void __copy_rom_sections_to_ram(void)
{
    e348:	b590      	push	{r4, r7, lr}
    e34a:	b083      	sub	sp, #12
    e34c:	af00      	add	r7, sp, #0

	int				index;

	if (__S_romp == 0L) return;
    e34e:	4b26      	ldr	r3, [pc, #152]	; (e3e8 <__copy_rom_sections_to_ram+0xa0>)
    e350:	2b00      	cmp	r3, #0
    e352:	d044      	beq.n	e3de <__copy_rom_sections_to_ram+0x96>

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
    e354:	2300      	movs	r3, #0
    e356:	607b      	str	r3, [r7, #4]
    e358:	e020      	b.n	e39c <__copy_rom_sections_to_ram+0x54>
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
	{
		__copy_rom_section( __S_romp[index].Target,
    e35a:	4923      	ldr	r1, [pc, #140]	; (e3e8 <__copy_rom_sections_to_ram+0xa0>)
    e35c:	687a      	ldr	r2, [r7, #4]
    e35e:	4613      	mov	r3, r2
    e360:	005b      	lsls	r3, r3, #1
    e362:	4413      	add	r3, r2
    e364:	009b      	lsls	r3, r3, #2
    e366:	440b      	add	r3, r1
    e368:	3304      	adds	r3, #4
    e36a:	6818      	ldr	r0, [r3, #0]
    e36c:	491e      	ldr	r1, [pc, #120]	; (e3e8 <__copy_rom_sections_to_ram+0xa0>)
    e36e:	687a      	ldr	r2, [r7, #4]
    e370:	4613      	mov	r3, r2
    e372:	005b      	lsls	r3, r3, #1
    e374:	4413      	add	r3, r2
    e376:	009b      	lsls	r3, r3, #2
    e378:	440b      	add	r3, r1
    e37a:	681c      	ldr	r4, [r3, #0]
    e37c:	491a      	ldr	r1, [pc, #104]	; (e3e8 <__copy_rom_sections_to_ram+0xa0>)
    e37e:	687a      	ldr	r2, [r7, #4]
    e380:	4613      	mov	r3, r2
    e382:	005b      	lsls	r3, r3, #1
    e384:	4413      	add	r3, r2
    e386:	009b      	lsls	r3, r3, #2
    e388:	440b      	add	r3, r1
    e38a:	3308      	adds	r3, #8
    e38c:	681b      	ldr	r3, [r3, #0]
    e38e:	461a      	mov	r2, r3
    e390:	4621      	mov	r1, r4
    e392:	f7ff ff65 	bl	e260 <__copy_rom_section>
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
		 ++index)
    e396:	687b      	ldr	r3, [r7, #4]
    e398:	3301      	adds	r3, #1
    e39a:	607b      	str	r3, [r7, #4]

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
    e39c:	4912      	ldr	r1, [pc, #72]	; (e3e8 <__copy_rom_sections_to_ram+0xa0>)
    e39e:	687a      	ldr	r2, [r7, #4]
    e3a0:	4613      	mov	r3, r2
    e3a2:	005b      	lsls	r3, r3, #1
    e3a4:	4413      	add	r3, r2
    e3a6:	009b      	lsls	r3, r3, #2
    e3a8:	440b      	add	r3, r1
    e3aa:	681b      	ldr	r3, [r3, #0]
	if (__S_romp == 0L) return;

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d1d4      	bne.n	e35a <__copy_rom_sections_to_ram+0x12>
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
    e3b0:	490d      	ldr	r1, [pc, #52]	; (e3e8 <__copy_rom_sections_to_ram+0xa0>)
    e3b2:	687a      	ldr	r2, [r7, #4]
    e3b4:	4613      	mov	r3, r2
    e3b6:	005b      	lsls	r3, r3, #1
    e3b8:	4413      	add	r3, r2
    e3ba:	009b      	lsls	r3, r3, #2
    e3bc:	440b      	add	r3, r1
    e3be:	3304      	adds	r3, #4
    e3c0:	681b      	ldr	r3, [r3, #0]

	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
    e3c2:	2b00      	cmp	r3, #0
    e3c4:	d1c9      	bne.n	e35a <__copy_rom_sections_to_ram+0x12>
		 __S_romp[index].Target != 0 ||
		 __S_romp[index].Size != 0;
    e3c6:	4908      	ldr	r1, [pc, #32]	; (e3e8 <__copy_rom_sections_to_ram+0xa0>)
    e3c8:	687a      	ldr	r2, [r7, #4]
    e3ca:	4613      	mov	r3, r2
    e3cc:	005b      	lsls	r3, r3, #1
    e3ce:	4413      	add	r3, r2
    e3d0:	009b      	lsls	r3, r3, #2
    e3d2:	440b      	add	r3, r1
    e3d4:	3308      	adds	r3, #8
    e3d6:	681b      	ldr	r3, [r3, #0]
	/*
	 *	Go through the entire table, copying sections from ROM to RAM.
	 */
	for (index = 0;
		 __S_romp[index].Source != 0 ||
		 __S_romp[index].Target != 0 ||
    e3d8:	2b00      	cmp	r3, #0
    e3da:	d1be      	bne.n	e35a <__copy_rom_sections_to_ram+0x12>
    e3dc:	e000      	b.n	e3e0 <__copy_rom_sections_to_ram+0x98>
void __copy_rom_sections_to_ram(void)
{

	int				index;

	if (__S_romp == 0L) return;
    e3de:	bf00      	nop
		__copy_rom_section( __S_romp[index].Target,
							__S_romp[index].Source,
							__S_romp[index].Size );

	}
}
    e3e0:	370c      	adds	r7, #12
    e3e2:	46bd      	mov	sp, r7
    e3e4:	bd90      	pop	{r4, r7, pc}
    e3e6:	bf00      	nop
    e3e8:	0001045c 	.word	0x0001045c

0000e3ec <zero_fill_bss>:

#ifdef __ATOLLIC__
static void zero_fill_bss(void)
{
    e3ec:	b480      	push	{r7}
    e3ee:	b089      	sub	sp, #36	; 0x24
    e3f0:	af00      	add	r7, sp, #0
  extern char __START_BSS[];
  extern char __END_BSS[];
  
  unsigned long len = __END_BSS - __START_BSS;
    e3f2:	4a29      	ldr	r2, [pc, #164]	; (e498 <zero_fill_bss+0xac>)
    e3f4:	4b29      	ldr	r3, [pc, #164]	; (e49c <zero_fill_bss+0xb0>)
    e3f6:	1ad3      	subs	r3, r2, r3
    e3f8:	61fb      	str	r3, [r7, #28]
  unsigned long dst = (unsigned long) __START_BSS;
    e3fa:	4b28      	ldr	r3, [pc, #160]	; (e49c <zero_fill_bss+0xb0>)
    e3fc:	61bb      	str	r3, [r7, #24]
  
  const int size_int = sizeof(int);
    e3fe:	2304      	movs	r3, #4
    e400:	617b      	str	r3, [r7, #20]
  const int mask_int = sizeof(int)-1;
    e402:	2303      	movs	r3, #3
    e404:	613b      	str	r3, [r7, #16]
  
  const int size_short = sizeof(short);
    e406:	2302      	movs	r3, #2
    e408:	60fb      	str	r3, [r7, #12]
  const int mask_short = sizeof(short)-1;
    e40a:	2301      	movs	r3, #1
    e40c:	60bb      	str	r3, [r7, #8]
  
  const int size_char = sizeof(char);
    e40e:	2301      	movs	r3, #1
    e410:	607b      	str	r3, [r7, #4]
  
  if( len == 0)
    e412:	69fb      	ldr	r3, [r7, #28]
    e414:	2b00      	cmp	r3, #0
    e416:	d039      	beq.n	e48c <zero_fill_bss+0xa0>
  {
    return;
  }


  while( len > 0)
    e418:	e034      	b.n	e484 <zero_fill_bss+0x98>
  {
    if( !(dst & mask_int) && len >= size_int)
    e41a:	693a      	ldr	r2, [r7, #16]
    e41c:	69bb      	ldr	r3, [r7, #24]
    e41e:	4013      	ands	r3, r2
    e420:	2b00      	cmp	r3, #0
    e422:	d10f      	bne.n	e444 <zero_fill_bss+0x58>
    e424:	697b      	ldr	r3, [r7, #20]
    e426:	69fa      	ldr	r2, [r7, #28]
    e428:	429a      	cmp	r2, r3
    e42a:	d30b      	bcc.n	e444 <zero_fill_bss+0x58>
    {
      *((int *)dst)  = 0;
    e42c:	69bb      	ldr	r3, [r7, #24]
    e42e:	2200      	movs	r2, #0
    e430:	601a      	str	r2, [r3, #0]
      dst += size_int;
    e432:	697b      	ldr	r3, [r7, #20]
    e434:	69ba      	ldr	r2, [r7, #24]
    e436:	4413      	add	r3, r2
    e438:	61bb      	str	r3, [r7, #24]
      len -= size_int;
    e43a:	697b      	ldr	r3, [r7, #20]
    e43c:	69fa      	ldr	r2, [r7, #28]
    e43e:	1ad3      	subs	r3, r2, r3
    e440:	61fb      	str	r3, [r7, #28]
    e442:	e01f      	b.n	e484 <zero_fill_bss+0x98>
    }
    else if( !(dst & mask_short) && len >= size_short)
    e444:	68ba      	ldr	r2, [r7, #8]
    e446:	69bb      	ldr	r3, [r7, #24]
    e448:	4013      	ands	r3, r2
    e44a:	2b00      	cmp	r3, #0
    e44c:	d10f      	bne.n	e46e <zero_fill_bss+0x82>
    e44e:	68fb      	ldr	r3, [r7, #12]
    e450:	69fa      	ldr	r2, [r7, #28]
    e452:	429a      	cmp	r2, r3
    e454:	d30b      	bcc.n	e46e <zero_fill_bss+0x82>
    {
      *((short *)dst)  = 0;
    e456:	69bb      	ldr	r3, [r7, #24]
    e458:	2200      	movs	r2, #0
    e45a:	801a      	strh	r2, [r3, #0]
      dst += size_short;
    e45c:	68fb      	ldr	r3, [r7, #12]
    e45e:	69ba      	ldr	r2, [r7, #24]
    e460:	4413      	add	r3, r2
    e462:	61bb      	str	r3, [r7, #24]
      len -= size_short;
    e464:	68fb      	ldr	r3, [r7, #12]
    e466:	69fa      	ldr	r2, [r7, #28]
    e468:	1ad3      	subs	r3, r2, r3
    e46a:	61fb      	str	r3, [r7, #28]
    e46c:	e00a      	b.n	e484 <zero_fill_bss+0x98>
    }
    else
    {
      *((char *)dst)  = 0;
    e46e:	69bb      	ldr	r3, [r7, #24]
    e470:	2200      	movs	r2, #0
    e472:	701a      	strb	r2, [r3, #0]
      dst += size_char;
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	69ba      	ldr	r2, [r7, #24]
    e478:	4413      	add	r3, r2
    e47a:	61bb      	str	r3, [r7, #24]
      len -= size_char;
    e47c:	687b      	ldr	r3, [r7, #4]
    e47e:	69fa      	ldr	r2, [r7, #28]
    e480:	1ad3      	subs	r3, r2, r3
    e482:	61fb      	str	r3, [r7, #28]
  {
    return;
  }


  while( len > 0)
    e484:	69fb      	ldr	r3, [r7, #28]
    e486:	2b00      	cmp	r3, #0
    e488:	d1c7      	bne.n	e41a <zero_fill_bss+0x2e>
    e48a:	e000      	b.n	e48e <zero_fill_bss+0xa2>
  
  const int size_char = sizeof(char);
  
  if( len == 0)
  {
    return;
    e48c:	bf00      	nop
      *((char *)dst)  = 0;
      dst += size_char;
      len -= size_char;
    }
  }
}
    e48e:	3724      	adds	r7, #36	; 0x24
    e490:	46bd      	mov	sp, r7
    e492:	f85d 7b04 	ldr.w	r7, [sp], #4
    e496:	4770      	bx	lr
    e498:	2000360c 	.word	0x2000360c
    e49c:	20000040 	.word	0x20000040

0000e4a0 <__init_registers>:
#endif

void __attribute__ ((weak)) __init_registers(void)
{
    e4a0:	b480      	push	{r7}
    e4a2:	af00      	add	r7, sp, #0
  #if defined(SCB_CPACR)
  /* Initialize FPU */
  SCB_CPACR |= SCB_CPACR_CP10(3U) | SCB_CPACR_CP11(3U); 
    e4a4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    e4a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e4ac:	f8d3 3d88 	ldr.w	r3, [r3, #3464]	; 0xd88
    e4b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    e4b4:	f8c2 3d88 	str.w	r3, [r2, #3464]	; 0xd88
  #endif

}
    e4b8:	bf00      	nop
    e4ba:	46bd      	mov	sp, r7
    e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4c0:	4770      	bx	lr
    e4c2:	bf00      	nop

void __attribute__ ((weak)) __init_hardware(void)
{
    e4c4:	b480      	push	{r7}
    e4c6:	af00      	add	r7, sp, #0

}
    e4c8:	bf00      	nop
    e4ca:	46bd      	mov	sp, r7
    e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4d0:	4770      	bx	lr
    e4d2:	bf00      	nop

0000e4d4 <__init_user>:

void __attribute__ ((weak)) __init_user(void)
{
    e4d4:	b480      	push	{r7}
    e4d6:	af00      	add	r7, sp, #0

}
    e4d8:	bf00      	nop
    e4da:	46bd      	mov	sp, r7
    e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    e4e0:	4770      	bx	lr
    e4e2:	bf00      	nop

0000e4e4 <__iar_program_start>:

/* To match iar debugger expectation */
void __iar_program_start(void);
void __thumb_startup(void);
void __iar_program_start()
{
    e4e4:	b580      	push	{r7, lr}
    e4e6:	af00      	add	r7, sp, #0
	__thumb_startup();
    e4e8:	f000 f802 	bl	e4f0 <__thumb_startup>
}
    e4ec:	bf00      	nop
    e4ee:	bd80      	pop	{r7, pc}

0000e4f0 <__thumb_startup>:

__attribute__((naked)) void __thumb_startup(void)
{
int addr = (int)__SP_INIT;
    e4f0:	4c0d      	ldr	r4, [pc, #52]	; (e528 <skip_sp+0x20>)

    /* setup the stack before we attempt anything else
       skip stack setup if __SP_INIT is 0
       assume sp is already setup. */
    __asm (
    e4f2:	4620      	mov	r0, r4
    e4f4:	2800      	cmp	r0, #0
    e4f6:	d007      	beq.n	e508 <skip_sp>
    e4f8:	4685      	mov	sp, r0
    e4fa:	b081      	sub	sp, #4
    e4fc:	f04f 0000 	mov.w	r0, #0
    e500:	ea6f 0000 	mvn.w	r0, r0
    e504:	9000      	str	r0, [sp, #0]
    e506:	b001      	add	sp, #4

0000e508 <skip_sp>:
    "add  sp,#4\n\t"
    "skip_sp:\n\t"
    ::"r"(addr));

    /* Setup registers */
    __init_registers();
    e508:	f7ff ffca 	bl	e4a0 <__init_registers>
    
    /* setup hardware */
    __init_hardware();
    e50c:	f000 f974 	bl	e7f8 <__init_hardware>
    
    /* SUPPORT_ROM_TO_RAM */
    __copy_rom_sections_to_ram();
    e510:	f7ff ff1a 	bl	e348 <__copy_rom_sections_to_ram>
    
    /* initializations before main, user specific */
    __init_user();
    e514:	f7ff ffde 	bl	e4d4 <__init_user>

#ifndef __ATOLLIC__
    _start();
#else
    /* zero-fill the .bss section */
    zero_fill_bss();
    e518:	f7ff ff68 	bl	e3ec <zero_fill_bss>
    /* Run static constructors */
    __libc_init_array();
    e51c:	f001 faba 	bl	fa94 <__libc_init_array>
    main();
    e520:	f000 f922 	bl	e768 <main>
#endif

    /*	should never get here */
    while (1);
    e524:	e7fe      	b.n	e524 <skip_sp+0x1c>
    e526:	bf00      	nop
    e528:	20030000 	.word	0x20030000

0000e52c <Cpu_OnNMI>:
**         occurred. This event is automatically enabled when the [NMI
**         interrupt] property is set to 'Enabled'.
*/
/* ===================================================================*/
void Cpu_OnNMI(void)
{
    e52c:	b480      	push	{r7}
    e52e:	af00      	add	r7, sp, #0
  /* Write your code here ... */
}
    e530:	bf00      	nop
    e532:	46bd      	mov	sp, r7
    e534:	f85d 7b04 	ldr.w	r7, [sp], #4
    e538:	4770      	bx	lr
    e53a:	bf00      	nop

0000e53c <FRTOS1_vApplicationStackOverflowHook>:
**       * pcTaskName      - Pointer to task name
**     Returns     : Nothing
** ===================================================================
*/
void FRTOS1_vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
    e53c:	b480      	push	{r7}
    e53e:	b083      	sub	sp, #12
    e540:	af00      	add	r7, sp, #0
    e542:	6078      	str	r0, [r7, #4]
    e544:	6039      	str	r1, [r7, #0]
     switch.  Set configCHECK_FOR_STACK_OVERFLOWS to 2 to also check for stack
     problems within nested interrupts, but only do this for debug purposes as
     it will increase the context switch time. */
  (void)pxTask;
  (void)pcTaskName;
  taskDISABLE_INTERRUPTS();
    e546:	f04f 0050 	mov.w	r0, #80	; 0x50
    e54a:	f380 8811 	msr	BASEPRI, r0
  /* Write your code here ... */
  for(;;) {}
    e54e:	e7fe      	b.n	e54e <FRTOS1_vApplicationStackOverflowHook+0x12>

0000e550 <FRTOS1_vApplicationTickHook>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void FRTOS1_vApplicationTickHook(void)
{
    e550:	b480      	push	{r7}
    e552:	af00      	add	r7, sp, #0
  /* Called for every RTOS tick. */
  /* Write your code here ... */
}
    e554:	bf00      	nop
    e556:	46bd      	mov	sp, r7
    e558:	f85d 7b04 	ldr.w	r7, [sp], #4
    e55c:	4770      	bx	lr
    e55e:	bf00      	nop

0000e560 <FRTOS1_vApplicationIdleHook>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void FRTOS1_vApplicationIdleHook(void)
{
    e560:	b480      	push	{r7}
    e562:	af00      	add	r7, sp, #0
  /* Called whenever the RTOS is idle (from the IDLE task).
     Here would be a good place to put the CPU into low power mode. */
  /* Write your code here ... */
}
    e564:	bf00      	nop
    e566:	46bd      	mov	sp, r7
    e568:	f85d 7b04 	ldr.w	r7, [sp], #4
    e56c:	4770      	bx	lr
    e56e:	bf00      	nop

0000e570 <FRTOS1_vApplicationMallocFailedHook>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void FRTOS1_vApplicationMallocFailedHook(void)
{
    e570:	b480      	push	{r7}
    e572:	af00      	add	r7, sp, #0
  /* Called if a call to pvPortMalloc() fails because there is insufficient
     free memory available in the FreeRTOS heap.  pvPortMalloc() is called
     internally by FreeRTOS API functions that create tasks, queues, software
     timers, and semaphores.  The size of the FreeRTOS heap is set by the
     configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
  taskDISABLE_INTERRUPTS();
    e574:	f04f 0050 	mov.w	r0, #80	; 0x50
    e578:	f380 8811 	msr	BASEPRI, r0
  /* Write your code here ... */
  for(;;) {}
    e57c:	e7fe      	b.n	e57c <FRTOS1_vApplicationMallocFailedHook+0xc>
    e57e:	bf00      	nop

0000e580 <PTRC1_OnTraceWrap>:
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/
void PTRC1_OnTraceWrap(void)
{
    e580:	b480      	push	{r7}
    e582:	af00      	add	r7, sp, #0
  uint8_t buf[64];

  /* GDB: dump binary memory <file> <hexStartAddr> <hexEndAddr> */
  PTRC1_vGetGDBDumpCommand(buf, sizeof(buf), "c:\\tmp\\trc.dump");
#endif
}
    e584:	bf00      	nop
    e586:	46bd      	mov	sp, r7
    e588:	f85d 7b04 	ldr.w	r7, [sp], #4
    e58c:	4770      	bx	lr
    e58e:	bf00      	nop

0000e590 <Led_BlueBlink>:

/* Create a semaphore to synchronize the LED tasks */
SemaphoreHandle_t LEDMutex;

void Led_BlueBlink(void *pvParameters)
{
    e590:	b580      	push	{r7, lr}
    e592:	b086      	sub	sp, #24
    e594:	af00      	add	r7, sp, #0
    e596:	6078      	str	r0, [r7, #4]
   const TickType_t xDelay = 500 / portTICK_PERIOD_MS;
    e598:	2332      	movs	r3, #50	; 0x32
    e59a:	613b      	str	r3, [r7, #16]
   uint32_t BlueDelay = 0;
    e59c:	2300      	movs	r3, #0
    e59e:	60fb      	str	r3, [r7, #12]
   const uint32_t TargetCount = 16000;
    e5a0:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    e5a4:	60bb      	str	r3, [r7, #8]

   for(;;)
   {
	   for(int i = 0; i < 10; i++)
    e5a6:	2300      	movs	r3, #0
    e5a8:	617b      	str	r3, [r7, #20]
    e5aa:	e005      	b.n	e5b8 <Led_BlueBlink+0x28>
	   {
		  vTaskDelay(xDelay);
    e5ac:	6938      	ldr	r0, [r7, #16]
    e5ae:	f7fc facb 	bl	ab48 <vTaskDelay>
   uint32_t BlueDelay = 0;
   const uint32_t TargetCount = 16000;

   for(;;)
   {
	   for(int i = 0; i < 10; i++)
    e5b2:	697b      	ldr	r3, [r7, #20]
    e5b4:	3301      	adds	r3, #1
    e5b6:	617b      	str	r3, [r7, #20]
    e5b8:	697b      	ldr	r3, [r7, #20]
    e5ba:	2b09      	cmp	r3, #9
    e5bc:	ddf6      	ble.n	e5ac <Led_BlueBlink+0x1c>
		  vTaskDelay(xDelay);
	   }

	   // Obtain the Mutex - block for 0 ticks if the semaphore is not
	   // immediately available.
	   if( xSemaphoreTake( LEDMutex, ( TickType_t ) 10 ) == pdTRUE )
    e5be:	4b15      	ldr	r3, [pc, #84]	; (e614 <Led_BlueBlink+0x84>)
    e5c0:	6818      	ldr	r0, [r3, #0]
    e5c2:	2300      	movs	r3, #0
    e5c4:	220a      	movs	r2, #10
    e5c6:	2100      	movs	r1, #0
    e5c8:	f7fb fc1a 	bl	9e00 <xQueueGenericReceive>
    e5cc:	4603      	mov	r3, r0
    e5ce:	2b01      	cmp	r3, #1
    e5d0:	d1e9      	bne.n	e5a6 <Led_BlueBlink+0x16>
	   {
		   LED_Blue_On();
    e5d2:	4b11      	ldr	r3, [pc, #68]	; (e618 <Led_BlueBlink+0x88>)
    e5d4:	681b      	ldr	r3, [r3, #0]
    e5d6:	4618      	mov	r0, r3
    e5d8:	f7f1 ff92 	bl	500 <BitIoLdd1_ClrVal>
		   vTaskDelay(xDelay);
    e5dc:	6938      	ldr	r0, [r7, #16]
    e5de:	f7fc fab3 	bl	ab48 <vTaskDelay>
		   LED_Blue_Off();
    e5e2:	4b0d      	ldr	r3, [pc, #52]	; (e618 <Led_BlueBlink+0x88>)
    e5e4:	681b      	ldr	r3, [r3, #0]
    e5e6:	4618      	mov	r0, r3
    e5e8:	f7f1 ff9a 	bl	520 <BitIoLdd1_SetVal>
		   Delay_Nonsense(&BlueDelay, &TargetCount);
    e5ec:	f107 0208 	add.w	r2, r7, #8
    e5f0:	f107 030c 	add.w	r3, r7, #12
    e5f4:	4611      	mov	r1, r2
    e5f6:	4618      	mov	r0, r3
    e5f8:	f000 f89c 	bl	e734 <Delay_Nonsense>
		   vTaskDelay(xDelay);
    e5fc:	6938      	ldr	r0, [r7, #16]
    e5fe:	f7fc faa3 	bl	ab48 <vTaskDelay>
		   xSemaphoreGive(LEDMutex);
    e602:	4b04      	ldr	r3, [pc, #16]	; (e614 <Led_BlueBlink+0x84>)
    e604:	6818      	ldr	r0, [r3, #0]
    e606:	2300      	movs	r3, #0
    e608:	2200      	movs	r2, #0
    e60a:	2100      	movs	r1, #0
    e60c:	f7fb f8f0 	bl	97f0 <xQueueGenericSend>
	   }
   }
    e610:	e7c9      	b.n	e5a6 <Led_BlueBlink+0x16>
    e612:	bf00      	nop
    e614:	20003604 	.word	0x20003604
    e618:	20000068 	.word	0x20000068

0000e61c <Led_RedBlink>:
}

void Led_RedBlink( void *pvParameters )
{
    e61c:	b580      	push	{r7, lr}
    e61e:	b086      	sub	sp, #24
    e620:	af00      	add	r7, sp, #0
    e622:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 100 / portTICK_PERIOD_MS;
    e624:	230a      	movs	r3, #10
    e626:	613b      	str	r3, [r7, #16]
    uint32_t RedDelay = 0;
    e628:	2300      	movs	r3, #0
    e62a:	60fb      	str	r3, [r7, #12]
    const uint32_t TargetCount = 16000;
    e62c:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    e630:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
	   for(int i = 0; i < 10; i++)
    e632:	2300      	movs	r3, #0
    e634:	617b      	str	r3, [r7, #20]
    e636:	e005      	b.n	e644 <Led_RedBlink+0x28>
	   {
		  vTaskDelay(xDelay);
    e638:	6938      	ldr	r0, [r7, #16]
    e63a:	f7fc fa85 	bl	ab48 <vTaskDelay>
    uint32_t RedDelay = 0;
    const uint32_t TargetCount = 16000;

	for( ;; )
	{
	   for(int i = 0; i < 10; i++)
    e63e:	697b      	ldr	r3, [r7, #20]
    e640:	3301      	adds	r3, #1
    e642:	617b      	str	r3, [r7, #20]
    e644:	697b      	ldr	r3, [r7, #20]
    e646:	2b09      	cmp	r3, #9
    e648:	ddf6      	ble.n	e638 <Led_RedBlink+0x1c>
		  vTaskDelay(xDelay);
	   }

	   // Obtain the Mutex - block for 0 ticks if the semaphore is not
	   // immediately available.
	   if( xSemaphoreTake( LEDMutex, ( TickType_t ) 10 ) == pdTRUE )
    e64a:	4b15      	ldr	r3, [pc, #84]	; (e6a0 <Led_RedBlink+0x84>)
    e64c:	6818      	ldr	r0, [r3, #0]
    e64e:	2300      	movs	r3, #0
    e650:	220a      	movs	r2, #10
    e652:	2100      	movs	r1, #0
    e654:	f7fb fbd4 	bl	9e00 <xQueueGenericReceive>
    e658:	4603      	mov	r3, r0
    e65a:	2b01      	cmp	r3, #1
    e65c:	d1e9      	bne.n	e632 <Led_RedBlink+0x16>
	   {
		   LED_Red_On();
    e65e:	4b11      	ldr	r3, [pc, #68]	; (e6a4 <Led_RedBlink+0x88>)
    e660:	685b      	ldr	r3, [r3, #4]
    e662:	4618      	mov	r0, r3
    e664:	f7f1 ffd4 	bl	610 <BitIoLdd2_ClrVal>
		   vTaskDelay(xDelay);
    e668:	6938      	ldr	r0, [r7, #16]
    e66a:	f7fc fa6d 	bl	ab48 <vTaskDelay>
		   LED_Red_Off();
    e66e:	4b0d      	ldr	r3, [pc, #52]	; (e6a4 <Led_RedBlink+0x88>)
    e670:	685b      	ldr	r3, [r3, #4]
    e672:	4618      	mov	r0, r3
    e674:	f7f1 ffdc 	bl	630 <BitIoLdd2_SetVal>
		   Delay_Nonsense(&RedDelay, &TargetCount);
    e678:	f107 0208 	add.w	r2, r7, #8
    e67c:	f107 030c 	add.w	r3, r7, #12
    e680:	4611      	mov	r1, r2
    e682:	4618      	mov	r0, r3
    e684:	f000 f856 	bl	e734 <Delay_Nonsense>
		   vTaskDelay(xDelay);
    e688:	6938      	ldr	r0, [r7, #16]
    e68a:	f7fc fa5d 	bl	ab48 <vTaskDelay>
		   xSemaphoreGive(LEDMutex);
    e68e:	4b04      	ldr	r3, [pc, #16]	; (e6a0 <Led_RedBlink+0x84>)
    e690:	6818      	ldr	r0, [r3, #0]
    e692:	2300      	movs	r3, #0
    e694:	2200      	movs	r2, #0
    e696:	2100      	movs	r1, #0
    e698:	f7fb f8aa 	bl	97f0 <xQueueGenericSend>
	   }
	}
    e69c:	e7c9      	b.n	e632 <Led_RedBlink+0x16>
    e69e:	bf00      	nop
    e6a0:	20003604 	.word	0x20003604
    e6a4:	20000068 	.word	0x20000068

0000e6a8 <Led_GreenBlink>:
}

void Led_GreenBlink( void *pvParameters )
{
    e6a8:	b580      	push	{r7, lr}
    e6aa:	b086      	sub	sp, #24
    e6ac:	af00      	add	r7, sp, #0
    e6ae:	6078      	str	r0, [r7, #4]
	const TickType_t xDelay = 250 / portTICK_PERIOD_MS;
    e6b0:	2319      	movs	r3, #25
    e6b2:	613b      	str	r3, [r7, #16]
    uint32_t GreenDelay = 0;
    e6b4:	2300      	movs	r3, #0
    e6b6:	60fb      	str	r3, [r7, #12]
	const uint32_t TargetCount = 10000;
    e6b8:	f242 7310 	movw	r3, #10000	; 0x2710
    e6bc:	60bb      	str	r3, [r7, #8]

	for( ;; )
	{
	   for(int i = 0; i < 10; i++)
    e6be:	2300      	movs	r3, #0
    e6c0:	617b      	str	r3, [r7, #20]
    e6c2:	e005      	b.n	e6d0 <Led_GreenBlink+0x28>
	   {
		  vTaskDelay(xDelay);
    e6c4:	6938      	ldr	r0, [r7, #16]
    e6c6:	f7fc fa3f 	bl	ab48 <vTaskDelay>
    uint32_t GreenDelay = 0;
	const uint32_t TargetCount = 10000;

	for( ;; )
	{
	   for(int i = 0; i < 10; i++)
    e6ca:	697b      	ldr	r3, [r7, #20]
    e6cc:	3301      	adds	r3, #1
    e6ce:	617b      	str	r3, [r7, #20]
    e6d0:	697b      	ldr	r3, [r7, #20]
    e6d2:	2b09      	cmp	r3, #9
    e6d4:	ddf6      	ble.n	e6c4 <Led_GreenBlink+0x1c>
		  vTaskDelay(xDelay);
	   }

	   // Obtain the Mutex - block for 0 ticks if the semaphore is not
	   // immediately available.
	   if( xSemaphoreTake( LEDMutex, ( TickType_t ) 10 ) == pdTRUE )
    e6d6:	4b15      	ldr	r3, [pc, #84]	; (e72c <Led_GreenBlink+0x84>)
    e6d8:	6818      	ldr	r0, [r3, #0]
    e6da:	2300      	movs	r3, #0
    e6dc:	220a      	movs	r2, #10
    e6de:	2100      	movs	r1, #0
    e6e0:	f7fb fb8e 	bl	9e00 <xQueueGenericReceive>
    e6e4:	4603      	mov	r3, r0
    e6e6:	2b01      	cmp	r3, #1
    e6e8:	d1e9      	bne.n	e6be <Led_GreenBlink+0x16>
	   {
		   LED_Green_On();
    e6ea:	4b11      	ldr	r3, [pc, #68]	; (e730 <Led_GreenBlink+0x88>)
    e6ec:	689b      	ldr	r3, [r3, #8]
    e6ee:	4618      	mov	r0, r3
    e6f0:	f7f2 f816 	bl	720 <BitIoLdd3_ClrVal>
		   vTaskDelay(xDelay);
    e6f4:	6938      	ldr	r0, [r7, #16]
    e6f6:	f7fc fa27 	bl	ab48 <vTaskDelay>
		   LED_Green_Off();
    e6fa:	4b0d      	ldr	r3, [pc, #52]	; (e730 <Led_GreenBlink+0x88>)
    e6fc:	689b      	ldr	r3, [r3, #8]
    e6fe:	4618      	mov	r0, r3
    e700:	f7f2 f81e 	bl	740 <BitIoLdd3_SetVal>
		   Delay_Nonsense(&GreenDelay, &TargetCount);
    e704:	f107 0208 	add.w	r2, r7, #8
    e708:	f107 030c 	add.w	r3, r7, #12
    e70c:	4611      	mov	r1, r2
    e70e:	4618      	mov	r0, r3
    e710:	f000 f810 	bl	e734 <Delay_Nonsense>
		   vTaskDelay(xDelay);
    e714:	6938      	ldr	r0, [r7, #16]
    e716:	f7fc fa17 	bl	ab48 <vTaskDelay>
		   xSemaphoreGive(LEDMutex);
    e71a:	4b04      	ldr	r3, [pc, #16]	; (e72c <Led_GreenBlink+0x84>)
    e71c:	6818      	ldr	r0, [r3, #0]
    e71e:	2300      	movs	r3, #0
    e720:	2200      	movs	r2, #0
    e722:	2100      	movs	r1, #0
    e724:	f7fb f864 	bl	97f0 <xQueueGenericSend>

	   }
	}
    e728:	e7c9      	b.n	e6be <Led_GreenBlink+0x16>
    e72a:	bf00      	nop
    e72c:	20003604 	.word	0x20003604
    e730:	20000068 	.word	0x20000068

0000e734 <Delay_Nonsense>:
}

/* Used to track a delay that is added to a task to make the task look
 * like it is still doing something useful */
void Delay_Nonsense(uint32_t * DelayCounter, uint32_t const * TargetCount)
{
    e734:	b480      	push	{r7}
    e736:	b083      	sub	sp, #12
    e738:	af00      	add	r7, sp, #0
    e73a:	6078      	str	r0, [r7, #4]
    e73c:	6039      	str	r1, [r7, #0]
	while(*DelayCounter <= *TargetCount)
    e73e:	e004      	b.n	e74a <Delay_Nonsense+0x16>
	{
		*DelayCounter = *DelayCounter + 1;
    e740:	687b      	ldr	r3, [r7, #4]
    e742:	681b      	ldr	r3, [r3, #0]
    e744:	1c5a      	adds	r2, r3, #1
    e746:	687b      	ldr	r3, [r7, #4]
    e748:	601a      	str	r2, [r3, #0]

/* Used to track a delay that is added to a task to make the task look
 * like it is still doing something useful */
void Delay_Nonsense(uint32_t * DelayCounter, uint32_t const * TargetCount)
{
	while(*DelayCounter <= *TargetCount)
    e74a:	687b      	ldr	r3, [r7, #4]
    e74c:	681a      	ldr	r2, [r3, #0]
    e74e:	683b      	ldr	r3, [r7, #0]
    e750:	681b      	ldr	r3, [r3, #0]
    e752:	429a      	cmp	r2, r3
    e754:	d9f4      	bls.n	e740 <Delay_Nonsense+0xc>
	{
		*DelayCounter = *DelayCounter + 1;
	}

	*DelayCounter = 0;
    e756:	687b      	ldr	r3, [r7, #4]
    e758:	2200      	movs	r2, #0
    e75a:	601a      	str	r2, [r3, #0]
}
    e75c:	bf00      	nop
    e75e:	370c      	adds	r7, #12
    e760:	46bd      	mov	sp, r7
    e762:	f85d 7b04 	ldr.w	r7, [sp], #4
    e766:	4770      	bx	lr

0000e768 <main>:


/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
    e768:	b580      	push	{r7, lr}
    e76a:	b082      	sub	sp, #8
    e76c:	af02      	add	r7, sp, #8
  /* Write your local variable definition here */

  /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  PE_low_level_init();
    e76e:	f000 f8ad 	bl	e8cc <PE_low_level_init>
  /*** End of Processor Expert internal initialization.                    ***/

  /* Write your code here */
  /* For example: for(;;) { } */
  xTaskCreate(Led_GreenBlink,				/* Task Pointer */
    e772:	2300      	movs	r3, #0
    e774:	9301      	str	r3, [sp, #4]
    e776:	2303      	movs	r3, #3
    e778:	9300      	str	r3, [sp, #0]
    e77a:	2300      	movs	r3, #0
    e77c:	22c8      	movs	r2, #200	; 0xc8
    e77e:	4910      	ldr	r1, [pc, #64]	; (e7c0 <main+0x58>)
    e780:	4810      	ldr	r0, [pc, #64]	; (e7c4 <main+0x5c>)
    e782:	f7fc f829 	bl	a7d8 <xTaskCreate>
			 configMINIMAL_STACK_SIZE,		/* Stack Depth */
			 0,								/* Parameters to pass to task*/
			 3,								/* Task Priority */
			 0);							/* Pass handle to created task */

  xTaskCreate(Led_RedBlink,					/* Task Pointer */
    e786:	2300      	movs	r3, #0
    e788:	9301      	str	r3, [sp, #4]
    e78a:	2302      	movs	r3, #2
    e78c:	9300      	str	r3, [sp, #0]
    e78e:	2300      	movs	r3, #0
    e790:	22c8      	movs	r2, #200	; 0xc8
    e792:	490d      	ldr	r1, [pc, #52]	; (e7c8 <main+0x60>)
    e794:	480d      	ldr	r0, [pc, #52]	; (e7cc <main+0x64>)
    e796:	f7fc f81f 	bl	a7d8 <xTaskCreate>
			 configMINIMAL_STACK_SIZE,		/* Stack Depth */
			 0,								/* Parameters to pass to task*/
			 2,								/* Task Priority */
			 0);							/* Pass handle to created task */

  xTaskCreate(Led_BlueBlink,				/* Task Pointer */
    e79a:	2300      	movs	r3, #0
    e79c:	9301      	str	r3, [sp, #4]
    e79e:	2301      	movs	r3, #1
    e7a0:	9300      	str	r3, [sp, #0]
    e7a2:	2300      	movs	r3, #0
    e7a4:	22c8      	movs	r2, #200	; 0xc8
    e7a6:	490a      	ldr	r1, [pc, #40]	; (e7d0 <main+0x68>)
    e7a8:	480a      	ldr	r0, [pc, #40]	; (e7d4 <main+0x6c>)
    e7aa:	f7fc f815 	bl	a7d8 <xTaskCreate>
			 0,                             /* Parameters to pass to task*/
			 1,								/* Task Priority */
			 0);							/* Pass handle to created task */

  /* Attempt to create a semaphore. */
  LEDMutex = xSemaphoreCreateMutex();
    e7ae:	2001      	movs	r0, #1
    e7b0:	f7fa ff26 	bl	9600 <xQueueCreateMutex>
    e7b4:	4602      	mov	r2, r0
    e7b6:	4b08      	ldr	r3, [pc, #32]	; (e7d8 <main+0x70>)
    e7b8:	601a      	str	r2, [r3, #0]


  /*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
    e7ba:	f7fc fc75 	bl	b0a8 <vTaskStartScheduler>
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;){}
    e7be:	e7fe      	b.n	e7be <main+0x56>
    e7c0:	0001026c 	.word	0x0001026c
    e7c4:	0000e6a9 	.word	0x0000e6a9
    e7c8:	00010278 	.word	0x00010278
    e7cc:	0000e61d 	.word	0x0000e61d
    e7d0:	00010280 	.word	0x00010280
    e7d4:	0000e591 	.word	0x0000e591
    e7d8:	20003604 	.word	0x20003604

0000e7dc <CPU_SetBASEPRI>:
asm void CPU_SetBASEPRI(register uint32_t Level) {
  MSR BASEPRI,R0;
  MOV PC,LR
}
#elif defined(__GNUC__)
void CPU_SetBASEPRI(uint32_t Level) {
    e7dc:	b480      	push	{r7}
    e7de:	b083      	sub	sp, #12
    e7e0:	af00      	add	r7, sp, #0
    e7e2:	6078      	str	r0, [r7, #4]
  __asm ("msr basepri, %[input]"::[input] "r" (Level):);
    e7e4:	687b      	ldr	r3, [r7, #4]
    e7e6:	f383 8811 	msr	BASEPRI, r3
}
    e7ea:	bf00      	nop
    e7ec:	370c      	adds	r7, #12
    e7ee:	46bd      	mov	sp, r7
    e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    e7f4:	4770      	bx	lr
    e7f6:	bf00      	nop

0000e7f8 <__init_hardware>:
  #if defined(__IAR_SYSTEMS_ICC__)    
    #define PEX_ENTRYPOINT_FUNCTION_RETURN return 1;
  #endif
#endif
PEX_ENTRYPOINT_FUNCTION_TYPE PEX_ENTRYPOINT_FUNCTION()
{
    e7f8:	b580      	push	{r7, lr}
    e7fa:	af00      	add	r7, sp, #0
  /* Interrupt vector placement initialization */
  #if PEX_VECTOR_TABLE
    #if defined(__IAR_SYSTEMS_ICC__)
  SCB_VTOR = (uint32_t)(&__vector_table); /* Set the interrupt vector table position */
    #elif defined(__CWCC__) | defined(__GNUC__) | defined(__CC_ARM)
  SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
    e7fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    e800:	4a2e      	ldr	r2, [pc, #184]	; (e8bc <__init_hardware+0xc4>)
    e802:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
    #endif
  #endif
  /* Disable the WDOG module */
  #if STARTUP_WDOG
  WDOG_UNLOCK = (uint16_t)STARTUP_WDOG_KEY_1; /* Key 1 */
    e806:	4b2e      	ldr	r3, [pc, #184]	; (e8c0 <__init_hardware+0xc8>)
    e808:	f24c 5220 	movw	r2, #50464	; 0xc520
    e80c:	81da      	strh	r2, [r3, #14]
  WDOG_UNLOCK = (uint16_t)STARTUP_WDOG_KEY_2; /* Key 2 */
    e80e:	4b2c      	ldr	r3, [pc, #176]	; (e8c0 <__init_hardware+0xc8>)
    e810:	f64d 1228 	movw	r2, #55592	; 0xd928
    e814:	81da      	strh	r2, [r3, #14]
  WDOG_STCTRLH = (uint16_t)STARTUP_WDOG_STCTRLH_VALUE; /* Disable WDOG */
    e816:	4b2a      	ldr	r3, [pc, #168]	; (e8c0 <__init_hardware+0xc8>)
    e818:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
    e81c:	801a      	strh	r2, [r3, #0]
  #endif /* STARTUP_WDOG */
  
  /* System clock initialization */
#if STARTUP_RTCOSC
  /* SIM_SCGC6: RTC=1 */
  SIM_SCGC6 |= SIM_SCGC6_RTC_MASK;
    e81e:	4929      	ldr	r1, [pc, #164]	; (e8c4 <__init_hardware+0xcc>)
    e820:	4b28      	ldr	r3, [pc, #160]	; (e8c4 <__init_hardware+0xcc>)
    e822:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    e826:	331c      	adds	r3, #28
    e828:	681b      	ldr	r3, [r3, #0]
    e82a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
    e82e:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
    e832:	331c      	adds	r3, #28
    e834:	601a      	str	r2, [r3, #0]
  if ((RTC_CR & RTC_CR_OSCE_MASK) == 0u) { /* Only if the OSCILLATOR is not already enabled */
    e836:	4b24      	ldr	r3, [pc, #144]	; (e8c8 <__init_hardware+0xd0>)
    e838:	691b      	ldr	r3, [r3, #16]
    e83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    e83e:	2b00      	cmp	r3, #0
    e840:	d111      	bne.n	e866 <__init_hardware+0x6e>
    RTC_CR = (uint32_t)((RTC_CR & (uint32_t)~(uint32_t)(RTC_CR_SC2P_MASK | RTC_CR_SC4P_MASK | RTC_CR_SC8P_MASK | RTC_CR_SC16P_MASK)) | (uint32_t)STARTUP_RTC_CR_SC_VALUE);
    e842:	4a21      	ldr	r2, [pc, #132]	; (e8c8 <__init_hardware+0xd0>)
    e844:	4b20      	ldr	r3, [pc, #128]	; (e8c8 <__init_hardware+0xd0>)
    e846:	691b      	ldr	r3, [r3, #16]
    e848:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
    e84c:	6113      	str	r3, [r2, #16]
    RTC_CR |= (uint32_t)RTC_CR_OSCE_MASK;
    e84e:	4a1e      	ldr	r2, [pc, #120]	; (e8c8 <__init_hardware+0xd0>)
    e850:	4b1d      	ldr	r3, [pc, #116]	; (e8c8 <__init_hardware+0xd0>)
    e852:	691b      	ldr	r3, [r3, #16]
    e854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    e858:	6113      	str	r3, [r2, #16]
    RTC_CR &= (uint32_t)~(uint32_t)RTC_CR_CLKO_MASK;
    e85a:	4a1b      	ldr	r2, [pc, #108]	; (e8c8 <__init_hardware+0xd0>)
    e85c:	4b1a      	ldr	r3, [pc, #104]	; (e8c8 <__init_hardware+0xd0>)
    e85e:	691b      	ldr	r3, [r3, #16]
    e860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    e864:	6113      	str	r3, [r2, #16]
    #if defined(STARTUP_CLOCK_INTERNAL_FAST_TRIM_ADDRESS)
  }
    #endif /* defined(STARTUP_CLOCK_INTERNAL_FAST_TRIM_ADDRESS) */
  #endif /* STARTUP_CLOCK_INTERNAL_FAST_TRIM */
  /* SIM_CLKDIV1: OUTDIV1=0,OUTDIV2=1,OUTDIV3=4,OUTDIV4=4,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0x00) |
    e866:	4b17      	ldr	r3, [pc, #92]	; (e8c4 <__init_hardware+0xcc>)
    e868:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
    e86c:	3304      	adds	r3, #4
    e86e:	f04f 72a2 	mov.w	r2, #21233664	; 0x1440000
    e872:	601a      	str	r2, [r3, #0]
                SIM_CLKDIV1_OUTDIV2(0x01) |
                SIM_CLKDIV1_OUTDIV3(0x04) |
                SIM_CLKDIV1_OUTDIV4(0x04); /* Set the system prescalers to safe value */
  CPU_SetClockConfigGenMode(CPU_CLOCK_CONFIG_0);
    e874:	2000      	movs	r0, #0
    e876:	f000 f883 	bl	e980 <CPU_SetClockConfigGenMode>
  SIM_CLKDIV1 = (uint32_t)CPU_ClockConfigDescriptors[CPU_CLOCK_CONFIG_0].SysRegs.SIM_CLKDIV1_value; /* Update system prescalers */
    e87a:	4b12      	ldr	r3, [pc, #72]	; (e8c4 <__init_hardware+0xcc>)
    e87c:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
    e880:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
    e884:	3304      	adds	r3, #4
    e886:	601a      	str	r2, [r3, #0]
  SIM_SOPT1 = (uint32_t)((SIM_SOPT1 & (uint32_t)~(uint32_t)SIM_SOPT1_OSC32KSEL_MASK) | (uint32_t)CPU_ClockConfigDescriptors[CPU_CLOCK_CONFIG_0].SysRegs.SIM_SOPT1_value); /* Update 32 kHz oscillator clock source (ERCLK32K) */
    e888:	4a0e      	ldr	r2, [pc, #56]	; (e8c4 <__init_hardware+0xcc>)
    e88a:	4b0e      	ldr	r3, [pc, #56]	; (e8c4 <__init_hardware+0xcc>)
    e88c:	681b      	ldr	r3, [r3, #0]
    e88e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    e892:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    e896:	430b      	orrs	r3, r1
    e898:	6013      	str	r3, [r2, #0]
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)SIM_SOPT2_PLLFLLSEL_MASK) | (uint32_t)CPU_ClockConfigDescriptors[CPU_CLOCK_CONFIG_0].SysRegs.SIM_SOPT2_value); /* Update PLL/FLL clock select */
    e89a:	490a      	ldr	r1, [pc, #40]	; (e8c4 <__init_hardware+0xcc>)
    e89c:	4b09      	ldr	r3, [pc, #36]	; (e8c4 <__init_hardware+0xcc>)
    e89e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    e8a2:	3304      	adds	r3, #4
    e8a4:	681b      	ldr	r3, [r3, #0]
    e8a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    e8aa:	2200      	movs	r2, #0
    e8ac:	431a      	orrs	r2, r3
    e8ae:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
    e8b2:	3304      	adds	r3, #4
    e8b4:	601a      	str	r2, [r3, #0]
  #if defined(PEX_ENTRYPOINT_FUNCTION_RETURN)
  PEX_ENTRYPOINT_FUNCTION_RETURN
  #endif  
}
    e8b6:	bf00      	nop
    e8b8:	bd80      	pop	{r7, pc}
    e8ba:	bf00      	nop
    e8bc:	00000000 	.word	0x00000000
    e8c0:	40052000 	.word	0x40052000
    e8c4:	40047000 	.word	0x40047000
    e8c8:	4003d000 	.word	0x4003d000

0000e8cc <PE_low_level_init>:
**     Description :
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
void PE_low_level_init(void)
{
    e8cc:	b580      	push	{r7, lr}
    e8ce:	af00      	add	r7, sp, #0
  /* RTOS initialization */

  #ifdef PEX_RTOS_INIT
    PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
    e8d0:	b672      	cpsid	i
    e8d2:	f7f2 fcbf 	bl	1254 <PTRC1_Startup>


  /* Low power modes protection */
  
  /* Disable very low power mode protection */
  SMC_PMPROT = (CPU_LOW_POWER_ALLOW_VLP? SMC_PMPROT_AVLP_MASK : 0) |
    e8d6:	4b05      	ldr	r3, [pc, #20]	; (e8ec <PE_low_level_init+0x20>)
    e8d8:	2220      	movs	r2, #32
    e8da:	701a      	strb	r2, [r3, #0]
  #endif /* CPU_ON_RESET_EVENT_NAME */
  
  /* Rest of components initialization */
  
  #if CPU_COMPONENTS_INIT
  Components_Init();
    e8dc:	f7f2 fb9c 	bl	1018 <Components_Init>
    #if defined(__IAR_SYSTEMS_ICC__)
    __set_BASEPRI(CPU_INT_PRIORITY);
    #elif defined(__CWCC__)
    CPU_SetBASEPRI(CPU_INT_PRIORITY);
    #elif defined(__GNUC__)
    CPU_SetBASEPRI(CPU_INT_PRIORITY);
    e8e0:	20f0      	movs	r0, #240	; 0xf0
    e8e2:	f7ff ff7b 	bl	e7dc <CPU_SetBASEPRI>
    CPU_SetBASEPRI(CPU_INT_PRIORITY);
  	#else /* defined(compiler ID) */
  	  #error Unsupported compiler
  	#endif /* defined(compiler ID) */
  #endif
}
    e8e6:	bf00      	nop
    e8e8:	bd80      	pop	{r7, pc}
    e8ea:	bf00      	nop
    e8ec:	4007e000 	.word	0x4007e000

0000e8f0 <CPU_GetClockGenMode>:

CPU_TClockGenMode CPU_GetClockGenMode(void)
{
    e8f0:	b480      	push	{r7}
    e8f2:	af00      	add	r7, sp, #0
  switch (MCG_C1  & MCG_C1_CLKS_MASK) {
    e8f4:	4b21      	ldr	r3, [pc, #132]	; (e97c <CPU_GetClockGenMode+0x8c>)
    e8f6:	781b      	ldrb	r3, [r3, #0]
    e8f8:	b2db      	uxtb	r3, r3
    e8fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e8fe:	2b40      	cmp	r3, #64	; 0x40
    e900:	d017      	beq.n	e932 <CPU_GetClockGenMode+0x42>
    e902:	2b80      	cmp	r3, #128	; 0x80
    e904:	d020      	beq.n	e948 <CPU_GetClockGenMode+0x58>
    e906:	2b00      	cmp	r3, #0
    e908:	d132      	bne.n	e970 <CPU_GetClockGenMode+0x80>
    case  0x00U:
      /* Output of FLL or PLL is selected */
      if ((MCG_C6 & MCG_C6_PLLS_MASK) == 0x00U) {
    e90a:	4b1c      	ldr	r3, [pc, #112]	; (e97c <CPU_GetClockGenMode+0x8c>)
    e90c:	795b      	ldrb	r3, [r3, #5]
    e90e:	b2db      	uxtb	r3, r3
    e910:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e914:	2b00      	cmp	r3, #0
    e916:	d10a      	bne.n	e92e <CPU_GetClockGenMode+0x3e>
        /* Output of FLL is selected */
        if ((MCG_C1 & MCG_C1_IREFS_MASK) == 0x00U) {
    e918:	4b18      	ldr	r3, [pc, #96]	; (e97c <CPU_GetClockGenMode+0x8c>)
    e91a:	781b      	ldrb	r3, [r3, #0]
    e91c:	b2db      	uxtb	r3, r3
    e91e:	f003 0304 	and.w	r3, r3, #4
    e922:	2b00      	cmp	r3, #0
    e924:	d101      	bne.n	e92a <CPU_GetClockGenMode+0x3a>
          /* External reference clock is selected */
          return CPU_MCG_MODE_FEE;
    e926:	2303      	movs	r3, #3
    e928:	e023      	b.n	e972 <CPU_GetClockGenMode+0x82>
        } else {
          /* Internal reference clock is selected */
          return CPU_MCG_MODE_FEI;
    e92a:	2300      	movs	r3, #0
    e92c:	e021      	b.n	e972 <CPU_GetClockGenMode+0x82>
        }
      } else {
        /* Output of FLL is selected */
	      return CPU_MCG_MODE_PEE;
    e92e:	2307      	movs	r3, #7
    e930:	e01f      	b.n	e972 <CPU_GetClockGenMode+0x82>
	    }  
    case 0x40U:
      /* Internal reference clock is selected */
      if ((MCG_C2 & MCG_C2_LP_MASK) == 0x00U) {
    e932:	4b12      	ldr	r3, [pc, #72]	; (e97c <CPU_GetClockGenMode+0x8c>)
    e934:	785b      	ldrb	r3, [r3, #1]
    e936:	b2db      	uxtb	r3, r3
    e938:	f003 0302 	and.w	r3, r3, #2
    e93c:	2b00      	cmp	r3, #0
    e93e:	d101      	bne.n	e944 <CPU_GetClockGenMode+0x54>
        /* Low power mode is disabled */
        return CPU_MCG_MODE_FBI;
    e940:	2301      	movs	r3, #1
    e942:	e016      	b.n	e972 <CPU_GetClockGenMode+0x82>
      } else {
        /* Low power mode is enabled */
        return CPU_MCG_MODE_BLPI;
    e944:	2302      	movs	r3, #2
    e946:	e014      	b.n	e972 <CPU_GetClockGenMode+0x82>
      }
    case 0x80U:
      /* External reference clock is selected */
      if ((MCG_C6 & MCG_C6_PLLS_MASK) == 0x00U) {
    e948:	4b0c      	ldr	r3, [pc, #48]	; (e97c <CPU_GetClockGenMode+0x8c>)
    e94a:	795b      	ldrb	r3, [r3, #5]
    e94c:	b2db      	uxtb	r3, r3
    e94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    e952:	2b00      	cmp	r3, #0
    e954:	d10a      	bne.n	e96c <CPU_GetClockGenMode+0x7c>
        /* FLL or PLL is selected */
        if ((MCG_C2 & MCG_C2_LP_MASK) == 0x00U) {
    e956:	4b09      	ldr	r3, [pc, #36]	; (e97c <CPU_GetClockGenMode+0x8c>)
    e958:	785b      	ldrb	r3, [r3, #1]
    e95a:	b2db      	uxtb	r3, r3
    e95c:	f003 0302 	and.w	r3, r3, #2
    e960:	2b00      	cmp	r3, #0
    e962:	d101      	bne.n	e968 <CPU_GetClockGenMode+0x78>
          /* FLL is selected */
          return CPU_MCG_MODE_FBE;
    e964:	2304      	movs	r3, #4
    e966:	e004      	b.n	e972 <CPU_GetClockGenMode+0x82>
        } else {
          /* Low power mode is enabled */
          return CPU_MCG_MODE_BLPE;
    e968:	2305      	movs	r3, #5
    e96a:	e002      	b.n	e972 <CPU_GetClockGenMode+0x82>
        }
      } else {
        /* PLL is selected */
        return CPU_MCG_MODE_PBE;
    e96c:	2306      	movs	r3, #6
    e96e:	e000      	b.n	e972 <CPU_GetClockGenMode+0x82>
      }
    default:
      return (CPU_TClockGenMode)0x00U;
    e970:	2300      	movs	r3, #0
  }
}
    e972:	4618      	mov	r0, r3
    e974:	46bd      	mov	sp, r7
    e976:	f85d 7b04 	ldr.w	r7, [sp], #4
    e97a:	4770      	bx	lr
    e97c:	40064000 	.word	0x40064000

0000e980 <CPU_SetClockConfigGenMode>:

void CPU_SetClockConfigGenMode(LDD_TClockConfiguration ConfigID)
{
    e980:	b590      	push	{r4, r7, lr}
    e982:	b087      	sub	sp, #28
    e984:	af00      	add	r7, sp, #0
    e986:	4603      	mov	r3, r0
    e988:	71fb      	strb	r3, [r7, #7]
  CPU_TClockGenMode NextMode;
  CPU_TClockGenRegs NextModeRegs;
  CPU_TClockGenMode TargetMode = CPU_ClockConfigDescriptors[ConfigID].Mode;
    e98a:	79fa      	ldrb	r2, [r7, #7]
    e98c:	49b1      	ldr	r1, [pc, #708]	; (ec54 <CPU_SetClockConfigGenMode+0x2d4>)
    e98e:	4613      	mov	r3, r2
    e990:	00db      	lsls	r3, r3, #3
    e992:	1a9b      	subs	r3, r3, r2
    e994:	009b      	lsls	r3, r3, #2
    e996:	440b      	add	r3, r1
    e998:	881b      	ldrh	r3, [r3, #0]
    e99a:	82bb      	strh	r3, [r7, #20]
  
  /* External clock source pin routing */
  if ((TargetMode & (CPU_CLOCK_EXTERNAL_CLOCK_MASK | CPU_CLOCK_EXTERNAL_CRYSTAL_MASK)) != 0) { /* Is external clock source used in targeted clock configuration? */
    e99c:	8abb      	ldrh	r3, [r7, #20]
    e99e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e9a2:	2b00      	cmp	r3, #0
    e9a4:	d020      	beq.n	e9e8 <CPU_SetClockConfigGenMode+0x68>
    /* If yes, initialize the EXTAL pin routing */
    SIM_SCGC5 |= (uint32_t)SIM_SCGC5_PORTA_MASK; /* Enable EXTAL/XTAL pins clock gate */
    e9a6:	49ac      	ldr	r1, [pc, #688]	; (ec58 <CPU_SetClockConfigGenMode+0x2d8>)
    e9a8:	4bab      	ldr	r3, [pc, #684]	; (ec58 <CPU_SetClockConfigGenMode+0x2d8>)
    e9aa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
    e9ae:	3318      	adds	r3, #24
    e9b0:	681b      	ldr	r3, [r3, #0]
    e9b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    e9b6:	f501 5381 	add.w	r3, r1, #4128	; 0x1020
    e9ba:	3318      	adds	r3, #24
    e9bc:	601a      	str	r2, [r3, #0]
    /* PORTA_PCR18: ISF=0,MUX=0 */
    PORTA_PCR18 &= (uint32_t)~(uint32_t)(
    e9be:	4aa7      	ldr	r2, [pc, #668]	; (ec5c <CPU_SetClockConfigGenMode+0x2dc>)
    e9c0:	4ba6      	ldr	r3, [pc, #664]	; (ec5c <CPU_SetClockConfigGenMode+0x2dc>)
    e9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e9c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e9c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    e9cc:	6493      	str	r3, [r2, #72]	; 0x48
                    PORT_PCR_ISF_MASK |
                    PORT_PCR_MUX(0x07)
                   );
    if ((TargetMode & CPU_CLOCK_EXTERNAL_CRYSTAL_MASK) != 0) { /* Is external crystal/resonator used in targeted clock configuration? */
    e9ce:	8abb      	ldrh	r3, [r7, #20]
    e9d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    e9d4:	2b00      	cmp	r3, #0
    e9d6:	d007      	beq.n	e9e8 <CPU_SetClockConfigGenMode+0x68>
      /* If yes, initialize also XTAL pin routing */
      /* PORTA_PCR19: ISF=0,MUX=0 */
      PORTA_PCR19 &= (uint32_t)~(uint32_t)(
    e9d8:	4aa0      	ldr	r2, [pc, #640]	; (ec5c <CPU_SetClockConfigGenMode+0x2dc>)
    e9da:	4ba0      	ldr	r3, [pc, #640]	; (ec5c <CPU_SetClockConfigGenMode+0x2dc>)
    e9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e9de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    e9e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    e9e6:	64d3      	str	r3, [r2, #76]	; 0x4c
                      PORT_PCR_MUX(0x07)
                     );
    }
  }
  
  if ((MCG_SC & MCG_SC_FCRDIV_MASK) != CPU_ClockConfigDescriptors[ConfigID].GenRegs.MCG_SC_value) { /* Check if it is necessary to update Fast Clock Internal Reference Divider */ 
    e9e8:	4b9d      	ldr	r3, [pc, #628]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    e9ea:	7a1b      	ldrb	r3, [r3, #8]
    e9ec:	b2db      	uxtb	r3, r3
    e9ee:	f003 010e 	and.w	r1, r3, #14
    e9f2:	79fa      	ldrb	r2, [r7, #7]
    e9f4:	4897      	ldr	r0, [pc, #604]	; (ec54 <CPU_SetClockConfigGenMode+0x2d4>)
    e9f6:	4613      	mov	r3, r2
    e9f8:	00db      	lsls	r3, r3, #3
    e9fa:	1a9b      	subs	r3, r3, r2
    e9fc:	009b      	lsls	r3, r3, #2
    e9fe:	4403      	add	r3, r0
    ea00:	3308      	adds	r3, #8
    ea02:	781b      	ldrb	r3, [r3, #0]
    ea04:	4299      	cmp	r1, r3
    ea06:	f000 8082 	beq.w	eb0e <CPU_SetClockConfigGenMode+0x18e>
    if ((MCG_C2 & MCG_C2_IRCS_MASK) == 0x00U) {
    ea0a:	4b95      	ldr	r3, [pc, #596]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea0c:	785b      	ldrb	r3, [r3, #1]
    ea0e:	b2db      	uxtb	r3, r3
    ea10:	f003 0301 	and.w	r3, r3, #1
    ea14:	2b00      	cmp	r3, #0
    ea16:	d116      	bne.n	ea46 <CPU_SetClockConfigGenMode+0xc6>
      MCG_SC = (MCG_SC & (uint8_t)(~(MCG_SC_FCRDIV_MASK))) | CPU_ClockConfigDescriptors[ConfigID].GenRegs.MCG_SC_value;
    ea18:	4891      	ldr	r0, [pc, #580]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea1a:	4b91      	ldr	r3, [pc, #580]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea1c:	7a1b      	ldrb	r3, [r3, #8]
    ea1e:	b2db      	uxtb	r3, r3
    ea20:	b25b      	sxtb	r3, r3
    ea22:	f023 030e 	bic.w	r3, r3, #14
    ea26:	b259      	sxtb	r1, r3
    ea28:	79fa      	ldrb	r2, [r7, #7]
    ea2a:	4c8a      	ldr	r4, [pc, #552]	; (ec54 <CPU_SetClockConfigGenMode+0x2d4>)
    ea2c:	4613      	mov	r3, r2
    ea2e:	00db      	lsls	r3, r3, #3
    ea30:	1a9b      	subs	r3, r3, r2
    ea32:	009b      	lsls	r3, r3, #2
    ea34:	4423      	add	r3, r4
    ea36:	3308      	adds	r3, #8
    ea38:	781b      	ldrb	r3, [r3, #0]
    ea3a:	b25b      	sxtb	r3, r3
    ea3c:	430b      	orrs	r3, r1
    ea3e:	b25b      	sxtb	r3, r3
    ea40:	b2db      	uxtb	r3, r3
    ea42:	7203      	strb	r3, [r0, #8]
    ea44:	e063      	b.n	eb0e <CPU_SetClockConfigGenMode+0x18e>
    } else {
      if ((MCG_C1 & (MCG_C1_IREFS_MASK || MCG_C1_IRCLKEN_MASK)) != 0x00U) { /* Is internal reference clock active? */      
    ea46:	4b86      	ldr	r3, [pc, #536]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea48:	781b      	ldrb	r3, [r3, #0]
    ea4a:	b2db      	uxtb	r3, r3
    ea4c:	f003 0301 	and.w	r3, r3, #1
    ea50:	2b00      	cmp	r3, #0
    ea52:	d036      	beq.n	eac2 <CPU_SetClockConfigGenMode+0x142>
        MCG_C2 &= (uint8_t)(~(MCG_C2_IRCS_MASK)); /* Disable the fast internal clock */
    ea54:	4a82      	ldr	r2, [pc, #520]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea56:	4b82      	ldr	r3, [pc, #520]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea58:	785b      	ldrb	r3, [r3, #1]
    ea5a:	b2db      	uxtb	r3, r3
    ea5c:	f023 0301 	bic.w	r3, r3, #1
    ea60:	b2db      	uxtb	r3, r3
    ea62:	7053      	strb	r3, [r2, #1]
        while((MCG_S & MCG_S_IRCST_MASK) != 0x00U) { /* Check that the source internal reference clock is slow clock. */
    ea64:	bf00      	nop
    ea66:	4b7e      	ldr	r3, [pc, #504]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea68:	799b      	ldrb	r3, [r3, #6]
    ea6a:	b2db      	uxtb	r3, r3
    ea6c:	f003 0301 	and.w	r3, r3, #1
    ea70:	2b00      	cmp	r3, #0
    ea72:	d1f8      	bne.n	ea66 <CPU_SetClockConfigGenMode+0xe6>
        }
        MCG_SC = (MCG_SC & (uint8_t)(~(MCG_SC_FCRDIV_MASK))) | CPU_ClockConfigDescriptors[ConfigID].GenRegs.MCG_SC_value;    
    ea74:	487a      	ldr	r0, [pc, #488]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea76:	4b7a      	ldr	r3, [pc, #488]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ea78:	7a1b      	ldrb	r3, [r3, #8]
    ea7a:	b2db      	uxtb	r3, r3
    ea7c:	b25b      	sxtb	r3, r3
    ea7e:	f023 030e 	bic.w	r3, r3, #14
    ea82:	b259      	sxtb	r1, r3
    ea84:	79fa      	ldrb	r2, [r7, #7]
    ea86:	4c73      	ldr	r4, [pc, #460]	; (ec54 <CPU_SetClockConfigGenMode+0x2d4>)
    ea88:	4613      	mov	r3, r2
    ea8a:	00db      	lsls	r3, r3, #3
    ea8c:	1a9b      	subs	r3, r3, r2
    ea8e:	009b      	lsls	r3, r3, #2
    ea90:	4423      	add	r3, r4
    ea92:	3308      	adds	r3, #8
    ea94:	781b      	ldrb	r3, [r3, #0]
    ea96:	b25b      	sxtb	r3, r3
    ea98:	430b      	orrs	r3, r1
    ea9a:	b25b      	sxtb	r3, r3
    ea9c:	b2db      	uxtb	r3, r3
    ea9e:	7203      	strb	r3, [r0, #8]
        MCG_C2 |= MCG_C2_IRCS_MASK;    /* Re-enable the fast internal clock */
    eaa0:	4a6f      	ldr	r2, [pc, #444]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    eaa2:	4b6f      	ldr	r3, [pc, #444]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    eaa4:	785b      	ldrb	r3, [r3, #1]
    eaa6:	b2db      	uxtb	r3, r3
    eaa8:	f043 0301 	orr.w	r3, r3, #1
    eaac:	b2db      	uxtb	r3, r3
    eaae:	7053      	strb	r3, [r2, #1]
        while((MCG_S & MCG_S_IRCST_MASK) == 0x00U) { /* Check that the source internal reference clock is fast clock. */
    eab0:	bf00      	nop
    eab2:	4b6b      	ldr	r3, [pc, #428]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    eab4:	799b      	ldrb	r3, [r3, #6]
    eab6:	b2db      	uxtb	r3, r3
    eab8:	f003 0301 	and.w	r3, r3, #1
    eabc:	2b00      	cmp	r3, #0
    eabe:	d0f8      	beq.n	eab2 <CPU_SetClockConfigGenMode+0x132>
    eac0:	e025      	b.n	eb0e <CPU_SetClockConfigGenMode+0x18e>
        }
      } else {
        MCG_C2 &= (uint8_t)(~(MCG_C2_IRCS_MASK)); /* Disable the fast internal clock */
    eac2:	4a67      	ldr	r2, [pc, #412]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    eac4:	4b66      	ldr	r3, [pc, #408]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    eac6:	785b      	ldrb	r3, [r3, #1]
    eac8:	b2db      	uxtb	r3, r3
    eaca:	f023 0301 	bic.w	r3, r3, #1
    eace:	b2db      	uxtb	r3, r3
    ead0:	7053      	strb	r3, [r2, #1]
        MCG_SC = (MCG_SC & (uint8_t)(~(MCG_SC_FCRDIV_MASK))) | CPU_ClockConfigDescriptors[ConfigID].GenRegs.MCG_SC_value;    
    ead2:	4863      	ldr	r0, [pc, #396]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ead4:	4b62      	ldr	r3, [pc, #392]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ead6:	7a1b      	ldrb	r3, [r3, #8]
    ead8:	b2db      	uxtb	r3, r3
    eada:	b25b      	sxtb	r3, r3
    eadc:	f023 030e 	bic.w	r3, r3, #14
    eae0:	b259      	sxtb	r1, r3
    eae2:	79fa      	ldrb	r2, [r7, #7]
    eae4:	4c5b      	ldr	r4, [pc, #364]	; (ec54 <CPU_SetClockConfigGenMode+0x2d4>)
    eae6:	4613      	mov	r3, r2
    eae8:	00db      	lsls	r3, r3, #3
    eaea:	1a9b      	subs	r3, r3, r2
    eaec:	009b      	lsls	r3, r3, #2
    eaee:	4423      	add	r3, r4
    eaf0:	3308      	adds	r3, #8
    eaf2:	781b      	ldrb	r3, [r3, #0]
    eaf4:	b25b      	sxtb	r3, r3
    eaf6:	430b      	orrs	r3, r1
    eaf8:	b25b      	sxtb	r3, r3
    eafa:	b2db      	uxtb	r3, r3
    eafc:	7203      	strb	r3, [r0, #8]
        MCG_C2 |= MCG_C2_IRCS_MASK;    /* Re-enable the fast internal clock */
    eafe:	4a58      	ldr	r2, [pc, #352]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    eb00:	4b57      	ldr	r3, [pc, #348]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    eb02:	785b      	ldrb	r3, [r3, #1]
    eb04:	b2db      	uxtb	r3, r3
    eb06:	f043 0301 	orr.w	r3, r3, #1
    eb0a:	b2db      	uxtb	r3, r3
    eb0c:	7053      	strb	r3, [r2, #1]
      }
    }
  }      
  NextMode = CPU_GetClockGenMode(); /* Identify the currently active MCG mode */
    eb0e:	f7ff feef 	bl	e8f0 <CPU_GetClockGenMode>
    eb12:	4603      	mov	r3, r0
    eb14:	82fb      	strh	r3, [r7, #22]
  do {
    NextMode = ClockGenModeMatrix[NextMode & CPU_MCG_MODE_INDEX_MASK][TargetMode & CPU_MCG_MODE_INDEX_MASK];
    eb16:	8afb      	ldrh	r3, [r7, #22]
    eb18:	f003 020f 	and.w	r2, r3, #15
    eb1c:	8abb      	ldrh	r3, [r7, #20]
    eb1e:	f003 030f 	and.w	r3, r3, #15
    eb22:	4950      	ldr	r1, [pc, #320]	; (ec64 <CPU_SetClockConfigGenMode+0x2e4>)
    eb24:	00d2      	lsls	r2, r2, #3
    eb26:	4413      	add	r3, r2
    eb28:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    eb2c:	82fb      	strh	r3, [r7, #22]
    if (NextMode == (TargetMode & CPU_MCG_MODE_INDEX_MASK)) {
    eb2e:	8afa      	ldrh	r2, [r7, #22]
    eb30:	8abb      	ldrh	r3, [r7, #20]
    eb32:	f003 030f 	and.w	r3, r3, #15
    eb36:	429a      	cmp	r2, r3
    eb38:	d110      	bne.n	eb5c <CPU_SetClockConfigGenMode+0x1dc>
      NextModeRegs = CPU_ClockConfigDescriptors[ConfigID].GenRegs;
    eb3a:	79fa      	ldrb	r2, [r7, #7]
    eb3c:	4945      	ldr	r1, [pc, #276]	; (ec54 <CPU_SetClockConfigGenMode+0x2d4>)
    eb3e:	4613      	mov	r3, r2
    eb40:	00db      	lsls	r3, r3, #3
    eb42:	1a9b      	subs	r3, r3, r2
    eb44:	009b      	lsls	r3, r3, #2
    eb46:	18ca      	adds	r2, r1, r3
    eb48:	f107 030c 	add.w	r3, r7, #12
    eb4c:	3203      	adds	r2, #3
    eb4e:	6810      	ldr	r0, [r2, #0]
    eb50:	6018      	str	r0, [r3, #0]
    eb52:	8891      	ldrh	r1, [r2, #4]
    eb54:	7992      	ldrb	r2, [r2, #6]
    eb56:	8099      	strh	r1, [r3, #4]
    eb58:	719a      	strb	r2, [r3, #6]
    eb5a:	e00d      	b.n	eb78 <CPU_SetClockConfigGenMode+0x1f8>
    } else {
      NextModeRegs = *CPU_ClockGenModeRegs[NextMode & CPU_MCG_MODE_INDEX_MASK];
    eb5c:	8afb      	ldrh	r3, [r7, #22]
    eb5e:	f003 030f 	and.w	r3, r3, #15
    eb62:	4a41      	ldr	r2, [pc, #260]	; (ec68 <CPU_SetClockConfigGenMode+0x2e8>)
    eb64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    eb68:	f107 030c 	add.w	r3, r7, #12
    eb6c:	6810      	ldr	r0, [r2, #0]
    eb6e:	6018      	str	r0, [r3, #0]
    eb70:	8891      	ldrh	r1, [r2, #4]
    eb72:	7992      	ldrb	r2, [r2, #6]
    eb74:	8099      	strh	r1, [r3, #4]
    eb76:	719a      	strb	r2, [r3, #6]
    }
    switch (NextMode & CPU_MCG_MODE_INDEX_MASK) {
    eb78:	8afb      	ldrh	r3, [r7, #22]
    eb7a:	f003 030f 	and.w	r3, r3, #15
    eb7e:	2b07      	cmp	r3, #7
    eb80:	f200 818c 	bhi.w	ee9c <CPU_SetClockConfigGenMode+0x51c>
    eb84:	a201      	add	r2, pc, #4	; (adr r2, eb8c <CPU_SetClockConfigGenMode+0x20c>)
    eb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    eb8a:	bf00      	nop
    eb8c:	0000ebad 	.word	0x0000ebad
    eb90:	0000ebad 	.word	0x0000ebad
    eb94:	0000ec71 	.word	0x0000ec71
    eb98:	0000ecc7 	.word	0x0000ecc7
    eb9c:	0000ecc7 	.word	0x0000ecc7
    eba0:	0000ed87 	.word	0x0000ed87
    eba4:	0000edf5 	.word	0x0000edf5
    eba8:	0000edf5 	.word	0x0000edf5
      case CPU_MCG_MODE_FEI:
      case CPU_MCG_MODE_FBI:
        MCG_C1 = NextModeRegs.MCG_C1_value; /* Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) */
    ebac:	4b2c      	ldr	r3, [pc, #176]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ebae:	7b3a      	ldrb	r2, [r7, #12]
    ebb0:	701a      	strb	r2, [r3, #0]
        while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    ebb2:	bf00      	nop
    ebb4:	4b2a      	ldr	r3, [pc, #168]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ebb6:	799b      	ldrb	r3, [r3, #6]
    ebb8:	b2db      	uxtb	r3, r3
    ebba:	f003 0310 	and.w	r3, r3, #16
    ebbe:	2b00      	cmp	r3, #0
    ebc0:	d0f8      	beq.n	ebb4 <CPU_SetClockConfigGenMode+0x234>
        }
        MCG_C2 = ((NextModeRegs.MCG_C2_value) & (uint8_t)(~(MCG_C2_FCFTRIM_MASK))) | (MCG_C2 & MCG_C2_FCFTRIM_MASK); /* Set C2 (freq. range, ext. and int. reference selection etc.; trim values not changed) */
    ebc2:	4927      	ldr	r1, [pc, #156]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ebc4:	7b7b      	ldrb	r3, [r7, #13]
    ebc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    ebca:	b2da      	uxtb	r2, r3
    ebcc:	4b24      	ldr	r3, [pc, #144]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ebce:	785b      	ldrb	r3, [r3, #1]
    ebd0:	b2db      	uxtb	r3, r3
    ebd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ebd6:	b2db      	uxtb	r3, r3
    ebd8:	4313      	orrs	r3, r2
    ebda:	b2db      	uxtb	r3, r3
    ebdc:	704b      	strb	r3, [r1, #1]
        MCG_C4 = ((NextModeRegs.MCG_C4_value) & (uint8_t)(~(MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK))) | (MCG_C4 & (MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK)); /* Set C4 (FLL output; trim values not changed) */
    ebde:	4920      	ldr	r1, [pc, #128]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ebe0:	7bbb      	ldrb	r3, [r7, #14]
    ebe2:	f023 031f 	bic.w	r3, r3, #31
    ebe6:	b2da      	uxtb	r2, r3
    ebe8:	4b1d      	ldr	r3, [pc, #116]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ebea:	78db      	ldrb	r3, [r3, #3]
    ebec:	b2db      	uxtb	r3, r3
    ebee:	f003 031f 	and.w	r3, r3, #31
    ebf2:	b2db      	uxtb	r3, r3
    ebf4:	4313      	orrs	r3, r2
    ebf6:	b2db      	uxtb	r3, r3
    ebf8:	70cb      	strb	r3, [r1, #3]
        OSC_CR = NextModeRegs.OSC_CR_value; /* Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */      	
    ebfa:	4b1c      	ldr	r3, [pc, #112]	; (ec6c <CPU_SetClockConfigGenMode+0x2ec>)
    ebfc:	7cba      	ldrb	r2, [r7, #18]
    ebfe:	701a      	strb	r2, [r3, #0]
        if (TargetMode & CPU_CLOCK_RTC_OSC_MASK) {
    ec00:	8abb      	ldrh	r3, [r7, #20]
    ec02:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ec06:	2b00      	cmp	r3, #0
    ec08:	d003      	beq.n	ec12 <CPU_SetClockConfigGenMode+0x292>
          MCG_C7 = MCG_C7_OSCSEL(1);   /* Select RTC oscillator as MCG clock source */
    ec0a:	4b15      	ldr	r3, [pc, #84]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ec0c:	2201      	movs	r2, #1
    ec0e:	731a      	strb	r2, [r3, #12]
    ec10:	e00b      	b.n	ec2a <CPU_SetClockConfigGenMode+0x2aa>
        } else if (TargetMode & CPU_CLOCK_IRC48M_MASK) {
    ec12:	8abb      	ldrh	r3, [r7, #20]
    ec14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d003      	beq.n	ec24 <CPU_SetClockConfigGenMode+0x2a4>
          MCG_C7 = MCG_C7_OSCSEL(2);   /* Select IRC 48MHz as MCG clock source */
    ec1c:	4b10      	ldr	r3, [pc, #64]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ec1e:	2202      	movs	r2, #2
    ec20:	731a      	strb	r2, [r3, #12]
    ec22:	e002      	b.n	ec2a <CPU_SetClockConfigGenMode+0x2aa>
        } else {
          MCG_C7 = 0;                  /* Select system oscillator as MCG clock source */
    ec24:	4b0e      	ldr	r3, [pc, #56]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ec26:	2200      	movs	r2, #0
    ec28:	731a      	strb	r2, [r3, #12]
        }
        MCG_C5 = NextModeRegs.MCG_C5_value; /* Set C5 (PLL settings, PLL reference divider etc.) */
    ec2a:	4b0d      	ldr	r3, [pc, #52]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ec2c:	7bfa      	ldrb	r2, [r7, #15]
    ec2e:	711a      	strb	r2, [r3, #4]
        if (TargetMode & CPU_CLOCK_PLL_MASK) {
    ec30:	8abb      	ldrh	r3, [r7, #20]
    ec32:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ec36:	2b00      	cmp	r3, #0
    ec38:	d007      	beq.n	ec4a <CPU_SetClockConfigGenMode+0x2ca>
          MCG_C5 |= MCG_C5_PLLCLKEN0_MASK;
    ec3a:	4a09      	ldr	r2, [pc, #36]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ec3c:	4b08      	ldr	r3, [pc, #32]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ec3e:	791b      	ldrb	r3, [r3, #4]
    ec40:	b2db      	uxtb	r3, r3
    ec42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ec46:	b2db      	uxtb	r3, r3
    ec48:	7113      	strb	r3, [r2, #4]
        }
        MCG_C6 = NextModeRegs.MCG_C6_value; /* Set C6 (PLL select, VCO divider etc.) */
    ec4a:	4b05      	ldr	r3, [pc, #20]	; (ec60 <CPU_SetClockConfigGenMode+0x2e0>)
    ec4c:	7c3a      	ldrb	r2, [r7, #16]
    ec4e:	715a      	strb	r2, [r3, #5]
        break;
    ec50:	e129      	b.n	eea6 <CPU_SetClockConfigGenMode+0x526>
    ec52:	bf00      	nop
    ec54:	0001030c 	.word	0x0001030c
    ec58:	40047000 	.word	0x40047000
    ec5c:	40049000 	.word	0x40049000
    ec60:	40064000 	.word	0x40064000
    ec64:	0001028c 	.word	0x0001028c
    ec68:	000103d8 	.word	0x000103d8
    ec6c:	40065000 	.word	0x40065000
      case CPU_MCG_MODE_BLPI:
        MCG_C1 = NextModeRegs.MCG_C1_value; /* Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) */
    ec70:	4bb0      	ldr	r3, [pc, #704]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ec72:	7b3a      	ldrb	r2, [r7, #12]
    ec74:	701a      	strb	r2, [r3, #0]
        while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    ec76:	bf00      	nop
    ec78:	4bae      	ldr	r3, [pc, #696]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ec7a:	799b      	ldrb	r3, [r3, #6]
    ec7c:	b2db      	uxtb	r3, r3
    ec7e:	f003 0310 	and.w	r3, r3, #16
    ec82:	2b00      	cmp	r3, #0
    ec84:	d0f8      	beq.n	ec78 <CPU_SetClockConfigGenMode+0x2f8>
        }
        MCG_C2 = ((NextModeRegs.MCG_C2_value) & (uint8_t)(~(MCG_C2_FCFTRIM_MASK))) | (MCG_C2 & MCG_C2_FCFTRIM_MASK); /* Set C2 (freq. range, ext. and int. reference selection etc.; trim values not changed) */
    ec86:	49ab      	ldr	r1, [pc, #684]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ec88:	7b7b      	ldrb	r3, [r7, #13]
    ec8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    ec8e:	b2da      	uxtb	r2, r3
    ec90:	4ba8      	ldr	r3, [pc, #672]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ec92:	785b      	ldrb	r3, [r3, #1]
    ec94:	b2db      	uxtb	r3, r3
    ec96:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ec9a:	b2db      	uxtb	r3, r3
    ec9c:	4313      	orrs	r3, r2
    ec9e:	b2db      	uxtb	r3, r3
    eca0:	704b      	strb	r3, [r1, #1]
        OSC_CR = NextModeRegs.OSC_CR_value; /* Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */
    eca2:	4ba5      	ldr	r3, [pc, #660]	; (ef38 <CPU_SetClockConfigGenMode+0x5b8>)
    eca4:	7cba      	ldrb	r2, [r7, #18]
    eca6:	701a      	strb	r2, [r3, #0]
        if (TargetMode & CPU_CLOCK_FAST_MASK) {
    eca8:	8abb      	ldrh	r3, [r7, #20]
    ecaa:	f003 0320 	and.w	r3, r3, #32
    ecae:	2b00      	cmp	r3, #0
    ecb0:	f000 80f6 	beq.w	eea0 <CPU_SetClockConfigGenMode+0x520>
          while((MCG_S & MCG_S_IRCST_MASK) == 0x00U) { /* Check that the fast external reference clock is selected. */
    ecb4:	bf00      	nop
    ecb6:	4b9f      	ldr	r3, [pc, #636]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ecb8:	799b      	ldrb	r3, [r3, #6]
    ecba:	b2db      	uxtb	r3, r3
    ecbc:	f003 0301 	and.w	r3, r3, #1
    ecc0:	2b00      	cmp	r3, #0
    ecc2:	d0f8      	beq.n	ecb6 <CPU_SetClockConfigGenMode+0x336>
      	  }
      	}      	
        break;
    ecc4:	e0ec      	b.n	eea0 <CPU_SetClockConfigGenMode+0x520>
      case CPU_MCG_MODE_FEE:
      case CPU_MCG_MODE_FBE:
        MCG_C2 = ((NextModeRegs.MCG_C2_value) & (uint8_t)(~(MCG_C2_FCFTRIM_MASK))) | (MCG_C2 & MCG_C2_FCFTRIM_MASK); /* Set C2 (freq. range, ext. and int. reference selection etc.; trim values not changed) */
    ecc6:	499b      	ldr	r1, [pc, #620]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ecc8:	7b7b      	ldrb	r3, [r7, #13]
    ecca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    ecce:	b2da      	uxtb	r2, r3
    ecd0:	4b98      	ldr	r3, [pc, #608]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ecd2:	785b      	ldrb	r3, [r3, #1]
    ecd4:	b2db      	uxtb	r3, r3
    ecd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ecda:	b2db      	uxtb	r3, r3
    ecdc:	4313      	orrs	r3, r2
    ecde:	b2db      	uxtb	r3, r3
    ece0:	704b      	strb	r3, [r1, #1]
        OSC_CR = NextModeRegs.OSC_CR_value; /* Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */      	
    ece2:	4b95      	ldr	r3, [pc, #596]	; (ef38 <CPU_SetClockConfigGenMode+0x5b8>)
    ece4:	7cba      	ldrb	r2, [r7, #18]
    ece6:	701a      	strb	r2, [r3, #0]
        if (TargetMode & CPU_CLOCK_RTC_OSC_MASK) {
    ece8:	8abb      	ldrh	r3, [r7, #20]
    ecea:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ecee:	2b00      	cmp	r3, #0
    ecf0:	d003      	beq.n	ecfa <CPU_SetClockConfigGenMode+0x37a>
          MCG_C7 = MCG_C7_OSCSEL(1);   /* Select RTC oscillator as MCG clock source */
    ecf2:	4b90      	ldr	r3, [pc, #576]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ecf4:	2201      	movs	r2, #1
    ecf6:	731a      	strb	r2, [r3, #12]
    ecf8:	e00b      	b.n	ed12 <CPU_SetClockConfigGenMode+0x392>
        } else if (TargetMode & CPU_CLOCK_IRC48M_MASK) {
    ecfa:	8abb      	ldrh	r3, [r7, #20]
    ecfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ed00:	2b00      	cmp	r3, #0
    ed02:	d003      	beq.n	ed0c <CPU_SetClockConfigGenMode+0x38c>
          MCG_C7 = MCG_C7_OSCSEL(2);   /* Select IRC 48MHz as MCG clock source */
    ed04:	4b8b      	ldr	r3, [pc, #556]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed06:	2202      	movs	r2, #2
    ed08:	731a      	strb	r2, [r3, #12]
    ed0a:	e002      	b.n	ed12 <CPU_SetClockConfigGenMode+0x392>
        } else {
          MCG_C7 = 0;                  /* Select system oscillator as MCG clock source */
    ed0c:	4b89      	ldr	r3, [pc, #548]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed0e:	2200      	movs	r2, #0
    ed10:	731a      	strb	r2, [r3, #12]
        }
        MCG_C1 = NextModeRegs.MCG_C1_value; /* Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) */
    ed12:	4b88      	ldr	r3, [pc, #544]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed14:	7b3a      	ldrb	r2, [r7, #12]
    ed16:	701a      	strb	r2, [r3, #0]
        if ((TargetMode & CPU_CLOCK_EXTERNAL_CRYSTAL_MASK) != 0) {
    ed18:	8abb      	ldrh	r3, [r7, #20]
    ed1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    ed1e:	2b00      	cmp	r3, #0
    ed20:	d007      	beq.n	ed32 <CPU_SetClockConfigGenMode+0x3b2>
          while((MCG_S & MCG_S_OSCINIT0_MASK) == 0x00U) { /* Check that the oscillator is running */
    ed22:	bf00      	nop
    ed24:	4b83      	ldr	r3, [pc, #524]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed26:	799b      	ldrb	r3, [r3, #6]
    ed28:	b2db      	uxtb	r3, r3
    ed2a:	f003 0302 	and.w	r3, r3, #2
    ed2e:	2b00      	cmp	r3, #0
    ed30:	d0f8      	beq.n	ed24 <CPU_SetClockConfigGenMode+0x3a4>
          }
        }
        while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock is the external reference clock. */
    ed32:	bf00      	nop
    ed34:	4b7f      	ldr	r3, [pc, #508]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed36:	799b      	ldrb	r3, [r3, #6]
    ed38:	b2db      	uxtb	r3, r3
    ed3a:	f003 0310 	and.w	r3, r3, #16
    ed3e:	2b00      	cmp	r3, #0
    ed40:	d1f8      	bne.n	ed34 <CPU_SetClockConfigGenMode+0x3b4>
        }
        MCG_C4 = ((NextModeRegs.MCG_C4_value) & (uint8_t)(~(MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK))) | (MCG_C4 & (MCG_C4_FCTRIM_MASK | MCG_C4_SCFTRIM_MASK)); /* Set C4 (FLL output; trim values not changed) */
    ed42:	497c      	ldr	r1, [pc, #496]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed44:	7bbb      	ldrb	r3, [r7, #14]
    ed46:	f023 031f 	bic.w	r3, r3, #31
    ed4a:	b2da      	uxtb	r2, r3
    ed4c:	4b79      	ldr	r3, [pc, #484]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed4e:	78db      	ldrb	r3, [r3, #3]
    ed50:	b2db      	uxtb	r3, r3
    ed52:	f003 031f 	and.w	r3, r3, #31
    ed56:	b2db      	uxtb	r3, r3
    ed58:	4313      	orrs	r3, r2
    ed5a:	b2db      	uxtb	r3, r3
    ed5c:	70cb      	strb	r3, [r1, #3]
        MCG_C5 = NextModeRegs.MCG_C5_value; /* Set C5 (PLL settings, PLL reference divider etc.) */
    ed5e:	4b75      	ldr	r3, [pc, #468]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed60:	7bfa      	ldrb	r2, [r7, #15]
    ed62:	711a      	strb	r2, [r3, #4]
        if (TargetMode & CPU_CLOCK_PLL_MASK) {
    ed64:	8abb      	ldrh	r3, [r7, #20]
    ed66:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ed6a:	2b00      	cmp	r3, #0
    ed6c:	d007      	beq.n	ed7e <CPU_SetClockConfigGenMode+0x3fe>
          MCG_C5 |= MCG_C5_PLLCLKEN0_MASK;
    ed6e:	4a71      	ldr	r2, [pc, #452]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed70:	4b70      	ldr	r3, [pc, #448]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed72:	791b      	ldrb	r3, [r3, #4]
    ed74:	b2db      	uxtb	r3, r3
    ed76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ed7a:	b2db      	uxtb	r3, r3
    ed7c:	7113      	strb	r3, [r2, #4]
        }
        MCG_C6 = NextModeRegs.MCG_C6_value; /* Set C6 (PLL select, VCO divider etc.) */
    ed7e:	4b6d      	ldr	r3, [pc, #436]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed80:	7c3a      	ldrb	r2, [r7, #16]
    ed82:	715a      	strb	r2, [r3, #5]
        break;
    ed84:	e08f      	b.n	eea6 <CPU_SetClockConfigGenMode+0x526>
      case CPU_MCG_MODE_BLPE:
        MCG_C1 = NextModeRegs.MCG_C1_value; /* Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) */
    ed86:	4b6b      	ldr	r3, [pc, #428]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed88:	7b3a      	ldrb	r2, [r7, #12]
    ed8a:	701a      	strb	r2, [r3, #0]
        MCG_C2 = ((NextModeRegs.MCG_C2_value) & (uint8_t)(~(MCG_C2_FCFTRIM_MASK))) | (MCG_C2 & MCG_C2_FCFTRIM_MASK); /* Set C2 (freq. range, ext. and int. reference selection etc.; trim values not changed) */
    ed8c:	4969      	ldr	r1, [pc, #420]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed8e:	7b7b      	ldrb	r3, [r7, #13]
    ed90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    ed94:	b2da      	uxtb	r2, r3
    ed96:	4b67      	ldr	r3, [pc, #412]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ed98:	785b      	ldrb	r3, [r3, #1]
    ed9a:	b2db      	uxtb	r3, r3
    ed9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    eda0:	b2db      	uxtb	r3, r3
    eda2:	4313      	orrs	r3, r2
    eda4:	b2db      	uxtb	r3, r3
    eda6:	704b      	strb	r3, [r1, #1]
        OSC_CR = NextModeRegs.OSC_CR_value; /* Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */      	
    eda8:	4b63      	ldr	r3, [pc, #396]	; (ef38 <CPU_SetClockConfigGenMode+0x5b8>)
    edaa:	7cba      	ldrb	r2, [r7, #18]
    edac:	701a      	strb	r2, [r3, #0]
        if (TargetMode & CPU_CLOCK_RTC_OSC_MASK) {
    edae:	8abb      	ldrh	r3, [r7, #20]
    edb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    edb4:	2b00      	cmp	r3, #0
    edb6:	d003      	beq.n	edc0 <CPU_SetClockConfigGenMode+0x440>
          MCG_C7 = MCG_C7_OSCSEL(1);   /* Select RTC oscillator as MCG clock source */
    edb8:	4b5e      	ldr	r3, [pc, #376]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    edba:	2201      	movs	r2, #1
    edbc:	731a      	strb	r2, [r3, #12]
    edbe:	e00b      	b.n	edd8 <CPU_SetClockConfigGenMode+0x458>
        } else if (TargetMode & CPU_CLOCK_IRC48M_MASK) {
    edc0:	8abb      	ldrh	r3, [r7, #20]
    edc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    edc6:	2b00      	cmp	r3, #0
    edc8:	d003      	beq.n	edd2 <CPU_SetClockConfigGenMode+0x452>
          MCG_C7 = MCG_C7_OSCSEL(2);   /* Select IRC 48MHz as MCG clock source */
    edca:	4b5a      	ldr	r3, [pc, #360]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    edcc:	2202      	movs	r2, #2
    edce:	731a      	strb	r2, [r3, #12]
    edd0:	e002      	b.n	edd8 <CPU_SetClockConfigGenMode+0x458>
        } else {
          MCG_C7 = 0;                  /* Select system oscillator as MCG clock source */
    edd2:	4b58      	ldr	r3, [pc, #352]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    edd4:	2200      	movs	r2, #0
    edd6:	731a      	strb	r2, [r3, #12]
        }
        if ((TargetMode & CPU_CLOCK_EXTERNAL_CRYSTAL_MASK) != 0) {
    edd8:	8abb      	ldrh	r3, [r7, #20]
    edda:	f003 0380 	and.w	r3, r3, #128	; 0x80
    edde:	2b00      	cmp	r3, #0
    ede0:	d060      	beq.n	eea4 <CPU_SetClockConfigGenMode+0x524>
          while((MCG_S & MCG_S_OSCINIT0_MASK) == 0x00U) { /* Check that the oscillator is running */
    ede2:	bf00      	nop
    ede4:	4b53      	ldr	r3, [pc, #332]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ede6:	799b      	ldrb	r3, [r3, #6]
    ede8:	b2db      	uxtb	r3, r3
    edea:	f003 0302 	and.w	r3, r3, #2
    edee:	2b00      	cmp	r3, #0
    edf0:	d0f8      	beq.n	ede4 <CPU_SetClockConfigGenMode+0x464>
          }
        }
        break;
    edf2:	e057      	b.n	eea4 <CPU_SetClockConfigGenMode+0x524>
      case CPU_MCG_MODE_PEE:
      case CPU_MCG_MODE_PBE:
        OSC_CR = NextModeRegs.OSC_CR_value; /* Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */
    edf4:	4b50      	ldr	r3, [pc, #320]	; (ef38 <CPU_SetClockConfigGenMode+0x5b8>)
    edf6:	7cba      	ldrb	r2, [r7, #18]
    edf8:	701a      	strb	r2, [r3, #0]
        if (TargetMode & CPU_CLOCK_RTC_OSC_MASK) {
    edfa:	8abb      	ldrh	r3, [r7, #20]
    edfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ee00:	2b00      	cmp	r3, #0
    ee02:	d003      	beq.n	ee0c <CPU_SetClockConfigGenMode+0x48c>
          MCG_C7 = MCG_C7_OSCSEL(1);   /* Select RTC oscillator as MCG clock source */
    ee04:	4b4b      	ldr	r3, [pc, #300]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee06:	2201      	movs	r2, #1
    ee08:	731a      	strb	r2, [r3, #12]
    ee0a:	e00b      	b.n	ee24 <CPU_SetClockConfigGenMode+0x4a4>
        } else if (TargetMode & CPU_CLOCK_IRC48M_MASK) {
    ee0c:	8abb      	ldrh	r3, [r7, #20]
    ee0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ee12:	2b00      	cmp	r3, #0
    ee14:	d003      	beq.n	ee1e <CPU_SetClockConfigGenMode+0x49e>
          MCG_C7 = MCG_C7_OSCSEL(2);   /* Select IRC 48MHz as MCG clock source */
    ee16:	4b47      	ldr	r3, [pc, #284]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee18:	2202      	movs	r2, #2
    ee1a:	731a      	strb	r2, [r3, #12]
    ee1c:	e002      	b.n	ee24 <CPU_SetClockConfigGenMode+0x4a4>
        } else {
          MCG_C7 = 0;                  /* Select system oscillator as MCG clock source */
    ee1e:	4b45      	ldr	r3, [pc, #276]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee20:	2200      	movs	r2, #0
    ee22:	731a      	strb	r2, [r3, #12]
        }
        MCG_C1 = NextModeRegs.MCG_C1_value; /* Set C1 (clock source selection, FLL ext. reference divider, int. reference enable etc.) */
    ee24:	4b43      	ldr	r3, [pc, #268]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee26:	7b3a      	ldrb	r2, [r7, #12]
    ee28:	701a      	strb	r2, [r3, #0]
        MCG_C2 = ((NextModeRegs.MCG_C2_value) & (uint8_t)(~(MCG_C2_FCFTRIM_MASK))) | (MCG_C2 & MCG_C2_FCFTRIM_MASK); /* Set C2 (freq. range, ext. and int. reference selection etc.; trim values not changed) */
    ee2a:	4942      	ldr	r1, [pc, #264]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee2c:	7b7b      	ldrb	r3, [r7, #13]
    ee2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    ee32:	b2da      	uxtb	r2, r3
    ee34:	4b3f      	ldr	r3, [pc, #252]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee36:	785b      	ldrb	r3, [r3, #1]
    ee38:	b2db      	uxtb	r3, r3
    ee3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ee3e:	b2db      	uxtb	r3, r3
    ee40:	4313      	orrs	r3, r2
    ee42:	b2db      	uxtb	r3, r3
    ee44:	704b      	strb	r3, [r1, #1]
        if ((TargetMode & CPU_MCG_MODE_INDEX_MASK) == CPU_MCG_MODE_PEE) {
    ee46:	8abb      	ldrh	r3, [r7, #20]
    ee48:	f003 030f 	and.w	r3, r3, #15
    ee4c:	2b07      	cmp	r3, #7
    ee4e:	d116      	bne.n	ee7e <CPU_SetClockConfigGenMode+0x4fe>
          MCG_C5 = CPU_ClockConfigDescriptors[ConfigID].GenRegs.MCG_C5_value; /* Set C5 (PLL settings, PLL reference divider etc.) */
    ee50:	4938      	ldr	r1, [pc, #224]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee52:	79fa      	ldrb	r2, [r7, #7]
    ee54:	4839      	ldr	r0, [pc, #228]	; (ef3c <CPU_SetClockConfigGenMode+0x5bc>)
    ee56:	4613      	mov	r3, r2
    ee58:	00db      	lsls	r3, r3, #3
    ee5a:	1a9b      	subs	r3, r3, r2
    ee5c:	009b      	lsls	r3, r3, #2
    ee5e:	4403      	add	r3, r0
    ee60:	3306      	adds	r3, #6
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	710b      	strb	r3, [r1, #4]
          MCG_C6 = CPU_ClockConfigDescriptors[ConfigID].GenRegs.MCG_C6_value; /* Set C6 (PLL select, VCO divider etc.) */
    ee66:	4933      	ldr	r1, [pc, #204]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee68:	79fa      	ldrb	r2, [r7, #7]
    ee6a:	4834      	ldr	r0, [pc, #208]	; (ef3c <CPU_SetClockConfigGenMode+0x5bc>)
    ee6c:	4613      	mov	r3, r2
    ee6e:	00db      	lsls	r3, r3, #3
    ee70:	1a9b      	subs	r3, r3, r2
    ee72:	009b      	lsls	r3, r3, #2
    ee74:	4403      	add	r3, r0
    ee76:	3307      	adds	r3, #7
    ee78:	781b      	ldrb	r3, [r3, #0]
    ee7a:	714b      	strb	r3, [r1, #5]
    ee7c:	e005      	b.n	ee8a <CPU_SetClockConfigGenMode+0x50a>
        } else {
          MCG_C5 = NextModeRegs.MCG_C5_value; /* Set C5 (PLL settings, PLL reference divider etc.) */
    ee7e:	4b2d      	ldr	r3, [pc, #180]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee80:	7bfa      	ldrb	r2, [r7, #15]
    ee82:	711a      	strb	r2, [r3, #4]
          MCG_C6 = NextModeRegs.MCG_C6_value; /* Set C6 (PLL select, VCO divider etc.) */
    ee84:	4b2b      	ldr	r3, [pc, #172]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee86:	7c3a      	ldrb	r2, [r7, #16]
    ee88:	715a      	strb	r2, [r3, #5]
        }
        while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until PLL is locked*/
    ee8a:	bf00      	nop
    ee8c:	4b29      	ldr	r3, [pc, #164]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ee8e:	799b      	ldrb	r3, [r3, #6]
    ee90:	b2db      	uxtb	r3, r3
    ee92:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ee96:	2b00      	cmp	r3, #0
    ee98:	d0f8      	beq.n	ee8c <CPU_SetClockConfigGenMode+0x50c>
        }
        break;
    ee9a:	e004      	b.n	eea6 <CPU_SetClockConfigGenMode+0x526>
      default:
        break;            
    ee9c:	bf00      	nop
    ee9e:	e002      	b.n	eea6 <CPU_SetClockConfigGenMode+0x526>
        OSC_CR = NextModeRegs.OSC_CR_value; /* Set OSC_CR (OSCERCLK enable, oscillator capacitor load) */
        if (TargetMode & CPU_CLOCK_FAST_MASK) {
          while((MCG_S & MCG_S_IRCST_MASK) == 0x00U) { /* Check that the fast external reference clock is selected. */
      	  }
      	}      	
        break;
    eea0:	bf00      	nop
    eea2:	e000      	b.n	eea6 <CPU_SetClockConfigGenMode+0x526>
        }
        if ((TargetMode & CPU_CLOCK_EXTERNAL_CRYSTAL_MASK) != 0) {
          while((MCG_S & MCG_S_OSCINIT0_MASK) == 0x00U) { /* Check that the oscillator is running */
          }
        }
        break;
    eea4:	bf00      	nop
        }
        break;
      default:
        break;            
    }
    switch (NextMode) {
    eea6:	8afb      	ldrh	r3, [r7, #22]
    eea8:	2b07      	cmp	r3, #7
    eeaa:	d837      	bhi.n	ef1c <CPU_SetClockConfigGenMode+0x59c>
    eeac:	a201      	add	r2, pc, #4	; (adr r2, eeb4 <CPU_SetClockConfigGenMode+0x534>)
    eeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    eeb2:	bf00      	nop
    eeb4:	0000eed5 	.word	0x0000eed5
    eeb8:	0000eee7 	.word	0x0000eee7
    eebc:	0000eee7 	.word	0x0000eee7
    eec0:	0000eed5 	.word	0x0000eed5
    eec4:	0000eef9 	.word	0x0000eef9
    eec8:	0000eef9 	.word	0x0000eef9
    eecc:	0000eef9 	.word	0x0000eef9
    eed0:	0000ef0b 	.word	0x0000ef0b
      case CPU_MCG_MODE_FEI:
      case CPU_MCG_MODE_FEE:
        while((MCG_S & 0x0CU) != 0x00U) { /* Wait until output of the FLL is selected */
    eed4:	bf00      	nop
    eed6:	4b17      	ldr	r3, [pc, #92]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    eed8:	799b      	ldrb	r3, [r3, #6]
    eeda:	b2db      	uxtb	r3, r3
    eedc:	f003 030c 	and.w	r3, r3, #12
    eee0:	2b00      	cmp	r3, #0
    eee2:	d1f8      	bne.n	eed6 <CPU_SetClockConfigGenMode+0x556>
        }
        break;
    eee4:	e01a      	b.n	ef1c <CPU_SetClockConfigGenMode+0x59c>
      case CPU_MCG_MODE_FBI:
      case CPU_MCG_MODE_BLPI:
        while((MCG_S & 0x0CU) != 0x04U) { /* Wait until internal reference clock is selected as MCG output */
    eee6:	bf00      	nop
    eee8:	4b12      	ldr	r3, [pc, #72]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    eeea:	799b      	ldrb	r3, [r3, #6]
    eeec:	b2db      	uxtb	r3, r3
    eeee:	f003 030c 	and.w	r3, r3, #12
    eef2:	2b04      	cmp	r3, #4
    eef4:	d1f8      	bne.n	eee8 <CPU_SetClockConfigGenMode+0x568>
        }
        break;
    eef6:	e011      	b.n	ef1c <CPU_SetClockConfigGenMode+0x59c>
      case CPU_MCG_MODE_FBE:
      case CPU_MCG_MODE_BLPE:
      case CPU_MCG_MODE_PBE:
        while((MCG_S & 0x0CU) != 0x08U) { /* Wait until external reference clock is selected as MCG output */
    eef8:	bf00      	nop
    eefa:	4b0e      	ldr	r3, [pc, #56]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    eefc:	799b      	ldrb	r3, [r3, #6]
    eefe:	b2db      	uxtb	r3, r3
    ef00:	f003 030c 	and.w	r3, r3, #12
    ef04:	2b08      	cmp	r3, #8
    ef06:	d1f8      	bne.n	eefa <CPU_SetClockConfigGenMode+0x57a>
        }
        break;
    ef08:	e008      	b.n	ef1c <CPU_SetClockConfigGenMode+0x59c>
      case CPU_MCG_MODE_PEE:
        while((MCG_S & 0x0CU) != 0x0CU) { /* Wait until output of the PLL is selected */
    ef0a:	bf00      	nop
    ef0c:	4b09      	ldr	r3, [pc, #36]	; (ef34 <CPU_SetClockConfigGenMode+0x5b4>)
    ef0e:	799b      	ldrb	r3, [r3, #6]
    ef10:	b2db      	uxtb	r3, r3
    ef12:	f003 030c 	and.w	r3, r3, #12
    ef16:	2b0c      	cmp	r3, #12
    ef18:	d1f8      	bne.n	ef0c <CPU_SetClockConfigGenMode+0x58c>
        }
        break;
    ef1a:	bf00      	nop
    }
  } while (NextMode != (TargetMode & CPU_MCG_MODE_INDEX_MASK)); /* Loop until the target MCG mode is set */
    ef1c:	8afa      	ldrh	r2, [r7, #22]
    ef1e:	8abb      	ldrh	r3, [r7, #20]
    ef20:	f003 030f 	and.w	r3, r3, #15
    ef24:	429a      	cmp	r2, r3
    ef26:	f47f adf6 	bne.w	eb16 <CPU_SetClockConfigGenMode+0x196>
}
    ef2a:	bf00      	nop
    ef2c:	371c      	adds	r7, #28
    ef2e:	46bd      	mov	sp, r7
    ef30:	bd90      	pop	{r4, r7, pc}
    ef32:	bf00      	nop
    ef34:	40064000 	.word	0x40064000
    ef38:	40065000 	.word	0x40065000
    ef3c:	0001030c 	.word	0x0001030c

0000ef40 <CPU_SetClockConfiguration>:
**                           ERR_RANGE - Mode parameter out of range
*/
/* ===================================================================*/
#if CPU_SET_CLOCK_CONFIGURATION
LDD_TError CPU_SetClockConfiguration(LDD_TClockConfiguration ModeID)
{
    ef40:	b590      	push	{r4, r7, lr}
    ef42:	b083      	sub	sp, #12
    ef44:	af00      	add	r7, sp, #0
    ef46:	4603      	mov	r3, r0
    ef48:	71fb      	strb	r3, [r7, #7]
  if (ModeID > (CPU_CLOCK_CONFIG_NUMBER - 1U)) {
    ef4a:	79fb      	ldrb	r3, [r7, #7]
    ef4c:	2b04      	cmp	r3, #4
    ef4e:	d901      	bls.n	ef54 <CPU_SetClockConfiguration+0x14>
    return ERR_RANGE;
    ef50:	2302      	movs	r3, #2
    ef52:	e0ae      	b.n	f0b2 <CPU_SetClockConfiguration+0x172>
  }
  
  if (SMC_PMSTAT == 0x04U) {           /* Test if in VLPR mode */
    ef54:	4b59      	ldr	r3, [pc, #356]	; (f0bc <CPU_SetClockConfiguration+0x17c>)
    ef56:	78db      	ldrb	r3, [r3, #3]
    ef58:	b2db      	uxtb	r3, r3
    ef5a:	2b04      	cmp	r3, #4
    ef5c:	d110      	bne.n	ef80 <CPU_SetClockConfiguration+0x40>
    /* SMC_PMCTRL: LPWUI=0,RUNM=0,??=0,STOPA=0,STOPM=0 */
    SMC_PMCTRL = (SMC_PMCTRL_RUNM(0x00) | SMC_PMCTRL_STOPM(0x00)); /* Disable very low power mode */
    ef5e:	4b57      	ldr	r3, [pc, #348]	; (f0bc <CPU_SetClockConfiguration+0x17c>)
    ef60:	2200      	movs	r2, #0
    ef62:	705a      	strb	r2, [r3, #1]
    while((PMC_REGSC & PMC_REGSC_REGONS_MASK) == 0x00U) { /* Wait until the regulator is in run regulation */
    ef64:	bf00      	nop
    ef66:	4b56      	ldr	r3, [pc, #344]	; (f0c0 <CPU_SetClockConfiguration+0x180>)
    ef68:	789b      	ldrb	r3, [r3, #2]
    ef6a:	b2db      	uxtb	r3, r3
    ef6c:	f003 0304 	and.w	r3, r3, #4
    ef70:	2b00      	cmp	r3, #0
    ef72:	d0f8      	beq.n	ef66 <CPU_SetClockConfiguration+0x26>
    }
    while(SMC_PMSTAT == 0x04U) {       /* Wait until the system is back in RUN mode */
    ef74:	bf00      	nop
    ef76:	4b51      	ldr	r3, [pc, #324]	; (f0bc <CPU_SetClockConfiguration+0x17c>)
    ef78:	78db      	ldrb	r3, [r3, #3]
    ef7a:	b2db      	uxtb	r3, r3
    ef7c:	2b04      	cmp	r3, #4
    ef7e:	d0fa      	beq.n	ef76 <CPU_SetClockConfiguration+0x36>
    }
  }
  /* SIM_CLKDIV1: OUTDIV1=0,OUTDIV2=1,OUTDIV3=4,OUTDIV4=4,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
  SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0x00) |
    ef80:	4b50      	ldr	r3, [pc, #320]	; (f0c4 <CPU_SetClockConfiguration+0x184>)
    ef82:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
    ef86:	3304      	adds	r3, #4
    ef88:	f04f 72a2 	mov.w	r2, #21233664	; 0x1440000
    ef8c:	601a      	str	r2, [r3, #0]
                SIM_CLKDIV1_OUTDIV2(0x01) |
                SIM_CLKDIV1_OUTDIV3(0x04) |
                SIM_CLKDIV1_OUTDIV4(0x04); /* Set the system prescalers to safe value */
  switch (ModeID) {
    ef8e:	79fb      	ldrb	r3, [r7, #7]
    ef90:	2b04      	cmp	r3, #4
    ef92:	d821      	bhi.n	efd8 <CPU_SetClockConfiguration+0x98>
    ef94:	a201      	add	r2, pc, #4	; (adr r2, ef9c <CPU_SetClockConfiguration+0x5c>)
    ef96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ef9a:	bf00      	nop
    ef9c:	0000efb1 	.word	0x0000efb1
    efa0:	0000efb9 	.word	0x0000efb9
    efa4:	0000efc1 	.word	0x0000efc1
    efa8:	0000efc9 	.word	0x0000efc9
    efac:	0000efd1 	.word	0x0000efd1
  #if defined(CPU_CLOCK_CONFIG_0)
    case CPU_CLOCK_CONFIG_0:
      CPU_SetClockConfigGenMode(CPU_CLOCK_CONFIG_0);
    efb0:	2000      	movs	r0, #0
    efb2:	f7ff fce5 	bl	e980 <CPU_SetClockConfigGenMode>
      break;
    efb6:	e010      	b.n	efda <CPU_SetClockConfiguration+0x9a>
  #endif /* defined(CPU_CLOCK_CONFIG_0) */
  #if defined(CPU_CLOCK_CONFIG_1)
    case CPU_CLOCK_CONFIG_1:
      CPU_SetClockConfigGenMode(CPU_CLOCK_CONFIG_1);
    efb8:	2001      	movs	r0, #1
    efba:	f7ff fce1 	bl	e980 <CPU_SetClockConfigGenMode>
      break;
    efbe:	e00c      	b.n	efda <CPU_SetClockConfiguration+0x9a>
  #endif /* defined(CPU_CLOCK_CONFIG_1) */
  #if defined(CPU_CLOCK_CONFIG_2)
    case CPU_CLOCK_CONFIG_2:
      CPU_SetClockConfigGenMode(CPU_CLOCK_CONFIG_2);
    efc0:	2002      	movs	r0, #2
    efc2:	f7ff fcdd 	bl	e980 <CPU_SetClockConfigGenMode>
      break;
    efc6:	e008      	b.n	efda <CPU_SetClockConfiguration+0x9a>
  #endif /* defined(CPU_CLOCK_CONFIG_2) */
  #if defined(CPU_CLOCK_CONFIG_3)
    case CPU_CLOCK_CONFIG_3:
      CPU_SetClockConfigGenMode(CPU_CLOCK_CONFIG_3);
    efc8:	2003      	movs	r0, #3
    efca:	f7ff fcd9 	bl	e980 <CPU_SetClockConfigGenMode>
      break;
    efce:	e004      	b.n	efda <CPU_SetClockConfiguration+0x9a>
  #endif /* defined(CPU_CLOCK_CONFIG_3) */
  #if defined(CPU_CLOCK_CONFIG_4)
    case CPU_CLOCK_CONFIG_4:
      CPU_SetClockConfigGenMode(CPU_CLOCK_CONFIG_4);
    efd0:	2004      	movs	r0, #4
    efd2:	f7ff fcd5 	bl	e980 <CPU_SetClockConfigGenMode>
      break;
    efd6:	e000      	b.n	efda <CPU_SetClockConfiguration+0x9a>
    case CPU_CLOCK_CONFIG_7:
      CPU_SetClockConfigGenMode(CPU_CLOCK_CONFIG_7);
      break;
  #endif /* defined(CPU_CLOCK_CONFIG_7) */
    default:
      break;
    efd8:	bf00      	nop
  }
  SIM_CLKDIV1 = (uint32_t)CPU_ClockConfigDescriptors[ModeID].SysRegs.SIM_CLKDIV1_value; /* Update system prescalers */
    efda:	493a      	ldr	r1, [pc, #232]	; (f0c4 <CPU_SetClockConfiguration+0x184>)
    efdc:	79fa      	ldrb	r2, [r7, #7]
    efde:	483a      	ldr	r0, [pc, #232]	; (f0c8 <CPU_SetClockConfiguration+0x188>)
    efe0:	4613      	mov	r3, r2
    efe2:	00db      	lsls	r3, r3, #3
    efe4:	1a9b      	subs	r3, r3, r2
    efe6:	009b      	lsls	r3, r3, #2
    efe8:	4403      	add	r3, r0
    efea:	3314      	adds	r3, #20
    efec:	681a      	ldr	r2, [r3, #0]
    efee:	f501 5382 	add.w	r3, r1, #4160	; 0x1040
    eff2:	3304      	adds	r3, #4
    eff4:	601a      	str	r2, [r3, #0]
  SIM_SOPT1 = (uint32_t)((SIM_SOPT1 & (uint32_t)~(uint32_t)SIM_SOPT1_OSC32KSEL_MASK) | (uint32_t)CPU_ClockConfigDescriptors[ModeID].SysRegs.SIM_SOPT1_value); /* Update 32 kHz oscillator clock source (ERCLK32K) */
    eff6:	4833      	ldr	r0, [pc, #204]	; (f0c4 <CPU_SetClockConfiguration+0x184>)
    eff8:	4b32      	ldr	r3, [pc, #200]	; (f0c4 <CPU_SetClockConfiguration+0x184>)
    effa:	681b      	ldr	r3, [r3, #0]
    effc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
    f000:	79fa      	ldrb	r2, [r7, #7]
    f002:	4c31      	ldr	r4, [pc, #196]	; (f0c8 <CPU_SetClockConfiguration+0x188>)
    f004:	4613      	mov	r3, r2
    f006:	00db      	lsls	r3, r3, #3
    f008:	1a9b      	subs	r3, r3, r2
    f00a:	009b      	lsls	r3, r3, #2
    f00c:	4423      	add	r3, r4
    f00e:	330c      	adds	r3, #12
    f010:	681b      	ldr	r3, [r3, #0]
    f012:	430b      	orrs	r3, r1
    f014:	6003      	str	r3, [r0, #0]
  SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)SIM_SOPT2_PLLFLLSEL_MASK) | (uint32_t)CPU_ClockConfigDescriptors[ModeID].SysRegs.SIM_SOPT2_value); /* Update PLL/FLL clock select */
    f016:	482b      	ldr	r0, [pc, #172]	; (f0c4 <CPU_SetClockConfiguration+0x184>)
    f018:	4b2a      	ldr	r3, [pc, #168]	; (f0c4 <CPU_SetClockConfiguration+0x184>)
    f01a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    f01e:	3304      	adds	r3, #4
    f020:	681b      	ldr	r3, [r3, #0]
    f022:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    f026:	79fa      	ldrb	r2, [r7, #7]
    f028:	4c27      	ldr	r4, [pc, #156]	; (f0c8 <CPU_SetClockConfiguration+0x188>)
    f02a:	4613      	mov	r3, r2
    f02c:	00db      	lsls	r3, r3, #3
    f02e:	1a9b      	subs	r3, r3, r2
    f030:	009b      	lsls	r3, r3, #2
    f032:	4423      	add	r3, r4
    f034:	3310      	adds	r3, #16
    f036:	681b      	ldr	r3, [r3, #0]
    f038:	ea41 0203 	orr.w	r2, r1, r3
    f03c:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    f040:	3304      	adds	r3, #4
    f042:	601a      	str	r2, [r3, #0]
  LDD_SetClockConfiguration(ModeID);   /* Call all LDD components to update the clock configuration */
    f044:	79fb      	ldrb	r3, [r7, #7]
    f046:	4618      	mov	r0, r3
    f048:	f7f2 f8e8 	bl	121c <LDD_SetClockConfiguration>
  ClockConfigurationID = ModeID;       /* Store clock configuration identifier */
    f04c:	4a1f      	ldr	r2, [pc, #124]	; (f0cc <CPU_SetClockConfiguration+0x18c>)
    f04e:	79fb      	ldrb	r3, [r7, #7]
    f050:	7013      	strb	r3, [r2, #0]
  if ((CPU_ClockConfigDescriptors[ClockConfigurationID].PowerMode & CPU_CLOCK_VLP_AUTO_ENABLE_MASK) != 0U) {
    f052:	4b1e      	ldr	r3, [pc, #120]	; (f0cc <CPU_SetClockConfiguration+0x18c>)
    f054:	781b      	ldrb	r3, [r3, #0]
    f056:	4619      	mov	r1, r3
    f058:	4a1b      	ldr	r2, [pc, #108]	; (f0c8 <CPU_SetClockConfiguration+0x188>)
    f05a:	460b      	mov	r3, r1
    f05c:	00db      	lsls	r3, r3, #3
    f05e:	1a5b      	subs	r3, r3, r1
    f060:	009b      	lsls	r3, r3, #2
    f062:	4413      	add	r3, r2
    f064:	3302      	adds	r3, #2
    f066:	781b      	ldrb	r3, [r3, #0]
    f068:	f003 0302 	and.w	r3, r3, #2
    f06c:	2b00      	cmp	r3, #0
    f06e:	d01f      	beq.n	f0b0 <CPU_SetClockConfiguration+0x170>
    /* SMC_PMCTRL: LPWUI=0,RUNM=2,??=0,STOPA=0,STOPM=0 */
    SMC_PMCTRL = (SMC_PMCTRL_RUNM(0x02) | SMC_PMCTRL_STOPM(0x00)); /* Enable very low power mode */
    f070:	4b12      	ldr	r3, [pc, #72]	; (f0bc <CPU_SetClockConfiguration+0x17c>)
    f072:	2240      	movs	r2, #64	; 0x40
    f074:	705a      	strb	r2, [r3, #1]
    if ((CPU_ClockConfigDescriptors[ClockConfigurationID].PowerMode & CPU_CLOCK_VLP_WAKEUP_MASK) != 0U) {
    f076:	4b15      	ldr	r3, [pc, #84]	; (f0cc <CPU_SetClockConfiguration+0x18c>)
    f078:	781b      	ldrb	r3, [r3, #0]
    f07a:	4619      	mov	r1, r3
    f07c:	4a12      	ldr	r2, [pc, #72]	; (f0c8 <CPU_SetClockConfiguration+0x188>)
    f07e:	460b      	mov	r3, r1
    f080:	00db      	lsls	r3, r3, #3
    f082:	1a5b      	subs	r3, r3, r1
    f084:	009b      	lsls	r3, r3, #2
    f086:	4413      	add	r3, r2
    f088:	3302      	adds	r3, #2
    f08a:	781b      	ldrb	r3, [r3, #0]
    f08c:	f003 0304 	and.w	r3, r3, #4
    f090:	2b00      	cmp	r3, #0
    f092:	d007      	beq.n	f0a4 <CPU_SetClockConfiguration+0x164>
      /* SMC_PMCTRL: LPWUI=1 */
      SMC_PMCTRL |= SMC_PMCTRL_LPWUI_MASK; /* Enable exits to Normal RUN mode on an interrupt */
    f094:	4a09      	ldr	r2, [pc, #36]	; (f0bc <CPU_SetClockConfiguration+0x17c>)
    f096:	4b09      	ldr	r3, [pc, #36]	; (f0bc <CPU_SetClockConfiguration+0x17c>)
    f098:	785b      	ldrb	r3, [r3, #1]
    f09a:	b2db      	uxtb	r3, r3
    f09c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f0a0:	b2db      	uxtb	r3, r3
    f0a2:	7053      	strb	r3, [r2, #1]
    }
    while(SMC_PMSTAT != 0x04U) {       /* Wait until in the Very Low Power run mode */
    f0a4:	bf00      	nop
    f0a6:	4b05      	ldr	r3, [pc, #20]	; (f0bc <CPU_SetClockConfiguration+0x17c>)
    f0a8:	78db      	ldrb	r3, [r3, #3]
    f0aa:	b2db      	uxtb	r3, r3
    f0ac:	2b04      	cmp	r3, #4
    f0ae:	d1fa      	bne.n	f0a6 <CPU_SetClockConfiguration+0x166>
    }
  }
  return ERR_OK;
    f0b0:	2300      	movs	r3, #0
}
    f0b2:	4618      	mov	r0, r3
    f0b4:	370c      	adds	r7, #12
    f0b6:	46bd      	mov	sp, r7
    f0b8:	bd90      	pop	{r4, r7, pc}
    f0ba:	bf00      	nop
    f0bc:	4007e000 	.word	0x4007e000
    f0c0:	4007d000 	.word	0x4007d000
    f0c4:	40047000 	.word	0x40047000
    f0c8:	0001030c 	.word	0x0001030c
    f0cc:	200034b5 	.word	0x200034b5

0000f0d0 <CPU_GetClockConfiguration>:
**                         - Active clock configuration identifier
*/
/* ===================================================================*/
#if CPU_GET_CLOCK_CONFIGURATION
LDD_TClockConfiguration CPU_GetClockConfiguration(void)
{
    f0d0:	b480      	push	{r7}
    f0d2:	af00      	add	r7, sp, #0
#if CPU_CLOCK_CONFIG_NUMBER > 1
  return ClockConfigurationID;         /* Return the actual clock configuration identifier */
    f0d4:	4b03      	ldr	r3, [pc, #12]	; (f0e4 <CPU_GetClockConfiguration+0x14>)
    f0d6:	781b      	ldrb	r3, [r3, #0]
#else
  return CPU_CLOCK_CONFIG_0;           /* Return the actual clock configuration identifier */
#endif
}
    f0d8:	4618      	mov	r0, r3
    f0da:	46bd      	mov	sp, r7
    f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    f0e0:	4770      	bx	lr
    f0e2:	bf00      	nop
    f0e4:	200034b5 	.word	0x200034b5

0000f0e8 <Peripherals_Init>:
#ifdef __cplusplus
extern "C" {
#endif

void Peripherals_Init(void)
{
    f0e8:	b480      	push	{r7}
    f0ea:	af00      	add	r7, sp, #0
  VREF_Init();
#endif /* VREF_AUTOINIT */
#ifdef WDOG_AUTOINIT
  WDOG_Init();
#endif /* WDOG_AUTOINIT */
}
    f0ec:	bf00      	nop
    f0ee:	46bd      	mov	sp, r7
    f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    f0f4:	4770      	bx	lr
    f0f6:	bf00      	nop

0000f0f8 <UnhandledInterrupt>:
**         This ISR services the unhandled common interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(UnhandledInterrupt)
{
    f0f8:	4668      	mov	r0, sp
    f0fa:	f020 0107 	bic.w	r1, r0, #7
    f0fe:	468d      	mov	sp, r1
    f100:	b481      	push	{r0, r7}
    f102:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f104:	beff      	bkpt	0x00ff
}
    f106:	bf00      	nop
    f108:	46bd      	mov	sp, r7
    f10a:	bc81      	pop	{r0, r7}
    f10c:	4685      	mov	sp, r0
    f10e:	4770      	bx	lr

0000f110 <Unhandled_ivINT_NMI>:
**         This ISR services the unhandled ivINT_NMI interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_NMI)
{
    f110:	4668      	mov	r0, sp
    f112:	f020 0107 	bic.w	r1, r0, #7
    f116:	468d      	mov	sp, r1
    f118:	b481      	push	{r0, r7}
    f11a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f11c:	beff      	bkpt	0x00ff
}
    f11e:	bf00      	nop
    f120:	46bd      	mov	sp, r7
    f122:	bc81      	pop	{r0, r7}
    f124:	4685      	mov	sp, r0
    f126:	4770      	bx	lr

0000f128 <Unhandled_ivINT_Hard_Fault>:
**         This ISR services the unhandled ivINT_Hard_Fault interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Hard_Fault)
{
    f128:	4668      	mov	r0, sp
    f12a:	f020 0107 	bic.w	r1, r0, #7
    f12e:	468d      	mov	sp, r1
    f130:	b481      	push	{r0, r7}
    f132:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f134:	beff      	bkpt	0x00ff
}
    f136:	bf00      	nop
    f138:	46bd      	mov	sp, r7
    f13a:	bc81      	pop	{r0, r7}
    f13c:	4685      	mov	sp, r0
    f13e:	4770      	bx	lr

0000f140 <Unhandled_ivINT_Mem_Manage_Fault>:
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Mem_Manage_Fault)
{
    f140:	4668      	mov	r0, sp
    f142:	f020 0107 	bic.w	r1, r0, #7
    f146:	468d      	mov	sp, r1
    f148:	b481      	push	{r0, r7}
    f14a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f14c:	beff      	bkpt	0x00ff
}
    f14e:	bf00      	nop
    f150:	46bd      	mov	sp, r7
    f152:	bc81      	pop	{r0, r7}
    f154:	4685      	mov	sp, r0
    f156:	4770      	bx	lr

0000f158 <Unhandled_ivINT_Bus_Fault>:
**         This ISR services the unhandled ivINT_Bus_Fault interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Bus_Fault)
{
    f158:	4668      	mov	r0, sp
    f15a:	f020 0107 	bic.w	r1, r0, #7
    f15e:	468d      	mov	sp, r1
    f160:	b481      	push	{r0, r7}
    f162:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f164:	beff      	bkpt	0x00ff
}
    f166:	bf00      	nop
    f168:	46bd      	mov	sp, r7
    f16a:	bc81      	pop	{r0, r7}
    f16c:	4685      	mov	sp, r0
    f16e:	4770      	bx	lr

0000f170 <Unhandled_ivINT_Usage_Fault>:
**         This ISR services the unhandled ivINT_Usage_Fault interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Usage_Fault)
{
    f170:	4668      	mov	r0, sp
    f172:	f020 0107 	bic.w	r1, r0, #7
    f176:	468d      	mov	sp, r1
    f178:	b481      	push	{r0, r7}
    f17a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f17c:	beff      	bkpt	0x00ff
}
    f17e:	bf00      	nop
    f180:	46bd      	mov	sp, r7
    f182:	bc81      	pop	{r0, r7}
    f184:	4685      	mov	sp, r0
    f186:	4770      	bx	lr

0000f188 <Unhandled_ivINT_Reserved7>:
**         This ISR services the unhandled ivINT_Reserved7 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Reserved7)
{
    f188:	4668      	mov	r0, sp
    f18a:	f020 0107 	bic.w	r1, r0, #7
    f18e:	468d      	mov	sp, r1
    f190:	b481      	push	{r0, r7}
    f192:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f194:	beff      	bkpt	0x00ff
}
    f196:	bf00      	nop
    f198:	46bd      	mov	sp, r7
    f19a:	bc81      	pop	{r0, r7}
    f19c:	4685      	mov	sp, r0
    f19e:	4770      	bx	lr

0000f1a0 <Unhandled_ivINT_Reserved8>:
**         This ISR services the unhandled ivINT_Reserved8 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Reserved8)
{
    f1a0:	4668      	mov	r0, sp
    f1a2:	f020 0107 	bic.w	r1, r0, #7
    f1a6:	468d      	mov	sp, r1
    f1a8:	b481      	push	{r0, r7}
    f1aa:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f1ac:	beff      	bkpt	0x00ff
}
    f1ae:	bf00      	nop
    f1b0:	46bd      	mov	sp, r7
    f1b2:	bc81      	pop	{r0, r7}
    f1b4:	4685      	mov	sp, r0
    f1b6:	4770      	bx	lr

0000f1b8 <Unhandled_ivINT_Reserved9>:
**         This ISR services the unhandled ivINT_Reserved9 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Reserved9)
{
    f1b8:	4668      	mov	r0, sp
    f1ba:	f020 0107 	bic.w	r1, r0, #7
    f1be:	468d      	mov	sp, r1
    f1c0:	b481      	push	{r0, r7}
    f1c2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f1c4:	beff      	bkpt	0x00ff
}
    f1c6:	bf00      	nop
    f1c8:	46bd      	mov	sp, r7
    f1ca:	bc81      	pop	{r0, r7}
    f1cc:	4685      	mov	sp, r0
    f1ce:	4770      	bx	lr

0000f1d0 <Unhandled_ivINT_Reserved10>:
**         This ISR services the unhandled ivINT_Reserved10 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Reserved10)
{
    f1d0:	4668      	mov	r0, sp
    f1d2:	f020 0107 	bic.w	r1, r0, #7
    f1d6:	468d      	mov	sp, r1
    f1d8:	b481      	push	{r0, r7}
    f1da:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f1dc:	beff      	bkpt	0x00ff
}
    f1de:	bf00      	nop
    f1e0:	46bd      	mov	sp, r7
    f1e2:	bc81      	pop	{r0, r7}
    f1e4:	4685      	mov	sp, r0
    f1e6:	4770      	bx	lr

0000f1e8 <Unhandled_ivINT_SVCall>:
**         This ISR services the unhandled ivINT_SVCall interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_SVCall)
{
    f1e8:	4668      	mov	r0, sp
    f1ea:	f020 0107 	bic.w	r1, r0, #7
    f1ee:	468d      	mov	sp, r1
    f1f0:	b481      	push	{r0, r7}
    f1f2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f1f4:	beff      	bkpt	0x00ff
}
    f1f6:	bf00      	nop
    f1f8:	46bd      	mov	sp, r7
    f1fa:	bc81      	pop	{r0, r7}
    f1fc:	4685      	mov	sp, r0
    f1fe:	4770      	bx	lr

0000f200 <Unhandled_ivINT_DebugMonitor>:
**         This ISR services the unhandled ivINT_DebugMonitor interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DebugMonitor)
{
    f200:	4668      	mov	r0, sp
    f202:	f020 0107 	bic.w	r1, r0, #7
    f206:	468d      	mov	sp, r1
    f208:	b481      	push	{r0, r7}
    f20a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f20c:	beff      	bkpt	0x00ff
}
    f20e:	bf00      	nop
    f210:	46bd      	mov	sp, r7
    f212:	bc81      	pop	{r0, r7}
    f214:	4685      	mov	sp, r0
    f216:	4770      	bx	lr

0000f218 <Unhandled_ivINT_Reserved13>:
**         This ISR services the unhandled ivINT_Reserved13 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Reserved13)
{
    f218:	4668      	mov	r0, sp
    f21a:	f020 0107 	bic.w	r1, r0, #7
    f21e:	468d      	mov	sp, r1
    f220:	b481      	push	{r0, r7}
    f222:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f224:	beff      	bkpt	0x00ff
}
    f226:	bf00      	nop
    f228:	46bd      	mov	sp, r7
    f22a:	bc81      	pop	{r0, r7}
    f22c:	4685      	mov	sp, r0
    f22e:	4770      	bx	lr

0000f230 <Unhandled_ivINT_PendableSrvReq>:
**         This ISR services the unhandled ivINT_PendableSrvReq interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PendableSrvReq)
{
    f230:	4668      	mov	r0, sp
    f232:	f020 0107 	bic.w	r1, r0, #7
    f236:	468d      	mov	sp, r1
    f238:	b481      	push	{r0, r7}
    f23a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f23c:	beff      	bkpt	0x00ff
}
    f23e:	bf00      	nop
    f240:	46bd      	mov	sp, r7
    f242:	bc81      	pop	{r0, r7}
    f244:	4685      	mov	sp, r0
    f246:	4770      	bx	lr

0000f248 <Unhandled_ivINT_SysTick>:
**         This ISR services the unhandled ivINT_SysTick interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_SysTick)
{
    f248:	4668      	mov	r0, sp
    f24a:	f020 0107 	bic.w	r1, r0, #7
    f24e:	468d      	mov	sp, r1
    f250:	b481      	push	{r0, r7}
    f252:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f254:	beff      	bkpt	0x00ff
}
    f256:	bf00      	nop
    f258:	46bd      	mov	sp, r7
    f25a:	bc81      	pop	{r0, r7}
    f25c:	4685      	mov	sp, r0
    f25e:	4770      	bx	lr

0000f260 <Unhandled_ivINT_DMA0>:
**         This ISR services the unhandled ivINT_DMA0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA0)
{
    f260:	4668      	mov	r0, sp
    f262:	f020 0107 	bic.w	r1, r0, #7
    f266:	468d      	mov	sp, r1
    f268:	b481      	push	{r0, r7}
    f26a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f26c:	beff      	bkpt	0x00ff
}
    f26e:	bf00      	nop
    f270:	46bd      	mov	sp, r7
    f272:	bc81      	pop	{r0, r7}
    f274:	4685      	mov	sp, r0
    f276:	4770      	bx	lr

0000f278 <Unhandled_ivINT_DMA1>:
**         This ISR services the unhandled ivINT_DMA1 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA1)
{
    f278:	4668      	mov	r0, sp
    f27a:	f020 0107 	bic.w	r1, r0, #7
    f27e:	468d      	mov	sp, r1
    f280:	b481      	push	{r0, r7}
    f282:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f284:	beff      	bkpt	0x00ff
}
    f286:	bf00      	nop
    f288:	46bd      	mov	sp, r7
    f28a:	bc81      	pop	{r0, r7}
    f28c:	4685      	mov	sp, r0
    f28e:	4770      	bx	lr

0000f290 <Unhandled_ivINT_DMA2>:
**         This ISR services the unhandled ivINT_DMA2 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA2)
{
    f290:	4668      	mov	r0, sp
    f292:	f020 0107 	bic.w	r1, r0, #7
    f296:	468d      	mov	sp, r1
    f298:	b481      	push	{r0, r7}
    f29a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f29c:	beff      	bkpt	0x00ff
}
    f29e:	bf00      	nop
    f2a0:	46bd      	mov	sp, r7
    f2a2:	bc81      	pop	{r0, r7}
    f2a4:	4685      	mov	sp, r0
    f2a6:	4770      	bx	lr

0000f2a8 <Unhandled_ivINT_DMA3>:
**         This ISR services the unhandled ivINT_DMA3 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA3)
{
    f2a8:	4668      	mov	r0, sp
    f2aa:	f020 0107 	bic.w	r1, r0, #7
    f2ae:	468d      	mov	sp, r1
    f2b0:	b481      	push	{r0, r7}
    f2b2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f2b4:	beff      	bkpt	0x00ff
}
    f2b6:	bf00      	nop
    f2b8:	46bd      	mov	sp, r7
    f2ba:	bc81      	pop	{r0, r7}
    f2bc:	4685      	mov	sp, r0
    f2be:	4770      	bx	lr

0000f2c0 <Unhandled_ivINT_DMA4>:
**         This ISR services the unhandled ivINT_DMA4 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA4)
{
    f2c0:	4668      	mov	r0, sp
    f2c2:	f020 0107 	bic.w	r1, r0, #7
    f2c6:	468d      	mov	sp, r1
    f2c8:	b481      	push	{r0, r7}
    f2ca:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f2cc:	beff      	bkpt	0x00ff
}
    f2ce:	bf00      	nop
    f2d0:	46bd      	mov	sp, r7
    f2d2:	bc81      	pop	{r0, r7}
    f2d4:	4685      	mov	sp, r0
    f2d6:	4770      	bx	lr

0000f2d8 <Unhandled_ivINT_DMA5>:
**         This ISR services the unhandled ivINT_DMA5 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA5)
{
    f2d8:	4668      	mov	r0, sp
    f2da:	f020 0107 	bic.w	r1, r0, #7
    f2de:	468d      	mov	sp, r1
    f2e0:	b481      	push	{r0, r7}
    f2e2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f2e4:	beff      	bkpt	0x00ff
}
    f2e6:	bf00      	nop
    f2e8:	46bd      	mov	sp, r7
    f2ea:	bc81      	pop	{r0, r7}
    f2ec:	4685      	mov	sp, r0
    f2ee:	4770      	bx	lr

0000f2f0 <Unhandled_ivINT_DMA6>:
**         This ISR services the unhandled ivINT_DMA6 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA6)
{
    f2f0:	4668      	mov	r0, sp
    f2f2:	f020 0107 	bic.w	r1, r0, #7
    f2f6:	468d      	mov	sp, r1
    f2f8:	b481      	push	{r0, r7}
    f2fa:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f2fc:	beff      	bkpt	0x00ff
}
    f2fe:	bf00      	nop
    f300:	46bd      	mov	sp, r7
    f302:	bc81      	pop	{r0, r7}
    f304:	4685      	mov	sp, r0
    f306:	4770      	bx	lr

0000f308 <Unhandled_ivINT_DMA7>:
**         This ISR services the unhandled ivINT_DMA7 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA7)
{
    f308:	4668      	mov	r0, sp
    f30a:	f020 0107 	bic.w	r1, r0, #7
    f30e:	468d      	mov	sp, r1
    f310:	b481      	push	{r0, r7}
    f312:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f314:	beff      	bkpt	0x00ff
}
    f316:	bf00      	nop
    f318:	46bd      	mov	sp, r7
    f31a:	bc81      	pop	{r0, r7}
    f31c:	4685      	mov	sp, r0
    f31e:	4770      	bx	lr

0000f320 <Unhandled_ivINT_DMA8>:
**         This ISR services the unhandled ivINT_DMA8 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA8)
{
    f320:	4668      	mov	r0, sp
    f322:	f020 0107 	bic.w	r1, r0, #7
    f326:	468d      	mov	sp, r1
    f328:	b481      	push	{r0, r7}
    f32a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f32c:	beff      	bkpt	0x00ff
}
    f32e:	bf00      	nop
    f330:	46bd      	mov	sp, r7
    f332:	bc81      	pop	{r0, r7}
    f334:	4685      	mov	sp, r0
    f336:	4770      	bx	lr

0000f338 <Unhandled_ivINT_DMA9>:
**         This ISR services the unhandled ivINT_DMA9 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA9)
{
    f338:	4668      	mov	r0, sp
    f33a:	f020 0107 	bic.w	r1, r0, #7
    f33e:	468d      	mov	sp, r1
    f340:	b481      	push	{r0, r7}
    f342:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f344:	beff      	bkpt	0x00ff
}
    f346:	bf00      	nop
    f348:	46bd      	mov	sp, r7
    f34a:	bc81      	pop	{r0, r7}
    f34c:	4685      	mov	sp, r0
    f34e:	4770      	bx	lr

0000f350 <Unhandled_ivINT_DMA10>:
**         This ISR services the unhandled ivINT_DMA10 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA10)
{
    f350:	4668      	mov	r0, sp
    f352:	f020 0107 	bic.w	r1, r0, #7
    f356:	468d      	mov	sp, r1
    f358:	b481      	push	{r0, r7}
    f35a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f35c:	beff      	bkpt	0x00ff
}
    f35e:	bf00      	nop
    f360:	46bd      	mov	sp, r7
    f362:	bc81      	pop	{r0, r7}
    f364:	4685      	mov	sp, r0
    f366:	4770      	bx	lr

0000f368 <Unhandled_ivINT_DMA11>:
**         This ISR services the unhandled ivINT_DMA11 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA11)
{
    f368:	4668      	mov	r0, sp
    f36a:	f020 0107 	bic.w	r1, r0, #7
    f36e:	468d      	mov	sp, r1
    f370:	b481      	push	{r0, r7}
    f372:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f374:	beff      	bkpt	0x00ff
}
    f376:	bf00      	nop
    f378:	46bd      	mov	sp, r7
    f37a:	bc81      	pop	{r0, r7}
    f37c:	4685      	mov	sp, r0
    f37e:	4770      	bx	lr

0000f380 <Unhandled_ivINT_DMA12>:
**         This ISR services the unhandled ivINT_DMA12 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA12)
{
    f380:	4668      	mov	r0, sp
    f382:	f020 0107 	bic.w	r1, r0, #7
    f386:	468d      	mov	sp, r1
    f388:	b481      	push	{r0, r7}
    f38a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f38c:	beff      	bkpt	0x00ff
}
    f38e:	bf00      	nop
    f390:	46bd      	mov	sp, r7
    f392:	bc81      	pop	{r0, r7}
    f394:	4685      	mov	sp, r0
    f396:	4770      	bx	lr

0000f398 <Unhandled_ivINT_DMA13>:
**         This ISR services the unhandled ivINT_DMA13 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA13)
{
    f398:	4668      	mov	r0, sp
    f39a:	f020 0107 	bic.w	r1, r0, #7
    f39e:	468d      	mov	sp, r1
    f3a0:	b481      	push	{r0, r7}
    f3a2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f3a4:	beff      	bkpt	0x00ff
}
    f3a6:	bf00      	nop
    f3a8:	46bd      	mov	sp, r7
    f3aa:	bc81      	pop	{r0, r7}
    f3ac:	4685      	mov	sp, r0
    f3ae:	4770      	bx	lr

0000f3b0 <Unhandled_ivINT_DMA14>:
**         This ISR services the unhandled ivINT_DMA14 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA14)
{
    f3b0:	4668      	mov	r0, sp
    f3b2:	f020 0107 	bic.w	r1, r0, #7
    f3b6:	468d      	mov	sp, r1
    f3b8:	b481      	push	{r0, r7}
    f3ba:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f3bc:	beff      	bkpt	0x00ff
}
    f3be:	bf00      	nop
    f3c0:	46bd      	mov	sp, r7
    f3c2:	bc81      	pop	{r0, r7}
    f3c4:	4685      	mov	sp, r0
    f3c6:	4770      	bx	lr

0000f3c8 <Unhandled_ivINT_DMA15>:
**         This ISR services the unhandled ivINT_DMA15 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA15)
{
    f3c8:	4668      	mov	r0, sp
    f3ca:	f020 0107 	bic.w	r1, r0, #7
    f3ce:	468d      	mov	sp, r1
    f3d0:	b481      	push	{r0, r7}
    f3d2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f3d4:	beff      	bkpt	0x00ff
}
    f3d6:	bf00      	nop
    f3d8:	46bd      	mov	sp, r7
    f3da:	bc81      	pop	{r0, r7}
    f3dc:	4685      	mov	sp, r0
    f3de:	4770      	bx	lr

0000f3e0 <Unhandled_ivINT_DMA_Error>:
**         This ISR services the unhandled ivINT_DMA_Error interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DMA_Error)
{
    f3e0:	4668      	mov	r0, sp
    f3e2:	f020 0107 	bic.w	r1, r0, #7
    f3e6:	468d      	mov	sp, r1
    f3e8:	b481      	push	{r0, r7}
    f3ea:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f3ec:	beff      	bkpt	0x00ff
}
    f3ee:	bf00      	nop
    f3f0:	46bd      	mov	sp, r7
    f3f2:	bc81      	pop	{r0, r7}
    f3f4:	4685      	mov	sp, r0
    f3f6:	4770      	bx	lr

0000f3f8 <Unhandled_ivINT_MCM>:
**         This ISR services the unhandled ivINT_MCM interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_MCM)
{
    f3f8:	4668      	mov	r0, sp
    f3fa:	f020 0107 	bic.w	r1, r0, #7
    f3fe:	468d      	mov	sp, r1
    f400:	b481      	push	{r0, r7}
    f402:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f404:	beff      	bkpt	0x00ff
}
    f406:	bf00      	nop
    f408:	46bd      	mov	sp, r7
    f40a:	bc81      	pop	{r0, r7}
    f40c:	4685      	mov	sp, r0
    f40e:	4770      	bx	lr

0000f410 <Unhandled_ivINT_FTFE>:
**         This ISR services the unhandled ivINT_FTFE interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_FTFE)
{
    f410:	4668      	mov	r0, sp
    f412:	f020 0107 	bic.w	r1, r0, #7
    f416:	468d      	mov	sp, r1
    f418:	b481      	push	{r0, r7}
    f41a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f41c:	beff      	bkpt	0x00ff
}
    f41e:	bf00      	nop
    f420:	46bd      	mov	sp, r7
    f422:	bc81      	pop	{r0, r7}
    f424:	4685      	mov	sp, r0
    f426:	4770      	bx	lr

0000f428 <Unhandled_ivINT_Read_Collision>:
**         This ISR services the unhandled ivINT_Read_Collision interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Read_Collision)
{
    f428:	4668      	mov	r0, sp
    f42a:	f020 0107 	bic.w	r1, r0, #7
    f42e:	468d      	mov	sp, r1
    f430:	b481      	push	{r0, r7}
    f432:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f434:	beff      	bkpt	0x00ff
}
    f436:	bf00      	nop
    f438:	46bd      	mov	sp, r7
    f43a:	bc81      	pop	{r0, r7}
    f43c:	4685      	mov	sp, r0
    f43e:	4770      	bx	lr

0000f440 <Unhandled_ivINT_LVD_LVW>:
**         This ISR services the unhandled ivINT_LVD_LVW interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_LVD_LVW)
{
    f440:	4668      	mov	r0, sp
    f442:	f020 0107 	bic.w	r1, r0, #7
    f446:	468d      	mov	sp, r1
    f448:	b481      	push	{r0, r7}
    f44a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f44c:	beff      	bkpt	0x00ff
}
    f44e:	bf00      	nop
    f450:	46bd      	mov	sp, r7
    f452:	bc81      	pop	{r0, r7}
    f454:	4685      	mov	sp, r0
    f456:	4770      	bx	lr

0000f458 <Unhandled_ivINT_LLW>:
**         This ISR services the unhandled ivINT_LLW interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_LLW)
{
    f458:	4668      	mov	r0, sp
    f45a:	f020 0107 	bic.w	r1, r0, #7
    f45e:	468d      	mov	sp, r1
    f460:	b481      	push	{r0, r7}
    f462:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f464:	beff      	bkpt	0x00ff
}
    f466:	bf00      	nop
    f468:	46bd      	mov	sp, r7
    f46a:	bc81      	pop	{r0, r7}
    f46c:	4685      	mov	sp, r0
    f46e:	4770      	bx	lr

0000f470 <Unhandled_ivINT_Watchdog>:
**         This ISR services the unhandled ivINT_Watchdog interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Watchdog)
{
    f470:	4668      	mov	r0, sp
    f472:	f020 0107 	bic.w	r1, r0, #7
    f476:	468d      	mov	sp, r1
    f478:	b481      	push	{r0, r7}
    f47a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f47c:	beff      	bkpt	0x00ff
}
    f47e:	bf00      	nop
    f480:	46bd      	mov	sp, r7
    f482:	bc81      	pop	{r0, r7}
    f484:	4685      	mov	sp, r0
    f486:	4770      	bx	lr

0000f488 <Unhandled_ivINT_RNG>:
**         This ISR services the unhandled ivINT_RNG interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_RNG)
{
    f488:	4668      	mov	r0, sp
    f48a:	f020 0107 	bic.w	r1, r0, #7
    f48e:	468d      	mov	sp, r1
    f490:	b481      	push	{r0, r7}
    f492:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f494:	beff      	bkpt	0x00ff
}
    f496:	bf00      	nop
    f498:	46bd      	mov	sp, r7
    f49a:	bc81      	pop	{r0, r7}
    f49c:	4685      	mov	sp, r0
    f49e:	4770      	bx	lr

0000f4a0 <Unhandled_ivINT_I2C0>:
**         This ISR services the unhandled ivINT_I2C0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_I2C0)
{
    f4a0:	4668      	mov	r0, sp
    f4a2:	f020 0107 	bic.w	r1, r0, #7
    f4a6:	468d      	mov	sp, r1
    f4a8:	b481      	push	{r0, r7}
    f4aa:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f4ac:	beff      	bkpt	0x00ff
}
    f4ae:	bf00      	nop
    f4b0:	46bd      	mov	sp, r7
    f4b2:	bc81      	pop	{r0, r7}
    f4b4:	4685      	mov	sp, r0
    f4b6:	4770      	bx	lr

0000f4b8 <Unhandled_ivINT_I2C1>:
**         This ISR services the unhandled ivINT_I2C1 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_I2C1)
{
    f4b8:	4668      	mov	r0, sp
    f4ba:	f020 0107 	bic.w	r1, r0, #7
    f4be:	468d      	mov	sp, r1
    f4c0:	b481      	push	{r0, r7}
    f4c2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f4c4:	beff      	bkpt	0x00ff
}
    f4c6:	bf00      	nop
    f4c8:	46bd      	mov	sp, r7
    f4ca:	bc81      	pop	{r0, r7}
    f4cc:	4685      	mov	sp, r0
    f4ce:	4770      	bx	lr

0000f4d0 <Unhandled_ivINT_SPI0>:
**         This ISR services the unhandled ivINT_SPI0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_SPI0)
{
    f4d0:	4668      	mov	r0, sp
    f4d2:	f020 0107 	bic.w	r1, r0, #7
    f4d6:	468d      	mov	sp, r1
    f4d8:	b481      	push	{r0, r7}
    f4da:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f4dc:	beff      	bkpt	0x00ff
}
    f4de:	bf00      	nop
    f4e0:	46bd      	mov	sp, r7
    f4e2:	bc81      	pop	{r0, r7}
    f4e4:	4685      	mov	sp, r0
    f4e6:	4770      	bx	lr

0000f4e8 <Unhandled_ivINT_SPI1>:
**         This ISR services the unhandled ivINT_SPI1 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_SPI1)
{
    f4e8:	4668      	mov	r0, sp
    f4ea:	f020 0107 	bic.w	r1, r0, #7
    f4ee:	468d      	mov	sp, r1
    f4f0:	b481      	push	{r0, r7}
    f4f2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f4f4:	beff      	bkpt	0x00ff
}
    f4f6:	bf00      	nop
    f4f8:	46bd      	mov	sp, r7
    f4fa:	bc81      	pop	{r0, r7}
    f4fc:	4685      	mov	sp, r0
    f4fe:	4770      	bx	lr

0000f500 <Unhandled_ivINT_I2S0_Tx>:
**         This ISR services the unhandled ivINT_I2S0_Tx interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_I2S0_Tx)
{
    f500:	4668      	mov	r0, sp
    f502:	f020 0107 	bic.w	r1, r0, #7
    f506:	468d      	mov	sp, r1
    f508:	b481      	push	{r0, r7}
    f50a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f50c:	beff      	bkpt	0x00ff
}
    f50e:	bf00      	nop
    f510:	46bd      	mov	sp, r7
    f512:	bc81      	pop	{r0, r7}
    f514:	4685      	mov	sp, r0
    f516:	4770      	bx	lr

0000f518 <Unhandled_ivINT_I2S0_Rx>:
**         This ISR services the unhandled ivINT_I2S0_Rx interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_I2S0_Rx)
{
    f518:	4668      	mov	r0, sp
    f51a:	f020 0107 	bic.w	r1, r0, #7
    f51e:	468d      	mov	sp, r1
    f520:	b481      	push	{r0, r7}
    f522:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f524:	beff      	bkpt	0x00ff
}
    f526:	bf00      	nop
    f528:	46bd      	mov	sp, r7
    f52a:	bc81      	pop	{r0, r7}
    f52c:	4685      	mov	sp, r0
    f52e:	4770      	bx	lr

0000f530 <Unhandled_ivINT_UART0_LON>:
**         This ISR services the unhandled ivINT_UART0_LON interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART0_LON)
{
    f530:	4668      	mov	r0, sp
    f532:	f020 0107 	bic.w	r1, r0, #7
    f536:	468d      	mov	sp, r1
    f538:	b481      	push	{r0, r7}
    f53a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f53c:	beff      	bkpt	0x00ff
}
    f53e:	bf00      	nop
    f540:	46bd      	mov	sp, r7
    f542:	bc81      	pop	{r0, r7}
    f544:	4685      	mov	sp, r0
    f546:	4770      	bx	lr

0000f548 <Unhandled_ivINT_UART0_RX_TX>:
**         This ISR services the unhandled ivINT_UART0_RX_TX interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART0_RX_TX)
{
    f548:	4668      	mov	r0, sp
    f54a:	f020 0107 	bic.w	r1, r0, #7
    f54e:	468d      	mov	sp, r1
    f550:	b481      	push	{r0, r7}
    f552:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f554:	beff      	bkpt	0x00ff
}
    f556:	bf00      	nop
    f558:	46bd      	mov	sp, r7
    f55a:	bc81      	pop	{r0, r7}
    f55c:	4685      	mov	sp, r0
    f55e:	4770      	bx	lr

0000f560 <Unhandled_ivINT_UART0_ERR>:
**         This ISR services the unhandled ivINT_UART0_ERR interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART0_ERR)
{
    f560:	4668      	mov	r0, sp
    f562:	f020 0107 	bic.w	r1, r0, #7
    f566:	468d      	mov	sp, r1
    f568:	b481      	push	{r0, r7}
    f56a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f56c:	beff      	bkpt	0x00ff
}
    f56e:	bf00      	nop
    f570:	46bd      	mov	sp, r7
    f572:	bc81      	pop	{r0, r7}
    f574:	4685      	mov	sp, r0
    f576:	4770      	bx	lr

0000f578 <Unhandled_ivINT_UART1_RX_TX>:
**         This ISR services the unhandled ivINT_UART1_RX_TX interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART1_RX_TX)
{
    f578:	4668      	mov	r0, sp
    f57a:	f020 0107 	bic.w	r1, r0, #7
    f57e:	468d      	mov	sp, r1
    f580:	b481      	push	{r0, r7}
    f582:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f584:	beff      	bkpt	0x00ff
}
    f586:	bf00      	nop
    f588:	46bd      	mov	sp, r7
    f58a:	bc81      	pop	{r0, r7}
    f58c:	4685      	mov	sp, r0
    f58e:	4770      	bx	lr

0000f590 <Unhandled_ivINT_UART1_ERR>:
**         This ISR services the unhandled ivINT_UART1_ERR interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART1_ERR)
{
    f590:	4668      	mov	r0, sp
    f592:	f020 0107 	bic.w	r1, r0, #7
    f596:	468d      	mov	sp, r1
    f598:	b481      	push	{r0, r7}
    f59a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f59c:	beff      	bkpt	0x00ff
}
    f59e:	bf00      	nop
    f5a0:	46bd      	mov	sp, r7
    f5a2:	bc81      	pop	{r0, r7}
    f5a4:	4685      	mov	sp, r0
    f5a6:	4770      	bx	lr

0000f5a8 <Unhandled_ivINT_UART2_RX_TX>:
**         This ISR services the unhandled ivINT_UART2_RX_TX interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART2_RX_TX)
{
    f5a8:	4668      	mov	r0, sp
    f5aa:	f020 0107 	bic.w	r1, r0, #7
    f5ae:	468d      	mov	sp, r1
    f5b0:	b481      	push	{r0, r7}
    f5b2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f5b4:	beff      	bkpt	0x00ff
}
    f5b6:	bf00      	nop
    f5b8:	46bd      	mov	sp, r7
    f5ba:	bc81      	pop	{r0, r7}
    f5bc:	4685      	mov	sp, r0
    f5be:	4770      	bx	lr

0000f5c0 <Unhandled_ivINT_UART2_ERR>:
**         This ISR services the unhandled ivINT_UART2_ERR interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART2_ERR)
{
    f5c0:	4668      	mov	r0, sp
    f5c2:	f020 0107 	bic.w	r1, r0, #7
    f5c6:	468d      	mov	sp, r1
    f5c8:	b481      	push	{r0, r7}
    f5ca:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f5cc:	beff      	bkpt	0x00ff
}
    f5ce:	bf00      	nop
    f5d0:	46bd      	mov	sp, r7
    f5d2:	bc81      	pop	{r0, r7}
    f5d4:	4685      	mov	sp, r0
    f5d6:	4770      	bx	lr

0000f5d8 <Unhandled_ivINT_UART3_RX_TX>:
**         This ISR services the unhandled ivINT_UART3_RX_TX interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART3_RX_TX)
{
    f5d8:	4668      	mov	r0, sp
    f5da:	f020 0107 	bic.w	r1, r0, #7
    f5de:	468d      	mov	sp, r1
    f5e0:	b481      	push	{r0, r7}
    f5e2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f5e4:	beff      	bkpt	0x00ff
}
    f5e6:	bf00      	nop
    f5e8:	46bd      	mov	sp, r7
    f5ea:	bc81      	pop	{r0, r7}
    f5ec:	4685      	mov	sp, r0
    f5ee:	4770      	bx	lr

0000f5f0 <Unhandled_ivINT_UART3_ERR>:
**         This ISR services the unhandled ivINT_UART3_ERR interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART3_ERR)
{
    f5f0:	4668      	mov	r0, sp
    f5f2:	f020 0107 	bic.w	r1, r0, #7
    f5f6:	468d      	mov	sp, r1
    f5f8:	b481      	push	{r0, r7}
    f5fa:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f5fc:	beff      	bkpt	0x00ff
}
    f5fe:	bf00      	nop
    f600:	46bd      	mov	sp, r7
    f602:	bc81      	pop	{r0, r7}
    f604:	4685      	mov	sp, r0
    f606:	4770      	bx	lr

0000f608 <Unhandled_ivINT_ADC0>:
**         This ISR services the unhandled ivINT_ADC0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_ADC0)
{
    f608:	4668      	mov	r0, sp
    f60a:	f020 0107 	bic.w	r1, r0, #7
    f60e:	468d      	mov	sp, r1
    f610:	b481      	push	{r0, r7}
    f612:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f614:	beff      	bkpt	0x00ff
}
    f616:	bf00      	nop
    f618:	46bd      	mov	sp, r7
    f61a:	bc81      	pop	{r0, r7}
    f61c:	4685      	mov	sp, r0
    f61e:	4770      	bx	lr

0000f620 <Unhandled_ivINT_CMP0>:
**         This ISR services the unhandled ivINT_CMP0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CMP0)
{
    f620:	4668      	mov	r0, sp
    f622:	f020 0107 	bic.w	r1, r0, #7
    f626:	468d      	mov	sp, r1
    f628:	b481      	push	{r0, r7}
    f62a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f62c:	beff      	bkpt	0x00ff
}
    f62e:	bf00      	nop
    f630:	46bd      	mov	sp, r7
    f632:	bc81      	pop	{r0, r7}
    f634:	4685      	mov	sp, r0
    f636:	4770      	bx	lr

0000f638 <Unhandled_ivINT_CMP1>:
**         This ISR services the unhandled ivINT_CMP1 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CMP1)
{
    f638:	4668      	mov	r0, sp
    f63a:	f020 0107 	bic.w	r1, r0, #7
    f63e:	468d      	mov	sp, r1
    f640:	b481      	push	{r0, r7}
    f642:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f644:	beff      	bkpt	0x00ff
}
    f646:	bf00      	nop
    f648:	46bd      	mov	sp, r7
    f64a:	bc81      	pop	{r0, r7}
    f64c:	4685      	mov	sp, r0
    f64e:	4770      	bx	lr

0000f650 <Unhandled_ivINT_FTM0>:
**         This ISR services the unhandled ivINT_FTM0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_FTM0)
{
    f650:	4668      	mov	r0, sp
    f652:	f020 0107 	bic.w	r1, r0, #7
    f656:	468d      	mov	sp, r1
    f658:	b481      	push	{r0, r7}
    f65a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f65c:	beff      	bkpt	0x00ff
}
    f65e:	bf00      	nop
    f660:	46bd      	mov	sp, r7
    f662:	bc81      	pop	{r0, r7}
    f664:	4685      	mov	sp, r0
    f666:	4770      	bx	lr

0000f668 <Unhandled_ivINT_FTM1>:
**         This ISR services the unhandled ivINT_FTM1 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_FTM1)
{
    f668:	4668      	mov	r0, sp
    f66a:	f020 0107 	bic.w	r1, r0, #7
    f66e:	468d      	mov	sp, r1
    f670:	b481      	push	{r0, r7}
    f672:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f674:	beff      	bkpt	0x00ff
}
    f676:	bf00      	nop
    f678:	46bd      	mov	sp, r7
    f67a:	bc81      	pop	{r0, r7}
    f67c:	4685      	mov	sp, r0
    f67e:	4770      	bx	lr

0000f680 <Unhandled_ivINT_FTM2>:
**         This ISR services the unhandled ivINT_FTM2 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_FTM2)
{
    f680:	4668      	mov	r0, sp
    f682:	f020 0107 	bic.w	r1, r0, #7
    f686:	468d      	mov	sp, r1
    f688:	b481      	push	{r0, r7}
    f68a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f68c:	beff      	bkpt	0x00ff
}
    f68e:	bf00      	nop
    f690:	46bd      	mov	sp, r7
    f692:	bc81      	pop	{r0, r7}
    f694:	4685      	mov	sp, r0
    f696:	4770      	bx	lr

0000f698 <Unhandled_ivINT_CMT>:
**         This ISR services the unhandled ivINT_CMT interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CMT)
{
    f698:	4668      	mov	r0, sp
    f69a:	f020 0107 	bic.w	r1, r0, #7
    f69e:	468d      	mov	sp, r1
    f6a0:	b481      	push	{r0, r7}
    f6a2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f6a4:	beff      	bkpt	0x00ff
}
    f6a6:	bf00      	nop
    f6a8:	46bd      	mov	sp, r7
    f6aa:	bc81      	pop	{r0, r7}
    f6ac:	4685      	mov	sp, r0
    f6ae:	4770      	bx	lr

0000f6b0 <Unhandled_ivINT_RTC>:
**         This ISR services the unhandled ivINT_RTC interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_RTC)
{
    f6b0:	4668      	mov	r0, sp
    f6b2:	f020 0107 	bic.w	r1, r0, #7
    f6b6:	468d      	mov	sp, r1
    f6b8:	b481      	push	{r0, r7}
    f6ba:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f6bc:	beff      	bkpt	0x00ff
}
    f6be:	bf00      	nop
    f6c0:	46bd      	mov	sp, r7
    f6c2:	bc81      	pop	{r0, r7}
    f6c4:	4685      	mov	sp, r0
    f6c6:	4770      	bx	lr

0000f6c8 <Unhandled_ivINT_RTC_Seconds>:
**         This ISR services the unhandled ivINT_RTC_Seconds interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_RTC_Seconds)
{
    f6c8:	4668      	mov	r0, sp
    f6ca:	f020 0107 	bic.w	r1, r0, #7
    f6ce:	468d      	mov	sp, r1
    f6d0:	b481      	push	{r0, r7}
    f6d2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f6d4:	beff      	bkpt	0x00ff
}
    f6d6:	bf00      	nop
    f6d8:	46bd      	mov	sp, r7
    f6da:	bc81      	pop	{r0, r7}
    f6dc:	4685      	mov	sp, r0
    f6de:	4770      	bx	lr

0000f6e0 <Unhandled_ivINT_PIT0>:
**         This ISR services the unhandled ivINT_PIT0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PIT0)
{
    f6e0:	4668      	mov	r0, sp
    f6e2:	f020 0107 	bic.w	r1, r0, #7
    f6e6:	468d      	mov	sp, r1
    f6e8:	b481      	push	{r0, r7}
    f6ea:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f6ec:	beff      	bkpt	0x00ff
}
    f6ee:	bf00      	nop
    f6f0:	46bd      	mov	sp, r7
    f6f2:	bc81      	pop	{r0, r7}
    f6f4:	4685      	mov	sp, r0
    f6f6:	4770      	bx	lr

0000f6f8 <Unhandled_ivINT_PIT1>:
**         This ISR services the unhandled ivINT_PIT1 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PIT1)
{
    f6f8:	4668      	mov	r0, sp
    f6fa:	f020 0107 	bic.w	r1, r0, #7
    f6fe:	468d      	mov	sp, r1
    f700:	b481      	push	{r0, r7}
    f702:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f704:	beff      	bkpt	0x00ff
}
    f706:	bf00      	nop
    f708:	46bd      	mov	sp, r7
    f70a:	bc81      	pop	{r0, r7}
    f70c:	4685      	mov	sp, r0
    f70e:	4770      	bx	lr

0000f710 <Unhandled_ivINT_PIT2>:
**         This ISR services the unhandled ivINT_PIT2 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PIT2)
{
    f710:	4668      	mov	r0, sp
    f712:	f020 0107 	bic.w	r1, r0, #7
    f716:	468d      	mov	sp, r1
    f718:	b481      	push	{r0, r7}
    f71a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f71c:	beff      	bkpt	0x00ff
}
    f71e:	bf00      	nop
    f720:	46bd      	mov	sp, r7
    f722:	bc81      	pop	{r0, r7}
    f724:	4685      	mov	sp, r0
    f726:	4770      	bx	lr

0000f728 <Unhandled_ivINT_PIT3>:
**         This ISR services the unhandled ivINT_PIT3 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PIT3)
{
    f728:	4668      	mov	r0, sp
    f72a:	f020 0107 	bic.w	r1, r0, #7
    f72e:	468d      	mov	sp, r1
    f730:	b481      	push	{r0, r7}
    f732:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f734:	beff      	bkpt	0x00ff
}
    f736:	bf00      	nop
    f738:	46bd      	mov	sp, r7
    f73a:	bc81      	pop	{r0, r7}
    f73c:	4685      	mov	sp, r0
    f73e:	4770      	bx	lr

0000f740 <Unhandled_ivINT_PDB0>:
**         This ISR services the unhandled ivINT_PDB0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PDB0)
{
    f740:	4668      	mov	r0, sp
    f742:	f020 0107 	bic.w	r1, r0, #7
    f746:	468d      	mov	sp, r1
    f748:	b481      	push	{r0, r7}
    f74a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f74c:	beff      	bkpt	0x00ff
}
    f74e:	bf00      	nop
    f750:	46bd      	mov	sp, r7
    f752:	bc81      	pop	{r0, r7}
    f754:	4685      	mov	sp, r0
    f756:	4770      	bx	lr

0000f758 <Unhandled_ivINT_USB0>:
**         This ISR services the unhandled ivINT_USB0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_USB0)
{
    f758:	4668      	mov	r0, sp
    f75a:	f020 0107 	bic.w	r1, r0, #7
    f75e:	468d      	mov	sp, r1
    f760:	b481      	push	{r0, r7}
    f762:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f764:	beff      	bkpt	0x00ff
}
    f766:	bf00      	nop
    f768:	46bd      	mov	sp, r7
    f76a:	bc81      	pop	{r0, r7}
    f76c:	4685      	mov	sp, r0
    f76e:	4770      	bx	lr

0000f770 <Unhandled_ivINT_USBDCD>:
**         This ISR services the unhandled ivINT_USBDCD interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_USBDCD)
{
    f770:	4668      	mov	r0, sp
    f772:	f020 0107 	bic.w	r1, r0, #7
    f776:	468d      	mov	sp, r1
    f778:	b481      	push	{r0, r7}
    f77a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f77c:	beff      	bkpt	0x00ff
}
    f77e:	bf00      	nop
    f780:	46bd      	mov	sp, r7
    f782:	bc81      	pop	{r0, r7}
    f784:	4685      	mov	sp, r0
    f786:	4770      	bx	lr

0000f788 <Unhandled_ivINT_Reserved71>:
**         This ISR services the unhandled ivINT_Reserved71 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Reserved71)
{
    f788:	4668      	mov	r0, sp
    f78a:	f020 0107 	bic.w	r1, r0, #7
    f78e:	468d      	mov	sp, r1
    f790:	b481      	push	{r0, r7}
    f792:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f794:	beff      	bkpt	0x00ff
}
    f796:	bf00      	nop
    f798:	46bd      	mov	sp, r7
    f79a:	bc81      	pop	{r0, r7}
    f79c:	4685      	mov	sp, r0
    f79e:	4770      	bx	lr

0000f7a0 <Unhandled_ivINT_DAC0>:
**         This ISR services the unhandled ivINT_DAC0 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_DAC0)
{
    f7a0:	4668      	mov	r0, sp
    f7a2:	f020 0107 	bic.w	r1, r0, #7
    f7a6:	468d      	mov	sp, r1
    f7a8:	b481      	push	{r0, r7}
    f7aa:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f7ac:	beff      	bkpt	0x00ff
}
    f7ae:	bf00      	nop
    f7b0:	46bd      	mov	sp, r7
    f7b2:	bc81      	pop	{r0, r7}
    f7b4:	4685      	mov	sp, r0
    f7b6:	4770      	bx	lr

0000f7b8 <Unhandled_ivINT_MCG>:
**         This ISR services the unhandled ivINT_MCG interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_MCG)
{
    f7b8:	4668      	mov	r0, sp
    f7ba:	f020 0107 	bic.w	r1, r0, #7
    f7be:	468d      	mov	sp, r1
    f7c0:	b481      	push	{r0, r7}
    f7c2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f7c4:	beff      	bkpt	0x00ff
}
    f7c6:	bf00      	nop
    f7c8:	46bd      	mov	sp, r7
    f7ca:	bc81      	pop	{r0, r7}
    f7cc:	4685      	mov	sp, r0
    f7ce:	4770      	bx	lr

0000f7d0 <Unhandled_ivINT_LPTimer>:
**         This ISR services the unhandled ivINT_LPTimer interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_LPTimer)
{
    f7d0:	4668      	mov	r0, sp
    f7d2:	f020 0107 	bic.w	r1, r0, #7
    f7d6:	468d      	mov	sp, r1
    f7d8:	b481      	push	{r0, r7}
    f7da:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f7dc:	beff      	bkpt	0x00ff
}
    f7de:	bf00      	nop
    f7e0:	46bd      	mov	sp, r7
    f7e2:	bc81      	pop	{r0, r7}
    f7e4:	4685      	mov	sp, r0
    f7e6:	4770      	bx	lr

0000f7e8 <Unhandled_ivINT_PORTA>:
**         This ISR services the unhandled ivINT_PORTA interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PORTA)
{
    f7e8:	4668      	mov	r0, sp
    f7ea:	f020 0107 	bic.w	r1, r0, #7
    f7ee:	468d      	mov	sp, r1
    f7f0:	b481      	push	{r0, r7}
    f7f2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f7f4:	beff      	bkpt	0x00ff
}
    f7f6:	bf00      	nop
    f7f8:	46bd      	mov	sp, r7
    f7fa:	bc81      	pop	{r0, r7}
    f7fc:	4685      	mov	sp, r0
    f7fe:	4770      	bx	lr

0000f800 <Unhandled_ivINT_PORTB>:
**         This ISR services the unhandled ivINT_PORTB interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PORTB)
{
    f800:	4668      	mov	r0, sp
    f802:	f020 0107 	bic.w	r1, r0, #7
    f806:	468d      	mov	sp, r1
    f808:	b481      	push	{r0, r7}
    f80a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f80c:	beff      	bkpt	0x00ff
}
    f80e:	bf00      	nop
    f810:	46bd      	mov	sp, r7
    f812:	bc81      	pop	{r0, r7}
    f814:	4685      	mov	sp, r0
    f816:	4770      	bx	lr

0000f818 <Unhandled_ivINT_PORTC>:
**         This ISR services the unhandled ivINT_PORTC interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PORTC)
{
    f818:	4668      	mov	r0, sp
    f81a:	f020 0107 	bic.w	r1, r0, #7
    f81e:	468d      	mov	sp, r1
    f820:	b481      	push	{r0, r7}
    f822:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f824:	beff      	bkpt	0x00ff
}
    f826:	bf00      	nop
    f828:	46bd      	mov	sp, r7
    f82a:	bc81      	pop	{r0, r7}
    f82c:	4685      	mov	sp, r0
    f82e:	4770      	bx	lr

0000f830 <Unhandled_ivINT_PORTD>:
**         This ISR services the unhandled ivINT_PORTD interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PORTD)
{
    f830:	4668      	mov	r0, sp
    f832:	f020 0107 	bic.w	r1, r0, #7
    f836:	468d      	mov	sp, r1
    f838:	b481      	push	{r0, r7}
    f83a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f83c:	beff      	bkpt	0x00ff
}
    f83e:	bf00      	nop
    f840:	46bd      	mov	sp, r7
    f842:	bc81      	pop	{r0, r7}
    f844:	4685      	mov	sp, r0
    f846:	4770      	bx	lr

0000f848 <Unhandled_ivINT_PORTE>:
**         This ISR services the unhandled ivINT_PORTE interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_PORTE)
{
    f848:	4668      	mov	r0, sp
    f84a:	f020 0107 	bic.w	r1, r0, #7
    f84e:	468d      	mov	sp, r1
    f850:	b481      	push	{r0, r7}
    f852:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f854:	beff      	bkpt	0x00ff
}
    f856:	bf00      	nop
    f858:	46bd      	mov	sp, r7
    f85a:	bc81      	pop	{r0, r7}
    f85c:	4685      	mov	sp, r0
    f85e:	4770      	bx	lr

0000f860 <Unhandled_ivINT_SWI>:
**         This ISR services the unhandled ivINT_SWI interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_SWI)
{
    f860:	4668      	mov	r0, sp
    f862:	f020 0107 	bic.w	r1, r0, #7
    f866:	468d      	mov	sp, r1
    f868:	b481      	push	{r0, r7}
    f86a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f86c:	beff      	bkpt	0x00ff
}
    f86e:	bf00      	nop
    f870:	46bd      	mov	sp, r7
    f872:	bc81      	pop	{r0, r7}
    f874:	4685      	mov	sp, r0
    f876:	4770      	bx	lr

0000f878 <Unhandled_ivINT_SPI2>:
**         This ISR services the unhandled ivINT_SPI2 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_SPI2)
{
    f878:	4668      	mov	r0, sp
    f87a:	f020 0107 	bic.w	r1, r0, #7
    f87e:	468d      	mov	sp, r1
    f880:	b481      	push	{r0, r7}
    f882:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f884:	beff      	bkpt	0x00ff
}
    f886:	bf00      	nop
    f888:	46bd      	mov	sp, r7
    f88a:	bc81      	pop	{r0, r7}
    f88c:	4685      	mov	sp, r0
    f88e:	4770      	bx	lr

0000f890 <Unhandled_ivINT_UART4_RX_TX>:
**         This ISR services the unhandled ivINT_UART4_RX_TX interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART4_RX_TX)
{
    f890:	4668      	mov	r0, sp
    f892:	f020 0107 	bic.w	r1, r0, #7
    f896:	468d      	mov	sp, r1
    f898:	b481      	push	{r0, r7}
    f89a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f89c:	beff      	bkpt	0x00ff
}
    f89e:	bf00      	nop
    f8a0:	46bd      	mov	sp, r7
    f8a2:	bc81      	pop	{r0, r7}
    f8a4:	4685      	mov	sp, r0
    f8a6:	4770      	bx	lr

0000f8a8 <Unhandled_ivINT_UART4_ERR>:
**         This ISR services the unhandled ivINT_UART4_ERR interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART4_ERR)
{
    f8a8:	4668      	mov	r0, sp
    f8aa:	f020 0107 	bic.w	r1, r0, #7
    f8ae:	468d      	mov	sp, r1
    f8b0:	b481      	push	{r0, r7}
    f8b2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f8b4:	beff      	bkpt	0x00ff
}
    f8b6:	bf00      	nop
    f8b8:	46bd      	mov	sp, r7
    f8ba:	bc81      	pop	{r0, r7}
    f8bc:	4685      	mov	sp, r0
    f8be:	4770      	bx	lr

0000f8c0 <Unhandled_ivINT_UART5_RX_TX>:
**         This ISR services the unhandled ivINT_UART5_RX_TX interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART5_RX_TX)
{
    f8c0:	4668      	mov	r0, sp
    f8c2:	f020 0107 	bic.w	r1, r0, #7
    f8c6:	468d      	mov	sp, r1
    f8c8:	b481      	push	{r0, r7}
    f8ca:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f8cc:	beff      	bkpt	0x00ff
}
    f8ce:	bf00      	nop
    f8d0:	46bd      	mov	sp, r7
    f8d2:	bc81      	pop	{r0, r7}
    f8d4:	4685      	mov	sp, r0
    f8d6:	4770      	bx	lr

0000f8d8 <Unhandled_ivINT_UART5_ERR>:
**         This ISR services the unhandled ivINT_UART5_ERR interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_UART5_ERR)
{
    f8d8:	4668      	mov	r0, sp
    f8da:	f020 0107 	bic.w	r1, r0, #7
    f8de:	468d      	mov	sp, r1
    f8e0:	b481      	push	{r0, r7}
    f8e2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f8e4:	beff      	bkpt	0x00ff
}
    f8e6:	bf00      	nop
    f8e8:	46bd      	mov	sp, r7
    f8ea:	bc81      	pop	{r0, r7}
    f8ec:	4685      	mov	sp, r0
    f8ee:	4770      	bx	lr

0000f8f0 <Unhandled_ivINT_CMP2>:
**         This ISR services the unhandled ivINT_CMP2 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CMP2)
{
    f8f0:	4668      	mov	r0, sp
    f8f2:	f020 0107 	bic.w	r1, r0, #7
    f8f6:	468d      	mov	sp, r1
    f8f8:	b481      	push	{r0, r7}
    f8fa:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f8fc:	beff      	bkpt	0x00ff
}
    f8fe:	bf00      	nop
    f900:	46bd      	mov	sp, r7
    f902:	bc81      	pop	{r0, r7}
    f904:	4685      	mov	sp, r0
    f906:	4770      	bx	lr

0000f908 <Unhandled_ivINT_FTM3>:
**         This ISR services the unhandled ivINT_FTM3 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_FTM3)
{
    f908:	4668      	mov	r0, sp
    f90a:	f020 0107 	bic.w	r1, r0, #7
    f90e:	468d      	mov	sp, r1
    f910:	b481      	push	{r0, r7}
    f912:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f914:	beff      	bkpt	0x00ff
}
    f916:	bf00      	nop
    f918:	46bd      	mov	sp, r7
    f91a:	bc81      	pop	{r0, r7}
    f91c:	4685      	mov	sp, r0
    f91e:	4770      	bx	lr

0000f920 <Unhandled_ivINT_Reserved88>:
**         This ISR services the unhandled ivINT_Reserved88 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_Reserved88)
{
    f920:	4668      	mov	r0, sp
    f922:	f020 0107 	bic.w	r1, r0, #7
    f926:	468d      	mov	sp, r1
    f928:	b481      	push	{r0, r7}
    f92a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f92c:	beff      	bkpt	0x00ff
}
    f92e:	bf00      	nop
    f930:	46bd      	mov	sp, r7
    f932:	bc81      	pop	{r0, r7}
    f934:	4685      	mov	sp, r0
    f936:	4770      	bx	lr

0000f938 <Unhandled_ivINT_ADC1>:
**         This ISR services the unhandled ivINT_ADC1 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_ADC1)
{
    f938:	4668      	mov	r0, sp
    f93a:	f020 0107 	bic.w	r1, r0, #7
    f93e:	468d      	mov	sp, r1
    f940:	b481      	push	{r0, r7}
    f942:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f944:	beff      	bkpt	0x00ff
}
    f946:	bf00      	nop
    f948:	46bd      	mov	sp, r7
    f94a:	bc81      	pop	{r0, r7}
    f94c:	4685      	mov	sp, r0
    f94e:	4770      	bx	lr

0000f950 <Unhandled_ivINT_I2C2>:
**         This ISR services the unhandled ivINT_I2C2 interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_I2C2)
{
    f950:	4668      	mov	r0, sp
    f952:	f020 0107 	bic.w	r1, r0, #7
    f956:	468d      	mov	sp, r1
    f958:	b481      	push	{r0, r7}
    f95a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f95c:	beff      	bkpt	0x00ff
}
    f95e:	bf00      	nop
    f960:	46bd      	mov	sp, r7
    f962:	bc81      	pop	{r0, r7}
    f964:	4685      	mov	sp, r0
    f966:	4770      	bx	lr

0000f968 <Unhandled_ivINT_CAN0_ORed_Message_buffer>:
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CAN0_ORed_Message_buffer)
{
    f968:	4668      	mov	r0, sp
    f96a:	f020 0107 	bic.w	r1, r0, #7
    f96e:	468d      	mov	sp, r1
    f970:	b481      	push	{r0, r7}
    f972:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f974:	beff      	bkpt	0x00ff
}
    f976:	bf00      	nop
    f978:	46bd      	mov	sp, r7
    f97a:	bc81      	pop	{r0, r7}
    f97c:	4685      	mov	sp, r0
    f97e:	4770      	bx	lr

0000f980 <Unhandled_ivINT_CAN0_Bus_Off>:
**         This ISR services the unhandled ivINT_CAN0_Bus_Off interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CAN0_Bus_Off)
{
    f980:	4668      	mov	r0, sp
    f982:	f020 0107 	bic.w	r1, r0, #7
    f986:	468d      	mov	sp, r1
    f988:	b481      	push	{r0, r7}
    f98a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f98c:	beff      	bkpt	0x00ff
}
    f98e:	bf00      	nop
    f990:	46bd      	mov	sp, r7
    f992:	bc81      	pop	{r0, r7}
    f994:	4685      	mov	sp, r0
    f996:	4770      	bx	lr

0000f998 <Unhandled_ivINT_CAN0_Error>:
**         This ISR services the unhandled ivINT_CAN0_Error interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CAN0_Error)
{
    f998:	4668      	mov	r0, sp
    f99a:	f020 0107 	bic.w	r1, r0, #7
    f99e:	468d      	mov	sp, r1
    f9a0:	b481      	push	{r0, r7}
    f9a2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f9a4:	beff      	bkpt	0x00ff
}
    f9a6:	bf00      	nop
    f9a8:	46bd      	mov	sp, r7
    f9aa:	bc81      	pop	{r0, r7}
    f9ac:	4685      	mov	sp, r0
    f9ae:	4770      	bx	lr

0000f9b0 <Unhandled_ivINT_CAN0_Tx_Warning>:
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CAN0_Tx_Warning)
{
    f9b0:	4668      	mov	r0, sp
    f9b2:	f020 0107 	bic.w	r1, r0, #7
    f9b6:	468d      	mov	sp, r1
    f9b8:	b481      	push	{r0, r7}
    f9ba:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f9bc:	beff      	bkpt	0x00ff
}
    f9be:	bf00      	nop
    f9c0:	46bd      	mov	sp, r7
    f9c2:	bc81      	pop	{r0, r7}
    f9c4:	4685      	mov	sp, r0
    f9c6:	4770      	bx	lr

0000f9c8 <Unhandled_ivINT_CAN0_Rx_Warning>:
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CAN0_Rx_Warning)
{
    f9c8:	4668      	mov	r0, sp
    f9ca:	f020 0107 	bic.w	r1, r0, #7
    f9ce:	468d      	mov	sp, r1
    f9d0:	b481      	push	{r0, r7}
    f9d2:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f9d4:	beff      	bkpt	0x00ff
}
    f9d6:	bf00      	nop
    f9d8:	46bd      	mov	sp, r7
    f9da:	bc81      	pop	{r0, r7}
    f9dc:	4685      	mov	sp, r0
    f9de:	4770      	bx	lr

0000f9e0 <Unhandled_ivINT_CAN0_Wake_Up>:
**         This ISR services the unhandled ivINT_CAN0_Wake_Up interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_CAN0_Wake_Up)
{
    f9e0:	4668      	mov	r0, sp
    f9e2:	f020 0107 	bic.w	r1, r0, #7
    f9e6:	468d      	mov	sp, r1
    f9e8:	b481      	push	{r0, r7}
    f9ea:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    f9ec:	beff      	bkpt	0x00ff
}
    f9ee:	bf00      	nop
    f9f0:	46bd      	mov	sp, r7
    f9f2:	bc81      	pop	{r0, r7}
    f9f4:	4685      	mov	sp, r0
    f9f6:	4770      	bx	lr

0000f9f8 <Unhandled_ivINT_SDHC>:
**         This ISR services the unhandled ivINT_SDHC interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_SDHC)
{
    f9f8:	4668      	mov	r0, sp
    f9fa:	f020 0107 	bic.w	r1, r0, #7
    f9fe:	468d      	mov	sp, r1
    fa00:	b481      	push	{r0, r7}
    fa02:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    fa04:	beff      	bkpt	0x00ff
}
    fa06:	bf00      	nop
    fa08:	46bd      	mov	sp, r7
    fa0a:	bc81      	pop	{r0, r7}
    fa0c:	4685      	mov	sp, r0
    fa0e:	4770      	bx	lr

0000fa10 <Unhandled_ivINT_ENET_1588_Timer>:
**         interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_ENET_1588_Timer)
{
    fa10:	4668      	mov	r0, sp
    fa12:	f020 0107 	bic.w	r1, r0, #7
    fa16:	468d      	mov	sp, r1
    fa18:	b481      	push	{r0, r7}
    fa1a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    fa1c:	beff      	bkpt	0x00ff
}
    fa1e:	bf00      	nop
    fa20:	46bd      	mov	sp, r7
    fa22:	bc81      	pop	{r0, r7}
    fa24:	4685      	mov	sp, r0
    fa26:	4770      	bx	lr

0000fa28 <Unhandled_ivINT_ENET_Transmit>:
**         This ISR services the unhandled ivINT_ENET_Transmit interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_ENET_Transmit)
{
    fa28:	4668      	mov	r0, sp
    fa2a:	f020 0107 	bic.w	r1, r0, #7
    fa2e:	468d      	mov	sp, r1
    fa30:	b481      	push	{r0, r7}
    fa32:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    fa34:	beff      	bkpt	0x00ff
}
    fa36:	bf00      	nop
    fa38:	46bd      	mov	sp, r7
    fa3a:	bc81      	pop	{r0, r7}
    fa3c:	4685      	mov	sp, r0
    fa3e:	4770      	bx	lr

0000fa40 <Unhandled_ivINT_ENET_Receive>:
**         This ISR services the unhandled ivINT_ENET_Receive interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_ENET_Receive)
{
    fa40:	4668      	mov	r0, sp
    fa42:	f020 0107 	bic.w	r1, r0, #7
    fa46:	468d      	mov	sp, r1
    fa48:	b481      	push	{r0, r7}
    fa4a:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    fa4c:	beff      	bkpt	0x00ff
}
    fa4e:	bf00      	nop
    fa50:	46bd      	mov	sp, r7
    fa52:	bc81      	pop	{r0, r7}
    fa54:	4685      	mov	sp, r0
    fa56:	4770      	bx	lr

0000fa58 <Unhandled_ivINT_ENET_Error>:
**         This ISR services the unhandled ivINT_ENET_Error interrupt.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
PE_ISR(Unhandled_ivINT_ENET_Error)
{
    fa58:	4668      	mov	r0, sp
    fa5a:	f020 0107 	bic.w	r1, r0, #7
    fa5e:	468d      	mov	sp, r1
    fa60:	b481      	push	{r0, r7}
    fa62:	af00      	add	r7, sp, #0
  PE_DEBUGHALT();
    fa64:	beff      	bkpt	0x00ff
}
    fa66:	bf00      	nop
    fa68:	46bd      	mov	sp, r7
    fa6a:	bc81      	pop	{r0, r7}
    fa6c:	4685      	mov	sp, r0
    fa6e:	4770      	bx	lr

0000fa70 <strcmp>:
    fa70:	f810 2b01 	ldrb.w	r2, [r0], #1
    fa74:	f811 3b01 	ldrb.w	r3, [r1], #1
    fa78:	2a01      	cmp	r2, #1
    fa7a:	bf28      	it	cs
    fa7c:	429a      	cmpcs	r2, r3
    fa7e:	d0f7      	beq.n	fa70 <strcmp>
    fa80:	1ad0      	subs	r0, r2, r3
    fa82:	4770      	bx	lr

0000fa84 <strlen>:
    fa84:	4603      	mov	r3, r0
    fa86:	f813 2b01 	ldrb.w	r2, [r3], #1
    fa8a:	2a00      	cmp	r2, #0
    fa8c:	d1fb      	bne.n	fa86 <strlen+0x2>
    fa8e:	1a18      	subs	r0, r3, r0
    fa90:	3801      	subs	r0, #1
    fa92:	4770      	bx	lr

0000fa94 <__libc_init_array>:
    fa94:	b570      	push	{r4, r5, r6, lr}
    fa96:	4b0e      	ldr	r3, [pc, #56]	; (fad0 <__libc_init_array+0x3c>)
    fa98:	4c0e      	ldr	r4, [pc, #56]	; (fad4 <__libc_init_array+0x40>)
    fa9a:	1ae4      	subs	r4, r4, r3
    fa9c:	10a4      	asrs	r4, r4, #2
    fa9e:	2500      	movs	r5, #0
    faa0:	461e      	mov	r6, r3
    faa2:	42a5      	cmp	r5, r4
    faa4:	d004      	beq.n	fab0 <__libc_init_array+0x1c>
    faa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    faaa:	4798      	blx	r3
    faac:	3501      	adds	r5, #1
    faae:	e7f8      	b.n	faa2 <__libc_init_array+0xe>
    fab0:	f000 fca4 	bl	103fc <_init>
    fab4:	4c08      	ldr	r4, [pc, #32]	; (fad8 <__libc_init_array+0x44>)
    fab6:	4b09      	ldr	r3, [pc, #36]	; (fadc <__libc_init_array+0x48>)
    fab8:	1ae4      	subs	r4, r4, r3
    faba:	10a4      	asrs	r4, r4, #2
    fabc:	2500      	movs	r5, #0
    fabe:	461e      	mov	r6, r3
    fac0:	42a5      	cmp	r5, r4
    fac2:	d004      	beq.n	face <__libc_init_array+0x3a>
    fac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    fac8:	4798      	blx	r3
    faca:	3501      	adds	r5, #1
    facc:	e7f8      	b.n	fac0 <__libc_init_array+0x2c>
    face:	bd70      	pop	{r4, r5, r6, pc}
    fad0:	00010414 	.word	0x00010414
    fad4:	00010414 	.word	0x00010414
    fad8:	00010418 	.word	0x00010418
    fadc:	00010414 	.word	0x00010414

0000fae0 <memcmp>:
    fae0:	b510      	push	{r4, lr}
    fae2:	3901      	subs	r1, #1
    fae4:	4402      	add	r2, r0
    fae6:	4290      	cmp	r0, r2
    fae8:	d007      	beq.n	fafa <memcmp+0x1a>
    faea:	f810 3b01 	ldrb.w	r3, [r0], #1
    faee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    faf2:	42a3      	cmp	r3, r4
    faf4:	d0f7      	beq.n	fae6 <memcmp+0x6>
    faf6:	1b18      	subs	r0, r3, r4
    faf8:	bd10      	pop	{r4, pc}
    fafa:	2000      	movs	r0, #0
    fafc:	bd10      	pop	{r4, pc}

0000fafe <memcpy>:
    fafe:	b510      	push	{r4, lr}
    fb00:	1e43      	subs	r3, r0, #1
    fb02:	440a      	add	r2, r1
    fb04:	4291      	cmp	r1, r2
    fb06:	d004      	beq.n	fb12 <memcpy+0x14>
    fb08:	f811 4b01 	ldrb.w	r4, [r1], #1
    fb0c:	f803 4f01 	strb.w	r4, [r3, #1]!
    fb10:	e7f8      	b.n	fb04 <memcpy+0x6>
    fb12:	bd10      	pop	{r4, pc}

0000fb14 <memset>:
    fb14:	4402      	add	r2, r0
    fb16:	4603      	mov	r3, r0
    fb18:	4293      	cmp	r3, r2
    fb1a:	d002      	beq.n	fb22 <memset+0xe>
    fb1c:	f803 1b01 	strb.w	r1, [r3], #1
    fb20:	e7fa      	b.n	fb18 <memset+0x4>
    fb22:	4770      	bx	lr

0000fb24 <strchr>:
    fb24:	b2c9      	uxtb	r1, r1
    fb26:	4603      	mov	r3, r0
    fb28:	f810 2b01 	ldrb.w	r2, [r0], #1
    fb2c:	b11a      	cbz	r2, fb36 <strchr+0x12>
    fb2e:	4291      	cmp	r1, r2
    fb30:	d1f9      	bne.n	fb26 <strchr+0x2>
    fb32:	4618      	mov	r0, r3
    fb34:	4770      	bx	lr
    fb36:	2900      	cmp	r1, #0
    fb38:	bf0c      	ite	eq
    fb3a:	4618      	moveq	r0, r3
    fb3c:	2000      	movne	r0, #0
    fb3e:	4770      	bx	lr

0000fb40 <strncmp>:
    fb40:	b530      	push	{r4, r5, lr}
    fb42:	b182      	cbz	r2, fb66 <strncmp+0x26>
    fb44:	1e45      	subs	r5, r0, #1
    fb46:	3901      	subs	r1, #1
    fb48:	f815 3f01 	ldrb.w	r3, [r5, #1]!
    fb4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    fb50:	42a3      	cmp	r3, r4
    fb52:	d106      	bne.n	fb62 <strncmp+0x22>
    fb54:	43ec      	mvns	r4, r5
    fb56:	4414      	add	r4, r2
    fb58:	42e0      	cmn	r0, r4
    fb5a:	d001      	beq.n	fb60 <strncmp+0x20>
    fb5c:	2b00      	cmp	r3, #0
    fb5e:	d1f3      	bne.n	fb48 <strncmp+0x8>
    fb60:	461c      	mov	r4, r3
    fb62:	1b18      	subs	r0, r3, r4
    fb64:	bd30      	pop	{r4, r5, pc}
    fb66:	4610      	mov	r0, r2
    fb68:	bd30      	pop	{r4, r5, pc}
	...

0000fb6c <CLS1_stdio>:
    fb6c:	0ea1 0000 0ec9 0000 0ec9 0000 0f0d 0000     ................
    fb7c:	6568 706c 0000 0000 4c43 3153 6820 6c65     help....CLS1 hel
    fb8c:	0070 0000 0a0d 0000 2d2d 2d2d 2d2d 2d2d     p.......--------
    fb9c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
    fbac:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
    fbbc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
    fbcc:	2d2d 2d2d 2d2d 0000 794d 5020 6f72 656a     ------..My Proje
    fbdc:	7463 4e20 6d61 0065 7247 756f 2070 666f     ct Name.Group of
    fbec:	4320 534c 2031 6f63 6d6d 6e61 7364 0a0d      CLS1 commands..
    fbfc:	0000 0000 4c43 3153 0000 0000 7250 6e69     ....CLS1....Prin
    fc0c:	2074 6568 706c 6f20 2072 7473 7461 7375     t help or status
    fc1c:	6920 666e 726f 616d 6974 6e6f 0a0d 0000      information....
    fc2c:	2020 6568 706c 737c 6174 7574 0073 0000       help|status...
    fc3c:	7473 7461 7375 0000 4c43 3153 7320 6174     status..CLS1 sta
    fc4c:	7574 0073 4d43 3e44 0020 0000 6546 2062     tus.CMD> ...Feb 
    fc5c:	3731 3220 3130 0037 2020 7542 6c69 0064     17 2017.  Build.
    fc6c:	0020 0000 3131 313a 3a33 3531 0000 0000      ...11:13:15....
    fc7c:	2a2a 202a 6146 6c69 6465 6f20 2072 6e75     *** Failed or un
    fc8c:	6e6b 776f 206e 6f63 6d6d 6e61 3a64 0020     known command: .
    fc9c:	2a2a 202a 7954 6570 0020 0000 7420 206f     *** Type ... to 
    fcac:	6567 2074 2061 696c 7473 6f20 2066 7661     get a list of av
    fcbc:	6961 616c 6c62 2065 6f63 6d6d 6e61 7364     ailable commands
    fccc:	0a0d 0000                                   ....

0000fcd0 <PE_CpuClockConfigurations>:
    fcd0:	0000 0140 0000 0140 0000 00a0 0000 00a0     ..@...@.........
    fce0:	0000 0000 0000 0140 8000 0000 0000 0000     ......@.........
    fcf0:	8000 0000 8000 0000 0e00 0727 8700 0393     ..........'.....
    fd00:	8700 0393 3600 016e 0000 0000 0e00 0727     .....6n.......'.
    fd10:	8000 0000 1200 007a 8000 0000 7a12 0000     ......z......z..
    fd20:	0900 003d 0900 003d 0900 003d 3500 000c     ..=...=...=..5..
    fd30:	0000 0000 6c00 02dc 0900 003d 1200 007a     .....l....=...z.
    fd40:	8000 0000 8000 0000 8000 0000 8000 0000     ................
    fd50:	8000 0000 8000 0000 0000 0000 6c00 02dc     .............l..
    fd60:	8480 001e 0000 0000 8000 0000 0000 0000     ................
    fd70:	0e00 0727 8700 0393 8700 0393 3600 016e     ..'..........6n.
    fd80:	0000 0000 0e00 0727 8000 0000 1200 007a     ......'.......z.
    fd90:	8000 0000 7a12 0000                         .....z..

0000fd98 <RTT1_stdio>:
    fd98:	127d 0000 12ad 0000 12ad 0000 1265 0000     }...........e...
    fda8:	6554 6d72 6e69 6c61 0000 0000 5452 0054     Terminal....RTT.
    fdb8:	4553 4747 5245 0000                         SEGGER..

0000fdc0 <_aV2C.6977>:
    fdc0:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF

0000fdd0 <_abSync>:
	...
    fddc:	7953 5673 6569 0077                         SysView.

0000fde4 <_aV2C.7458>:
    fde4:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
    fdf4:	3d4e 6544 6f6d 4120 7070 696c 6163 6974     N=Demo Applicati
    fe04:	6e6f 4f2c 463d 6572 5265 4f54 2c53 3d44     on,O=FreeRTOS,D=
    fe14:	6f43 7472 7865 0000 2349 3531 533d 7379     Cortex..I#15=Sys
    fe24:	6954 6b63 0000 0000 4449 454c 0000 0000     Tick....IDLE....
    fe34:	5953 5453 4d45 4956 5745 203a 6f43 6c75     SYSTEMVIEW: Coul
    fe44:	2064 6f6e 2074 6572 6f63 6472 7420 7361     d not record tas
    fe54:	206b 6e69 6f66 6d72 7461 6f69 2e6e 4d20     k information. M
    fe64:	7861 6d69 6d75 6e20 6d75 6562 2072 666f     aximum number of
    fe74:	7420 7361 736b 7220 6165 6863 6465 002e      tasks reached..

0000fe84 <SYSVIEW_X_OS_TraceAPI>:
    fe84:	5b81 0000 5ac9 0000 332d 3732 3836 0000     .[...Z..-32768..
    fe94:	322d 3431 3437 3338 3436 0038 0000 0000     -2147483648.....
    fea4:	002d 0000                                   -...

0000fea8 <skew.7125>:
    fea8:	0300 0603 0401 0206 0005 0503               ............

0000feb4 <ms_digits>:
    feb4:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
    fec4:	0000 0000                                   ....

0000fec8 <ms_null>:
    fec8:	6e28 6c75 296c 0000                         (null)..

0000fed0 <ms_true>:
    fed0:	7254 6575 0000 0000                         True....

0000fed8 <ms_false>:
    fed8:	6146 736c 0065 0000                         False...

0000fee0 <formatStates>:
    fee0:	0006 0000 0100 0000 0010 0003 0600 1002     ................
    fef0:	4504 4545 0545 0505 3505 0030 6050 0000     .EEEE....50.P`..
    ff00:	2000 3828 5050 0000 3000 3030 5050 0000     . (8PP...000PP..
    ff10:	2008 2820 2020 0020 6008 6060 6060 0060     .  (   ..``````.
    ff20:	7000 7878 7078 0078 0807 0000 0007 0800     .pxxxpx.........
    ff30:	0008 0800 0800 0000 0008 0000               ............

0000ff3c <pcInterruptPriorityRegisters>:
    ff3c:	e3f0 e000 4449 454c 0000 0000 0009 0000     ....IDLE........
    ff4c:	0a0d 0000                                   ....

0000ff50 <FreeRTOSDebugConfig>:
    ff50:	0101 0009 0400 0400 3018 4434 0c48 0006     .........04DH...
    ff60:	7a54 6144 6174 0000 7a54 7443 6c72 0000     TzData..TzCtrl..
    ff70:	6157 6e72 6e69 7367 6620 6f72 206d 6552     Warnings from Re
    ff80:	6f63 6472 7265 0000 5254 5f43 4643 5f47     corder..TRC_CFG_
    ff90:	5953 424d 4c4f 545f 4241 454c 535f 4f4c     SYMBOL_TABLE_SLO
    ffa0:	5354 7420 6f6f 7320 616d 6c6c 202e 6441     TS too small. Ad
    ffb0:	2064 6425 7320 6f6c 7374 002e 5254 5f43     d %d slots..TRC_
    ffc0:	4643 5f47 424f 454a 5443 445f 5441 5f41     CFG_OBJECT_DATA_
    ffd0:	4c53 544f 2053 6f74 206f 6d73 6c61 2e6c     SLOTS too small.
    ffe0:	4120 6464 2520 2064 6c73 746f 2e73 0000      Add %d slots...
    fff0:	5254 5f43 4643 5f47 5953 424d 4c4f 4d5f     TRC_CFG_SYMBOL_M
   10000:	5841 4c5f 4e45 5447 2048 6f74 206f 6d73     AX_LENGTH too sm
   10010:	6c61 2e6c 4120 6464 2520 2064 6863 7261     all. Add %d char
   10020:	2e73 0000 7453 6972 676e 6520 6576 746e     s...String event
   10030:	7420 6f6f 6c20 6e6f 2c67 7520 2070 6f74      too long, up to
   10040:	2520 2064 7962 6574 2073 7274 6e75 6163      %d bytes trunca
   10050:	6574 2e64 0000 0000 5254 5f43 4643 5f47     ted.....TRC_CFG_
   10060:	5953 424d 4c4f 545f 4241 454c 535f 4f4c     SYMBOL_TABLE_SLO
   10070:	5354 7420 6f6f 7320 616d 6c6c 002e 0000     TS too small....
   10080:	5254 5f43 4643 5f47 5953 424d 4c4f 4d5f     TRC_CFG_SYMBOL_M
   10090:	5841 4c5f 4e45 5447 2048 6f74 206f 6d73     AX_LENGTH too sm
   100a0:	6c61 2e6c 0000 0000 5254 5f43 4643 5f47     all.....TRC_CFG_
   100b0:	424f 454a 5443 445f 5441 5f41 4c53 544f     OBJECT_DATA_SLOT
   100c0:	2053 6f74 206f 6d73 6c61 2e6c 0000 0000     S too small.....
   100d0:	7453 6972 676e 6f20 2072 7355 7265 4520     String or User E
   100e0:	6576 746e 7420 6f6f 6c20 6e6f 2e67 0000     vent too long...
   100f0:	6e41 6920 766e 6c61 6469 6520 6576 746e     An invalid event
   10100:	6320 646f 2065 6177 2073 7375 6465 002e      code was used..
   10110:	6f54 206f 756d 6863 4920 5253 6e20 7365     Too much ISR nes
   10120:	6974 676e 002e 0000 5744 2054 6f6e 2074     ting....DWT not 
   10130:	7573 7070 726f 6574 2064 7962 7420 6968     supported by thi
   10140:	2073 6863 7069 002e 5744 5f54 5943 4343     s chip..DWT_CYCC
   10150:	544e 6e20 746f 7320 7075 6f70 7472 6465     NT not supported
   10160:	6220 2079 6874 7369 6320 6968 2e70 0000      by this chip...
   10170:	0000 0000 5254 5f43 4643 5f47 5953 424d     ....TRC_CFG_SYMB
   10180:	4c4f 545f 4241 454c 535f 4f4c 5354 7420     OL_TABLE_SLOTS t
   10190:	6f6f 7320 616d 6c6c 202e 6441 2064 6425     oo small. Add %d
   101a0:	7320 6f6c 7374 002e 5254 5f43 4643 5f47      slots..TRC_CFG_
   101b0:	5953 424d 4c4f 4d5f 5841 4c5f 4e45 5447     SYMBOL_MAX_LENGT
   101c0:	2048 6f74 206f 6d73 6c61 2e6c 4120 6464     H too small. Add
   101d0:	2520 2064 6863 7261 2e73 0000 5254 5f43      %d chars...TRC_
   101e0:	4643 5f47 424f 454a 5443 445f 5441 5f41     CFG_OBJECT_DATA_
   101f0:	4c53 544f 2053 6f74 206f 6d73 6c61 2e6c     SLOTS too small.
   10200:	4120 6464 6d20 726f 2065 6c73 746f 2e73      Add more slots.
   10210:	0000 0000 7453 6972 676e 6520 6576 746e     ....String event
   10220:	7420 6f6f 6c20 6e6f 2c67 7520 2070 6f74      too long, up to
   10230:	2520 2064 7962 6574 2073 7274 6e75 6163      %d bytes trunca
   10240:	6574 2e64 0000 0000 7245 6f72 2072 6564     ted.....Error de
   10250:	6574 7463 6465 202e 7453 706f 6570 2064     tected. Stopped 
   10260:	6572 6f63 6472 7265 002e 0000 656c 5f64     recorder....led_
   10270:	7267 6565 006e 0000 656c 5f64 6572 0064     green...led_red.
   10280:	656c 5f64 6c62 6575 0000 0000               led_blue....

0001028c <ClockGenModeMatrix>:
   1028c:	0000 0001 0001 0003 0004 0004 0004 0004     ................
   1029c:	0000 0001 0002 0003 0004 0004 0004 0004     ................
   102ac:	0001 0001 0002 0001 0001 0001 0001 0001     ................
   102bc:	0000 0001 0001 0003 0004 0004 0004 0004     ................
   102cc:	0000 0001 0001 0003 0004 0005 0006 0006     ................
   102dc:	0004 0004 0004 0004 0004 0005 0006 0006     ................
   102ec:	0004 0004 0004 0004 0004 0005 0006 0007     ................
   102fc:	0006 0006 0006 0006 0006 0006 0006 0007     ................

0001030c <CPU_ClockConfigDescriptors>:
   1030c:	0010 0600 0024 0000 0000 0000 0000 0008     ....$...........
   1031c:	0000 0000 0000 0011 0000 0140 0097 1a00     ..........@.....
   1032c:	0024 4601 8000 0000 0000 0008 0000 0001     $..F............
   1033c:	0000 0114 8700 0393 00a2 4600 0027 0000     ...........F'...
   1034c:	8000 0000 0000 0008 0000 0001 0000 0004     ................
   1035c:	0900 003d 0125 8200 0027 0000 0002 0000     ..=.%...'.......
   1036c:	0000 0008 0000 0001 0000 0000 8000 0000     ................
   1037c:	0097 1a00 0024 4601 8000 0000 0000 0008     ....$..F........
   1038c:	0000 0001 0000 0114 8700 0393               ............

00010398 <CPU_DefaultFEI>:
   10398:	8004 0000 0200 0000                         ........

000103a0 <CPU_DefaultFBI>:
   103a0:	8044 0000 0200 0000                         D.......

000103a8 <CPU_DefaultBLPI>:
   103a8:	8244 0000 0200 0000                         D.......

000103b0 <CPU_DefaultFEE>:
   103b0:	a418 0000 0200 0000                         ........

000103b8 <CPU_DefaultFBE>:
   103b8:	a498 0000 0200 0000                         ........

000103c0 <CPU_DefaultBLPE>:
   103c0:	a658 0000 0200 0000                         X.......

000103c8 <CPU_DefaultPBE>:
   103c8:	a480 0100 0258 0000                         ....X...

000103d0 <CPU_DefaultPEE>:
   103d0:	a418 0100 0258 0000                         ....X...

000103d8 <CPU_ClockGenModeRegs>:
   103d8:	0398 0001 03a0 0001 03a8 0001 03b0 0001     ................
   103e8:	03b8 0001 03c0 0001 03c8 0001 03d0 0001     ................

000103f8 <__EH_FRAME_BEGIN__>:
   103f8:	0000 0000                                   ....

000103fc <_init>:
   103fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   103fe:	bf00      	nop
   10400:	bcf8      	pop	{r3, r4, r5, r6, r7}
   10402:	bc08      	pop	{r3}
   10404:	469e      	mov	lr, r3
   10406:	4770      	bx	lr

00010408 <_fini>:
   10408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1040a:	bf00      	nop
   1040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1040e:	bc08      	pop	{r3}
   10410:	469e      	mov	lr, r3
   10412:	4770      	bx	lr
